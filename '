use std::path::Path;
use std::str::from_utf8;
use std::sync::{Arc, Mutex};

// tests/lsp_client.rs
use helix_core;
use helix_core::config::default_syntax_loader;
use helix_core::syntax::Loader;
use helix_loader;
use helix_loader::grammar::{get_language, load_runtime_file};
use helix_lsp::{self, LspProgressMap, ProgressStatus, Registry};
use lsp_types::*;
use tokio::time;
use tokio::time::Duration;

// The actual test function

pub fn test_lang_config() -> helix_core::syntax::Configuration {
  let default_config = include_bytes!("./assets/languages_test.toml");
  toml::from_str::<helix_core::syntax::Configuration>(from_utf8(default_config).unwrap())
    .expect("Could not parse built-in languages.toml to valid toml")
}

#[tokio::test]
async fn test_rust_analyzer_connection() -> anyhow::Result<()> {
  let test_project_path = std::env::current_dir().unwrap().join("tests/assets/testproject");
  std::env::set_current_dir(&test_project_path).unwrap();
  assert!(test_project_path.exists());
  let workspace_folders = Some(vec![WorkspaceFolder {
    uri: url::Url::from_directory_path(test_project_path.clone()).unwrap(),
    name: "testproject".to_string(),
  }]);

  let config = default_syntax_loader();
  let config = test_lang_config();
  let loader = Loader::new(config);

  let rust_lang_config = Arc::clone(&loader.language_config_for_name("rust").unwrap());
  println!("Rust lang config: {:#?}", rust_lang_config);

  let toml_lang_config = Arc::clone(&loader.language_config_for_file_name(Path::new("Cargo.toml")).unwrap());

  let root_dirs = vec![test_project_path.clone()];
  // println!("Root dirs: {:?}", root_dirs);
  let mut rust_registry = Registry::new(Arc::new(loader));
  let rust_client = rust_registry
    .get(&rust_lang_config, None, root_dirs.as_slice(), true)
    .find(|(name, client_res)| name == "rust-analyzer")
    .unwrap()
    .1
    .unwrap();

  while !rust_client.is_initialized() {
    // wait 10ms
    tokio::time::sleep(std::time::Duration::from_millis(10)).await;
  }

  let mut lsp_progress = LspProgressMap::new();

  let work_done_token = ProgressToken::String("rustAnalyzer/Fetching".to_string());
  lsp_progress.create(1, work_done_token.clone());

  let src = WorkspaceFolder {
    name: "src".to_string(),
    uri: url::Url::from_directory_path(test_project_path.clone().join("src")).unwrap(),
  };

  let rust_workspace_symbols_response = rust_client.workspace_symbols("".to_string());
  if let Some(symbols) = rust_workspace_symbols_response {
    println!("Rust Workspace symbols: {:#?}", symbols.await);
  } else {
    println!("No symbols found");
  }
  let timeout = Duration::from_secs(2);
  if let Err(_) = time::timeout(timeout, async {
    while let Some(progress) = lsp_progress.progress(1, &work_done_token) {
      use futures_util::StreamExt;
      if let Some((size, message)) = rust_registry.incoming.next().await {
        println!("{:#?}", message);
      }
      match progress.progress() {
        Some(WorkDoneProgress::Begin(begin)) => {
          println!("Progress Begin: {:#?}", begin);
        },
        Some(WorkDoneProgress::Report(report)) => {
          println!("Progress Report: {:#?}", report);
        },
        Some(WorkDoneProgress::End(end)) => {
          println!("Progress End: {:#?}", end);
          break;
        },
        None => {
          println!("No progress token found");
          break;
        },
      }
    }
    true;
  })
  .await
  {
    // The test has timed out
    println!("Test timed out");
  }
  panic!();
  // rust_client.did_change_workspace(vec![src], vec![]).await?;

  // println!("Workspace folders: {:#?}", workspace_folders);

  tokio::time::sleep(std::time::Duration::from_millis(3000)).await;
  let rust_workspace_symbols_response = rust_client.workspace_symbols("".to_string());
  if let Some(symbols) = rust_workspace_symbols_response {
    println!("Rust Workspace symbols: {:#?}", symbols.await);
    panic!();
  } else {
    println!("No symbols found");
    panic!();
  }

  let toml_client = rust_registry
    .get(&toml_lang_config, None, root_dirs.as_slice(), true)
    .find(|(name, client_res)| name == "taplo")
    .unwrap()
    .1
    .unwrap();

  while !toml_client.is_initialized() {
    // wait 10ms
    println!("Waiting for toml client to initialize");
    tokio::time::sleep(std::time::Duration::from_millis(1000)).await;
  }

  let toml_workspace_symbols_response = toml_client.workspace_symbols("".to_string());
  if let Some(symbols) = toml_workspace_symbols_response {
    println!("Toml Workspace symbols: {:#?}", symbols.await);
  } else {
    println!("No symbols found");
  }
  // Create an LspClientStdio instance
  Ok(())
}
