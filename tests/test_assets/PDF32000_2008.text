{"text":{"1":["' Adobe Systems Incorporated 2008  All rights reserved iPDF 32000-1:2008 First Edition 2008-7-1 Document management   Portable document format   Part 1:  PDF 1.7",""],"2":["PDF 32000-1:2008 ii' Adobe Systems Incorporated 2008  All rights reserved PDF disclaimer This PDF file may contain embedded typefaces. In accordance with Adobe’s licensing policy, this file may be printed or  viewed but shall not be edited unless the typefaces which  are embedded are licensed to and installed on the computer  performing the editing. In downloading this file, parties acce pt therein the responsibility of not infringing Adobe’s licensing  policy. Adobe is a trademark of Adobe Systems Incorporated. Details of the software products used to create this PDF file  can be found in the General Info relative to the file; the PDF- creation parameters were optimized for printing. Copyright Notice This document has been derived directly  from the copyright ISO 32000-1 standard  document available for purchase from  the ISO  web site at","http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=51502",". It is  being made available from the web site of Adobe Systems Incorporated (","http://www.adobe. com/devnet/pdf/","pdf_reference.html)","under agreement with ISO for those that do not need the official version containing the ISO logo and  copyright notices. This version of the ISO 32000-1 standard  is copyright by Adobe Systems Incorporated through an  agreement with ISO who is the co pyright owner of the official ISO 32000-1 doc ument of which this is an authorized copy.\\ The technical material is identical between this version an d the ISO Standard; the page a nd sections numbers are also  preserved. Requests for permission to reproduce this do cument for any purpose should be arranged with ISO.",""],"3":["' Adobe Systems Incorporated 2008  All rights reserved iiiPDF 32000-1:2008 Contents PageForeword. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . vi Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . .  vii 1    Scope  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . .  1 2    Conformance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  1 2.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . .  1 2.2    Conforming readers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  1 2.3    Conforming writers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  1 2.4    Conforming products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  2 3    Normative references  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  2 4    Terms and definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  6 5    Notation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . .  10 6    Version Designations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  10 7    Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . .  11 7.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . .  11 7.2    Lexical Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  11 7.3    Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . .  13 7.4    Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . .  22 7.5    File Structure. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  38 7.6    Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  55 7.7    Document Structure . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  70 7.8    Content Streams and Resources  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . .  81 7.9    Common Data Structures.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .  84 7.10    Functions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  92 7.11    File Specifications   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  99 7.12    Extensions Dictionary  . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .  108 8    Graphics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  110 8.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  110 8.2    Graphics Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  110 8.3    Coordinate Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .  114 8.4    Graphics State. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  121 8.5    Path Construction and Painting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . .  131 8.6    Colour Spaces. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  138 8.7    Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  173 8.8    External Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  201 8.9    Images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  203 8.10    Form XObjects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  217 8.11    Optional Content. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  222 9    Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . .  237 9.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  237 9.2    Organization and Use of Fonts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  237 9.3    Text State Parameters and Operators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . .  243 9.4    Text Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  248 9.5    Introduction to Font Data Structures  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . .  253 9.6    Simple Fonts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  254 9.7    Composite Fonts. . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  267 9.8    Font Descriptors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  281 9.9    Embedded Font Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  288 9.10    Extraction of Text Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . .  292 10    Rendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  296",""],"4":["PDF 32000-1:2008 iv' Adobe Systems Incorporated 2008  All rights reserved","10.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  296","10.2    CIE-Based Colour to Device Colour  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . .  297 10.3    Conversions among Device Colour Spaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 29710.4    Transfer Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  300 10.5    Halftones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  301 10.6    Scan Conversion Details  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . .  316 11    Transparency . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  320 11.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  320 11.2    Overview of Transparency . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  320 11.3    Basic Compositing Computations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . .  322 11.4    Transparency Groups. . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .  332 11.5    Soft Masks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  342 11.6    Specifying Transparency in PDF . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . .  344 11.7    Colour Space and Rendering Issues. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . .  353 12    Interactive Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  362 12.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  362 12.2    Viewer Preferences . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .  362 12.3    Document-Level Navigation. . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  365 12.4    Page-Level Navigation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . .  374 12.5    Annotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  381 12.6    Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  414 12.7    Interactive Forms  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  430 12.8    Digital Signatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  466 12.9    Measurement Properties   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . .  479 12.10    Document Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  484 13    Multimedia Features  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .  486 13.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  486 13.2    Multimedia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  486 13.3    Sounds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  506 13.4    Movies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  507 13.5    Alternate Presentations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .  509 13.6    3D Artwork . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  511 14    Document Interchange  . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .  547 14.1    General. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .  547 14.2    Procedure Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  547 14.3    Metadata. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  548 14.4    File Identifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  551 14.5    Page-Piece Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .  551 14.6    Marked Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  552 14.7    Logical Structure. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  556 14.8    Tagged PDF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  573 14.9    Accessibility Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .  610 14.10      . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . .    Web Capture616 14.11    Prepress Support  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .  627 Annex  A     (informative) Operator Summary. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  643 Annex  B     (normative)Operators in Type 4 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . .  647 Annex  C",""],"5":["' Adobe Systems Incorporated 2008  All rights reserved vPDF 32000-1:2008 (normative)Implementation  Limits. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . .  649 Annex  D     (normative)Character Sets and Encodings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  651 Annex  E     (normative)PDF Name Registry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . .  673 Annex  F     (normative)Linearized PDF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . .  675 Annex  G     (informative)Linearized PDF Access Strategies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . .  695 Annex  H     (informative)Example PDF Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .  699 Annex  I     (normative)PDF Versions and Compatibility   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .  727 Annex  J     (informative)FDF Rename Flag Implementation Example .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . .  729 Annex  K     (informative)PostScript Compatibility  Transparent Imag ing Model. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7 31Annex  L     (informative)Colour Plates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  733 Bibliography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .  745",""],"6":["PDF 32000-1:2008 vi' Adobe Systems Incorporated 2008  All rights reserved Foreword On January 29, 2007, Adobe Systems Incorporated an nounced its intention to release the full Portable  Document Format (PDF) 1.7 specific ation to the American National Standard Institute (ANSI) and the  Enterprise Content Management Association ( AIIM),   fo r the purpose of publication by the International  Organization for Standardization (ISO). PDF has become a de facto global standard for more  secure and dependable information exchange since  Adobe published the complete PDF specification in 1993. Both government and private industry have come to  rely on PDF for the volumes of electronic records that  need to be more securely and reliably shared, managed,  and in some cases preserved for gene rations. Since 1995 Adobe has participated in various working groups  that develop technical specifications  for publication by ISO and worked within the ISO process to deliver  specialized subsets of PDF as standards for specific industries and functions. Today, PDF for Archive (PDF/A)  and PDF for Exchange (PDF/X) are ISO standards, and  PDF for Engineering (PDF/E) and PDF for Universal  Access (PDF/UA) are proposed standards. Additionally, PD F for Healthcare (PDF/H) is an AIIM proposed Best  Practice Guide. AIIM serves as the administ rator for PDF/A, PDF/E, PDF/UA and PDF/H.  In the spring of 2008 the ISO 32000 document was pr epared by Adobe Systems Incorporated (based upon  PDF Reference, sixth editi on, Adobe Portable Document Format version 1.7, November 2006) and was  reviewed, edited and adopted, under a special fast-tr ack procedure, by Technica l Committee ISO/TC 171, Document management application , Subcommittee SC 2,  Application issues , in parallel with its approval by the  ISO member bodies. In January 2008, this ISO technical committee approve d the final revised documentation for PDF 1.7 as the  international standard ISO 32000-1. In July 2008 the ISO document was placed for sale on the ISO web site  (","http://www.iso.org","). This document you are now reading is a copy of the ISO 32000-1 standard. By agreement with ISO, Adobe  Systems is allowed to offer this version of the ISO standard as a free PDF file on its web site. It is not an official  ISO document but the technical content is identical including the section numbering and page numbering.",""],"7":["' Adobe Systems Incorporated 2008  All rights reserved viiPDF 32000-1:2008 Introduction ISO 32000 specifies a digital form for representing documents called the Portable Document Format or usually  referred to as PDF. PDF was developed and specified by  Adobe Systems Incorporated beginning in 1993 and  continuing until 2007 when this  ISO  standard was prepared. The Adobe Syst ems version PDF 1.7 is the basis  for this ISO 32000 edition. The specif ications for PDF are backward inclus ive, meaning that  PDF 1.7 includes  all of the functionality previously doc umented in the Adobe PDF Specifications for versions 1.0 through 1.6. It  should be noted that where Adobe removed certain feat ures of PDF from their standard, they too are not  contained herein. The goal of PDF is to enable users to exchange  and view electronic documents easily and reliably,  independent of the environment in which they were cr eated or the environment in which they are viewed or  printed. At the core of PDF is an advanced imaging model derived from the PostScriptﬁ page description  language. This PDF Imaging Model enables the description  of text and graphics in  a device-independent and  resolution-independent manner.  To improve performance for interactive viewing, PDF defines a more  structured format than that used by most PostScript language programs.  Unlike Postscript, which is a  programming language, PDF is based on a structured binary  file format that is opt imized for high performance  in interactive viewing. PDF also includes objects, such  as annotations and hypertext links, that are not part of  the page content itself but are useful for interactive viewing and document interchange. PDF files may be created natively in PD F form, converted from other electron ic formats or digitized from paper,  microform, or other hard copy format . Businesses, governments, libraries,  archives and other institutions and  individuals around the world use PDF to represen t considerable bodies of important information.  Over the past fourteen years, aided  by the explosive growth of the Internet, PDF has become widely used for  the electronic exchange of documents. There are severa l specific applications of  PDF that have evolved where  limiting the use of some features of  PDF and requiring the use of others, en hances the usefulness of PDF. ISO  32000 is an ISO standard for the full function PDF; the  following standards are for more specialized uses. PDF/ X (ISO 15930) is  now  the industry standard for the intermediate representation of printed material in electronic  prepress systems for conventional printing applications. PDF/A (ISO 19005) is  now  the industry standard for  the archiving of digital documents. PDF/E (ISO 24517)  provides a mechanism for representing engineering  documents and exchange of engineering data. As major  corporations, government agencies, and educational  institutions streamline their operat ions by replacing paper-based work flow with electronic exchange of  information, the impact and opportu nity for the application of PDF will continue to grow at a rapid pace. PDF, together with software for creating, viewing, printing  and processing PDF files in a variety of ways, fulfils a  set of requirements for electronic documents including:   preservation of document fidelity independen t of the device, platform, and software,  merging of content from diverse sourcesWeb si tes, word processing and spreadsheet programs,  scanned documents, photos, and graphicsinto o ne self-contained document while maintaining the  integrity of all original source documents,  collaborative editing of documents fr om multiple locations or platforms,  digital signatures to certify authenticity,  security and permissions to allow the creator to  retain control of the document and associated rights,  accessibility of content to those with disabilities,  extraction and reuse of content for use with  other file formats and applications, and  electronic forms to gather data and integrate it w ith business systems.",""],"8":["PDF 32000-1:2008 viii' Adobe Systems Incorporated 2008  All rights reserved The International Organization for Standardization draws at tention to the fact that it is claimed that compliance  with this document may involve the use of patents  concerning the creation, modification, display and  processing of PDF files which are owned by the following parties:  Adobe Systems Incorporated, 345 Park Av enue, San Jose, California,95110-2704, USA ISO takes no position concerning the evidence,  validity and scope of these patent rights. The holders of these patent rights  has assured the ISO that they are willing to  negotiate licenses under  reasonable and non-discriminatory terms and conditions wit h applicants throughout the world. In this respect,  the statements of the holders of these patent rights ar e registered with ISO. Information may be obtained from  those parties listed above. Attention is drawn to the possibility th at some of the elements of this doc ument may be the su bject of patent  rights other than those identified above. ISO shall not be  held responsible for identify ing any or all such patent  rights. A repository of referenced documents  has been established by AIIM (","http://www.aiim.org","/pdfrefdocs","). Not all  referenced documents can be found ther e because of copyright restrictions.",""],"9":["' Adobe Systems Incorporated 2008  All rights reserved 1PDF 32000-1:2008 Document management  Portable document format   Part 1: PDF 1.7IMPORTANT  The electronic file of this document contains colours which are considered to be useful  for the correct understanding of the document. Users should therefore consider printing this document  using a colour printer. 1Scope This International Standard specifies a digital form for  representing electronic documents to enable users to  exchange and view electronic documents independent of  the environment in which they were created or the  environment in which they are viewed or  printed. It is intended for the de veloper of software that creates PDF  files (conforming writers), software th at reads existing PDF files and interp rets their contents for display and  interaction (conforming readers) and PDF products that read and/or write PDF files for a variety of other  purposes (conforming products).  This standard does not specify the following:  specific processes for converting paper or electronic documents to the PDF format;  specific technical design, user interface or implementation or operational details of rendering;  specific physical methods of storing these  documents such as media and storage conditions;  methods for validating the confor mance of PDF files or readers;  required computer hardware and/or operating system. 2 Conformance 2.1 General Conforming PDF files shall adhere to all requirements of  the ISO 32000-1 specification and a conforming file is  not obligated to use any feature other than  those explicitly required by ISO 32000-1. NOTE 1 The proper mechanism by which a f ile can presumptively identif y itself as being a PDF file of a given version  level is described in  7.5.2, \"File Header\" .2.2 Conforming readers A conforming reader shall comply with all requirements  regarding reader functional behaviour specified in  ISO 32000-1. The requirements of ISO 32000-1 with respect to reader behaviour are stated in terms of general  functional requirements applicable to all conforming  readers. ISO 32000-1 does not prescribe any specific  technical design, user interface or implementation deta ils of conforming readers. Th e rendering of conforming  files shall be performed as defined by ISO 32000-1. 2.3 Conforming writers A conforming writer shall  comply with all requirements regarding the  creation of PDF files as specified in  ISO 32000-1. The requirements of ISO 32000-1 with respect  to writer behaviour are stated in terms of general  functional requirements applicable to all conforming wr iters and focus on the creati on of conforming files.  ISO 32000-1 does not prescribe any spec ific technical design, user interface or implementation details of  conforming writers.",""],"10":["PDF 32000-1:2008 2' Adobe Systems Incorporated 2008  All rights reserved 2.4 Conforming products A conforming product shall comply with all requirements  regarding the creation of PDF files as specified in  ISO 32000-1 as well as comply with a ll requirements regarding reader functional behavior specified in  ISO 32000-1.  3 Normative references The following referenced documents are indispensable  for the application of this document. For dated  references, only the edition cited applies. For undated re ferences, the latest edition  of the referenced document  (including any amendments) applies.  ISO 639-1:2002,  Codes for the representation of names of languages -- Part 1: Alpha-2 code. ISO 639-2:1998,  Codes for the representation of names of languages -- Part 2: Alpha-3 code. ISO 3166-1:2006,  Codes for the representation of names of countrie s and their subdivisions -- Part 1: Country  codes. ISO 3166-2:1998,  Codes for the representation of names of countrie s and their subdivisions -- Part 2: Country  subdivision code. ISO/IEC 8824-1:2002,  Abstract Syntax Notation One (ASN.1 ): Specification of basic notation. ISO/IEC 10918-1:1994,  Digital Compression and Coding  of Continuous-Tone Still Images  (informally known as  the JPEG standard, for the Joint Photographic Experts Group, the ISO group that developed the standard). ISO/IEC 15444-2:2004,  Information TechnologyJPEG 2000 Image Coding System: Extensions. ISO/IEC  11544:1993/Cor 2:2001,  Information technologyCoded representation of picture and audio  informationProgressive bi-level image compression  (JBIG2). IEC/3WD 61966-2.1:1999,  Colour Measurement and Management in Mu ltimedia Systems and Equipment, Part  2.1: Default RGB Colour SpacesRGB. ISO 15076-1:2005,  Image technology colour management - Architecture, profile format and data structure -  Part 1:Based on ICC.1:2004-10. ISO 10646:2003, Information technology -- Univ ersal Multiple-Octet Coded Character Set (UCS). ISO/IEC 9541-1:1991, Information technology -- Font  information interchange -- Part 1: Architecture. ANSI X3.4-1986, Information Systems - Coded Sets 7- Bit American National Standard Code for Information  Interchange (7-bit ASCII). NOTE 1 The following documents can be found at   AIIM at","http://www.aiim.org/","pdfrefdocs"," as well as at the  Adobe  Systems Incorporated Web Site","http://www.adobe.com/go /pdf_ref_bibliography",".PDF Reference, Version 1.7,  5th ed. , (ISBN 0-321-30474-8), Adobe Systems Incorporated. JavaScript for Acrobat API Reference , Version 8.0, (April 2007), Adobe Systems Incorporated.  Acrobat 3D JavaScript Reference,  (April 2007), Adobe Systems Incorporated.  Adobe Glyph List, Version 2.0,  (September 2002), Adobe Systems Incorporated.  OPI: Open Prepress Interface Specification 1.3,  (September 1993), Adobe Systems Incorporated.",""],"11":["' Adobe Systems Incorporated 2008  All rights reserved 3PDF 32000-1:2008 PDF Signature Build Dictionary Specification v.1.4,  (March 2008) , Adobe Systems Incorporated. Adobe XML Architecture, Forms Architectu re (XFA) Specification, version 2.5,  (June 2007), Adobe Systems  Incorporate d.Adobe XML Architecture, Form s Architecture (XFA) Spec ification, version 2.4,  (September 2006),  Adobe  Systems Incorporated. Adobe XML Architecture, Forms Architectu re (XFA) Specification, version 2.2,  (June 2005), Adobe Systems  Incorporated. Adobe XML Architecture, Form s Architecture (XFA) Spec ification, version 2.0,  (October 2003), Adobe Systems  Incorporated. NOTE 2 Beginning with XFA 2.2, the XFA specification includes  the Template Specification,  the Config Specification,  the XDP Specification, and all other XML specifications unique to the XML Forms Architecture (XFA). Adobe XML Architecture, XM L Data Package (XDP) Specification, version 2.0,  (October 2003),  Adobe  Systems Incorporated. Adobe XML Architecture, Template Specification, version 2.0,  (October 2003), Adobe Systems Incorporated. XML Forms Data Format Specification, version 2.0,  (September 2007), Adobe Systems Incorporated. XMP: Extensible Metadata Platform,  (September 2005), Adobe Systems Incorporated.  TIFF Revision 6.0,  Final, (June 1992),  Adobe Systems Incorporated. NOTE 3 The following Adobe Technical Notes c an be found at the AIIM website  at","http://www.aiim.org/","pdfnotes"," as well  as at the  Adobe Systems Incorporated Web Site (","http://www.adobe.com",") using the general search facility,  entering the Technical Note number. Technical Note #5004, Adobe Font Metrics F ile Format Specification, Version 4.1,  (October 1998), Adobe  Systems Incorporated. NOTE 4 Adobe font metrics (AFM) files are available through the Type section of the ASN Web site. Technical Note #5014, Adobe CMap and CID  Font Files Specificat ion, Version 1.0,  (June 1993), Adobe  Systems Incorporated. Technical Note #5015, Type 1 Font Format Supplement,  (May 1994), Adobe Systems Incorporated.  Technical Note #5078, Adobe-Japan1-4 Character Collection for CID-Keyed Fonts,  (June 2004), Adobe  Systems Incorporated. Technical Note #5079, Adobe-GB1-4 Char acter Collection for CID-Keyed Fonts,  (November 2000),  Adobe  Systems Incorporated.  Technical Note #5080, Adobe-CNS1-4 Char acter Collection for  CID-Keyed Fonts,  (May 2003), Adobe Systems  Incorporated. Technical Note #5087, Multiple  Master Font Programs for the Macintosh, (February 1992),  Adobe Systems  Incorporated. Technical Note #5088, Font Naming Issues,  (April 1993),  Adobe Systems Incorporated.  Technical Note #5092, CID-Keyed Font Technology Overview,  (September 1994), Adobe Systems  Incorporated.",""],"12":["PDF 32000-1:2008 4' Adobe Systems Incorporated 2008  All rights reserved Technical Note #5093, Adobe-Korea1-2 Character Collection for CID-Keyed Fonts,  (May 2003), Adobe  Systems Incorporated.  Technical Note #5094, Adobe CJ KV Character Collections and CMaps for CID-Keyed Fonts,  (June 2004),  Adobe Systems Incorporated. Technical Note #5097, Adobe-Japan2-0 Character Collection for CID-Keyed Fonts,  (May 2003), Adobe  Systems Incorporated. Technical Note #5116, Supporting the  DCT Filters in PostScript Level 2,  (November 1992) , Adobe Systems  Incorporated. Technical Note #5176, The Compact Font Format Specification, version 1.0,  (December 2003), Adobe  Systems Incorporated.  Technical Note #5177, The Type 2 Charstring Format,  (December 2003), Adobe Systems Incorporated.  Technical Note #5411, ToUnic ode Mapping File Tutorial,  (May 2003), Adobe Systems Incorporated.  Technical Note #5620, Portable Job Ticket Format, Version 1.1,  (April 1999) , Adobe Systems Incorporated. Technical Note #5660, Open Prepress Inte rface (OPI) Specification, Version 2.0 , (January 2000), Adobe  Systems Incorporated. NOTE 5 The following documents are available as Feder al Information Processing Standards Publications. FIPS PUB 186-2, Digital Signature St andard, describes DSA signatures,  (January 2000) , Federal Information  Processing Standards. FIPS PUB 197, Advanced Encryption Standard (AES),  (November 2001),  Federal Information Processing  Standards. NOTE 6 The following documents are available  as Internet Engineering Task Force RFCs. RFC 1321, The MD5 Message-Digest Algorithm,  (April 1992),  Internet Engineering Task Force (IETF).  RFC 1738, Uniform Resource Locators,  (December 1994),  Internet Engineering Task Force (IETF).  RFC 1808, Relative Unif orm Resource Locators,  (June 1995),  Internet Engineering Task Force (IETF).  RFC 1950, ZLIB Compressed Data Format Specification, Version 3.3,  (May 1996),  Internet Engineering Task  Force (IETF).  RFC 1951, DEFLATE Compressed Data Format Specification, Version 1.3,  (May 1996),  Internet Engineering  Task Force (IETF).  RFC 2045, Multipurpose Internet Mail Extensions (MIM E) Part One: Format of Internet Message Bodies,  (November 1996),   Internet Engineering Task Force (IETF).  RFC 2046, Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types,  (November 1996),  Internet  Engineering Task Force (IETF). RFC 2083, PNG (Portable Network Graph ics) Specification, Version 1.0,  (March 1997),  Internet Engineering  Task Force (IETF) . RFC 2315, PKCS #7: Cryptographic Message Syntax, Version 1.5,  (March 1998), Internet Engineering Task  Force (IETF).",""],"13":["' Adobe Systems Incorporated 2008  All rights reserved 5PDF 32000-1:2008 RFC 2396, Uniform Resource Identifiers (URI): Generic Syntax,  (August 1998),  Internet Engineering Task  Force (IETF).  RFC 2560, X.509 Internet Public Key Infrastruc ture Online Certificate Status ProtocolOCSP,  (June 1999), Internet Engineering Task Force (IETF).  RFC 2616, Hypertext Transfer ProtocolHTTP/1.1,  (June 1999),   Internet Engineering Task Force (IETF).  RFC 2898, PKCS #5: Password-Based Cryp tography Specification Version 2.0,  (September 2000),  Internet  Engineering Task Force (IETF).  RFC 3066, Tags for the Iden tification of Languages,  (January 2001),   Internet Engineering Task Force (IETF).  RFC 3161, Internet X.509 Public Key Infrastructure Time-Stamp Protocol (TSP),  (August 2001),  Internet  Engineering Task Force (IETF).  RFC 3174, US Secure Hash Algorithm 1 (SHA1),  (September 2001),   Internet Engineering  Task Force (IETF).  RFC 3280, Internet X.509 Public Key  Infrastructure, Certificate and Certif icate Revocation List (CRL) Profile,  (April 2002), Internet Engineering Task Force (IETF).  NOTE 7 The following documents are available from other sources. Adobe Type 1 Font Format., Version 1.1, (Febru ary 1993), Addison-Wesley, ISBN 0-201-57044-0. OpenType Font Specification 1.4,  December 2004, Microsoft.  TrueType Reference Manual, ( December 2002),  Apple Computer, Inc. Standard ECMA-363, Universal 3D File Format, 1st Edition  (U3D), (December 2004),  Ecma International. PANOSE Classification Metrics Guide,  (February 1997),  Hewlett-Packard Corporation. ICC Characterization Data Registry,  International Color Consortium (ICC).  Recommendations T.4 and T.6, Group 3 and Group 4 facsimile encoding,  International Telecommunication  Union (ITU).  TrueType 1.0 Font Files Technical Specification,  Microsoft Corporation.  Client-Side JavaScript Reference,  (May 1999) , Mozilla Foundation. The Unicode Standard, Version 4.0, Addison-Wesley, Boston, MA, 2003,  Unicode Consortium. Unicode Standard Annex #9, The Bidire ctional Algorithm, Version 4.0.0,  (April 2003),   Unicode Consortium. Unicode Standard Annex #14, Line Breaking Properties, Version 4.0.0,  (April 2003),   Unicode Consortium. Unicode Standard Annex #29, Text  Boundaries, Version 4.0.0,  (March 2005),   Unicode Consortium. Extensible Markup Language (XML) 1.1,  World Wide Web Consortium (W3C).",""],"14":["PDF 32000-1:2008 6' Adobe Systems Incorporated 2008  All rights reserved 4 Terms and definitions For the purposes of this document, these terms and definitions apply. 4.1 (ellipsis) An ellipsis is used within PDF examples to indicate omit ted detail. Pairs of ellipses are also used to bracket  comments, in italic, abo ut such omitted detail. 4.28-bit value (see byte) 4.3array object a one-dimensional collection of objects arranged se quentially and implicitly numbered starting at 0 4.4ASCII the American Standard Code for Information Interchange,  a widely used convention for encoding a specific set  of 128 characters as binary numbers defined in ANSI X3.4-1986 4.5binary data an ordered sequence of bytes 4.6boolean objects either the keyword  true or the keyword  false 4.7byte a group of 8 binary digits which collectively can be con figured to represent one of 256 different values and  various realizations of the 8 binary digits ar e widely used in today’s electronic equipment 4.8catalog the primary dictionary object containing  references directly or indirectly to all other objects in the document with  the exception that there may be objects in the  trailer that are not referred to by the  catalog 4.9character numeric code representing an abstract symbol according to some defined character encoding rule  NOTE 1 There are three manifestations of  characters in PDF, depending on context:  A PDF file is represented as a sequence of 8-bit b ytes, some of which are interpreted as char -acter codes in the ASCII character set and some of  which are treated as arbitrary binary data  depending upon the context.  The contents (data) of a string or stream object  in some contexts are interpreted as character  codes in the PDFDocEncoding or UTF-16 character set.  The contents of a string within a PDF content str eam in some situations are interpreted as char -acter codes that select glyphs to be drawn on the page according to a character encoding that  is associated with the text font.4.10character set a defined set of symbols each assigned a unique character value",""],"15":["' Adobe Systems Incorporated 2008  All rights reserved 7PDF 32000-1:2008 4.11 conforming reader software application that is able to read and process PD F files that have been made in conformance with this  specification and that itself conforms to requiremen ts of conforming readers specified here [ISO 32000-1] 4.12conforming product software application that is both a conforming reader and a conforming writer 4.13conforming writer software application that is able  to write PDF files that conform to this specification [ISO 32000-1] 4.14content stream stream object whose data consists of a sequence of in structions describing the graphical elements to be  painted on a page 4.15cross reference table data structure that contains the byte offset start  for each of the indirect objects within the file 4.16developer Any entity, including individuals, companies, non-profit s, standards bodies, open source groups, etc., who are  developing standards or software to use and extend ISO 32000-1. 4.17dictionary object an associative table containing pairs of objects, the firs t object being a name object serving as the key and the  second object serving as the value and may be an y kind of object including another dictionary 4.18direct object any object that has not been made into an indirect object 4.19electronic document electronic representation of a page-oriented aggregation  of text, image and graphic data, and metadata useful  to identify, understand and render that data, that can  be reproduced on paper or displayed without significant  loss of its information content 4.20end-of-line marker (EOL marker) one or two character sequence marking the end of  a line of text, consisting of a CARRIAGE RETURN  character (0Dh) or a LINE FEED character (0Ah) or  a CARRIAGE RETURN followed immediately by a LINE  FEED4.21FDF file File conforming to the Forms Data Format containing form data or annotations that may be imported into a PDF  file (see 12.7.7, Forms Data Format )4.22filteran optional part of the specification  of a stream object, indicating how th e data in the stream should be decoded  before it is used",""],"16":["PDF 32000-1:2008 8' Adobe Systems Incorporated 2008  All rights reserved 4.23font identified collection of graphic s that may be glyphs or other graphic elements [ISO 15930-4] 4.24function a special type of object that represents parameterized  classes, including mathematical formulas and sampled  representations with arbitrary resolution 4.25glyph recognizable abstract graphic symbol that is ind ependent of any specific  design [ISO/IEC 9541-1] 4.26graphic state the top of a push down stack of the graphics control parameters that define the current global framework within  which the graphics operators execute 4.27ICC profilecolour profile conforming to the  ICC specification [ISO 15076-1:2005] 4.28indirect object an object that is labeled with a positive integer obj ect number followed by a non-negative integer generation  number followed by  obj and having  endobj  after it 4.29integer object mathematical integers with an implementation specified  interval centered at 0 and written as one or more  decimal digits optionally preceded by a sign 4.30name object an atomic symbol uniquely defined by a sequence of char acters introduced by a SOLIDUS (/), (2Fh) but the  SOLIDUS is not considered to be part of the name 4.31name tree similar to a dictionary that associat es keys and values but the keys in a name tree are strings and are ordered 4.32null object a single object of type nu ll, denoted by the keyword  null, and having a type and value that are unequal to those  of any other object 4.33number tree similar to a dictionary that associat es keys and values but the keys in a number tree are integers and are  ordered 4.34numeric object either an integer object or a real object 4.35objecta basic data structure from which PDF files are cons tructed and includes these types: array, Boolean,  dictionary, integer, name, null, real, stream and string",""],"17":["' Adobe Systems Incorporated 2008  All rights reserved 9PDF 32000-1:2008 4.36object reference an object value used to allow one object to refer to an other; that has the form <n> <m> R where <n> is an  indirect object number, <m> is its versio n number and R is the uppercase letter R 4.37object stream a stream that contains a sequence of PDF objects 4.38PDFPortable Document Format f ile format defined by this  specification [ISO 32000-1] 4.39real object approximate mathematical real numbers, but with limit ed range and precision and written as one or more  decimal digits with an optional sign and a leading,  trailing, or embedded PERIOD (2Eh) (decimal point) 4.40rectangle a specific array object used to describe locations on a p age and bounding boxes for a variety of objects and  written as an array of four numbers giving the coordinates  of a pair of diagonally opposite corners, typically in  the form [  llx lly urx ury ] specifying the lower-left x, lower-left y,  upper-right x, and upper-right y coordinates of  the rectangle, in that order 4.41resource dictionary associates resource names, used in  content streams, with the resource objects themselves and organized into  various categories (e.g., Font, ColorSpace, Pattern) 4.42space character text string character used to represent or thographic white space in text strings NOTE 2 space characters include HORIZONTAL TAB (U+0009), LINE FEED (U+000A), VERTICAL TAB (U+000B),  FORM FEED (U+000C), CARRIAGE RETURN (U+000D), SPACE (U +0020), NOBREAK SPACE (U+00A0),  EN SPACE (U+2002), EM SPACE (U+2003), FIGURE  SPACE (U+2007), PUNCTUATION SPACE (U+2008),  THIN SPACE (U+2009), HAIR SPACE (U+200A),  ZERO WIDTH SPACE (U+ 200B), and IDEOGRAPHIC  SPACE (U+3000) 4.43stream object consists of a dictionary followed by zero or more by tes bracketed between the keywords stream and endstream 4.44string object consists of a series of bytes (unsigned integer values  in the range 0 to 255) and the bytes are not integer  objects, but are stored in a more compact form 4.45web capture refers to the process of creating PDF content by import ing and possibly converting internet-based or locally- resident files. The files being imported may be any ar bitrary format, such as HT ML, GIF, JPEG, text, and PDF 4.46white-space character characters that separate PDF syntactic constructs su ch as names and numbers from each other; white space  characters are HORIZONTAL TAB (09h ), LINE FEED (0Ah), FORM FEED  (0Ch), CARRIAGE RETURN (0Dh),  SPACE (20h); (see  Ta b l e  1 in 7.2.2, Character Set )",""],"18":["PDF 32000-1:2008 10' Adobe Systems Incorporated 2008  All rights reserved 4.47XFDF file file conforming to the XML Forms Data Format 2.0 specificatio n, which is an XML tran sliteration of Forms Data  Format (FDF) 4.48XMP packet structured wrapper for serialized XML metadata that can be embedded in a wide variety of file formats 5Notation PDF operators, PDF keywords, the names of keys in PDF  dictionaries, and other predefined names are written  in bold sans serif font; words that denote operands of  PDF operators or values of dictionary keys are written in  italic sans serif font. Token characters used to delimit objects and desc ribe the structure of PDF files, as defined in  7.2, \"Lexical  Conventions\" , may be identified by their ANSI X3.4-1986 (ASCII 7-bit USA codes) character name written in  upper case in bold sans serif font followed by a parent hetic two digit hexadecimal c haracter value with the suffix  h. Characters in text st reams, as defined by  7.9.2, \"String Object Types\" , may be identified by their ANSI X3.4- 1986 (ASCII 7-bit USA codes) character name written in up percase in sans serif font followed by a parenthetic  four digit hexadecimal character code value with the prefix U+ as shown in  EXAMPLE 1 in this clause. EXAMPLE 1EN SPACE  (U+2002).  6 Version Designations For the convenience of the reader, t he PDF versions in which various feat ures were introduced are provided  informatively within this document.  The first version of PDF was design ated PDF 1.0 and was specified by  Adobe Systems Incorporated in the  PDF Reference 1.0 document published by Adobe and Addison Wesley.  Since then, PDF has gone through seven revisions designa ted as: PDF 1.1, PDF 1.2,  PDF 1.3, PDF 1.4, PDF  1.5, PDF 1.6 and PDF 1.7. A ll non-deprecated features defined in a previous PDF version were also included in  the subsequent PDF version. Since ISO 32000-1 is a PDF  version matching PDF 1.7,  it is also suitable for  interpretation of files made to conform with any of th e PDF specifications 1.0 th rough 1.7. Throughout this  specification in order to indicate at  which point in the sequence of versions a feature was introduced, a notation  with a PDF version number in parenthesis (e.g.,  (PDF 1.3) ) is used. Thus if a feature is labelled with  (PDF 1.3)it means that PDF 1.0, PDF 1.1 and PD F 1.2 were not specified to support this feature whereas all versions of  PDF 1.3 and greater were defined to support it.",""],"19":["' Adobe Systems Incorporated 2008  All rights reserved 11PDF 32000-1:2008 7Syntax 7.1 General This clause covers everything  about the syntax of PDF at the object, f ile, and document level. It sets the stage  for subsequent clauses, which describe  how the contents of a PDF file ar e interpreted as page descriptions,  interactive navigational aids, and app lication-level logical structure.  PDF syntax is best understood by considering it as four parts, as shown in  Figure 1 : O bjects . A PDF document is a data structure composed from a small set of basic types of data objects.  Sub-clause  7.2, \"Lexical Conventions,\"  describes the character set used to write objects and other  syntactic elements. Sub-clause  7.3, \"Objects,\"  describes the syntax and essential properties of the objects.  Sub-clause  7.3.8, \"Stream Objects,\"  provides complete details of the most complex data type, the stream  object.  File structure . The PDF file structure determines how objects are stored in a PDF file, how they are  accessed, and how they are updated. This structure is  independent of the semant ics of the objects. Sub- clause  7.5, \"File Structure,\"  describes the file structure. Sub-clause  7.6, \"Encryption,\"  describes a file-level  mechanism for protecting a documents contents from unauthorized access.  Do cument structure . The PDF document structure specifies ho w the basic object types are used to  represent components of a PDF document: pages,  fonts, annotations, and so forth. Sub-clause  7.7, \"Document Structure,\"  describes the overall document structure; later clauses address the detailed  semantics of the components.  Co ntent streams . A PDF content stream  contains a sequence of instructio ns describing the appearance of  a page or other graphical entity. These instructions,  while also represented as objects, are conceptually  distinct from the objects that represent the documen t structure and are described separately. Sub-clause  7.8, \"Content Streams and Resources,\"  discusses PDF content streams and  their associated resources.  Figure 1   PDF Components In addition, this clause describes some  data structures, built from basic ob jects, that are so widely used that  they can almost be considered ba sic object types in their own right. These objects are covered in:  7.9, \"Common Data Structures\" ; 7.10, \"Functions\" ; and  7.11, \"File Specifications.\" NOTE Variants of PDFs object and file syntax are also used as the basis for other file formats. These include the  Forms Data Format (FDF), described in  12.7.7, \"Forms Data Format\" , and the Portable Job Ticket Format  (PJTF), described in Adobe Technical Note #5620,  Portable Job Ticket Format . 7.2 Lexical Conventions 7.2.1 General At the most fundamental level, a PDF file is a se quence of bytes. These bytes can be grouped into  tokens according to the syntax rules described in this sub-claus e. One or more tokens are assembled to form higher-","Objects","File structure Documentstructure Content stream",""],"20":["PDF 32000-1:2008 12' Adobe Systems Incorporated 2008  All rights reserved level syntactic entities, principally  objects , which are the basic data values from which a PDF document is  constructed.  A non-encrypted PDF can be entirely represented using  byte values corresponding to the visible printable  subset of the character set defined in  ANSI X3.4-1986, plus white space c haracters. However, a PDF file is not  restricted to the ASCII character se t; it may contain arbitrary bytes, subject to the following considerations:   The tokens that delimit objects and that describe the  structure of a PDF file shall use the ASCII character  set. In addition all the reserved words and the name s used as keys in PDF standard dictionaries and  certain types of arrays shall be defined using the ASCII character set.  The data values of strings and streams objects may  be written either entirely using the ASCII character set  or entirely in binary data. In actual practice, data  that is naturally binary, su ch as sampled images, is usually represented in binary for compactness and efficiency.  A PDF file containing binary data shall be transported as  a binary file rather than as a text file to insure that  all bytes of the file are faithfully preserved.  NOTE 1 A binary file is not portable to  environments that impose reserved ch aracter codes, maximum line lengths, end- of-line conventions, or  other restrictions NOTE 2 In this clause, the usage of the term character is  entirely independent of any logical meaning that the value  may have when it is treated as data in specific co ntexts, such as representing human-readable text or  selecting a glyph from a font.  7.2.2 Character Set The PDF character set is divided into three classes, called  regular , delimiter, and  white-space  characters. This  classification determines the grouping of characters into  tokens. The rules defined in this sub-clause apply to  all characters in the file except wi thin strings, streams, and comments.  The  White- space characters  shown in  Ta b l e  1 separate syntactic constructs  such as names and numbers from  each other. All white-space characters are equivalent, e xcept in comments, strings,  and streams. In all other  contexts, PDF treats any sequence of consecut ive white-space characters as one character. The CARRIAGE RETURN (0Dh) and LINE  FEED (0Ah) characters, also called  newline characters , shall be treated as  end-of-line  (EOL) markers. The combination of a CA RRIAGE RETURN followed immediately by a  LINE FEED shall be treated as one EOL marker. EOL  markers may be treated the same as any other white- space characters. However, sometimes an EOL marker is required or recommendedthat is, preceding a  token that must appear at  the beginning of a line.  NOTE The examples in this standard use a convention that a rranges tokens into lines. However, the examples use of  white space for indentation is purely for clarity of ex position and need not be included in practical use.  Table  1   White-space characters   Decimal Hexadecimal  Octal Name 000000 Null (NUL) 909011 HORIZONTAL TAB (HT) 100A012 LINE FEED (LF) 120C014 FORM FEED (FF) 130D015 CARRIAGE RETURN (CR) 3220040 SPACE (SP)",""],"21":["' Adobe Systems Incorporated 2008  All rights reserved 13PDF 32000-1:2008 The  delimiter characters (, ), <, >, [, ], {, }, /, and % are special (LEFT PARENTHESIS (28h), RIGHT  PARENTHESIS (29h), LESS-THAN SIGN (3Ch), GREATER-THAN SIGN (3Eh), LEFT SQUARE BRACKET  (5Bh), RIGHT SQUARE BRACKET (5Dh), LEFT  CURLY BRACE (7Bh), RIGHT CURLY BRACE (07Dh),  SOLIDUS (2Fh) and PERCENT SIGN (25h ), respectively). They  delimit syntactic entities such as arrays,  names, and comments. Any of these char acters terminates the entity preceding it and is not included in the  entity. Delimiter characters are allo wed within the scope of a string wh en following the rules for composing strings; see  7.3.4.2, Literal Strings . The leading ( of a string does delimit  a preceding entity and the closing ) of  a string delimits the strings end. All characters except the white-space characters and delimiters are referred to as  regular characters . These  characters include bytes that are  outside the ASCII character set. A  sequence of consecutive regular  characters comprises a single token. PDF is case-sen sitive; corresponding uppercase and lowercase letters  shall be considered distinct.  7.2.3 Comments Any occurrence of the PERCENT SIGN (25h) outside a string or stream introduces a  comment . The comment  consists of all characters after the PERCENT SIGN and  up to but not including the end of the line, including  regular, delimiter, SPACE (20h), and HORZONTAL TAB characters (09h). A conforming reader shall ignore  comments, and treat them as single white-space characters. That is, a comment separates the token preceding  it from the one following it.  EXAMPLE The PDF fragment in this example is syntactically equivalent to just the tokens abc and 123. abc% comment  ( /% ) blah blah  blah 123Comments (other than the %PDF n.m and %%EOF comments described in  7.5, \"File Structure\" ) have no semantics. They are not necessarily preserved by applications that edit PDF files.  7.3 Objects 7.3.1 General PDF includes eight basic types of objects: Boolean values, Integer and Real numbers, Strings, Names, Arrays,  Dictionaries, Streams, and the null object. Table  2   Delimiter characters Glyph Decimal Hexadecimal  Octal Name(402850LEFT PARENTHESIS )412951RIGHT PARENTHESIS <603C60LESS-THAN SIGN>623E62GREATER-THAN SIGN [915B133LEFT SQUARE BRACKET]935D135RIGHT SQUARE BRACKET {123 7B173LEFT CURLY BRACKET }125 7D175RIGHT CURLY BRACKET /472F57SOLIDUS%372545PERCENT SIGN",""],"22":["PDF 32000-1:2008 14' Adobe Systems Incorporated 2008  All rights reserved Objects may be labelled so that they can be referred to  by other objects. A labelled object is called an indirect  object (see  7.3.10, \"Indirect Objects\" ). Each object type, their method of creation and their pro per referencing as indirect objects is described in  7.3.2, \"Boolean Objects\"  through  7.3.10, \"Indirect Objects.\"  7.3.2 Boolean Objects Boolean objects  represent the logical values of true and false.  They appear in PDF files using the keywords  true  and  false . 7.3.3 Numeric Objects PDF provides two types of numeric objects: integer and real.  Integer objects represent mathematical integers.  Real objects  represent mathematical real num bers. The range and precision of numbers may be limited by the  internal representations used in the computer  on which the conforming  reader is running;  Annex C  gives these  limits for typical  implementations.  An integer shall be written as one or more decimal di gits optionally preceded by a sign. The value shall be  interpreted as a signed decimal integer and shall be converted to an integer object. EXAMPLE 1 Integer objects 123  43445   +17   -98  0A real value shall be written as one  or more decimal digits with an option al sign and a leading, trailing, or  embedded PERIOD (2Eh) (decimal point). The value shall be interpreted as a real number and shall be  converted to a real object.  EXAMPLE 2 Real objects 34.5  -3.62  +123.6   4.  -.002  0.0NOTE 1 A conforming writer shall not use the PostScript  syntax for numbers with non-decimal radices (such as  16#FFFE) or in exponential format (such as 6.02E23). NOTE 2 Throughout this standard, the term  number  refers to an object whose type  may be either integer or real.  Wherever a real number is expected, an integer may be used  instead. For example, it  is not necessary to write  the number 1.0 in real format; the integer 1 is sufficient.  7.3.4 String Objects 7.3.4.1 General A str ing object  shall consist of a series of zero or more byte s. String objects are not integer objects, but are  stored in a more compact format. The length of a st ring may be subject to implementation limits; see  Annex C . String objects shall be written in  one of the following two ways:   As a sequence of literal characters enclosed in parentheses (  ) (using LEFT PARENTHESIS (28h) and  RIGHT PARENThESIS (29h)); see  7.3.4.2, \"Literal Strings.\"  As hexadecimal data enclosed in angle brackets <  > (using LESS-THAN SIGN (3Ch) and GREATER- THAN SIGN (3Eh)); see  7.3.4.3, \"Hexadecimal Strings.\" NOTE In many contexts, conventions exist for the interpretati on of the contents of a string value. This sub-clause  defines only the basic syntax for writing a string as a se quence of bytes; conventions or rules governing the  contents of strings in particular c ontexts are described with the defini tion of those particular contexts.",""],"23":["' Adobe Systems Incorporated 2008  All rights reserved 15PDF 32000-1:2008 7.9.2, \"String Object Types,\"  describes the encoding schemes used  for the contents of string objects. 7.3.4.2 Literal Strings A liter al string  shall be written as an arbitrary number of characters enclosed in parentheses. Any characters  may appear in a string except unbalanced  parentheses (LEFT PARENHESIS (28h) and RIGHT  PARENTHESIS (29h)) and the backslas h (REVERSE SOLIDUS (5Ch)), which  shall be treated specially as  described in this sub-clause. Balanced pairs of parentheses within a string require no special treatment.  EXAMPLE 1 The following ar e valid literal strings: ( This is a string  )( Strings may contain newlines and such . )( Strings may contain balanced parentheses ( ) and special characters (  * ! & } ^ % and so on ) . )( The following is an empty string  . )( )( It has zero ( 0 ) length  . )Within a literal string, the REVERSE SOLIDUS is used  as an escape character. The character immediately  following the REVERSE SOLIDUS determines its precise interpretation as shown in  Ta b l e  3. If the character  following the REVERSE SOLIDUS is  not one of those shown in  Ta b l e  3, the REVERSE SOLIDUS shall be  ignored.  A conforming writer may split a literal string across multiple lines. The REVERSE SOLIDUS (5Ch) (backslash character) at the end of a line shall be used to indi cate that the string continues on the following line. A  conforming reader shall disregard the REVERSE SOLIDUS  and the end-of-line marker following it when  reading the string; the resulting string value shall be identi cal to that which would be read if the string were not  split.  EXAMPLE 2 (  These  \\two strings \\are the  same  . )( These  two  strings are  the same . )An end-of-line marker appearing within a literal string without a preceding REVER SE SOLIDUS shall be treated as a byte value of (0Ah), irrespective of whether  the end-of-line marker was a CARRIAGE RETURN (0Dh), a  LINE FEED (0Ah), or both.  Table  3   Escape sequences in literal strings   Sequence Meaning\\nLINE FEED (0Ah)  (LF) \\rCARRIAGE RETURN (0Dh)  (CR)","\\tHORIZONTAL TAB (09h) (HT) \\bBACKSPACE (08h) (BS) \\fFORM FEED (FF) \\(LEFT PARENTHESIS (28h)  \\)RIGHT PARENTHESIS (29h)  \\\\REVERSE SOLIDUS (5Ch) (Backslash) \\dddCharacter code  ddd (octal)",""],"24":["PDF 32000-1:2008 16' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 3 (  This  string has  an end-of-line  at the  end  of it .)( So does  this one .\\n  )The \\ ddd  escape sequence provides a way to represent characters outside the printable ASCII character set.  EXAMPLE 4 (  This string contains \\2 45two octal characters\\307  . )The number  ddd  may consist of one, two, or three octal digits;  high-order overflow shall be ignored. Three octal  digits shall be used, with leading zeros as needed, if  the next character of the string is also a digit.  EXAMPLE 5 the literal ( \\0053  )denotes a string containing two characters, \\005 (Control-E) fo llowed by the digit 3, whereas both  ( \\053 )and ( \\53 )denote strings containing the single character \\053, a plus sign (+).  Since any 8-bit value may appear in  a string (with proper  escaping for REVERSE SO LIDUS (backslash) and unbalanced PARENTHESES) this \\ddd  notation provides a way to spec ify characters outside the ASCII  character set by using ASCII characters only. However,  any 8-bit value may appear in a string, represented  either as itself or with the \\ddd notation described. When a document is encrypted (see  7.6, Encryption ), all of its strings are encrypted; the encrypted string  values contain arbitrary 8-bit values. When writing encryp ted strings using the literal string form, the conforming  writer shall follow the rule s described. That is, the REVERSE SOLIDUS character shall be used as an escape to specify unbalanced PARENTHESES or the REVERSE SOLIDUS  character itself.  The REVERSE SOLIDUS may, but is not required, to be used to specify other, arbitrary 8-bit values. 7.3.4.3 Hexadecimal Strings Strings may also be written in hexadecimal form, which is us eful for including arbitrary binary data in a PDF file.  A hexadecimal string shall be written as a sequence of he xadecimal digits (09 and either AF or af) encoded  as ASCII characters and  enclosed within angle brackets (using LESS-THAN SIGN (3Ch) and GREATER- THAN SIGN (3Eh)). EXAMPLE 1 <  4E6F762073686D6F7A206B6120706F702E  >Each pair of hexadecimal digits defines one byte of t he string. White-space characte rs (such as SPACE (20h),  HORIZONTAL TAB (09h), CARRIAGE RETURN (0Dh), LINE  FEED (0Ah), and FORM FEED (0Ch)) shall be  ignored.  If the final digit of a hexadecimal string is missingthat  is, if there is an odd number of digitsthe final digit  shall be assumed to be 0.  EXAMPLE 2 <  901FA3  >is a 3-byte string consisting of the characters  whose hexadecimal codes are 90, 1F, and A3, but  < 901FA  >is a 3-byte string containing the characters  whose hexadecimal codes are 90, 1F, and A0.  7.3.5 Name Objects Beginning with PDF 1.2 a  name object  is an atomic symbol uniquely defined by a sequence of any characters  (8-bit values) except null (character code 0).  Uniquely defined means that any two name objects made up of  the same sequence of characters denote the same object.  Atomic means that a name has no internal structure;  although it is defined by  a sequence of characters, t hose characters are not considered elements of the name.",""],"25":["' Adobe Systems Incorporated 2008  All rights reserved 17PDF 32000-1:2008 When writing a name in a PDF file, a SOLIDUS (2Fh) (/ ) shall be used to introduce a name. The SOLIDUS is  not part of the name but is a prefix  indicating that what follows is a  sequence of characters representing the  name in the PDF file and  shall follow these rules:  a) A NUMBER SIGN (23h) (#) in a name shall be written by using its 2-digit hexadecimal code (23), preceded  by the NUMBER SIGN. b) Any character in a name that is a regular character (oth er than NUMBER SIGN) shall be written as itself or  by using its 2-digit hexadecimal code, preceded by the NUMBER SIGN. c) Any character that is not a regular character shall be wr itten using its 2-digit hexadecimal code, preceded  by the NUMBER SIGN only. NOTE 1 There is not a unique encoding of names in to the PDF file because regular characters may be  coded in either of two ways. White space used as part of a name shall always be coded  using the 2-digit hexadecimal notation and no white  space may intervene between the SOLIDUS and the encoded name. Regular characters that are outside the range EXCLA MATION MARK(21h) (!) to TILDE (7Eh) (~) should be  written using the hexadecimal notation.  The token SOLIDUS (a slash followed by no regular characters) introduces a unique valid name defined by the  empty sequence of characters. NOTE 2 The examples shown in  Table  4 and containing # are not valid literal names in PDF 1.0 or 1.1. In PDF, literal names shall always be introduced by the SOLIDUS character (/), unlike keywords such as  true , false , and  obj . NOTE 3 This standard follows a typographic convention of  writing names without the leading SOLIDUS when they  appear in running text and tables. For example,  Type  and  FullScreen  denote names that would actually be  written in a PDF file (and in co de examples in this standard) as  /Type  and  /FullScreen.  The length of a name shall be subject to an implementation limit; see  Annex C . The limit applies to the number  of characters in the names internal representation.  For example, the name /A#20B has three characters (A,  SPACE, B), not six.  Table  4   Examples of literal names Syntax for Literal name Resulting Name /Name1Name1 /ASomewhatLongerName ASomewhatLongerName /A;Name_With-Various***Characters? A;Name_With-Various***Characters? /1 . 21 . 2/$$$$/@pattern @pattern /. notdef . notdef /lime#20Green Lime Green /paired#28#29parentheses paired(  )parentheses /The_Key_of_F#23_Minor The_Key_of_F#_Minor /A#42AB",""],"26":["PDF 32000-1:2008 18' Adobe Systems Incorporated 2008  All rights reserved As stated above, name objects shall be treated as atomic  within a PDF file. Ordinarily , the bytes making up the  name are never treated as text to be presented to a human user or to an application external to a conforming  reader. However, occasionally the need arises to treat a na me object as text, such as one that represents a font  name (see the  BaseFont  entry in Ta b l e  111 ), a colorant name in a separation or DeviceN colour space, or a  structure type (see  14.7.3, \"Structure Types\" ).  In such situations, the sequence of bytes (after exp ansion of NUMBER SIGN sequences, if any) should be  interpreted according to UTF-8, a variable-length by te-encoded representation of Unicode in which the  printable ASCII characters have the same representati ons as in ASCII. This enables a name object to  represent text virtually in any natural language, subjec t to the implementation limit on the length of a name.  NOTE 4 PDF does not prescribe what UTF-8 sequence to  choose for representing any given piece of externally  specified text as a name object. In some cases, mu ltiple UTF-8 sequences may  represent the same logical  text. Name objects defined by different sequences of by tes constitute distinct na me objects in PDF, even  though the UTF-8 sequences may have identical external interpretations.  7.3.6 Array Objects An  ar ray object  is a one-dimensional collection of objects arranged sequentially. Unlike arrays in many other  computer languages, PDF arrays may be heterogeneous;  that is, an arrays elements may be any combination  of numbers, strings, dictionaries, or any other objects, including other arrays. An array may have zero  elements. An array shall be written as a sequence of object s enclosed in SQUARE BRACKETS (using LEFT SQUARE  BRACKET (5Bh) and RIGHT  SQUARE BRACKET (5Dh)). EXAMPLE [  549 3.14 false  ( Ralph  ) /SomeName  ]PDF directly supports only one-dimensional arrays. Ar rays of higher dimension can be constructed by using  arrays as elements of arrays, nested to any depth.  7.3.7 Dictionary Objects A diction ary object  is an associative table containing pair s of objects, known as the dictionarys  entries . The first  element of each entry is the  key and the second element is the  value. The key shall be a name (unlike  dictionary keys in PostScript, which may be objects of  any type). The value may be any kind of object, including  another dictionary. A dicti onary entry whose value is  null  (see  7.3.9, \"Null Object\" ) shall be treate d the same as  if the entry does not exist. (Thi s differs from PostScript, where  null  behaves like any other object as the value  of a dictionary entry.) The number of entries in a dict ionary shall be subject to an implementation limit; see  Annex C . A dictionary may have zero entries. The entries in a dictionary represent an associative  table and as such shall be unordered even though an  arbitrary order may be imposed upon them when written in a file. That ordering shall be ignored. Multiple entries in the  same dictionary shall not have the same key. A dictionary shall be written as a sequence of key-value pairs enclosed in double angle brackets (<<   >>)  (using LESS-THAN SIGNs (3Ch) an d GREATER-THAN SIGNs (3Eh)).  EXAMPLE <<  /Type  /Example  /Subtype  /DictionaryExample  /Version  0 . 01/IntegerItem  12 /StringItem  ( a string  ) /Subdictionary  << /Item1  0 . 4 /Item2  true  /LastItem  ( not ! ) /VeryLastItem  ( OK )  >>>>",""],"27":["' Adobe Systems Incorporated 2008  All rights reserved 19PDF 32000-1:2008 NOTE Do not confuse the double angle br ackets with single angle brackets (<  and >) (using LESS-THAN SIGN (3Ch)  and GREATER-THAN SIGN (3Eh)), which delimit a hexadecimal string (see  7.3.4.3, \"Hexadecimal Strings\" ). Dictionary objects are the main building blocks of a PD F document. They are commonly used to collect and tie  together the attributes of a complex object, such as a  font or a page of the document, with each entry in the  dictionary specifying the name and valu e of an attribute. By convention, the  Type  entry of such a dictionary, if  present, identifies the type of object th e dictionary describes. In some cases, a  Subtype  entry (sometimes  abbreviated  S) may be used to further identify a specialized su bcategory of the general  type. The value of the  Type  or  Subtype  entry shall always be a name. For example, in a font dictionary, the value of the  Type  entry  shall always be  Font , whereas that of the  Subtype  entry may be  Type1 , TrueType , or one of several other  values.  The value of the  Type  entry can almost always be inferred from cont ext. The value of an entry in a page’s font  resource dictionary, for example, shall be a font object; therefore, the  Type  entry in a font dictionary serves  primarily as documentation and as information for error checking. The  Type  entry shall not be required unless  so stated in its description; however, if the entry is presen t, it shall have the correct value. In addition, the value  of the  Type  entry in any dictionary, even in private data, shall be either a name defined in this standard or a  registered name; see  Annex E  for details.  7.3.8 Stream Objects 7.3.8.1 General A st ream object , like a string object, is a seque nce of bytes. Furthermo re, a stream may be of unlimited length,  whereas a string shall be subject to an implementation limit. For this reason, objects with potentially large  amounts of data, such as images and page descriptions, shall be represented as streams.  NOTE 1 This sub-clause describes only the syntax for writing a  stream as a sequence of bytes. The context in which a  stream is referenced determines what  the sequence of bytes represent.  A stream shall consist of a dictionary followed by  zero or more bytes bracketed between the keywords  stream  (followed by newline) and  endstream : EXAMPLEdictionary stream  Zero or more bytes  endstream All streams shall be indirect objects (see  7.3.10, \"Indirect Objects\" ) and the stream dictionary shall be a direct  object. The keyword  stream  that follows the stream dictionary sh all be followed by an end-of-line marker  consisting of either a CARRIAGE RE TURN and a LINE FEED or just a  LINE FEED, and not by a CARRIAGE  RETURN alone. The sequence  of bytes that make up a stream lie be tween the end-of-line marker following the  stream  keyword and the  endstream  keyword; the stream dictionary specifies the exact number of bytes. There  should be an end-of-line marker after the data and before  endstream ; this marker shall not be included in the  stream length. There shall not be any extra bytes, ot her than white space, between endstream and endobj. Alternatively, beginning with PDF 1.2, the bytes may be cont ained in an external file, in which case the stream  dictionary specifies the file, and any bytes between  stream  and  endstream  shall be ignored by a conforming  reader. NOTE 2 Without the restrictio n against following the keyword  stream  by a CARRIAGE RETURN alone, it would be  impossible to differentiate a stream that uses CARRI AGE RETURN as its end-of-line marker and has a LINE  FEED as its first byte of data from one that us es a CARRIAGE RETURNLINE F EED sequence to denote end- of-line.  Ta b l e  5 lists the entries common to all  stream dictionaries; certain types of streams may have additional  dictionary entries, as indicated  where those streams are described. The optional entries regarding  filters for the  stream indicate whether and how the data in the stre am shall be transformed (decoded) before it is used.  Filters are described further in  7.4, \"Filters.\"",""],"28":["PDF 32000-1:2008 20' Adobe Systems Incorporated 2008  All rights reserved 7.3.8.2 Stream Extent Every stream dictionary shall have a  Length entry that indicates how many bytes of the PDF file are used for  the streams data. (If the stream has a filter,  Length  shall be the number of bytes of  encoded  data.) In addition,  most filters are defined so that the data shall be self-limiting; that is, they use an encoding scheme in which an  explicit end-of-data  (EOD) marker delimits the extent of the data. Finally, streams are used to represent many  objects from whose attributes a length can be inferr ed. All of these constraints shall be consistent.  EXAMPLE An image with 10 rows and 20 columns, using a single colour component and 8 bits per component,  requires exactly 200 bytes of image data. If the st ream uses a filter, there shall be enough bytes of  encoded data in the PDF file to produc e those 200 bytes. An error occurs if  Length  is too small, if an  explicit EOD marker occurs too soon, or if  the decoded data does not contain 200 bytes.  It is also an error if the stream contains too much da ta, with the exception that there may be an extra end-of-line  marker in the PDF file before the keyword  endstream . Table  5   Entries common to all stream dictionaries  Key Type Value Length integer (Required)  The number of bytes from the beginning of the line  following the keyword  stream  to the last byte just before the  keyword endstream . (There may be an additional EOL  marker, preceding  endstream , that is not included in the count  and is not logically part  of the stream data.) See  7.3.8.2, \"Stream Extent\" , for further discussion.  Filter name  or array (Optional)  The name of a filter  that shall be applied in  processing the stream data found between the keywords  stream  and  endstream , or an array of zero, one or several  names. Multiple filters shall be specified in the order in which  they are to be applied.  DecodeParms dictionary  or array(Optional)  A parameter dictionary or an array of such  dictionaries, used by the filters specified by  Filter . If there is  only one filter and that  filter has parameters,  DecodeParms shall be set to the filters parameter dictionary unless all the  filters parameters have their def ault values, in which case the  DecodeParms  entry may be omitted.  If there are multiple  filters and any of t he filters has parameters set to nondefault  values,  DecodeParms  shall be an array with one entry for  each filter: either the parameter  dictionary for that filter, or the  null object if that filter has no  parameters (or if all of its  parameters have their default values). If none of the filters  have parameters, or if all their parameters have default values,  the DecodeParms  entry may be omitted.  Ffile specification (Optional; PDF  1.2) Th e file containing the stream data. If this  entry is present, the bytes between  stream  and  endstream shall be ignored. However, the  Length  entry should still specify  the number of those bytes (usually, there are no bytes and  Length  is 0). The filters that are applied to the file data shall be  specified by  FFilter  and the filter parameters shall be specified  by  FDecodeParms .FFilter name  or array (Optional; PDF  1.2)   The name of a filter to be applied in  processing the data found in the streams external file, or an  array of zero, one or severa l such names. The same rules  apply as for  Filter . FDecodeParms dictionary  or array(Optional; PDF  1.2) A  parameter dictionary, or an array of such  dictionaries, used by t he filters specified by  FFilter . The same  rules apply as for  DecodeParms .",""],"29":["' Adobe Systems Incorporated 2008  All rights reserved 21PDF 32000-1:2008 7.3.9 Null Object The  null object has a type and value that are unequal to those of any other object. There shall be only one  object of type null, denoted by the keyword  null. An indirect object reference (see  7.3.10, \"Indirect Objects\" ) to  a nonexistent object shall be treated the same as a  null object. Specifying the null object as the value of a  dictionary entry ( 7.3.7, \"Dictionary Objects\" ) shall be equivalent to omitting the entry entirely.  7.3.10 Indirect Objects Any object in a PDF file may be labelled as an  indirect object. This gives the object a unique  object identifier by which other objects can refer to it (for example, as an elem ent of an array or as the value of a dictionary entry).  The object identifier shall consist of two parts:   A positive integer  object number . Indirect objects may be numbered s equentially within a PDF file, but this  is not required; object numbers may be assigned in any arbitrary order.   A non-negative integer  generation number . In a newly created file, all indirect objects shall have generation  numbers of 0. Nonzero generation numbers may be in troduced when the file is  later updated; see sub- clauses  7.5.4, \"Cross-Reference Table\"  and  7.5.6, \"Incremental Updates.\" Together, the combination of an object number and a  generation number shall uniquely identify an indirect  object.  The definition of an indirect object in a PDF file  shall consist of its object number and generation number  (separated by white space), followed by the valu e of the object bracketed between the keywords  obj and  endobj . EXAMPLE 1 Indirect object definition 12 0 obj ( Brillig  )endobj Defines an indirect string object with an object num ber of 12, a generation num ber of 0, and the value  Brillig.  The object may be referred to from elsewhere in the file by an  indirect reference.  Such indirect references shall  consist of the object number, the generation number, and the keyword  R (with white space separating each  part): 12 0 RBeginning with PDF 1.5, indirect object s may reside in object streams (see  7.5.7, \"Object Streams\" ). They are  referred to in the same way; however, thei r definition shall not include the keywords  obj and  endobj , and their  generation number shall be zero. DLinteger (Optional; PDF  1.5) A n on-negative integer representing the  number of bytes in the decoded (defiltered) stream. It can be  used to determine, for example, whether enough disk space is  available to write a stream to a file. This value shall be considered a hint only; for some stream  filters, it may not be possible to  determine this value precisely.  Table 5   Entries common to all stream dictionaries (continued) Key Type Value",""],"30":["PDF 32000-1:2008 22' Adobe Systems Incorporated 2008  All rights reserved An indirect reference to an undefined object shall not be co nsidered an error by a conforming reader; it shall be  treated as a reference to the null object.  EXAMPLE 2 If a file contains  the indirect reference 17 0 R but does not contain the corresponding definition then the  indirect reference is considered to refer to the null object.  Except were documented to the contrary any object value may be a direct or an indirect reference; the  semantics are equivalent. EXAMPLE 3 The following shows the use of an indirect objec t to specify the length of a stream. The value of the  streams Length entry is an integer ob ject that follows the stream in the  file. This allows applications that  generate PDF in a single pass to defer specifying the streams length until after its contents have been  generated.  7 0 obj<< /Length  8 0 R >> % An indirect reference to object 8 stream BT/F1  12 Tf72 712 Td( A stream with an indirect length  ) TjETendstreamendobj 8 0 obj77% The length of the preceding stream endobj 7.4 Filters 7.4.1 General Stream filters are introduced in  7.3.8, \"Stream Objects.\"  An option when reading stream data is to decode it  using a filter to produce the original non-encoded data. Whet her to do so and which deco ding filter or filters to  use may be specified in the stream dictionary.  EXAMPLE 1 If a stream dictionary specifies the use of an ASCIIHexDecode filter, an application reading the data in  that stream should transform the ASCII hexadecimal-en coded data in that stream in order to obtain the  original binary data. A conforming writer may encode data in a stream (for exam ple, data for sampled images) to compress it or to  convert it to a portable ASCII representation (or both). A conforming reader shall invoke the corresponding  decoding filter or filters to convert the  information back to  its original form.  The filter or filters for a str eam shall be specified by the  Filter  entry in the streams dictionary (or the  FFilterentry if the stream is external). Filters may be cascaded to form a  pipeline that passes the stream through two  or more decoding transformations in sequence. Fo r example, data encoded using LZW and ASCII base-85  encoding (in that order) shall be decoded using  the following entry in the stream dictionary:  EXAMPLE 2 /Filter  [ /ASCII85Decode /LZWDecode  ]Some filters may take parameters to  control how they operate.  These optional parameters shall be specified by  the  DecodeParms entry in the streams dictionary (or the  FDecodeParms  entry if the stream is external).  PDF supports a standard set of filter s that fall into tw o main categories:  A SCII filters  enable decoding of arbitrary binary data that has been encoded as ASCII text (see  7.2, \"Lexical Conventions,\"  for an explanation of why this ty pe of encoding might be useful).",""],"31":["' Adobe Systems Incorporated 2008  All rights reserved 23PDF 32000-1:2008 Decompression filters  enable decoding of data that has been compressed. The compressed data shall be  in binary format, even if the  original data is ASCII text.  NOTE 1 ASCII filters serve no useful purpose  in a PDF file that is encrypted; see  7.6, Encryption .NOTE 2 Compression is particularly valuable for large sa mpled images, since it reduces storage requirements and  transmission time. Some types of compression are lossy,  meaning that some data is lost during the encoding,  resulting in a loss of quality when the data is decompressed. Compression in which no loss of data occurs is  called lossless. Though someho w obvious it might be worth pointing out that lossy  compression can only be  applied to sampled image da ta (and only certain types of lossy comp ression for certain types of images).  Lossless compression on the other hand c an be used for any kind of stream. The standard filters are summarized in  Ta b l e  6, which also indicates whethe r they accept any optional  parameters. The following sub-clauses describe these filt ers and their parameters (if any) in greater detail,  including specifications  of encoding algorithms for some filters.  EXAMPLE 3 The following example shows a stream, containi ng the marking instructi ons for a page, that was  compressed using the LZW compression method and then encoded in ASCII base-85 representation.  1 0 obj<< /Length  534 /Filter  [ /ASCII85Decode  /LZWDecode  ]>>Table  6   Standard filters   FILTER name Parameters Description ASCIIHexDecode noDecodes data encoded in an ASCII hexadecimal  representation, reproducing the original binary data.  ASCII85Decode noDecodes data encoded in an ASCII base-85 representation,  reproducing the original binary data.  LZWDecode yesDecompresses data encoded using the LZW (Lempel-Ziv- Welch) adaptive compression met hod, reproducing the original  text or binary data.  FlateDecode yes(PDF 1.2)  Decompresses data encoded using the zlib/deflate  compression method, reproducing the original text or binary  data.  RunLengthDecode noDecompresses data encoded using a byte-oriented run-length  encoding algorithm, reproducing the original text or binary data  (typically monochrome image data,  or any data that contains  frequent long runs of a single byte value).  CCITTFaxDecode yesDecompresses data encoded using the CCITT facsimile  standard, reproducing the original data (typically monochrome  image data at 1 bit per pixel).  JBIG2Decode yes(PDF 1.4)  Decompresses data encoded using the JBIG2  standard, reproducing the original monochrome (1 bit per pixel)  image data (or an approximation of that data).  DCTDecode yesDecompresses data encoded using a DCT (discrete cosine  transform) technique based on the JPEG standard,  reproducing image sample data t hat approximates the original  data.  JPXDecodeno(PDF 1.5)  Decompresses data encoded using the wavelet- based JPEG2000 standard, repr oducing the original image  data. Crypt yes(PDF 1.5) Decrypts data encrypted  by a security handler,  reproducing the data as it was before encryption.",""],"32":["PDF 32000-1:2008 24' Adobe Systems Incorporated 2008  All rights reserved stream J..)6T‘?p&<!J9%_[umg\"B7/ Z7KNXbN’S+,*Q/&\"OLT’FLIDK#!n‘$\"<Atdi‘\\Vn%b%)&’cA*VnK\\CJY(sF>c!Jnl@ RM]WM;jjH6Gnc75idkL5]+cPZKEBPWdR>FF(kj1_R%W_d &/jS!;iuad7h?[L-F$+]]0A3C k*$I0KZ?;<)CJtqi65Xb Vc3\\n5ua:Q/=0$W<#N3U;H, MQKqfg1?:lUpR;6oN[C2E4 ZNr8Udn.’p+?#X+1>0Kuk$bCDF/(3fL5]Oq)^kJZ!C2H1 ’TO]Rl?Q:&’<5&iP!$Rq;BXRecDN[IJB‘,)o8XJOSJ9sD S]hQ;Rj@!ND)bD_q&C\\g:inYC%)&u#:u,M6Bm%IY!Kb1+ \":aAa’S‘ViJglLb8<W9k6Yl\\\\0McJQkDeLWdPN?9A’jX* al>iG1p&i;eVoK&juJHs9%;Xomop\"5KatWRT\"JQ#qYuL, JD?M$0QP)lKn06l1apKDC@\\qJ4B!!(5m+j.7F790m(Vj8 8l8Q:_CZ(Gm1%X\\N1&u!FKHMB~> endstreamendobj EXAMPLE 4 The following shows the same  stream without any filters applied to it. (The streams contents are  explained in  7.8.2, \"Content Streams,\"  and the operators used there ar e further described in clause  9,  \"Text\" .)1 0 obj<< /Length  568  >>stream 2 JBT/F1  12 Tf0 Tc0 Tw72.5 712  TD[ ( Unfiltered streams can be read easily  ) 65 ( , ) ] TJ0 -14 TD[ ( b ) 20 ( ut generally tak  ) 10 ( e more space than \\311  ) ] TJT*","( compressed streams . ) Tj0 -28 TD[ ( Se ) 25 ( v ) 15 ( eral encoding methods are a  ) 20 ( v) 25 ( ailable in PDF  ) 80 ( . ) ] TJ0 -14 TD( Some are used for compression and others simply  ) TjT* [ ( to represent binary data in an )  55 ( ASCII format . ) ] TJT* ( Some of the compression filters are \\ suitable )  TjT* ( for both data and images  , while others are \\ suitable only )  TjT* ( for continuous-tone images  . )","TjETendstreamendobj 7.4.2 ASCIIHexDecode Filter The  ASCIIHexDecode  filter decodes data that has been enc oded in ASCII hexadecimal form. ASCII  hexadecimal encoding and ASCII base-85 encoding ( 7.4.3, \"ASCII85Decode Filter\" ) convert binary data, such  as image data or previously compressed data, to 7-bit ASCII characters.  NOTE ASCII base-85 encoding is preferred to ASCII hexade cimal encoding. Base-85 encoding is preferred because  it is more compact: it expands the data by a factor of 4  : 5, compared with 1  : 2 for ASCII hexadecimal encoding. The  ASCIIHexDecode  filter shall produce one byte of binary data for each pair of ASCII hexadecimal digits  (09 and AF or af). All white-space characters (see  7.2, \"Lexical Conventions\" ) shall be ignored. A  GREATER-THAN SIGN (3Eh) indicates EO D. Any other characters shall cause  an error. If the filter encounters  the EOD marker after reading an odd number of hexadecimal  digits, it shall behave as if a 0 (zero) followed the  last digit.",""],"33":["' Adobe Systems Incorporated 2008  All rights reserved 25PDF 32000-1:2008 7.4.3 ASCII85Decode Filter The  ASCII85Decode  filter decodes data that has been encod ed in ASCII base-85 encoding and produces  binary data. The following paragraphs describe the process for encoding binary data in ASCII base-85; the  ASCII85Decode  filter reverses this process.  The ASCII base-85 encoding shall use the ASCII characters ! through u ((21h) - (75h)) and the character z  (7Ah), with the 2-character sequence ~> (7Eh)(3Eh) as its EOD marker. The  ASCII85Decode  filter shall ignore all white-space characters (see  7.2, \"Lexical Conventions\" ). Any other characters, and any character  sequences that represent impossible combinations  in the ASCII base-85 encoding shall cause an error.  Specifically, ASCII base-85 encoding shall produce 5 ASC II characters for every 4 bytes of binary data. Each  group of 4 binary input bytes, ( b1 b2 b3 b4 ), shall be converted to a group of 5 output bytes, ( c1 c2 c3 c4 c5 ), using the relation  In other words, 4 bytes of binary data shall be interpre ted as a base-256 number and then shall be converted to  a base-85 number. The five bytes of the base-85 number  shall then be converted to ASCII characters by  adding 33 (the ASCII code for the character !  ) to each. The resulting encoded data shall contain only printable  ASCII characters with codes in the range 33 (!) to 117 (u).  As a special case, if all five  bytes are 0, they shall be  represented by the character with code 122  (z) instead of by five exclamation points (  ! ! ! ! ! ). If the length of the data to be encoded is not a multiple  of 4 bytes, the last, partial group of 4 shall be used to  produce a last, partial group of 5 output characters. Given  n (1, 2, or 3) bytes of binary data, the encoder shall  first append 4  - n zer o bytes to make a complete group of 4. It shall encode this group in the usual way, but  shall not apply the special z case. Fi nally, it shall write only the first  n + 1 characters of the resulting group of 5.  These characters shall be immediately followed by the ~> EOD marker.  The following conditions shall never occur  in a correctly encoded byte sequence:   The value represented by a group of 5 characters is greater than 2 32 - 1.   A z character occurs in the middle of a group.   A final partial group contains only one character.  7.4.4 LZWDecode and FlateDecode Filters 7.4.4.1 General The  LZ WDecode  and ( PDF 1.2) FlateDecode  filters have much in common and are discussed together in this  sub-clause. They decode data that has been encoded using the LZW or Flate data compression method,  respectively:   LZW (Lempel-Ziv-Welch) is a variable-length, adapti ve compression method that has been adopted as one  of the standard compression methods in the  Tag Image File Format  (TIFF) standard. For details on LZW  encoding see  7.4.4.2, \"Details of LZW Encoding.\"   The Flate method is based on the public-domain z lib/deflate compression meth od, which is a variable- length Lempel-Ziv adaptive compression method ca scaded with adaptive Huffman coding. It is fully  defined in Internet RFCs 1950,  ZLIB Compressed Data Format Sp ecification, and 1951, DEFLATE  Compressed Data Format Specification (see the  Bibliography ).","b1256 3ub2256 2ub3256 1ub4+++ =c1854uc2853uc3852uc4851uc++++",""],"34":["PDF 32000-1:2008 26' Adobe Systems Incorporated 2008  All rights reserved Both of these methods compress either binary data or  ASCII text but (like all  compression me thods) always produce binary data, even if the original data was text.  The LZW and Flate compression methods can discover and exploit many patterns in the input data, whether  the data is text or images. As described later,  both filters support optional transformation by a  predictor  function , which improves the compression of sampled image data.  NOTE 1 Because of its cascaded adaptive Huffman coding, Fl ate-encoded output is usually much more compact than  LZW-encoded output for the same input. Flate and LZ W decoding speeds are comparable, but Flate encoding  is considerably slower than LZW encoding.  NOTE 2 Usually, both Flate and LZW encodings compress thei r input substantially. However, in the worst case (in  which no pair of adjacent bytes appea rs twice), Flate encoding expands its  input by no more than 11 bytes or a  factor of 1.003 (whichever is larger ), plus the effects of algorithm t ags added by PNG predictors. For LZW  encoding, the best case (all zeros) provides a compression approaching 1365  : 1 for long files, but the worst- case expansion is at least a factor of 1.125, which ca n increase to nearly 1.5 in some implementations, plus  the effects of PNG tags as with Flate encoding.  7.4.4.2 Details of LZW Encoding Data encoded using the LZW compression method shall cons ist of a sequence of codes that are 9 to 12 bits  long. Each code shall represent a single character of input data (0255), a clear-table marker (256), an EOD  marker (257), or a table entry representing a mult iple-character sequence that has been encountered  previously in the input (258 or greater).  Initially, the code length shall be 9 bits and the LZW table shall contain only entries for the 258 fixed codes. As  encoding proceeds, entries s hall be appended to the table, associating new codes with longer and longer  sequences of input characters. The encoder and the dec oder shall maintain identica l copies of this table.  Whenever both the encoder and the decoder independently  (but synchronously) realize that the current code  length is no longer sufficient to represent the number of entries in the table, they shall increase the number of  bits per code by 1. The first output code that is 10 bits  long shall be the one following the creation of table entry  511, and similarly for 11 (1023) and 12 (2047) bits. Codes shall never be longer than 12 bits; therefore, entry  4095 is the last entry of the LZW table.  The encoder shall execute the following sequence  of steps to generate each output code:  a) Accumulate a sequence of one or more input characters matchin g a sequence alre ady present in the table.  For maximum compression, the encoder looks for the longest such sequence.  b) Emit the code corresponding to that sequence.  c) Create a new table entry for the first unused code. Its value is the sequence found in  step (a) followed by  the next input character.  EXAMPLE 1 Suppose the input consists of the  following sequence of ASCII character codes:  45 45 45 45 45 65 45 45 45 66Starting with an empty table, the encoder proceeds as shown in  Table  7. Table  7   Typical LZW encoding sequence   Input sequence Output code Code added to table Sequence  represented by new code 256 (clear-table) 4545258 45 4545 45258 259 45 45 45",""],"35":["' Adobe Systems Incorporated 2008  All rights reserved 27PDF 32000-1:2008 Codes shall be packed into a continuous bit stream, high-ord er bit first. This stream shall then be divided into  bytes, high-order bit first. Thus, codes may straddle by te boundaries arbitrarily. After the EOD marker (code  value 257), any leftover bits in th e final byte shall be set to 0.  In the example above, all the output codes are 9 bits long ; they would pack into bytes as follows (represented in  hexadecimal):  EXAMPLE 2 80  0B 60 50 22 0C 0C 85 01To adapt to changing input sequences, the encoder ma y at any point issue a clear-table code, which causes  both the encoder and the decoder to restart with initial tables and a 9-bit code length. The encoder shall begin  by issuing a clear-table code. It shall issue a clear-table  code when the table becomes full; it may do so sooner.  7.4.4.3 LZWDecode and FlateDecode Parameters The  L ZWDecode  and  FlateDecode  filters shall accept optional paramete rs to control the decoding process.  NOTE Most of these parameters are related to technique s that reduce the size of compressed sampled images  (rectangular arrays of colour values, described in  8.9, \"Images\" ). For example, image data typically changes  very little from sample to sample. Therefore, subtract ing the values of adjacent samples (a process called  differencing), and encoding the differences rather than the raw sample values, can reduce the size of the  output data. Furthermore, when th e image data contains several colour components (red-green-blue or cyan- magenta-yellow-black) per sample, taking the differenc e between the values of corresponding components in  adjacent samples, rather than between different colour components in the same sample, often reduces the  output data size.  Ta b l e  8 shows the parameters that may optionally be specified for  LZWDecode  and  FlateDecode  filters. Except where otherwise noted, all values supplied to the decoding filter for any optional parameters shall match  those used when the data was encoded.  45 45258 260 45 45 656565261 65 4545 45 45259 262 45 45 45 666666257 (EOD) Table  8   Optional parameters for LZWDecode and FlateDecode filters   Key Type Value Predictorinteger A code that selects the predictor algori thm, if any. If the value of this  entry is  1, the filter shall assume that  the normal algorithm was used to  encode the data, without prediction. If  the value is greater than 1, the  filter shall assume that the data  was differenced before being encoded,  and  Predictor selects the predictor algorithm. For more information  regarding Predictor values greater than  1, see  7.4.4.4, \"LZW and  Flate Predictor Functions.\"  Default value: 1.  Colorsinteger (May be used only if  Predictor is greater than 1) The number of  interleaved colour components per sample. Valid values are 1 to 4  (PDF 1.0 ) and 1 or greater ( PDF 1.3). Default value: 1.  Table 7   Typical LZW encoding sequence  (continued) Input sequence Output code Code added to table Sequence  represented by new code",""],"36":["PDF 32000-1:2008 28' Adobe Systems Incorporated 2008  All rights reserved 7.4.4.4 LZW and Flate Predictor Functions LZW and Flate encoding compress more compactly if  their input data is highly predictable. One way of  increasing the predictability of many  continuous-tone sampled images is  to replace each sample with the  difference between that sample and a predictor function  applied to earlier neighboring samples. If the predictor  function works well, the postprediction data clusters toward 0.  PDF supports two groups of predi ctor functions. The first, the  TIFF  group, consists of the si ngle function that is  Predictor 2 in the TIFF 6.0 specification.  NOTE 1 (In the TIFF 6.0 specification,  Predictor 2 applies only to LZW compression, but here it applies to Flate  compression as well.) TIFF Predictor 2 predicts that eac h colour component of a sample is the same as the  corresponding colour component of th e sample immediat ely to its left. The second supported group of  predictor functions, the  PNG group, consists of the filters of the World Wide  Web Consortiums Portable Network Graphics recommend ation, documented in Internet RFC 2083, PNG  (Portable Network Graphics) Specification (see the  Bibliography ).The term predictors is used here inst ead of filters to avoid confusion. There are five basic PNG predictor algorithms (and a sixth that chooses the optimum predictor function  separately for each row). The predictor algorithm to be used, if any, shall be indicated by the  Predictor  filter parameter (see  Ta b l e  8), whose value shall be one of those listed in  Table  10. BitsPerComponent integer (May be used only if  Predictor is greater than 1)  The number of bits  used to represent each colour component in a sample. Valid values  are 1, 2, 4, 8, and ( PDF 1.5) 16. Default value:  8.Columns integer (May be used only if  Predictor is greater than 1) The number of  samples in each row. Default value: 1.  EarlyChange integer (L ZWDecode  only)  An indication of when to increase the code length.  If the value of this entry is 0, co de length increases shall be postponed  as long as possible. If the value is 1, code length increases shall occur  one code early. This parameter is included because LZW sample code  distributed by some vendors increases the code length one code  earlier than necessary. Default value: 1.  Table  9   PNG predictor algorithms   PNG Predictor AlgorithmsDescription None No prediction SubPredicts the same as the sample to the left  UpPredicts the same as the sample above Average Predicts the average of the  sample to the left and the  sample above PaethA nonlinear function of the sample above, the sample  to the left, and the sample to the upper left  Table 8   Optional parameters for LZWDecode and FlateDecode filters  (continued) Key Type Value",""],"37":["' Adobe Systems Incorporated 2008  All rights reserved 29PDF 32000-1:2008 For  LZWDecode  and  FlateDecode , a Predictor value greater than or equal to 10 shall indicate that a PNG  predictor is in use; the specific pr edictor function used shall be explicitly encoded in the incoming data. The  value of  Predictor supplied by the decoding filter need not match the value used when the data was encoded if  they are both greater than or equal to 10.  The two groups of predictor functions have some  commonalities. Both make  the following assumptions:   Data shall be presented in order, from the top row to the bottom row and, within a row, from left to right.   A row shall occupy a whole number of bytes, rounded up if necessary.   Samples and their components shall be packed into bytes from high-order to low-order bits.   All colour components of samples outside the image (which are necessary for predictions near the  boundaries) shall be 0.  The predictor function groups also differ in significant ways:   The postprediction data for each PNG-predicted row s hall begin with an explicit  algorithm tag; therefore,  different rows can be predicted with different algorit hms to improve compression. TIFF Predictor 2 has no  such identifier; the same algorithm applies to all rows.   The TIFF function group shall predict each colour co mponent from the prior instance of that component,  taking into account the number of bits per component and components per sample. In contrast, the PNG  function group shall predict each byte of data as a function of the corresponding byte of one or more  previous image samples, regardless of whether there ar e multiple colour components in a byte or whether  a single colour componen t spans multiple bytes.  NOTE 2 This can yield significantly  better speed at the cost of somewhat worse compression.  7.4.5 RunLengthDecode Filter The  Ru nLengthDecode  filter decodes data that has been encoded in  a simple byte-oriented format based on  run length. The encoded data shall be a sequence of  runs , where each run shall consist of a  length byte  followed by 1 to 128 bytes of data. If the  length  byte is in the range 0 to 127, the following  length + 1 (1 to 128)  bytes shall be copied literally  during decompression. If  length is in the range 129 to 255, the following single  byte shall be copied 257  - length  (2 to 128) times during decompression. A  length  value of 128 shall denote  EOD. Table  10   Predictor values   Value Meaning1No prediction (the default value) 2TIFF Predictor 2 10PNG prediction (on encoding, PNG None on all rows) 11PNG prediction (on encoding, PNG Sub on all rows) 12PNG prediction (on encoding, PNG Up on all rows) 13PNG prediction (on encoding, PNG Average on all rows) 14PNG prediction (on encoding, PNG Paeth on all rows) 15PNG prediction (on encoding, PNG optimum)",""],"38":["PDF 32000-1:2008 30' Adobe Systems Incorporated 2008  All rights reserved NOTE The compression achieved by run-length encoding depend s on the input data. In the best case (all zeros), a  compression of approximately 64  : 1 is achieved for long files. The worst case (the hexadecimal sequence 00  alternating with FF) results in an expansion of 127  : 128.  7.4.6 CCITTFaxDecode Filter The  CCIT TFaxDecode  filter decodes image data that has been encoded using either Group 3 or Group 4  CCITT facsimile (fax) encoding.  NOTE 1 CCITT encoding is designed to achieve efficient co mpression of monochrome (1 bit per pixel) image data at  relatively low resolutions, and so is  useful only for bitmap image data, not  for colour images,  grayscale images, or general data.  NOTE 2 The CCITT encoding standard is defined by the Inte rnational Telecommunications Union (ITU), formerly known  as the ComitØ Consultatif International TØlØphonique  et TØlØgraphique (International Coordinating Committee  for Telephony and Telegraphy). The encoding algorithm is  not described in detail in this standard but can be  found in ITU Recommendations T.4 and T.6 (see the  Bibliography ). For historical reason s, we refer to these documents as the CCITT standard.  CCITT encoding is bit-oriented, not byte-oriented. Theref ore, in principle, encoded or decoded data need not  end at a byte boundary. This problem shall be dealt with in the following ways:   Unencoded data shall be treated as complete scan lines , with unused bits inserted at the end of each scan  line to fill out the last by te. This approach is compatible with th e PDF convention for sampled image data.   Encoded data shall ordinarily be treated as a continuous, unbroken bit stream. The  EncodedByteAlign parameter (described in  Ta b l e  11) may be used to cause each encoded  scan line to be filled to a byte  boundary.  NOTE 3 Although this is not prescri bed by the CCITT standard and fax machines never do this, some software  packages find it convenient to encode data this way.  When a filter reaches EOD, it shall always skip  to the next byte boundary following the encoded data.  The filter shall not perform any error correction  or resynchronization, except as noted for the  DamagedRowsBeforeError  parameter in  Ta b l e  11. Ta b l e  11 lists the optional parameters that may be used to control the decoding. Except where noted otherwise,  all values supplied to the decoding filter by any of th ese parameters shall match those used when the data was  encoded.  Table  11   Optional parameters for the CCITTFaxDecode filter   Key Type Value Kinteger A code identifying the encoding scheme used:  0 Pure two-dimensional encoding (Group 4)   0 Pure one-dimensional encoding (Group 3, 1-D)  ! 0 Mixed one- and two-dimensional encoding (Group 3,  2-D), in which a line encoded one-dimensionally may  be followed by at most  K  1 lines encoded two- dimensionally  The filter shall distinguish  among negative, zero, and positive  values of  K to determine how to interpret the encoded data;  however, it shall not distinguish between different positive  Kvalues. Default value: 0.",""],"39":["' Adobe Systems Incorporated 2008  All rights reserved 31PDF 32000-1:2008 NOTE 4 The compression achieved using CCITT encoding depends on the data, as well as on the value of various  optional parameters. For Group 3 one-dimensional encoding, in the best case (all zeros), each scan line  compresses to 4 bytes, and the compression factor depen ds on the length of a scan line. If the scan line is 300  bytes long, a compression ratio of approximately 75  : 1 is achieved. The worst case, an image of alternating  ones and zeros, produces an expansion of 2  : 9. 7.4.7 JBIG2Decode Filter The  JB IG2Decode  filter  (PDF 1.4) decodes monochrome (1 bit per pixel) image data that has been encoded  using JBIG2 encoding.  NOTE 1 JBIG stands for the Joint Bi-Level Image Experts Grou p, a group within the International Organization for  Standardization (ISO) that developed the format. JBIG2 is th e second version of a standard originally released  as JBIG1.  JBIG2 encoding, which provides for both lossy and lossless compression, is useful  only for monochrome images, not for colour images, grayscale images, or general  data. The algorithms used by the encoder, and  EndOfLineboolean A flag indicating whether end-of-line bit patterns shall be  present in the encoding. The  CCITTFaxDecode  filter shall  always accept end-of-line bit patterns. If EndOfLine is  trueend-of-line bit patterns shall be present.Default value:  false. EncodedByteAlign boolean A flag indicating whether the filter shall expect extra 0 bits  before each encoded line so that the line begins on a byte  boundary. If  true , the filter shall skip over encoded bits to  begin decoding each line at a byte boundary. If  false, the filter  shall not expect extra bits in the encoded representation.  Default value:  false. Columnsinteger The width of the image in pixels. If the value is not a multiple  of 8, the filter shall adjust the width of the unencoded image  to the next multiple of 8 so  that each line starts on a byte  boundary. Default value: 1728. Rowsinteger The height of the image in scan lines. If the value is 0 or  absent, the images height is  not predetermined, and the  encoded data shall be terminated by an end-of-block bit  pattern or by the end of the filt ers data. Default value: 0.  EndOfBlockboolean A flag indicating whether the f ilter shall expect the encoded  data to be terminated by an end-of-block pattern, overriding  the Rows  parameter. If  false, the filter shall stop when it has  decoded the number of lines indicated by  Rows or when its  data has been exhausted, whichever occurs first. The end-of- block pattern shall be the CCITT end-of-facsimile-block  (EOFB) or return-to-contro l (RTC) appropriate for the  Kparameter. Default value:  true. BlackIs1 boolean A flag indicating whether 1 bits shall be interpreted as black  pixels and 0 bits as white pixels, the reverse of the normal  PDF convention for image data. Default value:  false. DamagedRowsBeforeError integer The number of damaged rows of  data that shall be tolerated  before an error occurs. This entry shall apply only if  EndOfLine is true  and  K is non-negative. Tolerating a  damaged row shall mean locating its end in the encoded data  by searching for an  EndOfLine  pattern and then substituting  decoded data from the previous  row if the previous row was  not damaged, or a white scan  line if the previous row was  also damaged. Default value: 0.  Table 11   Optional parameters for the CCITTFaxDecode filter  (continued) Key Type Value",""],"40":["PDF 32000-1:2008 32' Adobe Systems Incorporated 2008  All rights reserved the details of the format, are not described here. See  ISO/IEC 11544 published standard for the current JBIG2  specification. Additional informatio n can be found through the Web site  for the JBIG and JPEG (Joint  Photographic Experts Gr oup) committees at <  http://www.jpeg.org  >. In general, JBIG2 provides considerably better compre ssion than the existing CCITT standard (discussed in  7.4.6, \"CCITTFaxDecode Filter\" ). The compression it achieves depends  strongly on the nature of the image.  Images of pages containing text in any language compress  particularly well, with typical compression ratios of  20:1 to 50:1 for a page full of text. The JBIG2 encoder shall build a table of unique symbol  bitmaps found in the image, and other symbols found  later in the image shall be matched against the table. Ma tching symbols shall be replaced by an index into the  table, and symbols that fail to match shall be added to  the table. The table itself shall be compressed using  other means.  NOTE 2 This method results in high compression ratios for documents in which the same symbol is repeated often, as  is typical for images created by scanning text pages. It al so results in high compression of white space in the  image, which does not need to be encoded because it contains no symbols.  While best compression is achieved for images of te xt, the JBIG2 standard also includes algorithms for  compressing regions of an image that contain di thered halftone images (for  example, photographs). The JBIG2 compression method may also be used for enc oding multiple images into a single JBIG2 bit stream. NOTE 3 Typically, these images are scanned pages of a multiple-page document. Since a single table of symbol  bitmaps is used to match symbols across multiple pages, this type of encoding can result in higher  compression ratios than if each of the pages had been individually encoded using JBIG2. In general, an image may be specified in PDF as either an  image XObject  or an  inline image (as described in  8.9, \"Images\" ); however, the  JBIG2Decode  filter shall not be used with inline images. This filter addresses both single-page and multiple-pa ge JBIG2 bit streams by representing each JBIG2 page  as a PDF image, as follows:   The filter shall use the embedded file organization of JB IG2. (The details of this and the other types of file  organization are provided in an annex of the ISO specification.) The optional 2-byte combination (marker)  mentioned in the specification shall not be used in  PDF. JBIG2 bit streams in random-access organization  should be converted to the embedded file organization . Bit streams in sequential organization need no  reorganization, except for the mappings described below.   The JBIG2 file header, end-of-page segments, and en d-of-file segment shall not be used in PDF. These  should be removed before the PDF objects described below are created.   The image XObject to which the  JBIG2Decode  filter is applied shall contain all segments that are  associated with the JBIG2 page repr esented by that image; that is , all segments whose segment page  association field contains the page number of the  JBIG2 page represented by the image. In the image  XObject, however, the segments page number should  always be 1; that is, when each such segment is  written to the XObject, the value of its segment  page association field should be set to 1.   If the bit stream contains global segments (segments whose segment page association field contains 0),  these segments shall be placed in a separate  PDF stream, and the filter parameter listed in  Ta b l e  12should refer to that stream. The stream can be  shared by multiple image XObjects whose JBIG2  encodings use the same global segments.  Table  12   Optional parameter for  the JBIG2Decode filter   Key Type Value JBIG2Globals streamA stream containing the JBIG2 global (page 0) segments. Global  segments shall be placed in this stream even if only a single JBIG2  image XObject refers to it.",""],"41":["' Adobe Systems Incorporated 2008  All rights reserved 33PDF 32000-1:2008 EXAMPLE 1 The following shows an image that was comp ressed using the JBIG2 compression method and then  encoded in ASCII hexadecimal repres entation. Since the JBIG2 bit stre am contains global segments,  these segments are placed in a separate PDF stream,  as indicated by the JBIG2Globals filter parameter. 5 0 obj<< /Type  /XObject /Subtype /Image/Width  52 /Height  66/ColorSpace  /DeviceGray /BitsPerComponent  1 /Length  224  /Filter [ /ASCIIHexDecode  /JBIG2Decode  ] /DecodeParms  [ null  << /JBIG2Globals  6 0 R >> ]>>stream 000000013000010000001300000034000000420000000000 00000040000000000002062000010000001e000000340000 004200000000000000000200100000000231db51ce51ffac  >endstreamendobj 6 0 obj<< /Length  126  /Filter /ASCIIHexDecode >>stream 0000000000010000000032000003fffdff02fefefe000000 01000000012ae225aea9a5a538b4d9999c5c8e56ef0f872 7f2b53d4e37ef795cc5506dffac  >endstreamendobj The JBIG2 bit stream for this example is as follows:  EXAMPLE 2 97  4A 42 32 0D 0A 1A","0A 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00 3200 00 03 FF FD FF 02 FE FE FE 00 00 00 01 00 00 00 01 2A E2 25 AE A9 A5A5 38 B4 D9 99 9C 5C 8E 56 EF 0F 87 27 F2 B5 3D 4E 37 EF 79 5C C5 50 6DFF AC","00 00 00 01 30 00 01 00 00 00 13 00 00 00 34 00 00 00 42 00 00 0000 00 00 00 00 40 00 00 00 00 00 02 06 20 00 01 00 00 00 1E 00 00 00 3400 00 00 42 00 00 00 00 00 00 00 00 02 00 10 00 00 00 02 31 DB","51 CE 51FF AC 00 00 00 03 31 00 01 00 00 00 00 00 00 00 04 33 01 00 00 00 00This bit stream is made up of the following parts (in the order listed):  a) The JBIG2 file header  97 4A 42 32 0D 0A 1A 0A 01 00 00 00 01Since the JBIG2 file header shall not used in PDF, this  header is not placed in the JBIG2 stream object and  is discarded.  b) The first JBIG2 segment (segment 0)in this case, the symbol dictionary segment  00 00 00 00 00 01 00 00 00 00 32 00 00 03 FF FD FF 02 FE FE FE 00 00 00","01 00 00 00 01 2A E2 25 AE A9 A5 A5 38 B4 D9 99 9C 5C 8E 56 EF 0F 8727 F2 B5 3D 4E 37 EF 79 5C C5 50 6D FF ACThis is a global segment (segment page association  = 0) and so shall be placed in the  JBIG2Globals stream.",""],"42":["PDF 32000-1:2008 34' Adobe Systems Incorporated 2008  All rights reserved c) The page information segment  00 00 00 01 30 00 01 00 00 00 13 00 00 00 34 00 00 00 42 00 00 00 0000 00 00 00 40 00 00and the immediate text region segment  00 00 00 02 06 20 00 01 00 00 00 1E 00 00 00 34 00 00 00 42 00 00 0000 00 00 00 00 02 00 10 00 00","00 02 31 DB 51 CE 51 FF ACThese two segments constitute the contents of the  JBIG2 page and shall be placed in the PDF XObject  representing this image.  d) The end-of-page segment  00 00 00 03 31 00 01 00 00 00 00and the end-of-file segment 00 00 00 04 33 01 00 00 00 00Since these segments shall not be  used in PDF, they are discarded.  The resulting PDF image object, then, contains the pa ge information segment and th e immediate text region  segment and refers to a  JBIG2Globals  stream that contains the  symbol dictionary segment.  7.4.8 DCTDecode Filter The  DCTD ecode  filter decodes grayscale  or colour image data that has  been encoded in the JPEG baseline  format. See Adobe Technical Note #5116 for additional information about the use of JPEG markers. NOTE 1 JPEG stands for the Joint Photographic Experts Group, a group within the Inte rnational Organization for  Standardization that developed the format; DCT stands fo r discrete cosine transform, the primary technique  used in the encoding. JPEG encoding is a lossy compression method, designed  specifically for compression of sampled continuous- tone images and not for general data compression.  Data to be encoded using JPEG shall consist of a stream  of image samples, each consis ting of one, two, three,  or four colour components. The colour component values  for a particular sample shall appear consecutively.  Each component value shall occupy a byte.  During encoding, several parameters shall control the algorithm and the information loss. The values of these  parameters, which include the dimensions of the image  and the number of components per sample, are entirely  under the control of the encoder and shall be stored in the encoded data.  DCTDecode  may obtain the  parameter values it requires directly from the encoded data. However, in one instance, the parameter need not  be present in the encoded data but shall be spec ified in the filter pa rameter dictionary; see  Table  13. NOTE 2 The details of the encoding algorithm are not pres ented here but are in the ISO standard and in JPEG: Still  Image Data Compression Standard, by Pennebaker and Mitchell (see the  Bibliography ). Briefly, the JPEG  algorithm breaks an image  up into blocks that are 8 samples wide by  8 samples high. Each colour component in an image is treated separately. A two-dimensional DCT  is performed on each block. This operation produces  64 coefficients, which are then quantized. Each coefficient  may be quantized with a different step size. It is this  quantization that results in the loss  of information in the JPEG algorithm . The quantized coefficients are then  compressed.",""],"43":["' Adobe Systems Incorporated 2008  All rights reserved 35PDF 32000-1:2008 NOTE 3 The encoding algorithm can reduce the information loss  by making the step size in  the quantization smaller at  the expense of reducing the amount of compression achi eved by the algorithm. The compression achieved by  the JPEG algorithm depends on the image being compre ssed and the amount of loss that is acceptable. In  general, a compression of 15  : 1 can be achieved without perceptible loss of information, and 30  : 1 compression causes little impairment of the image.  NOTE 4 Better compression is often possib le for colour spaces that treat luminance and chrominance separately than  for those that do not. The RGB-to-YUV conversion provid ed by the filters is one atte mpt to separate luminance  and chrominance; it conforms to CCIR recommendation  601-1. Other colour spaces, such as the CIE 1976  L*a*b* space, may also achieve this objective. The chrominance components can then be compressed more  than the luminance by using coarser sampling or  quantization, with no degradation in quality.  In addition to the baseline JPEG format, beginning with PDF 1.3, the  DCTDecode  filter shall support the  progressive JPEG extension. This exte nsion does not add any entries to the  DCTDecode parameter  dictionary; the distinction between baseline and progressi ve JPEG shall be represented in the encoded data.  NOTE 5 There is no benefit to using progressive JPEG for  stream data that is embedded in a PDF file. Decoding  progressive JPEG is slower and consumes more memory  than baseline JPEG. The purpose of this feature is  to enable a stream to refer to an external file whose  data happens to be already encoded in progressive JPEG.  7.4.9 JPXDecode Filter The  JPXDecode filter  (PDF 1.5)  decodes data that has been encoded using the JPEG2000 compression  method, an ISO standard for the compression and packaging of image data.  NOTE 1 JPEG2000 defines a wavelet-based method for image  compression that gives some what better size reduction  than other methods such as regular  JPEG or CCITT. Although the filter  can reproduce samples that are  losslessly compressed. Table  13   Optional parameter fo r the DCTDecode filter   Key Type Value ColorTransform integer (Optional) A code specifying the transformation that shall be  performed on the sample values:  0 No transformation.  1  If the image has three colour components,  RGB values shall be  transformed to  YUV  before encoding and from  YUV to RGB after  decoding. If the image has four components,  CMYK values shall  be transformed to  YUVK before encoding and from  YUVK to CMYK  after decoding. This option shall be ignored if the image has  one or two colour components. If the encoding algorithm has inserted the Adobe-defined marker acode in the encoded data indicating the ColorTransform value, then  the colours shall be transformed,  or not, after the DCT decoding has  been performed according to the value provided in the encoded data  and the value of this dictionary entry shall be ignored. If the Adobe- defined marker code in the encoded data indicating the  ColorTransform value is not present then the value specified in this  dictionary entry will be used. If the Adobe-defined marker code in the  encoded data indicating the ColorTransform value is not present and  this dictionary entry is not presen t in the filter dictionary then the  default value of ColorTransform shall be 1 if the image has three  components and 0 otherwise. aParameters that control the decoding process as well  as other metadata is embedded within the encoded data  stream using a notation referred to as markers. When it  defined the use of JPEG images within PostScript data  streams, Adobe System Incorporated defined a particular  set of rules pertaining to which markers are to be  recognized, which are to be ignored and which are consid ered errors. A specific Adob e-defined marker was also  introduced. The exact rules for produc ing and consuming DCT encoded data within PostScript are provide in  Adobe Technical Note #5116 (reference). PDF DCT Encodi ng shall exactly follow those rules established by  Adobe for PostScript.",""],"44":["PDF 32000-1:2008 36' Adobe Systems Incorporated 2008  All rights reserved This filter shall only be  applied to image XObjects, and not to inline images (see  8.9, \"Images\" ). It is suitable  both for images that have a single colour component a nd for those that have multiple colour components. The  colour components in an image may have different numbers of bits per sample. Any value from 1 to 38 shall be  allowed.NOTE 2 From a single JPEG2000 data stream, multiple  versions of an image may be decoded. These different  versions form progressions along four degrees of  freedom: sampling resolution , colour depth, band, and  location. For example, with a resolution progression, a  thumbnail version of the image may be decoded from  the data, followed by a sequence of other versions of  the image, each with approxim ately four times as many  samples (twice the width times twice the height) as the pr evious one. The last version is the full-resolution  image. NOTE 3 Viewing and printing applications may gain performanc e benefits by using the resolution progression. If the  full-resolution image is densely sampled, the applicat ion may be able to select and decode only the data  making up a lower-resolution version, thereby spendin g less time decoding. Fewer bytes need be processed, a  particular benefit when viewing files  over the Web. The tiling structure of the image may also provide benefits if  only certain areas of an image need to be displayed or printed. NOTE 4 Information on these progressions is encoded in the  data; no decode parameters are needed to describe them.  The decoder deals with any progressions it encounters to deliver the correct image data. Progressions that are  of no interest may simply have performance consequences.  The JPEG2000 specifications define two widely used fo rmats, JP2 and JPX, for packaging the compressed  image data. JP2 is a subset of JPX. These packagings  contain all the information needed to properly interpret  the image data, including the colour space, bits per  component, and image dimensions. In other words, they  are complete descriptions of images (as opposed to im age data that require outside parameters for correct  interpretation). The  JPXDecode filter shall expect to read  a full JPX file structureeith er internal to the PDF file  or as an external file.  NOTE 5 To promote interoperability, the specifications define  a subset of JPX called JPX baseline (of which JP2 is also  a subset). The complete details of  the baseline set of JPX features  are contained in ISO/IEC 15444-2,  Information TechnologyJPEG 2000 Ima ge Coding System: Extensions (see the  Bibliography ). See also <http://www.jpeg. org/jpeg2000/>. Data used in PDF image XObjects shall be limited to  the JPX baseline set of features, except for enumerated  colour space 19 (CIEJab). In addition, enumerated colour space 12 (CMYK), which is part of JPX but not JPX  baseline, shall be supported in a PDF. A JPX file describes a collection of  channels  that are present in the image data. A channel may have one of  three types: An  or dinary  channel contains values that, when decoded , shall become samples for a specified colour  component. An  op acity  channel provides samples that shall be  interpreted as raw opacity information. A  pre multiplied opacity  channel shall provide samples that have been multiplied into the colour samples of  those channels with which it is associated.  Opacity and premultiplied opacity channels shall be associ ated with specific colour channels. There shall not  be more than one opacity channel (of either  type) associated with a given colour channel.  EXAMPLE It is possible for one opacity channel to apply to the red samples and another to apply to the green and  blue colour channels of an RGB image. NOTE 6 The method by which the opacity information is to  be used is explicitly not  specified, although one possible  method shows a normal blending mode. In addition to using opacity channels for describing tr ansparency, JPX files also  have the ability to specify  chroma-key transparency. A single colour may be specified by giving an array of values, one value for each  colour channel. Any image location that matches this colour shall be considered to be completely transparent.",""],"45":["' Adobe Systems Incorporated 2008  All rights reserved 37PDF 32000-1:2008 Images in JPX files may have one of the following colour spaces:   A predefined colour space, chosen from a list of  enumerated colour spaces . (Two of these are actually  families of spaces and parameters are included.)  A restricted ICC profile. These are the only sort s of ICC profiles that are allowed in JP2 files.  An input ICC profile of any sort defined by ICC-1.  A  ven dor-defined  colour space.  More than one colour space may be specified for an  image, with each space being tagged with a precedence  and an approximation value that indicates how well it re presents the preferred colour space. In addition, the  images colour space may serve as the foundation for a  palette of colours that are selected using samples  coming from the images data channels: the equivalent of an  Indexed  colour space in PDF. There are other features in the JPX format beyond desc ribing a simple image. These include provisions for  describing layering and giving instructions on composition, specifying simple animation, and including generic  XML metadata (along with JPEG2000-specific schemas for such data). Relevant metadata should be  replicated in the image dictionarys  Metadata  stream in XMP format (see  14.3.2, \"Metadata Streams\" ).When using the  JPXDecode filter with image XObjects, the followi ng changes to and constraints on some  entries in the image dictionary shall apply (see  8.9.5, \"Image Dictionaries\"  for details on these entries): Wid th  and  Height  shall match the corresponding width and height values in the JPEG2000 data.  Co lorSpace  shall be optional since JPEG2000 data contain co lour space specifications. If present, it shall  determine how the image samples are interpreted, and  the colour space specifications in the JPEG2000  data shall be ignored. The number of colour channels  in the JPEG2000 data s hall match the number of  components in the colour space; a conforming writer  shall ensure that the samples are consistent with the  colour space used.  Any colour space other than  Pattern may be specified. If an  Indexed  colour space is used, it shall be  subject to the PDF limit of 256 colours. If the colour  space does not match one of JPXs enumerated colour  spaces (for example, if it has two colour components or  more than four), it should be specified as a vendor  colour space in the JPX data. If  ColorSpace  is not present in the image dictionary, the colour space information in the JPEG2000 data  shall be used. A JPEG2000 image within a PDF shall have one of: the baseline JPX colorspaces; or  enumerated colorspace 19 (CIEJab) or enumerated colors pace 12 (CMYK); or at least one ICC profile that  is valid within PDF. Conforming PDF readers shall support the JPX baseline set of enumerated colour  spaces; they shall also be responsible for dealing wit h the interaction between the colour spaces and the  bit depth of samples.   If multiple colour space specifications are give n in the JPEG2000 data, a conforming reader should  attempt to use the one with the highest precedence an d best approximation value. If the colour space is  given by an unsupported ICC profile, the next lowe r colour space, in terms of precedence and  approximation value, shall be used. If no supported colour space is found, the colour space used shall be  DeviceGray, DeviceRGB, or DeviceCMYK, depending on the whether the number of channels in the  JPEG2000 data is 1,3, or 4. SMas kInData  specifies whether soft-mask information packaged with the image samples shall be used  (see  11.6.5.3, \"Soft-Mask Images\" ); if it is, the SMask entry shall not be present. If  SMaskInData  is nonzero, there shall be only one opacity channel in t he JPEG2000 data and it shall apply to all colour  channels. De code  shall be ignored, except in the case where  the image is treated as a mask; that is, when  ImageMask  is true . In this case, the JPEG2000 data shall provide a single colour channel with 1-bit  samples.",""],"46":["PDF 32000-1:2008 38' Adobe Systems Incorporated 2008  All rights reserved 7.4.10 Crypt Filter The  Crypt filter (PDF 1.5)  allows the document-level security handler (see  7.6, \"Encryption\" ) to determine which algorithms should be used to decrypt the input data. The  Name parameter in the decode parameters  dictionary for this filter (see  Table  14) shall specify which of the named cr ypt filters in the document (see  7.6.5, \"Crypt Filters\" ) shall be used.  The Crypt filter shall be the first  filter in the Filter array entry. In addition, the decode parameters dictionary may includ e entries that are private to the security handler.  Security handlers may use information from both the cryp t filter decode parameters dictionary and the crypt  filter dictionaries (see  Ta b l e  25) when decrypting data or providing a key to decrypt data.  NOTE When adding private data to the decode parameters dictionary, security handlers should name these entries in  conformance with the PDF name registry (see  Annex E ).If a stream specifies a crypt filter, th en the security handler does not apply  \"Algorithm 1: Encryption of data  using the RC4 or AES algorithms\"  in 7.6.2, \"General Encryption Algorithm,\"  to the key prior to decrypting the  stream. Instead, the security handler shall decr ypt the stream using the key as is. Sub-clause  7.4, \"Filters,\" explains how a stream specifies filters.  7.5 File Structure 7.5.1 General This sub-clause describes how objects are organized in a  PDF file for efficient random access and incremental  update. A basic conforming PDF file shall be  constructed of following four elements (see  Figure 2 ):  A one-line  header  identifying the version of the PDF spec ification to which  the file conforms  A  b ody  containing the objects that make up  the document contained in the file  A  cros s-reference table  containing information about the indirect objects in the file  A  trailer giving the location of the cross-reference table an d of certain special objects within the body of the  file This initial structure may be modified by later updates, wh ich append additional elemen ts to the end of the file;  see  7.5.6, \"Incremental Updates,\"  for details.  Table  14   Optional parameters for Crypt filters   Key Type Value Type name (Optional)  If present, shall be  CryptFilterDecodeParms  for a Crypt filter decode para meter dictionary. Name name (Optional)  The name of the crypt filter th at shall be used to decrypt this  stream. The name shall correspond to an entry in the  CF entry of the  encryption dictionary (see  Table  20) or one of the standard crypt filters  (see Ta b l e  26).  Default value:  Identity.",""],"47":["' Adobe Systems Incorporated 2008  All rights reserved 39PDF 32000-1:2008 Figure 2   Initial structure of a PDF file As a matter of convention, the tokens in a PDF file are arranged into lines; see  7.2, \"Lexical Conventions.\" Each line shall be terminated by an  end-of-line (EOL) marker, which may be a CARRIAGE RETURN (0Dh), a  LINE FEED (0Ah), or both. PDF files with bi nary data may have arbitrarily long lines.  NOTE To increase compatibility with comp liant programs that process PDF files,  lines that are not part of stream  object data are limited to no more than 255 characters, with one exception. Beginning with PDF 1.3, the  Contents string of a signature dictionary (see  12.8, \"Digital Signatures\" ) is not subject to the restriction on line  length. The rules described here are sufficient to produce a ba sic conforming PDF file. However, additional rules apply  to organizing a PDF file to enable efficient incremen tal access to a documents components in a network  environment. This form of organization, called  Linearized PDF , is described in  Annex F . 7.5.2 File Header The first line of a PDF file shall be a  header  consisting of the 5 characters  %PDF   followed by a version  number of the form 1.N, where N is a digit between 0 and 7. A conforming reader shall accept files with any of the following headers: %PDF 1. 0%PDF 1. 1%PDF 1. 2%PDF 1. 3%PDF 1. 4%PDF 1. 5%PDF 1. 6%PDF 1. 7Beginning with PDF 1.4, the  Version  entry in the documents catalog dictionary (located via the  Root entry in  the files trailer, as described in  7.5.5, \"File Trailer\" ), if present, shall be used instead of the version specified in  the Header.","HeaderBodyCross-reference tableTrailer",""],"48":["PDF 32000-1:2008 40' Adobe Systems Incorporated 2008  All rights reserved NOTE This allows a conforming writer to update the version using an incremental update (see  7.5.6, \"Incremental  Updates\" ). Under some conditions, a conforming reader may be able to process PDF files conforming to a later version  than it was designed to accept. New PDF features are often introduced in such a way that they can safely be  ignored by a conforming reader that  does not understand them (see  I.2, \"PDF Version Numbers\" ). This part of ISO 32000 defines the Extensions entry in  the documents catalog dictionary. If present, it shall  identify any developer-defined extensions  that are contained in this PDF file. See  7.12, Extensions Dictionary .If a PDF file contains binary data, as most do (see  7.2, \"Lexical Conventions\" ), the header line shall be  immediately followed by a comment line containing at le ast four binary charactersthat is, characters whose  codes are 128 or greater. This ensures proper behaviour of  file transfer applications that inspect data near the  beginning of a file to determine whether to treat  the files contents as text or as binary.  7.5.3 File Body The  bod y  of a PDF file shall consist of a sequence of indi rect objects representing  the contents of a document.  The objects, which are of the basic types described in  7.3, \"Objects,\"  represent components of the document  such as fonts, pages, and sampled images. Beginning with  PDF 1.5, the body can also contain object streams,  each of which contains a sequenc e of indirect objects; see  7.5.7, \"Object Streams.\" 7.5.4 Cross-Reference Table The  cros s-reference table  contains information that permits random acce ss to indirect objects within the file so  that the entire file need not be read  to locate any particular object. The  table shall contain a one-line entry for  each indirect object, specifying the byte  offset of that object within the body  of the file. (Beginning with PDF 1.5,  some or all of the cross-reference information may alte rnatively be contained in cross-reference streams; see  7.5.8, \"Cross-Reference Streams.\" ) NOTE 1 The cross-reference table is the only part of a PDF f ile with a fixed format, which pe rmits entries in the table to  be accessed randomly.  The table comprises one or more  cross-reference sections . Initially, the entire table  consists of a single section  (or two sections if the  file is linearized; see  Annex F ). One additional section shall be added each time the file is  incrementally updated (see  7.5.6, \"Incremental Updates\" ). Each cross-reference section shall b egin with a line containing the keyword  xref . Following this line shall be  one or more  cross-reference subsections , which may appear in any order. For a file that has never been  incrementally updated, the cross-reference section sha ll contain only one subsecti on, whose object numbering  begins at 0.  NOTE 2 The subsection structure is usef ul for incremental updates, since it allows a new cross-reference section to be  added to the PDF file, containing entries only for objects that have been added or deleted. Each cross-reference subsection shall contain entr ies for a contiguous range of object numbers. The  subsection shall begin with a line containing two numb ers separated by a SPACE (20h), denoting the object  number of the first object in this subsection  and the number of entries in the subsection.  EXAMPLE 1 The following line introduces  a subsection containing five objects  numbered consecutively from 28 to 32. 28 5A given object number shall not have an entry in more than one subsection within a single section. Following this line are the cross-reference entries themselves, one per line. Each entry shall be exactly 20  bytes long, including the end-of-line marker. There are two kinds of cross-reference entr ies: one for objects that  are in use and another for objects that have been deleted and therefore are free. Both types of entries have",""],"49":["' Adobe Systems Incorporated 2008  All rights reserved 41PDF 32000-1:2008 similar basic formats, dist inguished by the keyword  n (for an in-use entry) or  f (for a free entry). The format of  an in-use entry shall be: nnnnnnnnnn  ggggg  n eol where:  nnnnnnnnnn  shall be a 10-digit byte offset in the decoded stream  ggggg   shall be a 5-digit generation number  n sh all be a keyword identifying this as an in-use entry  eol sha ll be a 2-character end-of-line sequence  The byte offset in the decoded stream shall be a 10- digit number, padded with leading zeros if necessary,  giving the number of bytes from the beg inning of the file to the beginning of the object. It shall be separated  from the generation number by a single SPACE. The gene ration number shall be a 5-digit number, also padded  with leading zeros if necessary.  Following the generation number shall be a single SPACE, the keyword  n, and a 2-character end-of-line sequence consisting of one  of the following: SP CR, SP LF, or CR LF. Thus, the  overall length of the entry shall always be exactly 20 bytes.  The cross-reference entry for a free object has essentia lly the same format, except that the keyword shall be  finstead of  n and the interpretation of the first item is different:  nnnnnnnnnn  ggggg  f eolwhere:  nnnnnnnnnn  shall be the 10-digit object number of the next free object  ggggg   shall be a 5-digit generation number  f shall be  a keyword identifying this as a free entry  eol sha ll be a 2-character end-of-line sequence  There are two ways an entry may be a member of the  free entries list. Using the basic mechanism the free  entries in the cross-reference table may form a linked list,  with each free entry containing the object number of  the next. The first entry in the table (object number 0)  shall always be free and shall have a generation number  of 65,535; it is shall be the head of the linked list of free  objects. The last free entry  (the tail of the linked list)  links back to object number 0. Using the second mechanism, the table may contain other free entries that link  back to object number 0 and have a generation number of 65,535, even though these entries are not in the  linked list itself.  Except for object number 0, all objects in the cross-re ference table shall initially  have generation numbers of 0.  When an indirect object is deleted, its cross-reference  entry shall be marked free and it shall be added to the  linked list of free entries. The entrys generation number shall be incremented by 1 to indicate the generation  number to be used the next time an object with that ob ject number is created. Thus, each time the entry is  reused, it is given a new generation number. The ma ximum generation number is 65,535; when a cross- reference entry reaches this value, it shall never be reused.  The cross-reference table (comprising the original cr oss-reference section and all update sections) shall  contain one entry for each object number from 0 to the maximum object number defined in the file, even if one  or more of the object numbers in this range do not actually occur in the file. EXAMPLE 2 The following shows a cross-refere nce section consisting of a single subsection with six entries: four that  are in use (objects number 1, 2, 4, and 5) and two t hat are free (objects number 0 and 3). Object number  3 has been deleted, and the next object created with that object number is given a generation number of  7.",""],"50":["PDF 32000-1:2008 42' Adobe Systems Incorporated 2008  All rights reserved xref 0 60000000003  65535  f0000000017  00000  n0000000081  00000  n0000000000  00007  f0000000331  00000  n0000000409  00000  nEXAMPLE 3 The following shows a cr oss-reference section with four subsections, containing  a total of five entries. The  first subsection contains one entry, for object number  0, which is free. The second subsection contains  one entry, for object number 3, which  is in use. The third subsection contains two entries, for objects  number 23 and 24, both of which are in use. Object  number 23 has been reused, as can be seen from the  fact that it has a generation number  of 2. The fourth subsection cont ains one entry, for object number 30,  which is in use.  xref 0 10000000000  65535  f3 10000025325  00000  n23 20000025518  00002  n0000025635  00000  n30 10000025777  00000  nSee  H.7, \"Updating Example\" , for a more extensive example of the st ructure of a PDF file that has been  updated several times.  7.5.5 File Trailer The  trailer of a PDF file enables a confor ming reader to quickly find the cross-reference table and certain  special objects. Conforming readers should read a PDF file  from its end. The last line of the file shall contain  only the end-of-file marker,  %%EOF . The two preceding lines shall contain, one per line and in order, the  keyword  startxref  and the byte offset in the decoded stream from the beginning of the file to the beginning of  the  xref  keyword in the last cross-reference section. The  startxref  line shall be preceded by the  trailer dictionary , consisting of the keyword  trailer  followed by a series of key-value pairs enclosed in double angle  brackets (<<   >>) (using LESS-THAN SIGNs (3Ch) and GREATE R-THAN SIGNs (3Eh)). Thus, the trailer has the following overall structure:  trailer<< key1 value1 key2 value2  keyn valuen>>startxref Byte_offset_of_last_cr oss-referenc e_section","%%EOF",""],"51":["' Adobe Systems Incorporated 2008  All rights reserved 43PDF 32000-1:2008 Ta b l e  15 lists the contents of the trailer dictionary.  NOTE Table  19 defines an additional entry,  XRefStm , that appears only in the tra iler of hybrid-reference files,  described in  7.5.8.4, \"Compatibility with App lications That Do Not Support Compressed Reference Streams.\" EXAMPLE This example shows a tra iler for a file that has neve r been updated (as indicated  by the absence of a Prev  entry in the trailer dictionary). trailer << /Size 22/Root 2 0 R /Info  1 0 R /ID [ <  81b14aafa313db63dbd6f981e49f94f4  >< 81b14aafa313db63dbd6f981e49f94f4  > ]>>startxref 18799 %%EOFTable  15   Entries in the file trailer dictionary   Key Type Value Sizeinteger (Required; shall not be an indirect reference)  The total number of entries in  the files cross-reference table, as defi ned by the combination of the original  section and all update sections. Equivale ntly, this value shall be 1 greater  than the highest object number defined in the file.  Any object in a cross-reference section whose number is greater than this  value shall be ignored and defined to be missing by a conforming reader. Previnteger (Present only if the file has more than one cross-reference section; shall be  an indirect reference) The byte offset in the decoded stream from the  beginning of the file to the beginning of  the previous cross-reference section.  Rootdictionary (Required; shall be an indirect reference)  The catalog dictionary for the PDF  document contained in the file (see  7.7.2, \"Document Catalog\" ). Encrypt dictionary (Required if document is encrypted; PDF  1.1)  Th e documents encryption  dictionary (see  7.6, \"Encryption\" ). Info dictionary (Optional; shall be an  indirect reference)  The documents information  dictionary (see  14.3.3, \"Document Information Dictionary\" ). IDarray(Required if an  Encrypt  entry is present; optional otherwise; PDF  1.1) An array of two byte-strings constituting a file identifier (see  14.4, \"File  Identifiers\" ) for the file. If there is an  Encrypt  entry this array and the two  byte-strings shall be direct objects and shall be unencrypted.  NOTE 1 Because the  ID entries are not encrypted  it is possible to check  the  ID key to assure that the co rrect file is being accessed  without decrypting the file. The re strictions that the string be a  direct object and not be encrypted assure that this is possible. NOTE 2 Although this entry is optional,  its absence might prevent the file  from functioning in some workflows that depend on files being  uniquely identified.  NOTE 3 The values of the  ID strings are used as input to the encryption  algorithm. If these strings were indirect, or if the  ID array were indirect, these strings would be  encrypted when written. This  would result in a circular condition for a reader: the  ID strings  must be decrypted in order to use them to decrypt strings,  including the  ID strings themselves. The preceding restriction  prevents this circular condition.",""],"52":["PDF 32000-1:2008 44' Adobe Systems Incorporated 2008  All rights reserved 7.5.6 Incremental Updates The contents of a PDF file can be updated incrementally  without rewriting the entire file. When updating a PDF  file incrementally, changes shall be appended to the end of the file, leaving its original contents intact.  NOTE 1 The main advantage to updating a file in this way  is that small changes to a  large document can be saved  quickly. There are additional advantages:  In certain contexts, such as when  editing a document across an HTTP connection or using OLE embedding (a  Windows-specific technology), a conforming writer cannot overwrite the contents of  the original file.  Incremental updates may be used to save changes to documents in these contexts.  NOTE 2 The resulting file  has the structure shown in Figure 3 . A complete example of an updated file is shown in  H.7,  \"Updating Example\" . A cross-reference section for an incremental update s hall contain entries only for objects that have been  changed, replaced, or deleted. Deleted objects shall be  left unchanged in the file, but shall be marked as  deleted by means of their cross-reference entries. The a dded trailer shall contain all the entries except the Prev  entry (if present) from the previous trailer, whether modifi ed or not. In addition, the added trailer dictionary shall  contain a  Prev entry giving the location of the  previous cross-reference section (see  Ta b l e  15). Each trailer shall be terminated by its own end-of-file (%%EOF) marker.  NOTE 3 As shown in  Figure 3 , a file that has been updated several times contains several trailers. Because updates  are appended to PDF files, a file may have several copies of an  object with the same object identifier (object  number and generation number). EXAMPLESeveral copies of an object can  occur if a text annotation (see  12.5, \"Annotations\" ) is changed several  times and the file is saved between changes. Because the  text annotation object is not deleted, it retains  the same object number and generation number as befo re. The updated copy of the object is included in  the new update section added to the file.  The updates cross-reference section sha ll include a byte offset to this new  copy of the object, overriding the  old byte offset contained in the original cross-referenc e section. When a conforming reader reads the file, it  shall build its cross-re ference information in such a way that the most recent copy of each object shall be the  one accessed from the file.  In versions of PDF 1.4 or later a conforming writer may use the  Version  entry in the documents catalog  dictionary (see  7.7.2, \"Document Catalog\" ) to override the version specified in the header. A conforming writer  may also need to update the Extensions dictionary, see  7.12, Extensions Dictionary , if the update either  deleted or added developer-defined extensions. NOTE 4 The version entry enables the version to be altered when performing an incremental update.",""],"53":["' Adobe Systems Incorporated 2008  All rights reserved 45PDF 32000-1:2008 Figure  3   Structure of an updated PDF file 7.5.7 Object Streams  An o bject stream , is a stream object in which a sequence of indi rect objects may be stored, as an alternative to  their being stored at the outermost file level.  NOTE 1 Object streams are first introduced in PDF 1.5. The pu rpose of object streams is to allow indirect objects other  than streams to be stored more compactly by using the fa cilities provided by str eam compression filters.  NOTE 2 The term compressed object is used regardless  of whether the stream is  actually encoded with a  compression filter. The following objects shall not be  stored in an object stream:  Stream objects  Objects with a generation number other than zero  A documents encryption dictionary (see  7.6, \"Encryption\" ) An object representing the value of the  Length  entry in an object stream dictionary","HeaderOriginal bodyOriginal cross-reference section Updated trailer  nBody update 1 Cross-reference section 1 Body update  nCross-reference section  n","Original trailer","Updated trailer 1",""],"54":["PDF 32000-1:2008 46' Adobe Systems Incorporated 2008  All rights reserved  In linearized files (see  Annex F ), the document catalog, the linearization dictionary, and page objects shall  not appear in an object stream. NOTE 3 Indirect references to objects inside object  streams use the normal syntax: for example, 14  0 R. Access to  these objects requires a different way of storing cross-reference information; see  7.5.8, \"Cross-Reference  Streams.\"  Use of compressed objects requires a PDF 1.5 conforming reader. However, compressed objects  can be stored in a manner that a PDF 1.4 conforming reader can ignore. In addition to the regular keys for streams shown in  Ta b l e  5, the stream dictionary describing an object stream  contains the following entries:   A conforming writer determines which obje cts, if any, to store in object streams.  EXAMPLE 1 It can be useful to store objects having common c haracteristics together, such as fonts on page 1, or  Comments for draft #3. These objects are known as a  collection . NOTE 4 To avoid a degradation of performance, such as would occur when downloading and decompressing a large  object stream to access a single compressed object, the  number of objects in an individual object stream  should be limited. This may require a group of object streams to be linked as a collection, which can be done  by means of the  Extends entry in the object stream dictionary.  NOTE 5 Extends may also be used when a collection is being updated to include new objects. Rather than modifying  the original object stream, which could entail duplicating much of the stream data, the new objects can be  stored in a separate object stream. This is particularly important when adding an update section to a  document. The stream data in an object stre am shall contain the following items: N p airs of integers separated by white space, where the  first integer in each pair shall represent the object  number of a compressed object and the second integer shall represent the byte offset in the decoded  stream of that object, relative to the first object stored in the object stream, the value of the stream’s first  entry. The offsets shall be in increasing order. NOTE 6 There is no restriction on the order of objects in th e object stream; in particular, the objects need not be stored  in object-number order.  The value of the  First  entry in the stream dictionary shall be the  byte offset in the decoded stream of the  first object.  The  N objects are stored consecutively. Only the  object values are stored in the stream; the  obj  and endobj  keywords shall not be used.  NOTE 7 A compressed dictionary or array may contain indirect references.  An object in an object stream shall not consist solely of an object reference.  Table  16   Additional entries specific to an object stream dictionary   keytypedescription Type name(Required)  The type of PDF object that this dictionary describes; shall be  ObjStm  for an object stream. Ninteger (Required)  The number of indirect obje cts stored in the stream. First integer (Required)  The byte offset in the decoded stream of the first compressed  object. Extendsstream(Optional)  A reference to another object stre am, of which the current object  stream shall be considered an extension.  Both streams are considered part  of a collection  of object streams (see below).  A given collection consists of a  set of streams whose  Extends links form a directed acyclic graph.",""],"55":["' Adobe Systems Incorporated 2008  All rights reserved 47PDF 32000-1:2008 EXAMPLE 2  3 0 R In an encrypted file (i.e., entire object stream is encrypted), strings occurring anywhere in an object stream  shall not be separately encrypted. A conforming writer shall store the first object immediatel y after the last byte offset. A conforming reader shall  rely on the  First  entry in the stream dictionar y to locate the first object. An object stream itself, like any stream, shall be an indirect object, and therefore, there shall be an entry for it in  a cross-reference table or cross-reference stream (see  7.5.8, \"Cross-Reference Streams\" ), although there  might not be any references to it (of the form 243 0 R).  The generation number of an object st ream and of any compressed object shall be zero. If either an object  stream or a compressed object is deleted and the object  number is freed, that object number shall be reused  only for an ordinary (uncompressed) object other than an object stream. When new object streams and  compressed objects are created, they shall always be  assigned new object numbers, not old ones taken from  the free list. EXAMPLE 3 The following shows three objects  (two fonts and a font descriptor) as  they would be represented in a PDF 1.4 or earlier file, along  with a cross-reference table.  11 0 obj << /Type /Font /Subtype /TrueType ... other en tries... /FontDescriptor 12 0 R >>endobj 12 0 obj<< /Type /FontDescriptor /Ascent 891 ... other en tries... /FontFile2 22 0 R >>endobj 13 0 obj<< /Type /Font /Subtype /Type0 ... other en tries... /ToUnicode 10 0 R >>endobj ... xref 0 32 0000000000 65535 f ...  cross-reference entries for objects 1 through 10 ... 0000001434 00000 n  0000001735 00000 n  0000002155 00000 n ...  cross-reference entries for objects 14 and on ... trailer << /Size 32 /Root ...>>NOTE 8 For readability, the object stream has been shown unenco ded. In a real PDF 1.5 file, Flate encoding would  typically be used to gain the benefits of compression.",""],"56":["PDF 32000-1:2008 48' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 4 The following shows the same obj ects from the previous example stored  in an object stream in a PDF 1.5  file, along with a cross-reference stream. The cross-reference stream (see  7.5.8, \"Cross-Reference Streams\" ) contains entries for the fonts (objects  11 and 13) and the descriptor (object 12), which are  compressed objects in an object stream. The first  field of these entries is the entry ty pe (2), the second field  is the number of the objec t stream (15), and the  third field is the position within th e sequence of objects in the object  stream (0, 1, and 2). The cross- reference stream also contains a type  1 entry for the object stream itself. 15 0 obj % The object stream << /Type /ObjStm /Length 1856 /N 3  % The number of objects in the stream /First 24 % The byte offset in the decoded stream of the first object % The object numbers and offsets of the objects, relative to the first are shown on the first line of %  the stream (i.e., 11 0 12 547 13 665). >>stream 11 0 12 547 13 665 << /Type /Font /Subtype /TrueType ... other keys.../FontDescriptor 12 0 R >><< /Type /FontDescriptor /Ascent 891 ... other keys.../FontFile2 22 0 R >><< /Type /Font /Subtype /Type0 ... other keys.../ToUnicode 10 0 R >>... endstreamendobj 99 0 obj% The cross-reference stream << /Type /XRef /Index [0 32] % This section has one subsection with 32 objects /W [1 2 2] % Each entry has 3 fields: 1, 2 and 2 bytes in width, % respectively /Filter /ASCIIHexDecode % For readability in this example /Size 32...  >>stream 00 0000 FFFF ...  cross-references for objects 1 through 10 ... 02 000F 0000 02 000F 0001 02 000F 0002 ...  cross-reference for object 14 ... 01 BA5E 0000 ... endstreamendobj startxref 54321 %%EOFNOTE 9 The number 54321 in  Example 4  is the offset for object 99 0.",""],"57":["' Adobe Systems Incorporated 2008  All rights reserved 49PDF 32000-1:2008 7.5.8 Cross-Reference Streams 7.5.8.1 General Beginning with PDF 1.5, cross-reference information may be stored in a  cross-reference stream  instead of in a  cross-reference table. Cross-reference streams provide the following advantages:  A more compact representation of cross-reference information  The ability to access compressed objects th at are stored in ob ject streams (see 7.5.7, \"Object Streams\" ) and to allow new cross-re ference entry types to  be added in the future Cross-reference streams are stream objects (see  7.3.8, \"Stream Objects\" ), and contain a dictionary and a data  stream. Each cross-reference stream contains the informa tion equivalent to the cross-reference table (see  7.5.4, \"Cross-Reference Table\" ) and trailer (see  7.5.5, \"File Trailer\" ) for one cross-reference section.  EXAMPLE In this example, the trailer dictionary entries are  stored in the stream dictio nary, and the cross-reference  table entries are stored as the stream data. ...  object s  ... 12 0 obj% Cross-reference stream << /Type /XRef % Cross-reference stream dictionary /Size ... /Root ...>>stream ...  S tream data containing cross-reference information ...  endstreamendobj ...  more objects ... startxref  byte_offset_of_cross-reference_ stream (points to object 12) %%EOFThe value following the  startxref  keyword shall be the offset of the cr oss-reference stream rather than the  xref keyword. For files that use cross-reference streams entirely (that is, files that are not hybrid-reference files; see  7.5.8.4, \"Compatibility with App lications That Do Not Support  Compressed Refe rence Streams\" ), the keywords  xref  and   trailer shall no longer be used. Theref ore, with the exception of the  startxref  address  %%EOFsegment and comments, a file may be entirely a sequence of objects.  In linearized files (see  F.3, \"Linearized PDF Document Structure\" ), the document catalog, the linearization  dictionary, and page objects shall not appear in an object stream. 7.5.8.2 Cross-Reference Stream Dictionary Cross-reference streams may contain the entries shown in  Ta b l e  17 in addition to the entries common to all  streams ( Table  5) and trailer dictionaries ( Ta b l e  15). Since some of the information in the cross-reference  stream is needed by the conforming rea der to construct the index that allows  indirect references to be resolved,  the entries in cross-reference streams shall  be subject to the following restrictions:  The values of all entries shown in  Ta b l e  17 shall be direct objects; indirect references shall not be  permitted. For arrays (the  Index and  W entries), all of their elements shall be direct objects as well. If the  stream is encoded, the  Filter and  DecodeParms  entries in  Table  5 shall also be direct objects.   Other cross-reference stream entries not listed in  Ta b l e  17 may be indirect; in fact, some (such as  Root in Ta b l e  15) shall be indirect.",""],"58":["PDF 32000-1:2008 50' Adobe Systems Incorporated 2008  All rights reserved  The cross-reference stream shall not be encrypted  and strings appearing in the cross-reference stream  dictionary shall not be encrypted. It shall not have a  Filter  entry that specifies a  Crypt filter (see  7.4.10,  \"Crypt Filter\" ). 7.5.8.3 Cross-Reference Stream Data Each entry in a cross-reference stream shall have one or  more fields, the first of which designates the entrys  type (see  Table  18). In PDF 1.5 through PDF 1.7, only types 0,  1, and 2 are allowed. Any other value shall be  interpreted as a reference to the null object, thus permitting new entry types to be defined in the future. Table  17   Additional entries specific to a  cross-reference stream dictionary   keytype description Type name(Required)  The type of PDF object that this dictionary describes; shall be  XRef for a cross-reference stream. Sizeinteger (Required)  The number one greater than the  highest object number used in  this section or in any section for which this shall be an update. It shall be  equivalent to the  Size entry in a trailer dictionary. Index array(Optional)   An array containing a pair of in tegers for each subsection in this  section. The first integer shall be the first object number in the subsection;  the second integer shall be the number of entries in the subsection The array shall be sorted in ascending order by object number. Subsections  cannot overlap; an object number may ha ve at most one entry in a section. Default value: [0  Size].Previnteger (Present only if the f ile has more than one cr oss-reference stream; not  meaningful in hybrid-reference files; see  7.5.8.4, \"Compatibility with  Applications That Do Not Support Compressed Reference Streams\" ) Th e  byte offset in the decod ed stream from the beginn ing of the file to the  beginning of the previous cross-reference stream. This entry has the same  function as the  Prev  entry in the trailer dictionary ( Ta b l e  15).Warray(Required)  An array of integers representing the size of the fields in a single  cross-reference entry.  Ta b l e  18 describes the types of entries and their  fields. For PDF 1.5,  W always contains three integers; the value of each  integer shall be the number of byte s (in the decoded stream) of the  corresponding field.  EXAMPLE [1 2 1] means that the fiel ds are one byte, two bytes, and  one byte, respectively. A value of zero for an element in the  W array indicates that the  corresponding field shall not be presen t in the stream, and the default value  shall be used, if there is one. If the first element is zero, the type field shall  not be present, and shall default to type 1. The sum of the items shall be the total len gth of each entry; it can be used  with the  Index  array to determine the starting position of each subsection.  Different cross-reference streams in a  PDF file may use different values for  W.",""],"59":["' Adobe Systems Incorporated 2008  All rights reserved 51PDF 32000-1:2008 The fields are written in increasing order of field numb er; the length of each field shall be determined by the  corresponding value in the  W entry (see  Ta b l e  17). Fields requiring more than one byte are stored with the  high-order byte first.  Like any stream, a cross-reference stream shall be an indi rect object. Therefore, an entry for it shall exist in  either a cross-reference stream (usually itself) or in  a cross-reference table (in hybrid-reference files; see  7.5.8.4, \"Compatibility with App lications That Do No t Support Compressed Reference Streams\" ).7.5.8.4 Compatibility with Appl ications That Do Not Support Co mpressed Reference Streams Readers designed only to support vers ions of PDF before PDF 1.5, and he nce do not support cross-reference  streams, cannot access objects that are referenced by cross-reference streams. If a file uses cross-reference  streams exclusively, it cannot  be opened by such readers.  However, it is possible to construct a file called a  hybrid-reference  file that is readable by readers designed only  to support versions of PDF before PDF 1.5. Such a file contains objects referenced by standard cross- reference tables in addition to objects in object streams that are referenced by cross-reference streams.  In these files, the trailer dictionary may contain,  in addition to the entry for trailers shown in  Table  15, an entry,  as shown in  Table  19. This entry may be ignored by readers designed on ly to support versions of PDF before  PDF 1.5, which therefore have no access to entries in the cross-reference stream the entry refers to.  Table  18   Entries in a cross-reference stream   Type Field Description 01The type of this entry, which shall be 0. Type 0 entries define  the linked list of free  objects (corresponding to  f entries in a  cross-reference table). 2The object number of t he next free object. 3The generation number to use if this object number is used  again.11The type of this entry, which shall be 1. Type 1 entries define  objects that are in use but are not compressed (corresponding  to n entries in a cross-reference table). 2The byte offset of the object, starting from the beginning of the  file.3The generation number of t he object. Default value: 0. 21The type of this entry, which shall be 2. Type 2 entries define  compressed objects. 2The object number of the object st ream in which this object is  stored. (The generation number of  the object stream shall be  implicitly 0.) 3The index of this object within the object stream. Table  19   Additional entries in a hybrid-r eference files trailer dictionary   KeyType Value XRefStm integer (Optional)   The byte offset in the decoded stre am from the beginning of the file  of a cross-reference stream.",""],"60":["PDF 32000-1:2008 52' Adobe Systems Incorporated 2008  All rights reserved The  Size  entry of the trailer shall be large enough to include all objects, including those defined in the cross- reference stream referenced by the  XRefStm  entry. However, to allow random  access, a main  cross-reference  section shall contain entries for all objects numbered 0 through  Size - 1 (see  7.5.4, \"Cross-Reference Table\" ). Therefore, the  XRefStm  entry shall not be used in the trailer dictionary of the main cross-reference section but  only in an update cross-reference section.  When a conforming reader opens a hybrid-reference file, objects with entries in cross-reference streams are  not hidden. When the conforming reader searches for an  object, if an entry is not found in any given standard  cross-reference section,  the search shall proceed to a cross-reference stream specified by the  XRefStm  entry  before looking in the previous cross-reference section (the  Prev entry in the trailer).  Hidden objects, therefore, have two cross-reference entrie s. One is in the cross-reference stream. The other is  a free entry in some previous section,  typically the section referenced by the  Prev entry. A conforming reader  shall look in the cross-reference stream first, shall find the object there, and shall ignore the free entry in the  previous section. A reader designed only to suppor t versions of PDF before PDF 1.5 ignores the cross- reference stream and looks in the previous section, wher e it finds the free entry. The free entry shall have a  next-generation number of 65535 so that  the object number shall not be reused. There are limitations on which objects in a hybrid-referen ce file can be hidden without making the file appear  invalid to readers designed only to support versions of PD F before PDF 1.5. In partic ular, the root of the PDF  file and the document catalog (see  7.7.2, \"Document Catalog\" ) shall not be hidden, nor any object that is  visible  from the root . Such objects can be determined by starti ng from the root and working recursively:  In any dictionary that is visible, direct objects shall be  visible. The value of any re quired key-value pair shall  be visible.   In any array that is visible, every element shall be visible.  Resource dictionaries in content streams shall be visi ble. Although a resource dictionary is not required,  strictly speaking, the cont ent stream to which it is attached is  assumed to contain references to the  resources.  In general, the objects that may be hidden are optional  objects specified by indirect  references. A conforming  reader can resolve those references by processing the cross-reference streams. In a reader designed only to  support versions of PDF before PDF 1. 5, the objects appear to be free, and the references shall be treated as  references to the null object.  EXAMPLE 1 The  Outlines  entry in the catalog dictionary is optional. Therefore, its value may be an indirect reference  to a hidden object. A reader designed only to support  versions of PDF before PDF 1.5 treats it as a  reference to the null object, which is  equivalent to having omitted the  entry entirely; a conforming reader  recognizes it.  If the value of the  Outlines  entry is an indirect reference to a visible object, the entire outline tree shall be  visible because nodes in the outline tree co ntain required pointers to other nodes.  Items that shall be visible include the entire page tree,  fonts, font descriptors, and width tables. Objects that  may be hidden in a hybrid-reference file include the struct ure tree, the outline tree, article threads, annotations,  destinations, Web Capture information, and page labels,.  EXAMPLE 2 In this example, an  ASCIIHexDecode  filter is specified to make the format and contents of the cross- reference stream readable.  This example shows a hybrid-reference file containi ng a main cross-reference section and an update  cross-reference section with an  XRefStm  entry that points to a cross-re ference stream (object 11), which  in turn has references to an object stream (object 2). In this example, the catalog (object 1) contains an indi rect reference (3 0 R) to  the root of the structure  tree. The search for the object starts  at the update cross-reference table, which has no objects in it. The  search proceeds depending on the version of the conforming reader.",""],"61":["' Adobe Systems Incorporated 2008  All rights reserved 53PDF 32000-1:2008 One choice for a reader designed only to support ve rsions of PDF before PDF 1.5 is to continue the  search by following the  Prev pointer to the main cross-reference ta ble. That table defines object 3 as a  free object, which is treated as the  null  object. Therefore,  the entry is considered missing, and the  document has no structure tree. Another choice for a conforming reader, is to continue the search by following the  XRefStm  pointer to the  cross-reference stream (obj ect 11). It defines object 3 as a comp ressed object, stored at index 0 in the  object stream (2 0 obj). Therefore,  the document has a structure tree. 1 0 obj % The document root, at offset 23. << /Type /Catalog /StructTreeRoot 3 0 R  >>endobj 12 0 objendobj 99 0 objendobj % The main xref section, at offset 2 664 is next with entries for objects 0-99. % Objects 2 through 11 are marked free and objects 12, 13 and 99 are marked in use. xref 0 100 0000000002 65535 f 0000000023 00000 n 0000000003 65535 f 0000000004 65535 f 0000000005 65535 f 0000000006 65535 f 0000000007 65535 f 0000000008 65535 f 0000000009 65535 f 0000000010 65535 f 0000000011 65535 f 0000000000 65535 f 0000000045 00000 n 0000000179 00000 n  cross-reference entries for objects 14 through 98 ... 0000002201 00000 n trailer << /Size 100 /Root 1 0 R /ID  >>% The main xref section starts at offset 2664. startxref 2664 %%EOF2 0 obj % The object stream, at offset 3722 << /Length ... /N 8% This stream contains 8 objects. /First 47 % The stream-offset of the first object >>stream 3 0 4 50 5 72  the numbers and stream-offsets of the remaining 5 objects followed by dictionary  objects 3-5 ...  << /Type /StructTreeRoot /K 4 0 R  /RoleMap 5 0 R",""],"62":["PDF 32000-1:2008 54' Adobe Systems Incorporated 2008  All rights reserved /ClassMap 6 0 R  /ParentTree 7 0 R  /ParentTreeNextKey 8  >>  << /S /Workbook /P 8 0 R  /K 9 0 R  >>  << /Workbook /Div /Worksheet /Sect  /TextBox /Figure  /Shape /Figure  >> d efinitions for objects 6 through 10 ... endstreamendobj 11 0 obj % The cross-reference stream, at offset 4899 << /Type /XRef /Index [2 10] % This stream contains entries for objects 2 through 11 /Size 100  /W [1 2 1] % The byte-widths of each field /Filter /ASCIIHexDecode % For readability only >>stream 01 0E8A 0 02 0002 00 02 0002 01 02 0002 02 02 0002 03 02 0002 04 02 0002 05 02 0002 06 02 0002 07 01 1323 0 endstreamendobj % The entries above are for: object 2 (0x0E8A =  3722), object 3 (in object stream 2, index 0),  % object 4 (in object stream 2, index 1) ...  object 10 (in object stream 2, index 7),   % object 11 (0x1323 = 4899). % The update xref section starting at offset 56 40.  There are no entries in this section. xref 0 0trailer << /Size 100 /Prev 2664 % Offset of previous xref section /XRefStm 4899 /Root 1 0 R /ID  >>startxref 5640%%EOFThe previous example illustra tes several other points:   The object stream is unencoded and the cross-refere nce stream uses an ASCII hexadecimal encoding for  clarity. In practice, both streams should be Flate- encoded. PDF comments shall not be included in a cross- reference table or in cross-reference streams.  The hidden objects, 2 through 11, are numbered consec utively. In practice, hidden objects and other free  items in a cross-reference table need not be linked in ascending order until the end.",""],"63":["' Adobe Systems Incorporated 2008  All rights reserved 55PDF 32000-1:2008  The update cross-reference table need not contain an y entries. A conforming writer that uses the hybrid- reference format creates the main cross-reference ta ble, the update cross-reference table, and the cross- reference stream at the same time. Objects 12 and 13, for example, are not compressed. They might have  entries in the update table. Since objects 2 and 11,  the object stream and the cross-reference stream, are  not compressed, they might also be defined in the updat e table. Since they are part of the hidden section,  however, it makes sense to define them in the cross-reference stream.  The update cross-reference section shall appear at th e end of the file, but other wise, there are no ordering  restrictions on any of the objects or on the main cross-re ference section. However, a file that uses both the  hybrid-reference format and the linearized  format has ordering requirements (see  Annex F). 7.6 Encryption 7.6.1 General A PDF document can be  encrypted (PDF 1.1)  to protect its contents from unauthorized access. Encryption  applies to all strings and streams in the docu ment’s PDF file, with th e following exceptions:  The values for the ID entry in the trailer  Any strings in an Encrypt dictionary  Any strings that are inside streams such as cont ent streams and compressed  object streams, which  themselves are encrypted Encryption is not applied to other object types such as  integers and boolean values, which are used primarily to  convey information about the document ’s structure rather than its conten ts. Leaving these va lues unencrypted  allows random access to the objects within a document , whereas encrypting the strings and streams protects  the document’s contents.  When a PDF stream object (see  7.3.8, \"Stream Objects\" ) refers to an external file , the streams contents shall  not be encrypted, since they are not part of the PDF file  itself. However, if the contents of the stream are  embedded within the PDF file (see  7.11.4, \"Embedded File Streams\" ), they shall be encrypted like any other  stream in the file. Beginning with PDF 1.5, embedd ed files can be encrypted in an otherwise unencrypted  document (see  7.6.5, \"Crypt Filters\" ).Encryption-related information shall be stored in a documents  encryption dictionary , which shall be the value of  the  Encrypt  entry in the documents trailer dictionary (see  Ta b l e  15). The absence of this entry from the trailer  dictionary means that a conforming reader shall consider the  document to be not encrypted. The entries shown  in Ta b l e  20 are common to all encryption dictionaries.  The encryption dictionarys  Filter entry identifies the files  security handler , a software module that implements  various aspects of the encryption process and controls access to the contents of the encrypted document. PDF  specifies a standard password-based security handler that  all conforming readers sha ll support, but conforming  readers can optionally provide additio nal security handlers of their own.  The  SubF ilter  entry specifies the syntax of  the encryption dictionary contents. It allows interoperability between  handlers; that is, a document can be decrypted by a handler other than the preferred one (the  Filter  entry) if  they both support the format specified by  SubFilter .The  V en try, in specifying which algorithm to use, determines the length of the encryption key, on which the  encryption (and decryption) of data in a PDF file shall be based. For  V values 2 and 3, the  Length  entry  specifies the exact length of the encryption key. In PDF 1.5, a value of 4 for  V permits the security handler to  use its own encryption and decrypti on algorithms and to specify  crypt filters to use on specific streams (see  7.6.5, \"Crypt Filters\" ).The remaining contents of the encryption dictionary shal l be determined by the security handler and may vary  from one handler to another. Entries for the standard security handler are described in  7.6.3, \"Standard",""],"64":["PDF 32000-1:2008 56' Adobe Systems Incorporated 2008  All rights reserved Security Handler.\"  Entries for public-key security handlers are described in  7.6.4, \"Public-Key Security  Handlers.\" Table  20   Entries common to all encryption dictionaries   KeyType Value Filter name(Required)  The name of the preferred  security handler  for this document. It shall  be the name of the security handler that  was used to encrypt the document. If  SubFilter  is not present, only this security handler shall be used when opening  the document. If it is present, a confo rming reader can use any security handler  that implements the  format specified by  SubFilter. Standard  shall be the name of the built-in password-based security handler.  Names for other security handlers may be registered by using the procedure  described in  Annex E.SubFiltername(Optional; PDF 1.3)  A name that completely specifies the format and  interpretation of the contents of the enc ryption dictionary. It allows security  handlers other than t he one specified by  Filter  to decrypt the document. If this  entry is absent, other security handlers shall not decrypt the document. NOTE This entry was introduced in PD F 1.3 to support the use of public- key cryptography in PDF files (see  7.6.4, \"Public-Key Security  Handlers\" ); however, it was not incorporated into the  PDF Reference  until the fourth edition  (PDF 1.5).Vnumber (Optional)  A code specifying the algorithm  to be used in encrypting and  decrypting the document:  0 An algorithm that is undocumented. This value shall not be used.  1\"Algorithm 1: Encryption of data using the RC4 or  AES algorithms\"  in 7.6.2,  \"General Encryption Algorithm,\"  with an encryption key length of 40 bits; see  below.  2(PDF 1.4) \"Algorithm 1: Encryption of data using the RC4 or AES algorithms\" in  7.6.2, \"General Encryption Algorithm,\"  but permitting encryption key lengths  greater than 40 bits.  3(PDF 1.4)  An unpublished algorithm that permits encryption key lengths  ranging from 40 to 128 bits. This value shall not appear in a conforming PDF  file.4(PDF 1.5) T he security handler defines the use of encryption and decryption  in the document, using th e rules specified by the  CF, StmF , and  StrF  entries.  The default value if this entry is omitted sha ll be 0, but when present should be a  value of 1 or greater.  Length integer (Optional; PDF  1.4; only if V is 2 or 3)  The length of the encryption key, in bits.  The value shall be a multiple of 8, in  the range 40 to 128. Default value: 40.  CFdictionary (Optional; meaningful only when  the value of V is 4; PDF  1.5)  A  dictionary whose  keys shall be crypt filter names and whose values shall be the corresponding  crypt filter dictionaries (see Table  25). Every crypt filter used in the document  shall have an entry in this dictionary, e xcept for the standard crypt filter names  (see Table  26).The conforming reader shall ignore entries  in CF dictionary with the keys equal to  those listed in  Ta b l e  26 and use properties of the respective standard crypt filters. StmF name(Optional; meaningful only when the value of V is 4; PDF  1.5)  The name of the  crypt filter that shall be used by default  when decrypting streams. The name shall  be a key in the  CF dictionary or a standard crypt filter name specified in  Ta b l e  26. All streams in the document, except  for cross-reference streams (see  7.5.8,  \"Cross-Reference Streams\" ) or streams that have a  Crypt entry in their  Filter array (see Table  6), shall be decrypted by the security handler, using this crypt  filter.  Default value:  Identity.",""],"65":["' Adobe Systems Incorporated 2008  All rights reserved 57PDF 32000-1:2008 Unlike strings within the body of the do cument, those in the encryption dictionary shall be direct objects. The  contents of the encryption dicti onary shall not be encrypted (the algorithm specified by the  V entry). Security  handlers shall be responsible for encrypting any data in  the encryption dictionary t hat they need to protect.  NOTE Conforming writers have two choices if the encryptio n methods and syntax provided by PDF are not sufficient  for their needs: they can provide an alternate security  handler or they can enc rypt whole PDF documents  themselves, not making use of PDF security. 7.6.2 General Encryption Algorithm One of the following algorithms shall be used when encrypting data in a PDF file: A proprietary encryption algorithm known as RC4. RC4  is a symmetric stream ci pher: the same algorithm  shall be used for both encryption and decryption, and the  algorithm does not change the length of the data.  RC4 is a copyrighted, proprietary algorithm of RSA Se curity, Inc. Independent software vendors may be  required to license RC4 to develop software that  encrypts or decrypts PDF documents. For further  information, visit the RSA Web site at <  http://www.rsasecurity.com  > or send e-mail to  < products@rsasecurity.com  >. The AES (Advanced Encryption Standard) algorithm  (beginning with PDF 1.6). AES is a symmetric block cipher: the same algorithm shall be used for both encryption and decryption, and the length of the data  when encrypted is rounded up to a multiple of the bl ock size, which is fixed to always be 16 bytes, as  specified in FIPS 197,  Advanced Encryption Standard (AES) ; see the  Bibliography ). Strings and streams encrypted with AES shall use a pa dding scheme that is described in Internet RFC  2898,  PKCS #5: Password-Based Cryptography Specification Version 2.0 ; see the Bibliography . For an  original message length of M, the pad shall consist of  16 - (M mod 16) bytes whose value shall also be 16  - (M mod 16).  EXAMPLE A 9-byte message has a pad of 7 bytes, eac h with the value 0x07. The  pad can be unambiguously  removed to determine the original message length when  decrypting. Note that  the pad is present when M  is evenly divisible by 16; it contains 16 bytes of 0x10. PDFs standard encryption methods also make use of  the MD5 message-digest algorithm for key generation  purposes (described in Internet RFC 1321,  The MD5 Message-Digest Algorithm ; see the Bibliography ).The encryption of data in a PDF file shall be based on the use of an  encryption key  computed by the security  handler. Different security handlers compute the encryp tion key using their own mechanisms. Regardless of  how the key is computed, its use in the encryption of data shall always be the same (see  \"Algorithm 1:  StrF name(Optional; meaningful only when the value of V is 4; PDF  1.5)  The name of the  crypt filter that shall be used when decrypting all strings in the document. The  name shall be a key in the  CF dictionary or a standard crypt filter name specified  in Ta b l e  26. Default value:  Identity.EFF name(Optional; meaningful only when  the value of V is 4; PDF 1.6)  The name of the  crypt filter that shall be used when en crypting embedded file streams that do not  have their own crypt filter  specifier; it shall co rrespond to a key in the  CFdictionary or a standard cryp t filter name specified in  Table  26. This entry shall be provided by the se curity handler. Conforming writers shall  respect this value when encrypting embedd ed files, except for embedded file  streams that have their own crypt filter spec ifier. If this entry  is not present, and  the embedded file stream does not contain a  crypt filter specifie r, the stream shall  be encrypted using the default str eam crypt filter specified by  StmF . Table 20   Entries common to all encryption dictionaries  (continued) Key Type Value",""],"66":["PDF 32000-1:2008 58' Adobe Systems Incorporated 2008  All rights reserved Encryption of data usin g the RC4 or AES algorithms\" ). Because the RC4  algorithm and AES algorithms are symmetric, this same sequence of steps shall be used both to encrypt and to decrypt data.  Algorithms in  7.6, Encryption  are uniquely numbered within that cl ause in a manner that maintains  compatibility with previous documentation. Algorithm 1: Encryption of data using the RC4 or AES algorithms a) Obtain the object number and generation number from th e object identifier of the string or stream to be  encrypted (see  7.3.10, \"Indirect Objects\" ). If the string is a direct object, use the identifier of the indirect  object containing it.  b) For all strings and streams without crypt filter specifie r; treating the object number and generation number  as binary integers, extend the original  n-byte encryption key to n + 5 bytes by appending the low-order 3  bytes of the object number and the low-order 2 bytes of  the generation number in that order, low-order byte  first. ( n is 5 unless the value of  V in the encryption dictionary is greater than 1, in which case  n is the value  of Length  divided by 8.)  If using the AES algorithm, extend the encryption key an additional 4 bytes by adding the value sAlT,  which corresponds to the hexadecimal  values 0x73, 0x41, 0x6C, 0x54. (This addition is done for backward  compatibility and is not intended  to provide additional security.) c) Initialize the MD5 hash function and pass the result of  step (b)  as input to this function. d) Use the first ( n + 5) bytes, up to a maximum of 16, of the out put from the MD5 hash as the key for the RC4  or AES symmetric key al gorithms, along with the string or  stream data to  be encrypted. If using the AES algorithm, the Cipher Block Chaining  (CBC) mode, which requires  an initialization vector,  is used. The block size parameter is set to 16 byte s, and the initialization vector is a 16-byte random  number that is stored as the first 16 bytes of the encrypted stream or string.  The output is the encrypted data to be stored in the PDF file.  Stream data shall be encrypted after applying all stream  encoding filters and shall be decrypted before applying  any stream decoding filters. The number of bytes to  be encrypted or decrypted shall be given by the  Length entry in the stream dictionary. Decryption of strings (oth er than those in the encryption dictionary) shall be done  after escape-sequence processing and hexadecimal dec oding as appropriate to the string representation  described in  7.3.4, \"String Objects.\" 7.6.3 Standard Security Handler 7.6.3.1 General PDFs standard security handler shall allow  access permissions  and up to two passwords to be specified for a  document: an  owner password  and a  user password . An applications decision to encrypt a document shall be  based on whether the user creating the document sp ecifies any passwords or  access restrictions.  EXAMPLE A conforming writer may have a security settings dialog box that the  user can invoke before saving the PDF file.  If passwords or access restrictions are specified, t he document shall be encrypted, and the permissions and  information required to validate the passwords shall be st ored in the encryption dictionary. Documents in which  only file attachments are encrypted shall use the same password as the  user  and  owner  password. NOTE 1 A conforming writer may also create an encrypted  document without any user interaction if it has some other  source of information about what passwords and permissions to use.",""],"67":["' Adobe Systems Incorporated 2008  All rights reserved 59PDF 32000-1:2008 If a user attempts to open an encrypted document that  has a user password, the conforming reader shall first  try to authenticate the encrypted docume nt using the padding string defined in  7.6.3.3, \"Encryption Key  Algorithm\"  (default user password):  If this authentication attempt is successful, the  conforming reader may open, decrypt and display the  document on the screen.  If this authentication atte mpt fails, the application should prompt fo r a password. Correctly supplying either  password ( owner  or  user  password) should enable the user to open the document, decrypt it, and display it  on the screen.  Whether additional operations shall be allowed on a decr ypted document depends on which password (if any)  was supplied when the document was opened and on any a ccess restrictions that were specified when the  document was created:   Opening the document with the correct  owner password should allow full (owner) access to the document.  This unlimited access includes th e ability to change the do cuments passwords and access permissions.   Opening the document with the correct  user password (or opening a document with the default password)  should allow additional operations to be performed acco rding to the user access permissions specified in  the documents encryption dictionary.  Access permissions shall be specified in the form of fl ags corresponding to the various operations, and the set  of operations to which they correspond shall depend on  the security handlers revision number (also stored in  the encryption dictionary). If the securi ty handlers revision number is 2 or greater, the operations to which user  access can be controlled shall be as follows:   Modifying the documents contents   Copying or otherwise extracting te xt and graphics from the  document, including extr action for accessibility  purposes (that is, to make the contents of the document  accessible through assistive technologies such as  screen readers or Braille  output devices; see  14.9, \"Accessibility Support\" .  Adding or modifying text annotations (see  12.5.6.4, \"Text Annotations\" ) and interactive form fields (see  12.7, \"Interactive Forms\" )  Printing the document  If the security handlers revision number is 3 or grea ter, user access to the following operations shall be  controlled more selectively:   Filling in forms (that is, f illing in existing interactive form fields)  and signing the document (which amounts  to filling in existing signature fields , a type of interactive form field).   Assembling the document: inserting, rotating, or dele ting pages and creating navigation elements such as  bookmarks or thumbnail images (see  12.3, \"Document-Level Navigation\" ).  Printing to a representation from which a faithful  digital copy of the PDF co ntent could be generated.  Disallowing such printing may result in degradation of output quality.  In addition, security handlers of revisions 3 and great er shall enable the extraction of text and graphics (in  support of accessibility to users with disabilities or for other purposes) to  be controlled separately.  If a security handler of revision 4 is  specified, the standard security h andler shall support crypt filters (see  7.6.5, \"Crypt Filters\" ). The support shall be limited to the  Identity crypt filter (see  Ta b l e  26) and crypt filters named  StdCF  wh ose dictionaries contain a  CFM value of  V2 or  AESV2 and an  AuthEvent  value of  DocOpen . Public- Key security handlers in this case shall use crypt filters named  DefaultCryptFilter  when all document content  is encrypted, and shall use crypt filters named  DefEmbeddedFile  when file attachments only are encrypted in",""],"68":["PDF 32000-1:2008 60' Adobe Systems Incorporated 2008  All rights reserved place of StdCF  name. This nomenclature shall not be used as indicator of the type of the security handler or  encryption. Once the document has been opened and decrypted succes sfully, a conforming reader technically has access  to the entire contents of the document. There is nothing  inherent in PDF encryption that enforces the document  permissions specified in the encryption dictionary. Confor ming readers shall respect the intent of the document  creator by restricting user access to an encrypted PDF file according to the permissions contained in the file.  NOTE 2 PDF 1.5 introduces a set of  access permissions that do not require  the document to be encrypted (see  12.8.4,  \"Permissions\"). This enables limited access to a document when a user is not be abl e to respond to a prompt  for a password. For example, there may be conforming  readers that do not have a person running them such  as printing off-line or on a server. 7.6.3.2 Standard Encryption Dictionary Ta b l e  21 shows the encryption dictionary entries for the standard security handler (in addition to those in  Ta b l e  20). The values of the  O and U entries in this dictionary shall be us ed to determine whether a password entered  when the document is opened is the correct owner password, user password, or neither.  The value of the  P entry shall be interpreted as an unsigned 32-bi t quantity containing a set of flags specifying  which access permissions shall be granted when  the document is opened with user access.  Table  22 shows the meanings of these flags.  Bit positions within the flag word shall be numbered from 1 (low-order) to 32 (high- order). A 1 bit in any position shall enable the  corresponding access permission. Which bits shall be  meaningful, and in some cases how they shall be interpreted, shall depend on the security handlers revision  number (specified in the encryption dictionarys  R entry).  Table  21   Additional encryption dictionary entries  for the standard security handler   Key Type Value Rnumber (Required)  A number specifying which revision of the standard security  handler shall be used to interpret this dictionary:  2 if the document is encrypted with a  V value less than 2 (see  Ta b l e  20) and does not have any of the access permissions set to 0 (by means of  the P entry, below) that are designated Security handlers of revision 3  or greater in  Ta b l e  223 if the document is encrypted with a  V value of 2 or 3, or has any  Security handlers of revision 3 or greater access permissions set to 0 4 if the document is encrypted with a  V value of 4 Ostring(Required)   A 32-byte string, based on both the owner and user passwords,  that shall be used in computing the encryption key and in determining  whether a valid owner password was entered. For more information, see  7.6.3.3, \"Encryption Key Algorithm,\"  and  7.6.3.4, \"Password Algorithms.\"  Ustring(Required)  A 32-byte string, based on the user password, that shall be  used in determining whether to prompt  the user for a password and, if so,  whether a valid user or owner password was entered. For more  information, see 7.6.3.4, \"Passw ord Algorithms.\"  Pinteger (Required)  A set of flags specifying which operations shall be permitted  when the document is o pened with user access (see  Ta b l e  22).  EncryptMetadata boolean (Optional; meaningful  only when the value of  V is 4; PDF 1.5)  Indicates whether the document-level  metadata stream (see  14.3.2, \"Metadata  Streams\" ) shall be encrypted. Conforming products should respect this  value. Default value:  true.",""],"69":["' Adobe Systems Incorporated 2008  All rights reserved 61PDF 32000-1:2008 Conforming readers shall ignore all flags other than t hose at bit positions 3, 4, 5, 6, 9, 10, 11, and 12. NOTE PDF integer objects can be interpreted as binary values in a signed twos-complement form. Since all the  reserved high-order flag bits in the encryption dictionarys  P value are required to be 1, the integer value  Pshall be specified as a negative inte ger. For example, assuming revision 2 of the security handler, the value - 44 permits printing and copying but disallows modifying the contents and annotations.  7.6.3.3 Encryption Key Algorithm As noted earlier, one function of a security handler is  to generate an encryption key for use in encrypting and  decrypting the contents of a document. Given a passwor d string, the standard security handler computes an  encryption key as shown in  \"Algorithm 2: Computing an encryption key\" . Algorithm 2: Computing an encryption key a) Pad or truncate the password string to exactly 32 bytes.  If the password string is more than 32 bytes long,  use only its first 32 bytes; if it is less than 32 by tes long, pad it by appending the required number of  additional bytes from the beginning of the following padding string:  Table  22   User access permissions   Bit position Meaning3(Security handlers of revision 2)  Print the document.  (Security handlers of revision 3 or greater)  Print the document (possibly not at the highest quality level,  depending on whether bit 12 is also set).  4Modify the contents of the docu ment by operat ions other than  those controlled by bits 6, 9, and 11.  5(Security handlers of revision 2)  Copy or otherwise extract  text and graphics from the document, including extracting text  and graphics (in support of accessibility to users with  disabilities or for other purposes).  (Security handlers of revision 3 or greater)  Copy or otherwise  extract text and graphics from  the document by operations  other than that controlled by bit 10.  6Add or modify text annotations, fill in interactive form fields,  and, if bit 4 is also set, create or modify interactive form fields  (including signature fields).  9(Security handlers of revision 3 or greater)  Fill in existing  interactive form fields (including signature fields), even if bit 6  is clear.  10(Security handlers of revision 3 or greater)  Extract text and graphics (in support of accessibility to users with disabilities  or for other purposes).  11(Security handlers of revision 3 or greater)  Assemble the document (insert, rotate, or delete pages and create  bookmarks or thumbnail images), even if bit 4 is clear.  12(Security handlers of revision 3 or greater)  Print the document to a representation from which a faithful digital  copy of the PDF content could be generated. When this bit is  clear (and bit 3 is set), printing is limited to a low-level  representation of the appearance, possibly of degraded  quality.",""],"70":["PDF 32000-1:2008 62' Adobe Systems Incorporated 2008  All rights reserved < 28 BF 4E 5E 4E 75 8A 41 64 00 4E 56 FF FA 01 08 2E 2E 00 B6 D0 68 3E 80 2F 0C A9 FE 64 53 69 7A  >That is, if the password string is  n bytes long, append the first 32  - n bytes o f the padding string to the end  of the password string. If the password string is em pty (zero-length), meaning there is no user password,  substitute the entire padding string in its place.  b) Initialize the MD5 hash function and pass the result of  step (a)  as input to this function.  c) Pass the value of the encryption dictionarys  O entry to the MD5 hash function. ( \"Algorithm 3: Computing  the encryption dictionarys O (owner password) value\"  shows how the  O value is computed.)  d) Convert the integer value of the  P entry to a 32-bit unsigned binary number and pass these bytes to the  MD5 hash function, low-order byte first.  e) Pass the first element of the files file identifier array (the value of the  ID entry in the documents trailer  dictionary; see  Ta b l e  15) to the MD5 hash function.  NOTE The first element of the ID array generally remain s the same for a given document. However, in some  situations, conforming writers may regenerate the ID  array if a new generation of  a document is created.  Security handlers are encouraged not to rely on the ID in the encryption key computation. f)(Security handlers of revision 4 or greater)  If document metadata is not being encrypted, pass 4 bytes with  the value 0xFFFFFFFF to the MD5 hash function.  g) Finish the hash. h)(Secur ity handlers of revision 3 or greater)  Do the following 50 times: Take the output from the previous  MD5 hash and pass the first  n bytes of the output as input into a new MD5 hash, where  n is the number of  bytes of the encryption key as defined by the value of the encryption dictionarys  Length  entry.  i) Set the encryption key to the first  n bytes of the output from the final MD5 hash, where  n shall always be 5  for security handlers of revision 2 but, for security  handlers of revision 3 or greater, shall depend on the  value of the encryption dictionarys  Length  entry.  This algorithm, when applied to the user password stri ng, produces the encryption key used to encrypt or  decrypt string and stream data according to  \"Algorithm 1: Encryption of data using the RC4 or AES algorithms\" in 7.6.2, \"General Encryption Algorithm.\"  Parts of this algorithm are also  used in the algorithms described  below.  7.6.3.4 Password Algorithms In addition to the encryption key, the standard security  handler shall provide the contents of the encryption  dictionary ( Ta b l e  20 and  Table  21). The values of the  Filter , V, Length , R, and  P entries are straightforward, but  the computation of the  O (owner password) and  U (user password) entries requires further explanation. The  algorithms 3 through 7 that follow show how the values  of the owner password and user password entries shall  be computed (with separate versions of the latter  depending on the revision of the security handler).  Algorithm 3: Computing the encryption dict ionarys O (owner password) value a) Pad or truncate the owner password string as described in  step (a)  of \"Algorithm 2: Computing an  encryption key\" . If there is no owner password, use the user password instead.  b) Initialize the MD5 hash function and pass the result of  step (a)  as input to this function.  c)(Secur ity handlers of revision 3 or greater)  Do the following 50 times: Take the output from the previous  MD5 hash and pass it as input into a new MD5 hash.",""],"71":["' Adobe Systems Incorporated 2008  All rights reserved 63PDF 32000-1:2008 d) Create an RC4 encryption key using the first  n bytes of the output from the final MD5 hash, where  n shall  always be 5 for security handlers of revision 2 but, fo r security handlers of revision 3 or greater, shall  depend on the value of the  encryption dictionarys  Length  entry.  e) Pad or truncate the user password string as described in  step (a)  of \"Algorithm 2: Computing an encryption  key\" . f) Encrypt the result of  step (e) , using an RC4 encryption function with the encryption key obtained in  step  (d) . g)(Secu rity handlers of revision 3 or greater)  Do the following 19 times: Take the output from the previous  invocation of the RC4 function and pass it as input  to a new invocation of the function; use an encryption  key generated by taking each byte of the encryption key obtained in  step (d)  and performing an XOR  (exclusive or) operation between that byte and the singl e-byte value of the iteration counter (from 1 to 19).  h) Store the output from the final invocation  of the RC4 function as the value of the  O entry in the encryption  dictionary.  Algorithm 4: Computing the encryption dictionarys  U (user password) value (Security handlers of  revision 2) a) Create an encryption key based on the user password string, as described in  \"Algorithm 2: Computing an  encryption key\" . b) Encrypt the 32-byte padding string shown in  step (a) of \"Algorithm 2: Computing an encryption key\" , using  an RC4 encryption function with the encryption key from the preceding step.  c) Store the result of  step (b) as the value of the  U entry in the encryption dictionary.  Algorithm 5: Computing the encryption dictionarys  U (user password) value (Security handlers of  revision 3 or greater) a) Create an encryption key based on the user password string, as described in  \"Algorithm 2: Computing an  encryption key\" . b) Initialize the MD5 hash function and pa ss the 32-byte padding string shown in  step (a)  of \"Algorithm 2: Computing an encryption key\"  as input to this function.  c) Pass the first element of the files file identifier array (the value of the  ID entry in the documents trailer  dictionary; see  Ta b l e  15) to the hash function and finish the hash.  d) Encrypt the 16-byte result of the hash, using an  RC4 encryption function with the encryption key from  step  (a) . e) Do the following 19 times: Take the output from the prev ious invocation of the RC4 function and pass it as  input to a new invocation of the function; use an  encryption key generated by taking each byte of the  original encryption key obtained in  step (a)  and performing an XOR (exclusiv e or) operation between that  byte and the single-byte value of the iteration counter (from 1 to 19).  f) Append 16 bytes of arbitrary padding to the output from  the final invocation of the RC4 function and store  the 32-byte result as the value of the  U entry in the encryption dictionary.  NOTE The standard security handler uses the algorithms  6 and 7 that follow, to determine whether a supplied  password string is the correct user or owner password.  Note too that algorithm 6 can be used to determine  whether a documents user password is the empty st ring, and therefore  whether to suppress prompting for a  password when the document is opened.",""],"72":["PDF 32000-1:2008 64' Adobe Systems Incorporated 2008  All rights reserved Algorithm 6: Authenticating the user password a) Perform all but the last step of  \"Algorithm 4: Computing the encryption dictionarys U (user password)  value (Security handlers of revision 2)\"  or  \"Algorithm 5: Computing the en cryption dictionarys U (user  password) value (Security handlers of revision 3 or greater)\"  using the supplied password string.  b) If the result of  step (a)  is equal to the value of the encryption dictionarys  U entry (comparing on the first 16  bytes in the case of security handlers of revision 3  or greater), the password supplied is the correct user  password. The key obtained in  step (a)  (that is, in the first step of  \"Algorithm 4: Computing the encryption  dictionarys U (user password) val ue (Security handlers of revision 2)\"  or \"Algorithm 5: Computing the  encryption dictionarys U (user password) value (Security handlers of revision 3 or greater)\" ) shall be used  to decrypt the document.  Algorithm 7: Authenticating the owner password a) Compute an encryption key from the supplied password string, as described in steps  (a)  to (d)  of \"Algorithm 3: Computing the encryption dictionarys O (owner password) value\" . b)(Secur ity handlers of revision 2 only)  Decrypt the value of the encryption dictionarys  O entry, using an RC4  encryption function with the encryption key computed in  step (a) . (Security handlers of revision 3 or greater)  Do the following 20 times: Decrypt the value of the encryption  dictionarys  O entry (first iteration) or the output from th e previous iteration (all subsequent iterations),  using an RC4 encryption function with a different  encryption key at each iteration. The key shall be  generated by taking the original key (obtained in  step (a) ) and performing an XOR (exclusive or) operation  between each byte of the key and the single-byte  value of the iteration counter (from 19 to 0).  c) The result of  step (b)  purports to be the user password. Authenticate this user password using  \"Algorithm  6: Authenticating the user password\" . If it is correct, the password su pplied is the correct owner password.  7.6.4 Public-Key Security Handlers 7.6.4.1 General Security handlers may use  public-key  encryption technology to encrypt a document (or strings and streams  within a document). When doing so, specifying one or more lists of recipients, where each list has its own  unique access permissions may be done. Only specifie d recipients shall open the encrypted document or  content, unlike the standard security handler, where  a password determines access. The permissions defined  for public-key security handlers are shown in  Ta b l e  24 in 7.6.4.2, \"Public-Key  Encryption Dictionary\" .Public-key security handlers use the industry sta ndard Public Key Cryptographic Standard Number 7  (PKCS#7) binary encoding syntax to encode recipient lis t, decryption key, and acce ss permission information.  The PKCS#7 specification is  in Internet RFC 2315,  PKCS #7: Cryptographic Message Syntax, Version 1.5  (see  the  Bibliography ).  When encrypting the data, each recipients X.50 9 public key certificate  (as described in ITU-T  Recommendation X.509; see the  Bibliography ) shall be available. When decrypting the data, the conforming  reader shall scan the recipient list for which the content is encrypted and shall attempt to find a match with a  certificate that belongs to the user. If a match is found, the user requires access to the corresponding private  key, which may require authentication, possibly usin g a password. Once access is obtained, the private key  shall be used to decrypt the encrypted data. 7.6.4.2 Public-Key Encryption Dictionary Encryption dictionaries for public-key security  handlers contain the common entries shown in  Ta b l e  20, whose  values are described above. In addition,  they may contain the entry shown in  Ta b l e  23 as described below. The  Filter entry shall be the name of  a public-key security handler.",""],"73":["' Adobe Systems Incorporated 2008  All rights reserved 65PDF 32000-1:2008 NOTE Examples of existing security handle rs that support public-key encryption are  Entrust.PPKEF, Adobe.PPKLite , and  Adobe.PubSec . This handler will be the prefe rred handler when encrypting the  document. Permitted values of the  SubFilter entry for use with conforming public-key security handlers are  adbe.pkcs7.s3 , adbe.pkcs7.s4 , which shall be used when no t using crypt filters (see  7.6.5, \"Crypt Filters\" ) and  a dbe.pkcs7.s5 , which shall be used when using crypt filters. The  CF, St mF , and  StrF  entries may be present when  SubFilter  is adbe.pkcs7.s5. The value of the  P entry shall be interpreted as an unsigned 32-bi t quantity containing a set of flags specifying  which access permissions shall be granted when  the document is opened with user access.  Table  24 shows the meanings of these flags. Bit position s within the flag word shall be numbered from 1 (low-order) to 32 (high- order). A 1 bit in any position shall enable the corresponding access permission. Conforming readers shall ignore all flags other than thos e at bit positions 2, 3, 4, 5, 6, 9, 10, 11, and 12. Table  23   Additional encryption dictionary entries for public-key security handlers   Key Type Value Recipients array (Required when  SubFilter is adbe.pkcs7.s3  or adbe.pkcs7.s4 ; PDF 1.3) An array of byte-strings, where each string is a PKCS#7 object listing  recipients who have been granted equal access rights to the document. The  data contained in the PKCS#7 object shall include both a cryptographic key  that shall be used to decrypt the enc rypted data and the access permissions  (see Table  24) that apply to the recipient list. There shall be only one  PKCS#7 object per unique set of access permissions; if a recipient appears  in more than one list, the permissions used shall be those in the first  matching list.  When  Su bFilter  is  adbe.pkcs7.s5 , recipient lists shall  be specified in the  crypt filter dictionary; see  Ta b l e  27.Pinteger (Re quired ) A set of flags specifying which operations shall be permitted  when the document is opened with user acce ss. If bit 2 is set to 1, all other  bits are ignored and all operations ar e permitted. If bit 2 is set to 0,  permission for operations are based on the values of the remaining flags  defined in  Ta b l e  24.Table  24   Public-Key security ha ndler user access permissions   Bit position Meaning2When set permits change of encryption and enables all other  permissions.3Print the document (possibly not  at the highest quality level,  depending on whether bit 12 is also set).  4Modify the contents of the docu ment by operat ions other than  those controlled by bits 6, 9, and 11.  5Copy or otherwise extract  text and graphics from the  document by operations other th an that controlled by bit 10.  6Add or modify text annotations, fill in interactive form fields,  and, if bit 4 is also set, create or modify interactive form fields  (including signature fields).  9Fill in existing interactive form fields (including signature  fields), even if bit 6 is clear.  10Extract text and graphics (in support of accessibility to users  with disabilities or for other purposes).",""],"74":["PDF 32000-1:2008 66' Adobe Systems Incorporated 2008  All rights reserved 7.6.4.3 Public-Key Encryption Algorithms Figure 4  illustrates how PKCS#7 objects shall be used w hen encrypting PDF files. A PKCS#7 object is  designed to encapsulate and encrypt what is referred to as the  enveloped data .Figure 4   Public-key encryption algorithm The enveloped data in the PKCS#7 object contains keying  material that shall be used to decrypt the document  (or individual strings or streams in the  document, when crypt filters are used; see  7.6.5, \"Crypt Filters\" ). A key  shall be used to encrypt (and decrypt) the enveloped data. This key (the  plaintext key  in Figure 4 ) shall be encrypted for each recipient, using that recipients public  key, and shall be stored in the PKCS#7 object (as the  encrypted key  for each recipient). To decrypt the document, that key shall be decrypted using the recipients  private key, which yields a decrypted (plaintext) key. That key, in turn, shall be used to decrypt the enveloped  data in the PKCS#7 object, resulting in a byte array that includes the following information:  A 20-byte seed that shall be used to crea te the encryption key that is used by  \"Algorithm 1: Encryption of  data using the RC4 or AES algorithms\" . The seed shall be a unique random number generated by the  security handler that encrypted the document.  A 4-byte value defining the permissions, least significant byte first. See  Ta b l e  24 for the possible  permission values.   When  SubFilter is adbe.pkcs7.s3 , the relevant permissions shall be only those specified for revision 2 of  the standard security handler. For  ad be.pkcs7.s4 , security handlers of revisi on 3 permissions shall apply.  For  adbe.pkcs7.s5 , which supports the use of crypt filter s, the permissions shall be the same as  adbe.pkcs7.s4  when the crypt filter is referenced from the  StmF  or  StrF  entries of the encryption  11Assemble the document (insert, rotate, or delete pages and  create bookmarks or thumbnail images), even if bit 4 is clear.  12 Print the document to a repres entation from which a faithful  digital copy of the PDF co ntent could be generated. When  this bit is clear (and bit 3 is set), printing is limited to a low- level representation of the appearance, possibly of degraded  quality.  Table 24   Public-Key security handler user access permissions  (continued) Bit position Meaning","20-byte seed","Permissions*","PKCS#7 Object","Enveloped data","Encrypted key","John Doe","Decrypt","John Does private key","Plaintext key","Decrypt","Plaintext byte array","Used to generate  encryption key","Encrypted keyJeff Smith","* Permissions not pres- ent when PKCS#7 object  is referenced from Crypt  filter decode parameter  dictionary",""],"75":["' Adobe Systems Incorporated 2008  All rights reserved 67PDF 32000-1:2008 dictionary. When referenced from the  Crypt filter decode parameter dictionary of a stream object (see  Ta b l e  14), the 4 bytes of permissions sha ll be absent from the enveloped data. The algorithms that shall be used to encrypt the  enveloped data in the PKCS#7 object are: RC4 with key  lengths up to 256-bits, DES, Triple  DES, RC2 with key lengths up to  128 bits, 128-bit AES in Cipher Block  Chaining (CBC) mode, 192-bit AES in  CBC mode, 256-bit AES in CBC mode.  The PKCS#7 specification is in  Internet RFC 2315,  PKCS #7: Cryptographic Message Syntax, Version 1.5  (see the  Bibliography ). The encryption key used by  \"Algorithm 1: Encryption of data  using the RC4 or AES algorithms\" shall be  calculated by means of an SHA-1 message digest op eration that digests the following data, in order: a) The 20 bytes of seed b) The bytes of each item in the  Recipients array of PKCS#7 objects in the order in which they appear in the  array c) 4 bytes with the value 0xFF if the key being generated  is intended for use in document-level encryption  and the document metadata is being left as plaintext  The first n/8 bytes of the resulting digest shall  be used as the encryption key, where  n is the bit length of the  encryption key.  7.6.5 Crypt Filters PDF 1.5 introduces  crypt filters,  which provide finer granularity control  of encryption within a PDF file. The use  of crypt filters involves  the following structures:  The encryption dictionary (see  Ta b l e  20) contains entries that enumerate the crypt filters in the document  (CF) a nd specify which ones are used by default to decrypt all the streams ( StmF ) and strings ( StrF ) in the  document. In addition, the value of the  V entry shall be 4 to use crypt filters.  Each crypt filter specified in the  CF entry of the encryption dictionary shall be represented by a  crypt filter  dictionary , whose entries are shown in  Table  25. A stream filter type, the  Crypt  filter (see  7.4.10, \"Crypt Filter\" ) can be specified for any stream in the  document to override the default f ilter for streams. A conforming reader shall provide a standard  Identity filter which shall pass the data unchanged (see  Ta b l e  26) to allow specific stre ams, such as document  metadata, to be unencrypted in an otherwise encrypted document. The streams  DecodeParms  entry shall  contain a  Crypt filter decode parameters dictionary (see  Ta b l e  14) whose  Name entry specifies the  particular crypt filter  to be used (if missing,  Identity  is used). Different streams  may specify different crypt  filters. Authorization to decrypt a stream shall always be obtain ed before the stream can be  accessed. This typically  occurs when the document is opened , as specified by a value of  DocOpen for the AuthEvent  entry in the crypt  filter dictionary. Conforming readers and security handle rs shall treat any attempt to  access a stream for which  authorization has failed as an error.  AuthEvent can also be  EFOpen, which indicates the presence of an  embedded file that is encrypted with a crypt filter that  may be different from the crypt filters used by default to  encrypt strings and streams in the document.  In the file specificat ion dictionary (see  7.11.3, \"File Specification Dictionaries\" ), related files ( RF) shall use the  same crypt filter as the embedded file ( EF).",""],"76":["PDF 32000-1:2008 68' Adobe Systems Incorporated 2008  All rights reserved A value of  None for the  CFM entry in the crypt filter dictionary allows the security handler to do its own  decryption. This allows the handler to tightly cont rol key management and use any preferred symmetric-key  cryptographic algorithm.  Table  25   Entries common to all  crypt filter dictionaries   Key Type Value Type name (Optional)   If present, shall be  CryptFilter for a crypt filter dictionary. CFMname (Optional)  The method used, if any, by the conforming reader to  decrypt data. The following values shall be supported: NoneThe application shall not decrypt  data but shall direct the  input stream to the security handler for decryption.  V2The application shall ask the security handler for the  encryption key and shall implicitly decrypt data with  \"Algorithm 1: Encryption of data using the RC4 or AES  algorithms\", using the RC4 algorithm.  AESV2(PDF 1.6) The application shall ask the security handler for  the encryption key and shall implicitly decrypt data with  \"Algorithm 1: Encryption of data using the RC4 or AES  algorithms\", using the AES algorithm in Cipher Block  Chaining (CBC) mode with a 16-byte block size and an  initialization vector that s hall be randomly generated and  placed as the first 16 bytes in the stream or string.  When the value is  V2 or AESV2, the application may ask once for this  encryption key and cache the key for subsequent use for streams that  use the same crypt filter. Theref ore, there shall be a one-to-one  relationship between a crypt filt er name and the corresponding  encryption key. Only the values listed here shall  be supported. Applications that  encounter other values shall report t hat the file is encrypted with an  unsupported algorithm. Default value:  None. AuthEvent name (Optional)  The event to be used to tri gger the authorization that is  required to access encryption keys used by this filter. If authorization  fails, the event shall fail. Valid values shall be: DocOpen : Authorization shall be required when a document is  opened. EFOpen:Authorization shall be required when accessing  embedded files. Default value:  DocOpen .If this filter is used as the value of  StrF  or StmF  in the encryption  dictionary (see  Table  20), the conforming reader shall ignore this key  and behave as if the value is  DocOpen .Length integer (Optional)  The bit length of the encryption  key. It shall be a multiple of  8 in the range of 40 to 128.  Security handlers may define their own use of the  Length  entry and  should use it to define the bit leng th of the encryption key. Standard  security handler expresses the length in multiples of 8 (16 means 128)  and public-key security handler expresses it as is (128 means 128).",""],"77":["' Adobe Systems Incorporated 2008  All rights reserved 69PDF 32000-1:2008 Security handlers may add their own private data to crypt filter dictionaries. Names for private data entries shall  conform to the PDF name registry (see  Annex E ). Ta b l e  27 lists the additional crypt filter dictionary entr ies used by public-key security handlers (see  7.6.4, \"Public-Key Secu rity Handlers\" ). When these entries are present, the value of  CFM shall be V2 or  AESV2. EXAMPLE The following shows the use of  crypt filters in an encrypted document containing a  plaintext document-level metadata stream. The metadata stre am is left as is by applying the  Identity  crypt filter. The  remaining streams and strings are de crypted using the default filters. %PDF1.5 1 0 obj % Document catalog << /Type /Catalog /Pages 2 0 R/Metadata 6 0 R >>endobj 2 0 obj % Page tree << /Type /Pages /Kids [3 0 R] /Count 1 >>endobj 3 0 obj % 1s t page << /Type /Page Table  26   Standard crypt filter names   Name Description IdentityInput data shall be passed through without any processing. Table  27   Additional crypt filter dictionary en tries for public-key security handlers   Key Type Value Recipients array or  string(Required)  If the crypt filter is referenced from  StmF  or  StrF  in the  encryption dictionary, this entry shall be an array of byte strings, where  each string shall be a binary-enc oded PKCS#7 object that shall list  recipients that have been granted equal access rights to the  document. The enveloped data contained in the PKCS#7 object shall  include both a 20-byte seed value  that shall be used  to compute the  encryption key (see  7.6.4.3, \"Public-Key Encryption Algorithms\" ) followed by 4 bytes of permissions settings (see  Ta b l e  22) that shall  apply to the recipient list. There shall be only one object per unique set  of access permissions. If a recipient appears in more than one list, the  permissions used shall be those in the first matching list.  If the crypt filter is referenced from a  Crypt filter decode parameter  dictionary (see  Table  14), this entry shall be a string that shall be a  binary-encoded PKCS#7 object shall contain a list of all recipients who  are permitted to access the corresponding encrypted stream. The  enveloped data contained in the PKCS#7 object shall be a 20-byte  seed value that shall be used to cr eate the encryption key that shall be  used by the algorithm in  \"Algorithm 1: Encryption of data using the  RC4 or AES algorithms\" . EncryptMetadata boolean (Optional; used only by crypt fi lters that are referenced from  StmF  in an encryption dictionary)  Indicates whether the document-level  metadata stream (see  14.3.2, \"Metadata Streams\" ) shall be encrypted.  Conforming readers shall respect this value when determining whether  metadata shall be encrypted. The va lue of the EncryptMetadata entry  is set by the security handler ra ther than the conforming reader.  Default value:  true.",""],"78":["PDF 32000-1:2008 70' Adobe Systems Incorporated 2008  All rights reserved /Parent 2 0 R /MediaBox [0 0 612 792] /Contents 4 0 R >>endobj 4 0 obj % Page contents << /Length 35 >> stream*** Encrypted Page-marking operators *** endstream endobj 5 0 obj << /Title ($#*#%*$#^&##) >> % Info di ctionary: encrypted text string  endobj 6 0 obj << /Type /Metadata /Subtype /XML/Length 15 /Filter [/Crypt] % Uses a crypt filter /DecodeParms % with these parameters << /Type /CryptFilterDecodeParms   /Name /Identity % Indicates no encryption >>>>streamXML metadata  % Unencrypted metadata endstream endobj 8 0 obj % Encryption dictionary << /Filter /MySecurityHandlerName /V 4% Version 4: allow crypt filters /CF% List of crypt filters << /MyFilter0 << /Type /CryptFilter /CFM V2 >> % Uses the standard algorithm >>/StrF /MyFilter0 % Strings are decrypted using /MyFilter0 /StmF /MyFilter0 % Streams ar e decrypted using /MyFilter0 ... % Private data for /MySecurityHandlerName /MyUnsecureKey (12345678) /EncryptMetadata false   >>endobj xref .... trailer << /Size 8 /Root 1 0 R/Info 5 0 R /Encrypt 8 0 R>>startxref 495%%EOF7.7 Document Structure 7.7.1 General A PDF document can be regarded as a hierarchy of object s contained in the body section of a PDF file. At the  root of the hierarchy is the documents  catalog  dictionary (see  7.7.2, \"Document Catalog\" ). NOTE Most of the objects in the hierarchy are dictionaries.  Figure 5  illustrates the structure  of the object hierarchy.",""],"79":["' Adobe Systems Incorporated 2008  All rights reserved 71PDF 32000-1:2008 EXAMPLE Each page of the docu ment is represented by a page object a dictionary that incl udes references to the  pages contents and other attributes, such as its thumbnail image ( 12.3.4, \"Thumbnail Images\" ) and any  annotations ( 12.5, \"Annotations\" ) associated with it. The individual page objects are tied together in a  structure called the  page tree  (described in  7.7.3, \"Page Tree\" ), which in turn is specified by an indirect  reference in the document catalog. Parent, child, and  sibling relationships within the hierarchy are defined  by dictionary entries whose values are indirect references to other dictionaries.  The data structures described in this sub-clause, particularly the  Catalog  and  Page dictionaries, combine  entries describing document structur e with ones dealing with the detailed semantics of documents and pages.  All entries are listed here, but many of their descri ptions are deferred to subsequent sub-clauses.  7.7.2 Document Catalog The root of a documents object hierarchy is the  catalog  dictionary, located by means of the  Root entry in the  trailer of the PDF file (see  7.5.5, \"File Trailer\" ). The catalog contains references to other objects defining the  documents contents, outline, article th reads, named destinations, and other a ttributes. In addition, it contains  information about how the document shall be displayed  on the screen, such as whether its outline and  thumbnail page images shall be displayed automatically and whether some location other than the first page  shall be shown when the document is opened.  Ta b l e  28 shows the entries in the catalog dictionary.",""],"80":["PDF 32000-1:2008 72' Adobe Systems Incorporated 2008  All rights reserved  Figure  5   Structure of a PDF document","Outlineentry","Page","Thumbnail image","Annotations","Bead","Bead","Thread","Outlineentry","Content stream","Thread","Nameddestinations","Article threads","Interactive form","Outlinehierarchy","Document catalog","Page","Page tree",""],"81":["' Adobe Systems Incorporated 2008  All rights reserved 73PDF 32000-1:2008 Table  28   Entries in the catalog dictionary   Key Type Value Type name (Required)  The type of PDF object that  this dictionary describes;  shall be  Catalog  for the catalog dictionary.  Version name (Optional; PDF  1.4) Th e version of the PDF  specification to which  the document conforms (for example,  1.4) if later than the version  specified in the files header (see  7.5.2, \"File Header\" ). If the  header specifies a later version, or if this entry is absent, the  document shall conform to the  version specified in the header.  This entry enables a conforming wr iter to update the version using  an incremental update; see  7.5.6, \"Incremental Updates.\" The value of this entry shall be  a name object, not a number, and  therefore shall be preceded by  a SOLIDUS (2Fh) character (/)  when written in the PDF file  (for example, /1.4).  Extensionsdictionary (Optional; ISO 32000)  An extensions dictionary containing  developer prefix identification  and version numbers for developer  extensions that occur in this document.  7.12, Extensions  Dictionary , describes this dictionary and how it shall be used. Pagesdictionary (Required; shall be an indirect reference)  The page tree node  that  shall be the root of the documents  page tree  (see 7.7.3, \"Page  Tree\" ). PageLabels number  tree(Optional; PDF  1.3) A number tree (see  7.9.7, \"Number Trees\" ) defining the page labelling for the document. The keys in this tree  shall be page indices; the corresponding values shall be  page  label dictionaries  (see 12.4.2, \"Page Labels\" ). Each page index  shall denote the first page in a  labelling range  to which the  specified page label dictionary applies. The tree shall include a  value for page index 0.  Names dictionary (Optional; PDF  1.2) Th e documents name dictionary (see  7.7.4,  \"Name Dictionary\" ).  Dests dictionary (Optional; PDF  1.1; shall be an indirect reference)  A dictionary of  names and corresponding  destinations  (see 12.3.2.3, \"Named  Destinations\" ).  ViewerPreferences dictionary (Optional; PDF  1.2) A vi ewer preferences dictionary (see  12.2,  \"Viewer Preferences\" ) specifying the way  the document shall be  displayed on the screen. If this  entry is absent, conforming  readers shall use their own curr ent user preference settings.  PageLayout name (Optional)   A name object specifying the  page layout shall be used  when the document is opened:  SinglePageDisplay one page at a time  OneColumn Display the pages in one column  TwoColumnLeft Display the pages in two columns, with odd- numbered pages on the left TwoColumnRight Display the pages in two columns, with odd- numbered pages on the right  TwoPageLeft (PDF 1.5) Display the pages two at a time,  with odd-numbered pages on the left TwoPageRight (PDF 1.5) Display the pages two at a time,  with odd-numbered pages on the right  Default value: SinglePage.",""],"82":["PDF 32000-1:2008 74' Adobe Systems Incorporated 2008  All rights reserved PageModename (Optional)  A name object specifying how the document shall be  displayed when opened:  UseNone Neither document outline nor thumbnail  images visible  UseOutlines Document outline visible  UseThumbs Thumbnail images visible  FullScreen Full-screen mode, with no menu bar, window  controls, or any other window visible  UseOC (PDF 1.5) Optional content group panel visible UseAttachments (PDF 1.6) Attachments panel visible Default value: UseNone.  Outlines dictionary (Optional; shall be an indirect reference)  The outline dictionary  that shall be the root of the documents  outline hierarchy  (see 12.3.3, \"Document Outline\" ). Threads array (Optional; PDF  1.1; shall be an indirect reference)  An array of thread dictionaries that shall represent the documents  article  threads (see  12.4.3, \"Articles\" ). OpenAction array or  dictionary (Optional; PDF  1.1)  A  value specifying a  destination  that shall be  displayed or an  action that shall be performed when the document  is opened. The value shall be either an array defining a  destination (see  12.3.2, \"Destinations\" ) or an action dictionary  representing an action ( 12.6, \"Actions\" ). If this entry is absent, the  document shall be opened to the top  of the first page at the default  magnification factor.  AA dictionary  (Optional; PDF  1.4) An  additional-actions dictionary defining the  actions that shall be taken in response to various  trigger events affecting the document as a whole (see  12.6.3, \"Trigger Events\" ). URIdictionary (Optional; PDF 1.1)  A URI dictionary containing document-level  information for  URI (uniform resource identifier) actions  (see 12.6.4.7, \"URI Actions\" ). AcroForm dictionary (Optional; PDF  1.2) T he documents  interactive form (AcroForm)  dictionary  (see 12.7.2, \"Interactive Form Dictionary\" ).  Metadata stream(Optional; PDF  1.4; shall be an indirect reference)  A metadata  stream that shall contain metadata for the document (see  14.3.2,  \"Metadata Streams\" ). StructTreeRoot dictionary  (Optional; PDF  1.3)   The documents structur e tree root dictionary  (see 14.7.2, \"Structure Hierarchy\" ). MarkInfodictionary (Optional; PDF  1.4) A mark information dictionary that shall  contain information about the documents usage of Tagged PDF  conventions (see  14.7, \"Logical Structure\" ). Lang text string(Optional; PDF  1.4)  A la nguage identifier  that shall specify the  natural language for all text in the document except where  overridden by language specifications for structure elements or  marked content (see  14.9.2, \"Natural Language Specification\" ). If this entry is absent, the language shall be considered unknown.  SpiderInfo dictionary (Optional; PDF  1.3) A W eb Capture information dictionary that  shall contain state information used by any Web Capture  extension (see  14.10.2, \"Web Capture  Information Dictionary\" ).  Table 28   Entries in the catalog dictionary  (continued) Key Type Value",""],"83":["' Adobe Systems Incorporated 2008  All rights reserved 75PDF 32000-1:2008 EXAMPLE The following shows  a sample catalog object.  1 0 obj<< /Type  /Catalog  /Pages  2 0 R /PageMode  /UseOutlines  /Outlines 3 0 R>>endobj 7.7.3 Page Tree 7.7.3.1 General The pages of a document are accessed  through a structure known as the  page tree , which defines the ordering  of pages in the document. Using the tree structure, c onforming readers using only limited memory, can quickly  open a document containing thousands  of pages. The tree contains nod es of two typesintermediate nodes,  called  page tree nodes , and leaf nodes, called  page objects whose form is described in the subsequent sub- clauses. Conforming products shall be prepared to handle any form of tree structure built of such nodes.  NOTE The simplest structure can consist of a single page  tree node that references al l of the documents page  objects directly. However, to optimize application perf ormance, a conforming writer  can construct trees of a  particular form, known as  balanced trees . Further information on this form of tree can be found in  Data  Structures and Algorithms , by Aho, Hopcroft, and Ullman (see the  Bibliography ). OutputIntents array(Optional; PDF  1.4) An  array of output intent  dictionaries that shall  specify the colour characteristi cs of output devices on which the  document might be rendered (see  14.11.5, \"Output Intents\" ). PieceInfo dictionary (Optional; PDF  1.4)  A  page-piece dictionary associated with the  document (see  14.5, \"Page-Piece Dictionaries\" ). OCProperties dictionary (Optional; PDF 1.5; required if  a document contains optional  content)  The documents optional content properties dictionary  (see 8.11.4, \"Configuring Optional Content\" ).Permsdictionary (Optional; PDF 1.5)  A permissions dictionary that shall specify  user access permissions for the document.  12.8.4, \"Permissions\" , describes this dictionary and how it shall be used. Legal dictionary (Optional; PDF 1.5)  A dictionary that shall contain attestations  regarding the content of a PDF do cument, as it relates to the  legality of digital signatures (see  12.8.5, \"Legal Content  Attestations\" ).Requirements array(Optional; PDF 1.7)  An array of requirement dictionaries that shall  represent requirements for the document.  12.10, \"Document  Requirements\" , describes this dictionary and how it shall be used. Collection dictionary (Optiona l; PDF 1.7 ) A collection dictionary that a conforming  reader shall use to enhance the presentation of file attachments  stored in the PDF document. (see  12.3.5, \"Collections\" ).NeedsRendering boolean (Optiona l; PDF 1.7 ) A flag used to expedite the display of PDF  documents containing XFA forms . It specifies whether the  document shall be regenerated  when the document is first  opened.  See the  XML Forms Architecture (XFA) Specification (Bibliography ).Default value:  false. Table 28   Entries in the catalog dictionary  (continued) Key Type Value",""],"84":["PDF 32000-1:2008 76' Adobe Systems Incorporated 2008  All rights reserved 7.7.3.2 Page Tree Nodes Ta b l e  29 shows the entries in a page tree node that shall always be present (Required).  NOTE The structure of the page tree is not necessarily relate d to the logical structure of the document; that is, page  tree nodes do not represent chapters, sections, and so  forth. Other data structures are defined for this  purpose; see  14.7, \"Logical Structure\" . Conforming products shall not be required to pres erve the existing structure of the page tree.  EXAMPLE The following illustrates the page  tree for a document wit h three pages. See  7.7.3.3, \"Page Objects,\"  for the contents of the individual page objects, and  H.5, \"Page Tree Example\" , for a more extended example  showing the page tree for a longer document.  2 0 obj<< /Type  /Pages  /Kids [ 4 0 R  10 0 R   24 0 R ]  /Count  3>>endobj 4 0 obj<< /Type  /Page    Additional entries describing the attributes of this page  >>endobj 10 0 obj << /Type  /Page    Additional entries describing the attributes of this page  >>endobj 24 0 obj << /Type  /Page    Additional entries describing the attributes of this page  >>endobj In addition to the entries shown in  Ta b l e  29, a page tree node may contain further entries defining  inherited  attributes  for the page objects that are its descendants (see  7.7.3.4, \"Inheritance of Page Attributes\"","). Table  29   Required entries in a page tree node   Key Type Value Type name (Required)  The type of PDF object that th is dictionary describes; shall be  Pages for a page tree node.  Parentdictionary (Required except in root node; prohibited in the root node; shall be an  indirect reference)  The page tree node that is the immediate parent of this  one.  Kidsarray (Required)  An array of indirect references to the immediate children of this  node. The children shall only be page objects or other page tree nodes.  Countinteger (Required)  The number of leaf nodes (page objects) that are descendants of  this node within the page tree.",""],"85":["' Adobe Systems Incorporated 2008  All rights reserved 77PDF 32000-1:2008 7.7.3.3 Page Objects The leaves of the page tree are  page objects , each of which is a dictionary sp ecifying the attributes of a single  page of the document.  Ta b l e  30 shows the contents of this dictionary.  The table also identifies which attributes  a page may inherit from its ancestor nodes in the page tree, as described under  7.7.3.4, \"Inheritance of Page  Attributes.\"  Attributes that are not explicitly identified in the table as inheritable shall not be inherited.  Table  30   Entries in a page object   Key Type Value Type name (Required)  The type of PDF object that this dictionary describes;  shall be  Page for a page object.  Parentdictionary (Required; shall be an indirect reference)  The page tree node that  is the immediate parent of this page object.  LastModified date (Required if  PieceInfo  is present; optional otherwise; PDF  1.3) T he  date and time (see  7.9.4, \"Dates\" ) when the pages contents were  most recently modified. If a page-piece dictionary ( PieceInfo) is present, the modification date shall be used to ascertain which of  the application data dictionaries that  it contains correspond to the  current content of the page (see  14.5, \"Page-Piece Dictionaries\" ). Resources dictionary (Required; inheritable)  A dictionary containing any resources  required by the page (see  7.8.3, \"Resource Dictionaries\" ). If the  page requires no resources, the value of this entry shall be an  empty dictionary. Omitting the entry  entirely indicates that the  resources shall be inherited from an ancestor node in the page tree.  MediaBoxrectangle (Required; inheritable)  A rectangle (see  7.9.5, \"Rectangles\" ), expressed in default user space units, that shall define the  boundaries of the physical medi um on which the page shall be  displayed or printed (see  14.11.2, \"Page Boundaries\" ). CropBox rectangle (Optional; inheritable)  A rectangle, expressed in default user space  units, that shall define the visi ble region of default user space.  When the page is displayed or prin ted, its contents shall be clipped  (cropped) to this rectangle and then shall be imposed on the output  medium in some implementation-defined manner (see  14.11.2,  \"Page Boundaries\" ). Default value: the value of  MediaBox. BleedBox rectangle (Optional; PDF  1.3)  A  rectangle, expressed in default user space  units, that shall define the region to which the contents of the page  shall be clipped when output in a production environment (see  14.11.2, \"Page Boundaries\" ). Default value: the value of  CropBox . TrimBox rectangle (Optional; PDF  1.3)  A  rectangle, expressed in default user space  units, that shall define the intended  dimensions of the finished page  after trimming (see  14.11.2, \"Page Boundaries\" ). Default value: the  value of  Cr opBox . ArtBox rectangle (Optional; PDF  1.3)  A  rectangle, expressed in default user space  units, that shall define the extent  of the pages meaningful content  (including potential white space) as  intended by the pages creator  (see 14.11.2, \"Page Boundaries\" ). Default value: the value of  CropBox . BoxColorInfo dictionary (Optional; PDF 1.4)  A box colour information dictionary  that shall  specify the colours and other vis ual characteristics that should be  used in displaying guidelines on the screen for the various page  boundaries (see  14.11.2.2, \"Display of Page Boundaries\" ). If this  entry is absent, the application shall use its own current default  settings.",""],"86":["PDF 32000-1:2008 78' Adobe Systems Incorporated 2008  All rights reserved Contents stream or array(Optional)  A content stream  (see 7.8.2, \"Cont ent Streams\" ) that shall describe the contents of this p age. If this entry  is absent, the  page shall be empty.  The value shall be either a single st ream or an array of streams. If  the value is an array, the effect sha ll be as if all of the streams in the  array were concatenated, in order, to form a single stream.  Conforming writers can create image objects and other resources  as they occur, even though they interrupt the content stream. The  division between streams may occur only at the boundaries  between lexical tokens (see  7.2, \"Lexical Conventions\" ) but shall be  unrelated to the pages logical cont ent or organization. Applications  that consume or produce PDF file s need not preserve the existing  structure of the Contents  array. Conforming writers shall not create  a Contents array containing no elements.  Rotate integer (Optional; inheritable)  The number of degrees by which the page  shall be rotated clockwise when displayed or printed. The value  shall be a multiple of 90. Default value: 0.  Group dictionary (Optional; PDF  1.4) A group attributes dictionary  that shall specify  the attributes of the pages page group for use in the transparent  imaging model (see  11.4.7, \"Page Group\"  and  11.6.6,  \"Transparency Group XObjects\" ). Thumb stream(Optional)  A stream object that shall define the pages  thumbnail  image  (see 12.3.4, \"Thumbnail Images\" ). Barray (Optional; PDF  1.1; recommended if the page contains article  beads) An array that shall contain indirect references to all  article  beads  appearing on the page (see  12.4.3, \"Articles\" ). The beads  shall be listed in the array in natural reading order.  NOTE The information in this entry can be created or  recreated from the information obtained from the  Threads key in the Catalog. Durnumber (Optional; PDF  1.1)  T he pages  display duration (also called its  advance timing ): the maximum length of time, in seconds, that the  page shall be displayed during presentations before the viewer  application shall automatically advance to the next page (see  12.4.4, \"Presentations\" ). By default, the viewer shall not advance  automatically.  Trans dictionary (Optional; PDF  1.1)  A tra nsition dictionary  describing the transition  effect that shall be used when displaying the page during  presentations (see  12.4.4, \"Presentations\" ). Annots array (Optional)  An array of annotation dictionaries  that shall contain  indirect references to all annotatio ns associated with the page (see  12.5, \"Annotations\" ). AAdictionary (Optional; PDF  1.2) An additional-actions dictionary  that shall  define actions to be performed when the page is opened or closed  (see 12.6.3, \"Trigger Events\" ). (PDF 1.3) additional-actions dictionaries are not inheritable. Metadata stream(Optional; PDF  1.4)  A me tadata stream  that shall contain metadata  for the page (see  14.3.2, \"Metadata Streams\" ). PieceInfo dictionary (Optional; PDF  1.3) A p age-piece dictionary  associated with the  page (see  14.5, \"Page-Piece Dictionaries\" ). Table 30   Entries in a page object  (continued) Key Type Value",""],"87":["' Adobe Systems Incorporated 2008  All rights reserved 79PDF 32000-1:2008 EXAMPLE The following shows the definition of a page  object with a thumbnail image and two annotations. The  media box specifies that the page is to be printed on  letter-size paper. In addition, the resource dictionary  is specified as a direct object an d shows that the page makes use of three fonts named F3, F5, and F7. 3 0 obj<< /Type  /Page   /Parent 4 0 R  /MediaBox  [ 0 0 612  792  ]  /Resources  << /Font  << /F3  7 0 R /F5  9 0 R /F7  11 0 R  >> /ProcSet  [ /PDF ]    >>  /Contents  12 0 R   /Thumb  14 0 R   /Annots [  23 0 R   24 0 R ]>>endobj StructParents integer (Required if the page contains  structural content items; PDF  1.3) The integer key of the pages entry in the  structural parent tree  (see 14.7.4.4, \"Finding Structure El ements from Content Items\" ). IDbyte string (Optional; PDF  1.3; indirect reference preferred)  The digital  identifier of the pages parent  Web Capture content set  (see 14.10.6, \"Object  Attributes Related to Web Capture\" ). PZnumber (Optional; PDF  1.3) The  pages preferred  zoom (magnification)  factor: the factor by which it shall be scaled to achieve the natural  display magnification (see  14.10.6, \"Object Attr ibutes Related to  Web Capture\" ). SeparationInfo dictionary (Optional; PDF  1.3)  A se paration dictionary  that shall contain  information needed to generate colour separations for the page  (see 14.11.4, \"Separation Dictionaries\" ). Tabs name (Optional; PDF 1.5)  A name specifying the tab order that shall be  used for annotations on the page. The possible values shall be R  (row order), C (column order),  and S (structure order). See","12.5,  \"Annotations\"  for details. TemplateInstantiated name (Required if this page was created from a named page object; PDF  1.5)  The name of the originating page object (see  12.7.6, \"Named Pages\" ). PresSteps dictionary (Optional; PDF 1.5)  A navigation node dictionary  that shall  represent the first node on the page (see  12.4.4.2, \"Sub-page  Navigation\" ).UserUnit number (Optional; PDF 1.6)  A positive number that  shall give the size of  default user space units, in multiples of 1   72 inch. The range of  supported values shall be implementation-dependent. Default value: 1.0 (user space unit is 1   72 inch). VPdictionary (Optional; PDF 1.6)  An array of  viewport dictionaries  (see Ta b l e  260) that shall specify rectangular regions of the page. Table 30   Entries in a page object  (continued) Key Type Value",""],"88":["PDF 32000-1:2008 80' Adobe Systems Incorporated 2008  All rights reserved 7.7.3.4 Inheritance of Page Attributes Some of the page attributes shown in  Ta b l e  30 are designated as  inheritable . If such an attribute is omitted from  a page object, its value shall be inherited from an ancest or node in the page tree. If the attribute is a required  one, a value shall be supplied in an ancestor node. If the attribute is optional and no inherited value is specified,  the default value shall be used.  An attribute can thus be defined once for a whole set of  pages by specifying it in  an intermediate page tree  node and arranging the pages that share the  attribute as descendants of that node.  EXAMPLE A document may specify the same media box for all of its pages by including a  MediaBox  entry in the root  node of the page tree. If necessary, an individual page object may override this inherited value with a  MediaBox  entry of its own.  In a document conforming to the Li nearized PDF organization (see  Annex F ), all page attributes shall be  specified explicitly as entries in th e page dictionaries to which they apply ; they shall not be inherited from an  ancestor node.  Figure 6  illustrates the inheritance of attributes. In the page  tree shown, pages 1, 2, and 4 are rotated clockwise  by 90 degrees, page 3 by 270 degrees, page 6 by 18 0 degrees, and pages 5 and 7 not at all (0 degrees).  Figure 6   Inheritance of attributes 7.7.4 Name Dictionary Some categories of objects in a PDF file can be referr ed to by name rather than by object reference. The  correspondence between names and object s is established by the documents  name dictionary (PDF 1.2) , located by means of the  Names entry in the documents catalog (see  7.7.2, \"Document Catalog\" ). Each entry in this dictionary designates the root of a name tree (see  7.9.6, \"Name Trees\" ) defining names for a particular  category of objects.  Ta b l e  31 shows the contents of the name dictionary. Table  31   Entries in the name dictionary   KeyType Value Dests name tree(Optional; PDF  1.2)   A name tree mapping name strings to  destinations (see  12.3.2.3, \"Named Destinations\" ). APname tree(Optional; PDF  1.3)   A name tree mapping name strings to  annotation appearance streams (see  12.5.5, \"Appearance  Streams\" ).","Pages","Pages","Pages /Rotate 90","Pages /Rotate 180","Page","Page","Page /Rotate 0","Page","Page","Pages","Page /Rotate 90","Page /Rotate 270 Page 1  Page 2  Page 5  Page 6  Page 7  Page 4  Page 3",""],"89":["' Adobe Systems Incorporated 2008  All rights reserved 81PDF 32000-1:2008 7.8 Content Streams and Resources 7.8.1 General Content streams are the primary means for describing t he appearance of pages and other graphical elements.  A content stream depends on information contained in an  associated resource dictiona ry; in combination, these  two objects form a self-contained entity. Th is sub-clause describes these objects.  7.8.2 Content Streams A co ntent stream  is a PDF stream object whose data consists of a sequence of instructions describing the  graphical elements to be painted on a page. The instructions shall be represented in the form of PDF objects,  using the same object syntax as in the rest of the  PDF document. However, whereas the document as a whole  is a static, random-access data structur e, the objects in the content stream shall be interpreted and acted upon  sequentially.  Each page of a document shall be represented by one or more content streams. Content streams shall also be  used to package sequences of instructions as self -contained graphical elements, such as forms (see  8.10,  \"Form XObjects\" ), patterns ( 8.7, \"Patterns\" ), certain fonts ( 9.6.5, \"Type 3 Fonts\" ), and annotation appearances  (12.5.5, \"Appearance Streams\" ). A content stream, after decoding with  any specified filters, shall be inte rpreted according to the PDF syntax  rules described in  7.2, \"Lexical Conventions.\"  It consists of PDF objects denoting operands and operators. The  operands needed by an operator shall precede it in the stream. See  EXAMPLE 4  in 7.4, \"Filters,\"  for an  example of a content stream.  An op erand  is a direct object belonging to any of the basic  PDF data types except a stream. Dictionaries shall  be permitted as operands only by cert ain specific operators. Indirect objects  and object references shall not be  permitted at all.  JavaScript name tree (Optional; PDF  1.3)  A  name tree mapping name strings to  document-level JavaScript actions (see  12.6.4.16, \"JavaScript  Actions\" ). Pagesname tree (Optional; PDF  1.3)  A name tree mapping name strings to visible  pages for use in interactive forms (see  12.7.6, \"Named Pages\" ). Templates name tree (Optional; PDF  1.3)   A name tree mapping name strings to invisible  (template) pages for use in interactive forms (see  12.7.6, \"Named  Pages\" ). IDSname tree (Optional; PDF  1.3)  A name tree mapping digital identifiers to Web  Capture content sets (see  14.10.4, \"Content Sets\" ). URLSname tree (Optional; PDF  1.3) A na me tree mapping uniform resource locators  (URLs) to Web Capture content sets (see  14.10.4, \"Content Sets\" ). EmbeddedFiles name tree (Optional; PDF  1.4) A  name tree mapping name strings to file  specifications for embedded file streams (see  7.11.4, \"Embedded  File Streams\" ). AlternatePresentations name tree (Optional; PDF  1.4) A  name tree mapping name strings to alternate  presentations (see  13.5, \"Alternate Presentations\" ).Renditionsname tree (Optional; PDF  1.5) A na me tree mapping name strings (which shall  have Unicode encoding) to rendition objects (see  13.2.3, \"Renditions\" ).Table 31   Entries in the name dictionary  (continued) KeyType Value",""],"90":["PDF 32000-1:2008 82' Adobe Systems Incorporated 2008  All rights reserved An  operator  is a PDF keyword specifying some action that sh all be performed, such as painting a graphical  shape on the page. An operator keyword shall be distinguished from a name object by the absence of an initial  SOLIDUS character (2Fh) (/  ). Operators shall be meaningful only inside a content stream.  NOTE 1 This postfix notation, in which an  operator is preceded by its operands,  is superficially the same as in the  PostScript language. However, PDF has no conc ept of an operand stack as PostScript has.  In PDF, all of the operands needed by  an operator shall immediately prec ede that operator. Operators do not  return results, and operands shall not be left  over when an operator finishes execution.  NOTE 2 Most operators have to do with painting graphical elem ents on the page or with specifying parameters that  affect subsequent painting operations. The individual opera tors are described in the clauses devoted to their  functions:  Clause  8, \"Graphics\"  describes operators that paint general gr aphics, such as filled areas, strokes, and  sampled images, and that specify device-independ ent graphical parameters, such as colour.  Clause  9, \"Text\"  describes operators that paint text us ing character glyphs defined in fonts.  Clause  10, \"Rendering\"  describes operators that specify device-dependent rendering parameters.  Clause  14, \"Document Interchange\"  describes the marked-content operators that associate higher-level logical  information with objects in the content stream. These  operators do not affect the rendered appearance of the  content; they specify informatio n useful to applications that  use PDF for document interchange.  Ordinarily, when a conforming reader encounters an operat or in a content stream that it does not recognize, an  error shall occur. A pair  of compatibility operators,  BX and  EX (PDF 1.1), shall modify this behaviour (see  Ta b l e  32). These operators shall occur in pairs and may be nested. They bracket a  compatibility section , a portion of a content stream within which unrecognized  operators shall be ignored without error. This  mechanism enables a conforming writer to use operators  defined in later versions  of PDF withou t sacrificing compatibility with older applicat ions. It should be used only in cases where ignoring  such newer operators is the  appropriate thing to do. The  BX and  EX operators are not themselves part of any graphics object (see  8.2, \"Graphics Objects\" ) or of the graphics state ( 8.4, \"Graphics State\" ). 7.8.3 Resource Dictionaries As stated above, the operands supplied to operators in a  content stream shall only be direct objects; indirect  objects and object references shall not be permitted. In  some cases, an operator sh all refer to a PDF object  that is defined outside the content stream, such as a font dictionary or a stream containing image data. This  shall be accomplished by defining such objects as  named resources  and referring to them by name from within  the content stream.  Named resources shall be meaningful only in the contex t of a content stream. The scope of a resource name  shall be local to a particular content stream and shall  be unrelated to externally known identifiers for objects  such as fonts. References from one object outside of  content streams to another outside of content streams  shall be made by means of indirect object  references rather than named resources.  Table  32   Compatibility operators   Operands Operator Description BX(PDF 1.1)  Beg in a compatibility section. Unrecognized operators (along with  their operands) shall be ignored without error until the balancing  EX operator  is encountered.  EX(PDF 1.1)  End  a compatibility section begun by a balancing  BX operator.  Ignore any unrecognized operands a nd operators from previous matching  BX onward.",""],"91":["' Adobe Systems Incorporated 2008  All rights reserved 83PDF 32000-1:2008 A content streams named resources shall be defined by a  resource dictionary , which shall enumerate the  named resources needed by the operators in the content st ream and the names by which they can be referred  to.  EXAMPLE 1 If a text operator appearing with in the content stream needs a certain  font, the content streams resource  dictionary can associate the name F42 with the corre sponding font dictionary. The text operator can use  this name to re fer to the font.  A resource dictionary shall be associated with a content stream in one of the following ways:   For a content stream that  is the value of a pages  Contents  entry (or is an element of  an array that is the  value of that entry), the reso urce dictionary shall be desi gnated by the page dictionarys  Resources  or is inherited, as described under  7.7.3.4, \"Inheritance of Pa ge Attributes,\"  from some ancestor node of the  page object.  For other content streams, a conforming writer shall include a  Resources  entry in the stream’s dictionary  specifying the resource dictionary which contains all the resources used by that content stream. This shall  apply to content streams that define form XO bjects, patterns, Type 3 fonts, and annotation.  PDF files written obeying earlier vers ions of PDF may have omitted the  Resources  entry in all form  XObjects and Type 3 fonts used on a page. All resources that are referenced from those forms and fonts  shall be inherited from the resource dictionary of the page on which they are used. This construct is  obsolete and should not be used by conforming writers. In the context of a given  content stream, the term  current resour ce dictionary  refers to the resource dictionary  associated with the stream in on e of the ways described above.  Each key in a resource dictio nary shall be the name of a  resource type, as shown in  Ta b l e  33. The  corresponding values shall be as follows:  For resource type  ProcSet, the value shall be an array of procedure set names  For all other resource types, the value shall be a subdictionary. Each key in the subdictionary shall be the  name of a specific resource, and the corresponding va lue shall be a PDF object associated with the name.  Table  33   Entries in a resource dictionary   Key Type Value ExtGState dictionary (Optional)  A dictionary that maps res ource names to graphics state  parameter dictionaries (see  8.4.5, \"Graphics State Parameter  Dictionaries\" ). ColorSpace dictionary (Optional)  A dictionary that maps each resource name to either the  name of a device-dependent colour space or an array describing a  colour space (see  8.6, \"Colour Spaces\" ). Patterndictionary (Optional)  A dictionary that maps reso urce names to pattern objects  (see 8.7, \"Patterns\" ). Shadingdictionary (Optional; PDF  1.3)   A dictionary that maps resource names to shading  dictionaries (see  8.7.4.3, \"Shading Dictionaries\" ). XObjectdictionary (Optional)  A dictionary that maps resource names to external objects  (see 8.8, \"External Objects\" ). Font dictionary (Optional)   A dictionary that maps resource names to font dictionaries  (see clause 9, \"Text\" ). ProcSetarray(Optional)   An array of predefined procedure set names (see  14.2,  \"Procedure Sets\" ).",""],"92":["PDF 32000-1:2008 84' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 2 The following shows a resource  dictionary containing pr ocedure sets, fonts, a nd external objects. The  procedure sets are specified by an array, as described in  14.2, \"Procedure Sets\" . The fonts are specified  with a subdictionary associating the names F5, F6, F7, and  F8 with objects 6, 8, 10, and 12, respectively.  Likewise, the XObject subdictionary associates the names  Im1 and Im2 with objects 13 and 15,  respectively. <</ProcSet  [ /PDF /ImageB  ]/Font << /F5  6 0 R  /F6  8 0 R/F7 10 0 R /F8 12 0 R  >> /XObject <<  /Im1  13 0 R /Im2  15 0 R >>>>7.9 Common Data Structures 7.9.1 General As mentioned at the beginning of this clause, there are  some general-purpose data structures that are built  from the basic object types described in  7.3, \"Objects,\"  and are used in many places throughout PDF. This sub- clause describes data structures fo r text strings, dates, rectangles, name trees, and number trees. More  complex data structures are described in  7.10, \"Functions,\"  and  7.11, \"File Specifications.\" All of these data structures are meaningful only as part  of the document hierarchy; they may not appear within  content streams. In particular, the special conventions for  interpreting the values of string objects apply only to  strings outside content stream s. An entirely different convention is used  within content streams for using strings  to select sequences of glyphs to  be painted on the page (see clause  9, \"Text\" ). Table  34 summarizes the basic  and higher-level data types that are used throughout this  standard to describe the valu es of dictionary entries  and other PDF data values.  Propertiesdictionary (Optional; PDF  1.2) A d ictionary that maps re source names to property  list dictionaries for marked content (see  14.6.2, \"Property Lists\" ). Table  34   PDF data types   Type Description Sub-ClauseASCII stringBytes containing ASCII characters 7.9.27.9.2.4array Array object7.3.6boolean Boolean value 7.3.2byte string A series of bytes that shall represent  characters or other binary data. If such  a type represents characters, the  encoding shall be determined by the  context. 7.9.2date Date (ASCII string)7.9.4dictionary Dictionary object 7.3.7file specification File specification (string or dictionary) 7.11 Table 33   Entries in a resource dictionary  (continued) Key Type Value",""],"93":["' Adobe Systems Incorporated 2008  All rights reserved 85PDF 32000-1:2008 7.9.2 String Object Types 7.9.2.1 General PDF supports one fundamental string object (see  7.3.4, \"String Objects\" ). The string object shall be further  qualified as a text string, a PDFDocEncode d string, ASCII string, or  byte string. The further qualification reflects  the encoding used to represent the characte rs or glyphs described by the string.  Ta b l e  35 summarizes the string object ty pes that represent data encoded  using specific conventions. function Function (dictionary or stream) 7.10integer Integer numbername Name object 7.3.5name tree Name tree (dictionary) 7.9.6null Null object 7.3.9number Number (integer or real) number tree Number tree (dictionary) 7.9.7PDFDocEncoded string Bytes containing a string that shall be  encoded using PDFDocEncoding 7.9.2rectangle Rectangle (array) 7.9.5streamStream object 7.3.8stringAny string that is not a text string. Beginning with PDF 1.7, this type is  further qualified as the types:  PDFDocEncoded string, ASCII string,  and byte string. 7.9.2text stringBytes that represent characters that  shall be encoded using either  PDFDocEncoding or UTF-16BE with a  leading byte-order marker (as defined  in  Text String Type  on page 86 .)7.9.2.27.9.2text streamText stream 7.9.3Table  35   String Object Types   Type Description text stringShall be used for human-readable text, such as text  annotations, bookmark names, article names, and  document information. These strings shall be encoded  using either PDFDocEncoding or UTF-16BE with a  leading byte-order marker.  This type is described in  7.9.2.2, \"Text String Type.\"  PDFDocEncoded string Shall be used for characte rs and glyphs that are  represented in a single byte, using PDFDocEncoding.  This type is described in  7.9.2.3, \"PDFDocEncoded String  Type.\"  Table 34   PDF data types  (continued) Type Description Sub-Clause",""],"94":["PDF 32000-1:2008 86' Adobe Systems Incorporated 2008  All rights reserved The string types described in  Table  35 specify increasingly specific encoding schemes, as shown in  Figure 7 . Figure 7   Relationship between string types 7.9.2.2 Text String Type  The text string type shall be used for character strings  that contain information intended to be human-readable,  such as text annotations, bookmark names, arti cle names, document information, and so forth.  NOTE 1 Text string type is a subtype  of string type and represents data  encoded using specific conventions. The text string type shall be used for character strings that shall be encoded in either  PDFDocEncoding  or the  UTF-16BE Unicode character encoding scheme.  PDFDocEncoding  can encode all of the ISO Latin 1  character set and is documented in  Annex D . UTF-16BE can encode all Unicode characters. UTF-16BE and  Unicode character encoding are described in the  Unicode Standard  by the Unicode Consortium (see the  Bibliography ).  NOTE 2 PDFDocEncoding  does not support all Unicode ch aracters whereas UTF-16BE does. For text strings encoded in Unicode,  the first two bytes shall be 254 followed by 255. These two bytes represent  the Unicode byte order marker, U+FEFF , indicating that the string is  encoded in the UTF-16BE (big-endian)  encoding scheme specified in the Unicode standard.  NOTE 3 This mechanism precludes beginning a string using  PDFDocEncoding  with the two characters thorn  ydieresis, which is unlikely to be a meaningful beginning of a word or phrase. Conforming readers that process PDF files containing  Unicode text strings shall be prepared to handle  supplementary characters; that is, characters requiring more than two bytes to represent. An escape sequence may appear anywhere in a Unicode  text string to indicate the language in which  subsequent text shall be written. ASCII string Shall be used for characters that are represented in a  single byte using ASCII encoding.  byte string Shall be used for binary data represented as a series of  bytes, where each byte can be any value representable in  8 bits. The string may represent characters but the  encoding is not known. The bytes of the string need not  represent characters. This type shall be used for data  such as MD5 hash values, signature certificates, and Web  Capture identification values.  This type is described in  7.9.2.4, \"Byte String Type.\"  Table 35   String Object Types  (continued) Type Description","PDFDocEncoded  string string types","text string UTF-16BE encoded string with  a leading byte order marker ASCII stringbyte string",""],"95":["' Adobe Systems Incorporated 2008  All rights reserved 87PDF 32000-1:2008 NOTE 4 This is useful when the language cannot be de termined from the character codes used in the text.  The escape sequence shall consist of the following elements, in order:  a) The Unicode value U+001B (that is, the byte sequence 0 followed by 27).  b) A 2- byte ISO 639 language code. EXAMPLE en for English or ja for Jap anese encoded as ASCII characters.  c)(Optional)  A 2-byte ISO 3166 country code. EXAMPLE US for the United States or JP for Japan.  d) The Unicode value U+001B.  NOTE 5 The complete list of codes defined by ISO 6 39 and ISO 3166 can be obtained from the International  Organization for Standardization (see the  Bibliography ). 7.9.2.3 PDFDocEncoded String Type A PDFDocEncoded string is a character string in which  the characters shall be represented in a single byte  using PDFDocEncoding.  NOTE PDFDocEncoding  does not support all Unicode characters whereas UTF-16BE does.  7.9.2.4 Byte String Type The byte string type shall be used for binary data that sh all be represented as a series of bytes, where each  byte may be any value representable in 8 bits. Byte string type is a subtype of string type. NOTE The string may represent characters  but the encoding is not known. The by tes of the string may not represent  characters. 7.9.3 Text Streams A te xt stream (PDF 1.5)  shall be a PDF stream object ( 7.3.8, \"Stream Objects\" ) whose unencoded bytes shall  meet the same requirements as a text string ( 7.9.2.2, \"Text String Type\" ) with respect to encoding, byte order,  and lead bytes. 7.9.4 Dates Date values used in a PDF shall conform to a standa rd date format, which closely follows that of the  international standard ASN.1 (Abstract Syntax Notation On e), defined in ISO/IEC 8824. A date shall be a text  string of the form  ( D : YYYYMMDDHHmmSSOHH  ’ mm  )where: YYYY  shall be the year  MM sh all be the month (0112) DD sh all be the day (0131)  HH sh all be the hour (0023)",""],"96":["PDF 32000-1:2008 88' Adobe Systems Incorporated 2008  All rights reserved mm shall be the minute (0059)  SS sh all be the second (0059)  O sh all be the relationship of local time to Universal Time (UT), and shall be denoted by one of the  characters PLUS SIGN (U+002B)  (+), HYPHEN-MINUS (U+002D)  (-), or LATIN CAPITAL LETTER Z  (U+005A) (Z) (see below)  HH followed by APOSTROPHE (U+0027)  (’) shall be the absolute value of the offset from UT in hours  (0023)  mm sh all be the absolute value of the offset from UT in minutes (0059)  The prefix D: shall be pres ent, the year field (YYYY) shall be present and all othe r fields may be present but  only if all of their preceding fields are also present.  The APOSTROPHE following the hour offset field (HH) shall  only be present if the HH field is present. The minut e offset field (mm) shall only be present if the  APOSTROPHE following the hour offset field  (HH) is present. The default values for  MM and  DD shall be both  01; all other numerical fields shall default to zero values. A PLUS SIGN as the value of the  O field signifies that  local time is later than UT, a HYPH EN-MINUS signifies that local time  is earlier than UT, and the LATIN  CAPITAL LETTER Z signifies that local time  is equal to UT. If no UT informatio n is specified, the relationship of  the specified time to UT shall be cons idered to be GMT. Regardless of whet her the time zone is specified, the  rest of the date shall be specified in local time.  EXAMPLE For example, December 23, 1998,  at 7:52 PM, U.S. Pacific Standard Ti me, is represented  by the string  D : 199812231952  - 08 ’ 00  7.9.5 Rectangles Rectangles are used to describe locations on a page and  bounding boxes for a variety of objects. A rectangle  shall be written as an array of four numbers giving the coordinates of a pair of diagonally opposite corners.  NOTE Although rectangles are conventionally specified by their lower-left and upper-right corners, it is acceptable to  specify any two diagonally opposite co rners. Applications that process  PDF should be prepared to normalize  such rectangles in situations wh ere specific cor ners are required.  Typically, the array takes the form  [ llx lly urx ury ]specifying the lower-left  x, lower-left y, upper-right x, and upper-right  y coordinates of the rectangle, in that  order. The other two corners of the rectangl e are then assumed to have coordinates ( llx, ury) and ( urx, lly). 7.9.6 Name Trees A na me tree  serves a similar purpose to a dictionaryassociating keys and valuesbut by different means. A  name tree differs from a dictionary in the following important ways:   Unlike the keys in a dictionary, which are name  objects, those in a name tree are strings.   The keys are ordered.   The values associated with the keys may be object s of any type. Stream objects shall be specified by  indirect object references ( 7.3.8, \"Stream Objects\" ). The dictionary, array, and string objects should be  specified by indirect object references, and other PDF objects (nulls, numbers, booleans, and names)  should be specified as direct objects.  The data structure can represent an  arbitrarily large collection of key-va lue pairs, which can be looked up  efficiently without requiring the entire data structure to  be read from the PDF file. (In contrast, a dictionary  can be subject to an implementation limit on the number of entries it can contain.)",""],"97":["' Adobe Systems Incorporated 2008  All rights reserved 89PDF 32000-1:2008 A name tree shall be constructed of  nodes , each of which shall be a dictionary object.  Ta b l e  36 shows the  entries in a node dictionary. The nodes shall be of thre e kinds, depending on the spec ific entries they contain.  The tree shall always have exactly one  root node , which shall contain a single entry: either  Kids or  Names but  not both. If the root node has a  Names entry, it shall be the only node in the tree. If it has a  Kids entry, each of  the remaining nodes shall be either an  intermediate node , that shall contain a  Limits  entry and a  Kids  entry, or  a leaf node , that shall contain a  Limits  entry and a  Names entry.  The  Kids entries in the root and intermediate nodes define the trees structure by identifying the immediate  children of each node. The  Names entries in the leaf (or root) nodes  shall contain the trees keys and their  associated values, arranged in key-value pairs and shall be  sorted lexically in ascending order by key. Shorter  keys shall appear before longer ones beginning with th e same byte sequence. Any encoding of the keys may  be used as long as it is self-consist ent; keys shall be compared for equality on a simple byte-by-byte basis.  The keys contained within the various nodes  Names entries shall not overlap; each  Names entry shall contain  a single contiguous range of all the keys in the tree. In a leaf node, the  Limits  entry shall specify the least and  greatest keys contained within the nodes  Names  entry. In an intermediate node,  it shall specify the least and  greatest keys contained within the  Names entries of any of that nodes descendants. The value associated with  a given key can thus be found by walking the tree in order, searching for the leaf node whose  Names entry  contains that key.  EXAMPLE 1 The following is an abbreviated  outline, showing object numbers and nodes, of a nam e tree that maps the  names of all the chemical elem ents, from actinium to zircon ium, to their atomic numbers. Example of a name tree 1: Root node 2: Intermediate node: Actinium to Gold 5: Leaf node: Actinium  = 25,   , Astatine  = 3125: Integer: 89 31: Integer: 85 11: Leaf node: Gadolinium  = 56,  , Gold  = 5956: Integer: 64 59: Integer: 79 3: Intermediate node: Hafnium to Protactinium 12: Leaf node: Hafnium  = 60,  , Hydrogen  = 6560: Integer: 72 65: Integer: 1 Table  36   Entries in a name tree node dictionary   Key Type Value Kidsarray(Root and intermediate nodes only; required in intermediate nodes; present in the  root node if and only if  Names  is not present)  Shall be an array of indirect  references to the immediate children  of this node. The children may be  intermediate or leaf nodes.  Names array(Root and leaf nodes only; required in leaf  nodes; present in the root node if and  only if  Kids is not present)  Shall be an array of the form  [ key1 value1 key 2 value2  keyn valuen]where each  keyi shall be a string and the corresponding  value i shall be the object  associated with that key. The keys shall be sorted in lexical order, as described  below.  Limits array(Intermediate and leaf  nodes only; required)  Shall be an array of two strings, that  shall specify the (lexically) least and greatest keys included in the  Names  array of  a leaf node or in the  Names  arrays of any leaf nodes that are descendants of an  intermediate node.",""],"98":["PDF 32000-1:2008 90' Adobe Systems Incorporated 2008  All rights reserved 19: Leaf node: Palladium  = 92,  , Protactinium  = 100 92: Integer: 46 100:Integer: 91 4: Intermediate node: Radium to Zirconium 20: Leaf node: Radium  = 101,   , Ruthenium  = 107101:Integer: 89 107:Integer: 85 24: Leaf node: Xenon  = 129,   , Zirconium  = 133 129:Integer: 54 133:Integer: 40 EXAMPLE 2 The following show s the representation of  this tree in a PDF file1 0 obj<< /Kids  [  2 0 R% Root node 3 0 R4 0 R ]>>endobj 2 0 obj<< /Limits  [ ( Actinium  ) ( Gold  ) ]% Intermediate node   /Kids  [ 5 0 R   6 0 R   7 0 R","8 0 R   9 0 R   10 0 R    11 0 R   ]>>endobj 3 0 obj<< /Limits  [ ( Hafnium  ) ( Protactinium  ) ]% Intermediate node   /Kids  [ 12 0 R    13 0 R    14 0 R    15 0 R    16 0 R    17 0 R    18 0 R    19 0 R   ]>>endobj 4 0 obj<< /Limits  [ ( Radium  ) ( Zirconium  ) ]% Intermediate node   /Kids  ["," 20 0 R    21 0 R    22 0 R    23 0 R    24 0 R   ]>>endobj 5 0 obj<< /Limits  [ ( Actinium  ) ( Astatine  ) ]% Leaf node   /Names [  ( Actinium  ) 25 0 R",""],"99":["' Adobe Systems Incorporated 2008  All rights reserved 91PDF 32000-1:2008   ( Aluminum ) 26 0 R   ( Americium  ) 27 0 R  ( Antimony ) 28 0 R  ( Argon  ) 29 0 R   ( Arsenic  ) 30 0 R  ( Astatine  ) 31 0 R    ]>>endobj 24 0 obj << /Limits  [ ( Xenon  ) ( Zirconium  ) ]% Leaf node   /Names [  ( Xenon ) 129 0 R   ( Ytterbium ) 130 0 R   ( Yttrium ) 131 0 R"," ( Zinc  ) 132 0 R   ( Zirconium  ) 133 0 R    ]>>endobj 25 0 obj 89% Atomic number (Actinium) endobj 133 0 obj 40% Atomic number (Zirconium) endobj 7.9.7 Number Trees A n umber tree  is similar to a name tree (see  7.9.6, \"Name Trees\" ), except that its keys shall be integers instead  of strings and shall be sorted in ascending numerical orde r. The entries in the leaf (or root) nodes containing  the key-value pairs shall be named  Nums instead of  Names as in a name tree.  Ta b l e  37 shows the entries in a  number trees node dictionaries.  Table  37   Entries in a number tree node dictionary   Key Type Value Kidsarray(Root and intermediate nodes only; required in intermediate nodes; present in the  root node if and only if  Nums is not present)  Shall be an array of indirect  references to the immediate children  of this node. The children may be  intermediate or leaf nodes.  Numsarray(Root and leaf nodes only; shall be required in leaf nodes; present in the root  node if and only if  Kids is not present)  Shall be an array of the form  [ key1 value1 key 2 value2  keyn valuen]where each  keyi is an integer and the corresponding  valuei shall be the object  associated with that key. The keys shall be sorted in numerical order,  analogously to the arrangement of keys in a name tree as described in  7.9.6,  \"Name Trees.\"  Limits array(Shall be present in Intermediate and leaf nodes only)  Shall be an array of two  integers, that shall specify the (numerica lly) least and greatest keys included in  the Nums array of a leaf node or in the  Nums  arrays of any leaf nodes that are  descendants of an intermediate node.",""],"100":["PDF 32000-1:2008 92' Adobe Systems Incorporated 2008  All rights reserved 7.10 Functions 7.10.1 General PDF is not a programming language, and a PDF file is not  a program. However, PDF provides several types of  function objects (PDF 1.2)  that represent parameterized classes of fu nctions, including mathematical formulas  and sampled representations with arbitrary resolution.  NOTE 1 Functions may be used in various ways in PDF,  including device-dependent rasterization information for high- quality printing (halftone spot functions and transfer func tions), colour transform functions for certain colour  spaces, and specification of colours as a function of position for smooth shadings.  Functions in PDF represent static, self -contained numerical transformations.  NOTE 2 A function to add two numbers has two input values and one output value:  Similarly, a function that computes  the arithmetic and geometric mean  of two numbers can be viewed as a  function of two input valu es and two output values:  In general, a function can take any number  (m)  of input values and produce any number  (n)  of output values:  In PDF functions, all the input values and all the output  values shall be numbers, and functions shall have no  side effects.  Each function definition includes a  domain, the set of legal values for the in put. Some types of functions also  define a  range , the set of legal values for the output. Input values  passed to the function shall be clipped to the  domain, and output values produced by the  function shall be clipped to the range.  EXAMPLE Suppose the follow ing function is defined  with a domain of [-1  1 ]. If the function is called with the input  value 6, that value is r eplaced with the nearest value in the defined domain, 1, before the function is  evaluated; the resulting outp ut value is therefore 3.  Similarly, if the following functi on is defined with a range of [  0 100 ], and if the input values -6 and 4 are  passed to the function (and are within its domain), then  the output value produced  by the function, -14, is  replaced with 0, the nearest  value in the defined range.  A function object may be a dictionary or a str eam, depending on the type of function. The term  function  dictionary  is used generically in this sub-clau se to refer to either a dictionary object or the dictionary portion of a  stream object. A function dictionary specifies the fu nctions representation, the set of attributes that  parameterize that representation, and the additional  data needed by that representation. Four types of  functions are available, as indicated by the dictionarys  FunctionType  entry:  (PDF 1.2) A sa mpled function  (type 0) uses a table of  sample values  to define the function. Various  techniques are used to interpolate va lues between the sample values; see  7.10.2, \"Type 0 (Sampled)  Functions.\"","fx0x1x0x1+=","fx0x1x0x1+2---------------- -x0x1u =","fx0}xm1y0}yn1=","fxx2+=","fx0x13x0ux1+=",""],"101":["' Adobe Systems Incorporated 2008  All rights reserved 93PDF 32000-1:2008 (PDF 1.3) An exponential interpolation function  (type 2) defines a set of c oefficients for an exponential  function; see  7.10.3, \"Type 2 (Exponential Interpolation) Functions.\"  (PDF 1.3) A st itching function  (type 3) is a combination of other functions, partitioned across a domain; see  7.10.4, \"Type 3 (Stitching) Functions.\"  (PDF 1.3) A Po stScript calculator function  (type 4) uses operators from the PostScript language to  describe an arithmetic expression; see  7.10.5, \"Type 4 (PostScript Calculator) Functions.\"  All function dictionaries sha ll share the entries listed in  Table  38. In addition, each type of function di ctionary shall include entries appropriat e to the particular function type. The  number of output values can usually be inferred from other  attributes of the function; if not (as is always the  case for type 0 and type 4 functions), the  Range entry is required. The dimensionality of the function implied by  the  Domain  and  Range  entries shall be consistent with that imp lied by other attributes of the function.  7.10.2 Type 0 (Sampled) Functions Type 0 functions use a sequence of  sample values (contained in a stream) to provide an approximation for  functions whose domains and ranges are bounded. The samples are organized as an  m-dimensional table in  which each entry has  n components.  NOTE 1 Sampled functions are highly general and offer reas onably accurate representations of arbitrary analytic  functions at low expense. For example, a 1-input si nusoidal function can be represented over the range  [ 0 180  ] with an average error of only 1 percent, using ju st ten samples and linear interpolation. Two-input  functions require significantly more  samples but usually not a prohibitive  number if the function does not have  high frequency variations.   There shall be no dimensionality limit of a sampl ed function except for possible implementation limits. NOTE 2 The number of samples requir ed to represent functions with high dimensionality multiplies rapidly unless the  sampling resolution is very low. Also, the process  of multilinear interpolation becomes computationally  intensive if the number of inputs  m is greater than 2. The multidimensio nal spline interpolation is even more  computationally intensive.  In addition to the entries in  Ta b l e  38, a type 0 function dictionary includes those shown in  Ta b l e  39. Table  38   Entries common to all function dictionaries   Key Type Value FunctionType integer (Required)  The function type:  0  Sampled function  2  Exponential interpolation function  3  Stitching function  4  PostScript calculator function  Domainarray(Required)  An array of 2 u m numbe rs, where  m shall be the number  of input values. For each  i from 0 to  m  1, Dom ain 2i shall be less than  or equal to  Domain 2i1 , and the  ith input value,  xi , shall lie in the  interval  Domain2i d xi d Domain2i1 . Input values outside the declared  domain shall be clipped to the nearest boundary value.  Range array(Required for type 0 and type 4  functions, optional otherwise; see  below)  An array of 2  u n numbe rs, where  n shall be the number of  output values. For each  j from 0 to  n  1, Range2j shall be less than or  equal to  Range 2j+1 , and the  jth output value,  yj  , shall lie in the interval  Range2j d yj d Range 2j+1. Output values outside the declared range  shall be clipped to the nearest boundary value. If this  entry is absent,  no clipping shall be done.",""],"102":["PDF 32000-1:2008 94' Adobe Systems Incorporated 2008  All rights reserved The  Domain, Encode, and  Size  entries determine how the functions input variable values are mapped into the  sample table. For example, if  Size is [  21 31 ], the default  Encode array shall be [  0 20 0 30 ], which maps the  entire domain into the full set of sample table entries. Other values of  Encode may be used.  To explain the relationship between  Domain , Encode , Size, Decode , and  Range, we use the following notation:  For a given value of  x, Interpolate calculates the  y value on the line defined by the two points ( xmin , ymin ) and  (xmax , ymax). When a sampled function is called, each input value  xi , for 0  £ i < m, shall be clipped to the domain:  That value shall be encoded:  That value shall be clipped to the size of the sample table in that dimension:  The encoded input values shall be real numbers, not rest ricted to integers. Interpolation shall be used to  determine output values from the nea rest surrounding values in the sa mple table. Each output value  rj , for 0 £ j < n, sh all then be decoded:  Table  39   Additional entries specific to a type 0 function dictionary   Key Type Value Sizearray (Required)  An array of m positive integers that  shall specify the  number of samples in each input dimension of the sample table.  BitsPerSample integer (Required)  The number of bits that shall represent each sample. (If the  function has multiple output values, each one shall occupy  BitsPerSample  bits.) Valid values shall be 1, 2, 4, 8, 12, 16, 24, and  32.  Orderinteger (Optional)  The order of interpolation between samples. Valid values  shall be 1 and 3, specifying linear and cubic spline interpolation,  respectively. Default value: 1.  Encodearray (Optional)  An array of 2 u m n umbers specifying the linear mapping of  input values into the domain of the functions sample table. Default  value: [  0 (Size0  1) 0 (Si ze 1  1)  ].  Decode array (Optional)  An array of 2 u n numbe rs specifying the linear mapping of  sample values into the range appropriate for the functions output  values. Default value: same as the value of  Range. other  streamattributes(various) (Optional)  Other attributes of  the stream that shall provide the sample  values, as appropriate (see  Table  5).","yInterpolatexxmin xmax ymin ymax   =ymin xxmin  ymax ymin xmax xmin --------------------------- -u'„¤‚§•+=","xicmin max xiDomain2iDomain 2i1+=","eiInterpolatexicDomain2iDomain2i1+Encode 2iEncode2i1+   =","eicmin max ei0Sizei1=",""],"103":["' Adobe Systems Incorporated 2008  All rights reserved 95PDF 32000-1:2008 Finally, each decoded value shall be clipped to the range:  Sample data shall be represented as a stream of bytes.  The bytes shall constitute a continuous bit stream, with  the high-order bit of each byte first. Each sample value shall be represented as a sequence of  BitsPerSample bits. Successive values shall be adjacent in the bit st ream; there shall be no padding at byte boundaries.  For a function with multidimensional i nput (more than one input variable), the sample values in the first  dimension vary fastest, and the values in the last dimension vary slowest.  EXAMPLE 1 For a function  f (a, b, c), where a, b, and c vary from 0 to 9 in steps of 1, the sample values would appear  in this order:  f (0, 0, 0),  f (1, 0, 0),  , f (9, 0, 0), f (0, 1, 0),  f (1, 1, 0),  , f (9, 1, 0), f (0, 2, 0),  f (1, 2, 0),  , f (9,  9, 0), f (0, 0, 1), f (1, 0, 1), and so on.  For a function with multidimensional  output (more than one output value), the values shall be stored in the  same order as  Range . The stream data shall be long enough to contain the entire sample array, as indicated by  Size , Range , and BitsPerSample ; see 7.3.8.2, \"Stream Extent.\"  Example 2  illustrates a sampled function wit h 4-bit samples in an array containing 21 columns and 31 rows  (651 values). The function takes two arguments,  x and y, in the domain [-1.0  1.0 ], and returns one value,  z, in that same range. The  x argument shall be linearly transformed by the encoding to the domain [  0 20 ] and the  yargument to the domain [  0 30 ]. Using bilinear interpolation between sa mple points, the function computes a  value for  z, which (because  BitsPerSample  is 4) will be in the range [  0 15 ], and the decoding transforms  z to a number in the range [  -1.0  1.0 ] for the result. The  sample array shall be stored in a string of 326 bytes,  calculated as follows (rounded up):  326 bytes  = 31 rows  ¥ 21 samples /","row  ¥ 4 bits  / sample ‡ 8 bits  / byte The first byte contains the sample for the point (-1.0,  -1.0) in the high-order 4 bits and the sample for the point  (-0.9, -1.0) in the low-order 4 bits.  EXAMPLE 2 14  0 obj << /FunctionType  0  /Domain [-1.0   1.0  -1.0  1.0 ]  /Size [ 21 31 ]  /Encode [ 0  20  0  30 ]  /BitsPerSample  4  /Range  [ -1.0 1.0 ]  /Decode  [ -1.0 1.0 ]  /Length    /Filter  >>stream","651 sample values  endstreamendobj NOTE 3 The  Decode entry can be used creatively to increase the accuracy of encoded samples corresponding to  certain values in the range.  EXAMPLE 3 If the range of  the function is [ -1.0 1.0 ] and  Bit sPerSample  is 4, the usual value of  Decode  would be  [ -1.0  1.0 ] and the sample values would be integers in the interval [  0 15 ] (as shown in  Figure 8 ). But if  these values are used, the midpoint  of the range, 0.0, is not represented exactly by any sample value,  since it falls halfway between  7 and 8. However, if the  Decode  array is [  -1.0  +1.1429  ] (1.1429 being","rjcInterpolaterj02BitsPerSample 1Decode2jDecode2j1+   =","yjmin max rjcRange 2jRange2j1+=",""],"104":["PDF 32000-1:2008 96' Adobe Systems Incorporated 2008  All rights reserved approximately equal to 16  ‡ 14) and the sample values supplied are in the interval [  0 14 ], the effective  range of [  -1.0 1.0  ] is achieved, and the range value 0.0  is represented by the sample value 7.  The  Size value for an input dimension can be 1, in which case all input values in that dimension shall be  mapped to the single allowed value. If  Size is less than 4, cubic spline interpolation is not possible and  Order 3 shall be ignored if specified.  Figure  8   Mapping with the Decode array 7.10.3 Type 2 (Exponential Interpolation) Functions Type 2 functions  (PDF 1.3)  include a set of parameters that define an  exponential interpolation  of one input  value and  n output values:  In addition to the entries in  Ta b l e  38, a type 2 function dictionary shall include those listed in  Ta b l e  40. Values of  Domain  shall constrain  x in such a way that if  N is not an integer, all values of  x shall be non- negative, and if  N is negative, no value of  x shall be zero. Typically,  Domain  is declared as [  0.0 1.0  ], and  N is   a positive number. To clip the ou tput to a specified range The  Range attribute shall be used.  NOTE When  N is 1, the function performs  a linear interpolation between  C0 and  C1; therefore, the function can also  be expressed as a sampled function (type 0).  7.10.4 Type 3 (Stitching) Functions Type 3 functions  (PDF 1.3)  define a  stitching  of the subdomains of several 1-input functions to produce a single  new 1-input function. Since the resultin g stitching function is a 1-input func tion, the domain is given by a two- element array, [  Domain0 Domain1 ]. Table  40   Additional entries specific to a type 2 function dictionary   Key Type Value C0array (Optional)  An array of n numbers that shall define the function result when  x   0.0. Default value: [  0.0 ]. C1array (Optional)  An array of n numbers that shall define the function result when  x   1.0. Default value: [  1.0 ]. Nnumber (Required)  The interpolation exponent. Each input value  x shall return  n values, given by  yj   C0j  xN u (C1j  C0j ), for 0  d j  n.","1+1-102345789 1011121314 15SamplesRange /Decode [ -1 1]","1+1-10234 6 78910111213 1415SamplesRange /Decode [ -1 1.1429]","fxy0}yn1=",""],"105":["' Adobe Systems Incorporated 2008  All rights reserved 97PDF 32000-1:2008 In addition to the entries in  Ta b l e  38, a type 3 function dictionary shall include those listed in  Ta b l e  41. Domain  shall be of size 2 (that is,  m = 1), and  Domain0 shall be strictly less than  Domain1 unless  k = 1. The  domain shall be partitioned into  k subdomains, as indicated by the dictionarys  Bounds  entry, which shall be an  array of  k - 1 numbers that obey the following relationships (with exceptions as noted below):  The  Bounds array shall describe a series of half-open inte rvals, closed on the left and open on the right  (except the last, which is closed on  the right as well). The value of the  Functions  entry shall be an array of  kfunctions. The first function shall apply to  x values in the first subdomain,  Domain0 £ x < Bounds 0 ; the second  function shall apply to  x values in the second subdomain,  Bounds 0 £ x < Bounds1 ; and so on. The last  function shall apply to  x values in the last subdomain, which includes the upper bound: Bounds k-2 £ x £ Domain 1 . The value of  k may be 1, in which case the  Bounds  array shall be empty and the  single item in the  Functions  array shall apply to all  x values,  Domain0 £ x £ Domain 1 . The  Enc ode  array contains 2  ¥ k num bers. A value  x from the  ith subdomain shall be encoded as follows:  for 0  £ i < k. In this equation,  Bounds -1 means  Domain0 , and  Bou nds k-1 means  Domain 1 . If the last bound,  Boundsk-2, is equal to  Domain1 , then  x ¢ shall be defined to be  Encode2i . NOTE The stitching function is designed to make it easy to  combine several functions to be used within one shading  pattern over different parts of the shadings domain. Shading patterns are discussed in  8.7.4, \"Shading  Patterns\" . The same effect could be achieved by creati ng a separate shading dictionary for each of the  functions, with adjacent domains. However, since each  shading would have similar parameters, and because  the overall effect is one shading, it is more conv enient to have a single shading with multiple function  definitions. Also, type 3 functions provide a general mec hanism for inverting the domains of 1-input functions.  EXAMPLE Consider a function  f with a  Domain of [  0.0  1.0 ] and a stitching function  g with a Domain of [ 0.0  1.0 ], a  Functions  array containing  f, and an  Encode  array of [  1.0 0.0"," ]. In effect,  g (x) = f (1 - x). 7.10.5 Type 4 (PostScript Calculator) Functions 7.10.5.1 General A type 4 function  (PDF 1.3), also called a PostScript calculator func tion, shall be represented as a stream  containing code written in a small  subset of the PostScript language.  Table  41   Additional entries specific to a type 3 function dictionary   Key Type Value Functions array(Required)  An array of k 1-input functions that shall make up the stitching  function. The output dimensionality of  all functions shall be the same, and  compatible with the value of  Range  if Range  is present.  Bounds array(Required)  An array of k  1 numbers that, in combination with  Domain , shall  define the intervals to which each function from the  Functions  array shall apply.  Bounds  elements shall be in order of increasing value, and each value shall be  within the domain defined by  Domain. Encodearray(Required)  An array of 2  u k numbe rs that, taken in pairs, shall map each  subset of the domain defined by  Domain  and the  Bounds  array to the domain  of the corresponding function.","Domain 0Bounds 0Bounds 1}Boundsk2Domain 1","xcInterpolate xBounds i1Bounds i•Encode 2iEncode 2i1+  =",""],"106":["PDF 32000-1:2008 98' Adobe Systems Incorporated 2008  All rights reserved NOTE Although any function can be sampled (in a type 0 PDF  function) and others can be described with exponential  functions (type 2 in PDF), type 4 functions offer gr eater flexibility and potentia lly greater accuracy. For  example, a tint transformation functi on for a hexachrome (six-component)  DeviceN  colour space with an  alternate colour space of  DeviceCMYK  (see  8.6.6.5, \"DeviceN  Colour Spaces\" ) requires a 6-in, 4-out function.  If such a function were sampled with  m values for each input variable, the number of samples, 4  ¥ m6, could be  prohibitively large. In practice, such functions can of ten be written as short, simple PostScript functions.  Type 4 functions also make it possible to include a wide  variety of halftone spot f unctions without the loss of  accuracy that comes from sampling,  and without adding to the list of  predefined spot functions (see  10.5.3,  \"Spot Functions\" ). All of the predefined spot functions can be written as type 4 functions.  The language that shall be used in a type 4 function contains expressions involving  integers, real numbers, and  boolean values only. There shall be no composite data structures such as strings or arrays, no procedures, and  no variables or names.  Ta b l e  42 lists the operators that can be used  in this type of function. (For more  information on these operators, see Appendix B of the  PostScript Language Reference , Third Edition.) Although the semantics are those of the corresponding Post Script operators, a full Post Script interpreter is not  required.  The operand syntax for type 4 functions shall follow PDF c onventions rather than Po stScript conventions. The  entire code stream defining the function shall be enclosed in braces {  } (using LEFT CURLY BRACE (7Bh) and  RIGHT CURLY BRACE (07hD)). Braces also shall delimit  expressions that are execut ed conditionally by the  ifand  ifelse  operators:  boo lean  { expression  } ifboo lean  { expression 1 } { expression 2 } ifelseThis construct is purely syntactic; unlike in Post Script, no procedure obje cts shall be involved.  A type 4 function dictionary shall include the entries in  Ta b l e  38, as well as other appropriate stream attributes  (see  Ta b l e  5). The following example shows a type 4 function eq uivalent to the predefined spot function  DoubleDot  (see  10.5.3, \"Spot Functions\" ). EXAMPLE 10  0 obj  << /FunctionType  4  /Domain  [ -1.0  1.0  -1.0  1.0 ]  /Range  [ -1.0  1.0  ]  /Length  71>>stream Table  42   Operators in type 4 functions   Operator Type Operators Arithmetic operators abs add atan ceiling cos","cvi cvr div exp flooridiv lnlogmod mul neg round sin sqrt sub truncate Relational, boolean,  and bitwise  operators and bitshift eqfalsegegtle ltnenot ortruexor Conditional  operatorsififelseStack operators copy dup exch index pop roll",""],"107":["' Adobe Systems Incorporated 2008  All rights reserved 99PDF 32000-1:2008 { 360  mul sin  2 div   exch 360  mul sin  2 div   add}endstreamendobj The  Domain and  Range  entries shall both be required. The input variables shall constitute the initial operand  stack; the items remaining on the operand stack after exec ution of the function shall be the output variables. It  shall be an error for the number of remaining operands to  differ from the number of output variables specified  by Range  or for any of them to be objects other than numbers.  Implementations of type 4 functions shall provide a stack  with room for at least 100 entries. No implementation  shall be required to provide a larger stack, and it shall be an error to overflow the stack.  Although any integers or real numbers that may appear in the stream fall under the same implementation limits  (defined in  Annex C) as in other contexts, the  intermediate  results in type 4 function computations shall not. An  implementation may use a representation that exceeds thos e limits. Operations on real numbers, for example,  might use single-precision or double -precision floating-point numbers.  7.10.5.2 Errors in Type 4 Functions The part of a conforming reader that reads a ty pe 4 function (analogous to the PostScript  scanner ) shall detect  and report syntax errors. Any errors detected by the confo rming reader shall be errors in the PDF file and shall  be handled like other errors in the file.  The part of a conforming reader  that executes a type  4 function (analogous  to the PostScript  interpreter) shall  detect and report errors. This specification does not defi ne a representation for the errors; those details shall be  provided by the conforming reader that processes the PD F file. The following types of  errors can occur (among  others):   Stack overflow   Stack underflow   A type error (for example, applying  not to a real number)   A range error (for example, applying  sqrt to a negative number)   An undefined result (for example, dividing by 0)  7.11 File Specifications 7.11.1 General A PDF file can refer to the conten ts of another file by using a  file specification  (PDF 1.1) , which shall take either  of two forms: A  simple file specification shall give just the name of the  target file in a standard format, independent of the  naming conventions of any particular file system. It sha ll take the form of either a string or a dictionary A  full file specification shall include info rmation related to one or more spec ific file systems. It shall only be  represented as a dictionary.",""],"108":["PDF 32000-1:2008 100 ' Adobe Systems Incorporated 2008  All rights reserved A file specification shall refer to a file  external to the PDF file or to a file embedded within the referring PDF file,  allowing its contents to be stored or transmitted along  with the PDF file. The file shall be considered to be  external to the PDF file in either case.  7.11.2 File Specification Strings 7.11.2.1 General The standard format for representing a si mple file specification in string form divides the string into component  substrings separated by the SOLIDUS character (2Fh)  (/). The SOLIDUS is a generic component separator  that shall be mapped to the appropriate platform-specifi c separator when generating a platform-dependent file  name. Any of the components may be empty. If a component  contains one or more literal SOLIDI, each shall be  preceded by a REVERSE SOLIDUS (5Ch)  (\\), which in turn shall be pr eceded by another REVERSE SOLIDUS  to indicate that it is part of th e string and not an escape character.  EXAMPLE (  in \\ \\ /out )represents the file name  in / outThe REVERSE SOLIDI shall be  removed in processing the string; they are needed  only to distinguish the  component values from the component separators. The component substrings shall be stored as bytes and  shall be passed to the operating system without  interpretation or conversion of any sort.  7.11.2.2 Absolute and Relative File Specifications A simple file specification that  begins with a SOLIDUS shall be an absolute file specificat ion. The last  component shall be the file name; the preceding compo nents shall specify its context. In some file  specifications, the file name may be empty; for example,  URL (uniform resource lo cator) specifications can  specify directories instead of file s. A file specification that does  not begin with a SOLIDUS shall be a  relative  file specification giving the location of the file re lative to that of the PDF file containing it.  In the case of a URL-based file syst em, the rules of Internet RFC 1808,  Relative Uniform Resource Locators(see the  Bibliography ), shall be used to compute an absolute URL  from a relative file specification and the  specification of the PDF file. Prior to thi s process, the relative file specific ation shall be converted to a relative  URL by using the escape mechanism of RFC 1738,  Uniform Resource Locators , to represent any bytes that  would be either unsafe according to RFC 1738 or not re presentable in 7-bit U.S. ASCII. In addition, such URL- based relative file specifications  shall be limited to paths as defined in RFC 1808. The scheme, network  location/login, fragment identifier,  query information, and parameter sections shall not be allowed.  In the case of other file systems, a relative file s pecification shall be conver ted to an absolute  file specification  by removing the file name component from the specif ication of the containing  PDF file and appending the  relative file specification in its place.  EXAMPLE 1 The relative file specification ArtFiles  / Figure1  . pdf appearing in a PDF file whose specification is  / HardDisk  / PDFDocuments  / AnnualReport  / Summary . pdf yields the absolute specification  / HardDisk  / PDFDocuments  / AnnualReport  / ArtFiles / Figure1  . pdfThe special component .  . (two PERIODs) (2Eh)  can be used in a relative file spec ification to move up a level in  the file system hierarchy. After an absolute specificat ion has been derived, when the component immediately  preceding .  . is not another .  . , the two cancel each other; both are eliminated from the file specification and the  process is repeated.",""],"109":["' Adobe Systems Incorporated 2008  All rights reserved 101PDF 32000-1:2008 EXAMPLE 2 The  relative  f ile specification from  EXAMPLE 1 in this sub-clause using the .. (two PERIODs) special  component  . . /. . / ArtFiles  / Figure1  . pdf would yield the absol ute specification/ HardDisk  / ArtFiles / Figure1  . pdf7.11.2.3 Conversion to Platform-Dependent File Names The conversion of a file specification to a platform-depe ndent file name depends on the specific file naming  conventions of each platform:   For DOS, the initial component shall be either a physic al or logical drive identifier or a network resource  name as returned by the Microsoft Windows function  WNetGetConnection, and shall be followed by a  COLON (3Ah) (  : ). A network resource name shall be construc ted from the first two components; the first  component shall be the server name and the second shall be the share name (volume name). All  components shall be separa ted by REVERSE SOLIDI (backslashes) (5 Ch). It shall be poss ible to specify  an absolute DOS path without a drive by making the first component empty. (Empty components are  ignored by other platforms.)   For Mac OS, all components shall be separated by COLONs.   For UNIX, all components shall be separated by SOLI DI (2Fh) (slashes). An in itial SOLIDUS, if present,  shall be preserved.  Strings used to specify a file name shall be interpreted in the standard encoding for the platform on which the  document is being viewed.  Ta b l e  43 shows examples of file specificat ions on the most common platforms.  NOTE 1 When creating documents that are to be viewed on multiple platforms, care should be taken to ensure file  name compatibility. Only a subset of  the U.S. ASCII character set should  be used in file specifications: the  uppercase alphabetic characters (AZ), the numeric characters (09), the PERIOD (2Eh) and the LOW LINE  (underscore) (5Fh). The PERIOD has special meaning  in DOS and Windows file names, and as the first  character in a Mac OS pathname. In f ile specifications, the PERIOD should be used only to separate a base  file name from a file extension.  NOTE 2 Some file systems are case-insensitive, and name s within a directory are unique so names should remain  distinguishable if lowercase letters are changed to  uppercase or vice versa. On DOS and Windows 3.1  systems and on some CD-ROM file systems, file name s are limited to 8 characters plus a 3-character  extension. File system softwa re typically converts long names to s hort names by retaining the first 6 or 7  characters of the file name and the first 3 characters af ter the last PERIOD, if any. Since characters beyond the  sixth or seventh are often converted to other values un related to the original value, file names should be  distinguishable from the first 6 characters.  Table  43   Examples of file specifications   SystemSystem-dependent paths Written form DOS\\ pdfdocs  \\ spec . pdf (  no drive  ) r : \\ pdfdocs  \\ spec . pdf  pclib  / eng : \\ pdfdocs  \\ spec . pdf ( / / pdfdocs  /","spec . pdf  ) ( / r / pdfdocs  / spec  . pdf  )( / pclib  / eng / pdfdocs  / spec . pdf  )Mac OSMac HD : PDFDocs : spec . pdf( /Mac  HD/ PDFDocs/ spec . pdf  )UNIX/ user  / fred / pdfdocs  / spec . pdf pdfdocs  / spec . pdf ( relative )( / user  / fred  / pdfdocs / spec",". pdf  ) ( pdfdocs / spec . pdf )",""],"110":["PDF 32000-1:2008 102 ' Adobe Systems Incorporated 2008  All rights reserved 7.11.2.4 Multiple-Byte Strings in File Specifications In PDF 1.2 or higher, a file specification may cont ain multiple-byte character codes, represented in  hexadecimal form between angle brackets (<  and  >) (using LESS-THAN SIGN (3Ch) and GREA TER-THAN SIGN (3Eh)). Since the SOLIDUS (2Fh ) (slash character), denoted as <  2F >, is used as a component delimiter  and the REVERSE SOLIDUS (5Ch) (bac kslash character), denoted as <  5C >, is used as an escape character,  any occurrence of either of these bytes in a multiple-b yte character shall be preceded by the ASCII code for the  SOLIDUS (2Fh).  EXAMPLE A file name containing the 2-byte character code <  89 5C > is written as <  89 5C 5C >. When the  application encounters this sequence  of bytes in a file name, it replaces the sequence with the original  2-byte code.  7.11.3 File Specifica tion Dictionaries The dictionary form of file specificatio n provides more flexibility than the string  form, allowing different files to be  specified for different file systems or platforms, or for  file systems other than the standard ones (DOS/Windows,  Mac OS, and UNIX).  Ta b l e  44 shows the entries in a file specificatio n dictionary. Regardless of the platform,  conforming readers should use the  F and UF (beginning with PDF 1.7) entri es to specify files. The  UF entry is  optional, but should be in cluded because it enables cross-plat form and cross-lang uage compatibility.  Table  44   Entries in a file specification dictionary   Key Type Value Type name (Required if an  EF or RF entry is present; recommended always)  The type of  PDF object that this dictionary describes; shall be  Filespec  for a file specification dictionary. FSname (Optional)  The name of the file sy stem that shall be used to interpret this file  specification. If this entr y is present, all other entrie s in the dictionary shall be  interpreted by the designated file system. PDF shall define only one standard  file system name,  URL  (see  7.11.5, \"URL Specifications\" ); an application can  register other names (see  Annex E ). This entry shall be independent of the  F, UF, DOS, Mac, and Unix entries.  Fstring(Required if the  DOS, Mac, and Unix entries are all absent; amended with the  UF entry for PDF 1.7)  A file specification  string of the form described in  7.11.2,  \"File Specification Strings,\"  or (if the file system is  URL) a uniform resource locator, as described in  7.11.5, \"URL Specifications.\"  The  UF  entry should be used in addition to the  F entry. The  UF entry provides  cross-platform and cross-language compatibility and the  F entry provides  backwards compatibility.  UFtext string(Optional, but recommended if the  F entry exists in the dictionary; PDF 1.7)  A Unicode text string that provides file specification of the form described in  7.11.2, \"File Specification Strings.\"  This is a text string encoded using  PDFDocEncoding  or UTF-16BE with a leading byte-order marker (as defined  in  7.9.2.2, \"Text String Type\" ). The F e ntry should be included along with this  entry for backwards compatibility reasons. DOSbyte string (Optional)  A file specification string (see  7.11.2, \"File Specification Strings\" ) representing a DOS file name.  This entry is obsolescent and should  not be used by conforming writers. Macbyte string (Optional)  A file specification string (see  7.11.2, \"File Specification Strings\" ) representing a Mac OS file name.  This entry is obsolescent and should  not be used by conforming writers. Unixbyte string (Optional)  A file specification string (see  7.11.2, \"File Specification Strings\" ) representing a UNIX file name.  This entry is obsolescent and should  not be used by conforming writers.",""],"111":["' Adobe Systems Incorporated 2008  All rights reserved 103PDF 32000-1:2008 7.11.4 Embedded File Streams 7.11.4.1 General If a PDF file contains file sp ecifications that refer to an external file  and the PDF file is archived or transmitted,  some provision should be made to ensure that the ex ternal references will  remain valid. One way to do this is to  arrange for copies of the external files to accompany the PDF file.  Embedded file streams (PDF 1.3)  address  this problem by allowing the contents of referenced file s to be embedded directly within the body of the PDF  file. This makes the PDF file  a self-contained unit that can be stored  or transmitted as a single entity. (The  embedded files are included purely for convenience an d need not be directly processed by any conforming  reader.) NOTE If the file contains OPI (Open Prepress Interface) dict ionaries that refer to externally stored high-resolution  images (see  14.11.7, \"Open Prepress Interface (OPI)\" ), the image data can be incorporated into the PDF file  with embedded f ile streams. An embedded file stream shall be included in  a PDF document in one of the following ways:  Any file specification dictionary in the document may have an  EF entry that specifies an embedded file  stream. The stream data sha ll still be associated with a location in th e file system. In part icular, this method  IDarray(Optional)  An array of two byte strings constituting a file identifier (see  14.4,  \"File Identifiers\" ) that should be included in the referenced file.  NOTE The use of this entry improves  an applications chances of finding  the intended file and allows it to warn the user if the file has  changed since the link was made.  Vboolean (Optional; PDF  1.2)   A flag indicating whether the file referenced by the file  specification is  volatile (changes frequently with time). If the value is  true, applications shall not cache a copy  of the file. For example, a movie  annotation referencing a URL to a live video camera could set this flag to  trueto notify the conforming reader that it should re-acquire the movie each time it  is played. Default value:  false. EFdictionary (Required if  RF is present; PDF  1.3; amended to include the  UF key in PDF 1.7)  A dictionary containing a subset of the keys  F, UF, DOS, Mac , and  Unix, corresponding to the entries by those names  in the file specification dictionary.  The value of each such key shall be an embedded file stream (see  7.11.4,  \"Embedded File Streams\" ) containing the corresponding file. If this entry is  present, the  Type  entry is required and the file specification dictionary shall be  indirectly referenced.The  F and   UF entries should be used in place of the  DOS, Mac, or Unixentries. RFdictionary (Optional; PDF  1.3) A d ictionary with the same structure as the  EF dictionary,  which shall be present. Each key in the  RF dictionary shall also be present in  the EF dictionary. Each value shall be a related files array (see  7.11.4.2,  \"Related Files Arrays\" ) identifying files that are  related to the corresponding  file in the  EF dictionary. If this entry is present, the  Type  entry is required and  the file specification dictionary  shall be indirectly referenced.  Desc text string(Optional; PDF  1.6) Descriptive text associated with the file specification. It  shall be used for files in the  EmbeddedFiles  name tree (see  7.7.4, \"Name  Dictionary\" ). CIdictionary (Optiona l; shall be indirect reference; PDF 1.7 ) A collection item dictionary,  which shall be used to create the user interface for portable collections (see  7.11.6, \"Collection Items\" ). Table 44   Entries in a file specification dictionary  (continued) Key Type Value",""],"112":["PDF 32000-1:2008 104 ' Adobe Systems Incorporated 2008  All rights reserved shall be used for file attachment annotations (see  12.5.6.15, \"File Attachment Annotations\" ), which  associate the embedded file with a lo cation on a page in the document.   Embedded file streams may be associated with the document as a whole through the  EmbeddedFiles entry ( PDF 1.4) in the PDF documents name dictionary (see  7.7.4, \"Name Dictionary\" ). The associated  name tree shall map name strings to file specificati ons that refer to embedded file streams through their  EFentries.  Beginning with PDF 1.6, the  Desc entry of the file specif ication dictionary (see  Ta b l e  44) should be used to  provide a textual description of the em bedded file, which can be displayed in the user interface of a conforming  reader. Previously, it was ne cessary to identify document-level embedde d files by the name string provided in  the name dictionary associated with  an embedded file stream in much th e same way that the JavaScript name  tree associates name strings with document-level JavaScript actions (see  12.6.4.16, \"JavaScript Actions\" ).  The stream dictionary describing an embedded file shall contain the standard entries for any stream, such as  Length and  Filter  (see  Table  5), as well as the additional entries shown in  Ta b l e  45. Table  45   Additional entries in an embedded file stream dictionary   Key Type Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  EmbeddedFile  for an embedded file stream.  Subtypename (Optional)  The subtype of the embedded file. The value of this entry  shall be a first-class name, as defined in  Annex E. Names without a  registered prefix shall conform to  the MIME media type names defined  in Internet RFC 2046,  Multipurpose Internet Ma il Extensions (MIME),  Part Two: Media Types  (see the  Bibliography ), with the provision that  characters not allowed in names shall use the 2-character  hexadecimal code format described in  7.3.5, \"Name Objects.\"  Paramsdictionary (Optional)  An embedded file parameter dictionary  that shall contain  additional file-specific information (see  Table  46). Table  46   Entries in an embedded  file parameter dictionary   Key Type Value Sizeinteger (Optional)  The size of the uncompressed embedded file, in bytes.  CreationDate date (Optional)  The date and time when the embedded file was created.  ModDatedate (Optional)  The date and time when the embedded file was last  modified.  Macdictionary (Optional)  A subdictionary containing additional information specific to  Mac OS files (see Table  47). CheckSum string(Optional)   A 16-byte string that is the  checksum of the bytes of the  uncompressed embedded file. The checksum shall be calculated by  applying the standard MD5 message-digest algorithm (described in  Internet RFC 1321,  The MD5 Message-Digest Algorithm ; see the Bibliography ) to the bytes of the embedded file stream.",""],"113":["' Adobe Systems Incorporated 2008  All rights reserved 105PDF 32000-1:2008 For Mac OS files, the  Mac  entry in the embedded file parameter dictionary should hold a further subdictionary  containing Mac OSspecific file information.  Ta b l e  47 shows the contents of this subdictionary.  7.11.4.2 Related Files Arrays In some circumstances, a PDF file can re fer to a group of related files, such as  the set of five files that make up  a DCS 1.0 colour-separated image. The file  specification explicitly names only  one of the files; the rest shall be  identified by some systematic variation  of that file name (such as by altering  the extension). When such a file is  to be embedded in a PDF file, the related files shall be embedded as well. This is accomplished by including a  related files array (PDF 1.3)  as the value of the  RF entry in the file specification dictionary. The array shall have  2 ¥ n ele ments, which shall be paired in the form  [ string1 stream1  string2 stream2    stringn stream n]The first element of each pair shall be a string giving  the name of one of the rela ted files; the second element  shall be an embedded file stream holding the files contents.  EXAMPLE In the following example, objects 21, 31, and 41  are embedded file streams containing the DOS file  SUNSET  . EPS, the Mac OS file Sunset . eps, and the UNIX file Sunset  . eps, respectively. The file  specification dictionarys RF entry specifies an array, object 30, identifying a set of embedded files related  to the Mac OS file, forming a DCS  1.0 set. The example shows only the fi rst two embedded file streams in  the set; an actual PDF file would,  of course, include all of them. 10 0 obj % File specification dictionary << /Type  /Filespec /DOS  ( SUNSET . EPS) /Mac ( Sunset . eps  )% Name of Mac OS file  /Unix ( Sunset . eps   ) /EF << /DOS   21 0 R/Mac 31 0 R% Embedded Mac OS file /Unix  41 0 R    >>/RF << /Mac  30 0 R",">>% Related files array for Mac OS file >>endobj 30 0 obj % Related files array for Mac OS file [ ( Sunset  . eps  ) 31 0 R% Includes file Sunset  . eps itself   ( Sunset  . C ) 32 0 R  ( Sunset  . M ) 33 0 R   ( Sunset  . Y ) 34 0 R Table  47   Entries in a Mac OS f ile information dictionary   Key Type Value Subtypeinteger (Optional)  The embedded files file type. It shall be encoded as an integer  according to Mac OS conventions: a 4-char acter ASCII text literal, that shall be  a 32-bit integer, with the high-order byte first.  EXAMPLE The file type CARO is represented as the  hexadecimal integer 4341524F, which is expressed in decimal as  1128354383. Creator integer (Optional)  The embedded files creator signat ure shall be encoded in the same  way as Subtype.ResFork stream(Optional)   The binary contents of the embedded files resource fork.",""],"114":["PDF 32000-1:2008 106 ' Adobe Systems Incorporated 2008  All rights reserved   ( Sunset  . K ) 35 0 R ]endobj 31 0 obj % Embedded file stream for Mac OS file <<  /Type  /EmbeddedFile % Sunset  . eps   /Length    /Filter  >>stream  Data for Sunset  . eps  endstreamendobj 32 0 obj % Embedded file stream for related file <<  /Type  /EmbeddedFile % Sunset  . C  /Length    /Filter  >>stream  Data for Sunset  . C endstreamendobj 7.11.5 URL Specifications When the  FS entry in a file specificat ion dictionary has the value  URL, the value of the  F entry in that dictionary  is not a file specificat ion string, but a uniform resource locator (URL ) of the form defined in Internet RFC 1738,  Uniform Resource Locators  (see the  Bibliography ).  EXAMPLE The following example  shows a URL specification. <<  /FS /URL   /F ( ftp  :","/ / www . beatles  . com / Movies  / AbbeyRoad  . mov )>>The URL shall adhere to the character-encoding requ irements specified in RFC 1738. Because 7-bit U.S.  ASCII is a stri ct subset of  PDFDocEncoding , this value shall also be considered to be in that encoding.  7.11.6 Collection Items Beginning with PDF 1.7, a  collection item dictionary shall contain the data described by the collection schema  dictionary for a particular  file in a collection (see  12.3.5, \"Collections\" ). Ta b l e  48 describes the entries in a  collection item dictionary.  Table  48   Entries in a collection item dictionary   KeyType Value Type name(Optio nal ) The type of PDF object that th is dictionary describes; if present,  shall be CollectionItem for a collection item dictionary.",""],"115":["' Adobe Systems Incorporated 2008  All rights reserved 107PDF 32000-1:2008 A collection subitem dictionary provides the data corresponding to the re lated fields in the collection dictionary,  and it provides a means of associating  a prefix string with that data value.  The prefix shall be ignored by the  sorting algorithm.  Table  49 describes the entries in a collection subitem dictionary.  7.11.7 Maintenance of File Specifications The techniques described in this sub-clause can be used to  maintain the integr ity of the file specifications within  a PDF file during the following types of operations:   Updating the relevant file specification when a referenced file is renamed  Determining the complete collection of files that are copied to a mirror site   When creating new links to external files, discovering ex isting file specifications th at refer to the same files and sharing them   Finding the file specificati ons associated with embedded files to be packed or unpacked  NOTE 1 It is not possible, in general, to find all file spec ification strings in a PDF file because there is no way to  determine whether a given string is a file specification stri ng. It is possible, however, to find all file specification  dictionaries , provided that they meet  the following conditions:  They are indirect objects.  They contain a  Type  entry whose value is the name  Filespec . NOTE 2 A conforming reader can locate all of the file spec ification dictionaries by trav ersing the PDF files cross- reference table (see  7.5.4, \"Cross-Reference Table\" ) and finding all dictionaries with  Type  keys whose value is  Filespec . For this reason, all file specifications should be  expressed in dictionary form  and meet the conditions  stated above. Any file specificat ion dictionary specifying embedded fi les (that is, one that contains an  EF entry)  should satisfy these conditions (see  Table  44). Other  keys text string, date, number or  dictionary (Optional) Provides the data corresponding to the related fields in the  collection dictionary. If the entry is a  dictionary, then it shall be a collection  subitem dictionary (see  Ta b l e  49).  The type of each entry shall match the ty pe of data identified by the collection  field dictionary (see  Table  157 ) referenced by the same key in the collection  schema dictionary (see  Ta b l e  156 ). EXAMPLE If the corresponding collection field has a  Subtype entry of S, then the entry is a text string.  A single collection item dictionary may co ntain multiple entries, with one entry  representing each key (see  EXAMPLE 1  in  12.3.5, \"Collections\" ).Table  49   Entries in a collection subitem dictionary   KeyType Value Type name(Optional) The type of PDF object that th is dictionary describes; if present,  shall be CollectionSubitem for a collection item dictionary. Dtext string, date, or  number(Optional)  The data corresponding to the related entry in the collection field  dictionary (see Ta b l e  157 ). The type of data shall match the data type  identified by the corresponding collection field dictionary. Default: none. Ptext string(Optional)  A prefix string that shall be  concatenated with the text string  presented to the user. This entry is  ignored when a conforming reader sorts  the items in the collection. Default: none.  Table 48   Entries in a collect ion item dictionary  (continued) Key Type Value",""],"116":["PDF 32000-1:2008 108 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 3 It may not be possible to locate file specification dict ionaries that are direct objects, since they are neither self- typed nor necessarily reachable by any  standard path of object references.  NOTE 4 Files may be embedded in a PDF file either directly, using the  EF entry in a file specification dictionary, or  indirectly, using related f iles arrays specified in the  RF entry. If a file is embedded indirectly, its name is given  by the string that precedes the embedded file stream in t he related files array. If it is embedded directly, its  name is obtained from the value of the correspondi ng entry in the file specification dictionary.  EXAMPLE The EXAMPLE in  7.11.4.2, \"Related Files Arrays,\"  for instance, shows the  EF dictionary having a DOS  entry identifying object number 21  as an embedded file stream. The  name of the embedded DOS file,  SUNSET  . EPS, is given by the DOS entry in the file  specification dictionary.  NOTE 5 A given external file may be referenced from more th an one file specification.  Therefore, when embedding a  file with a given name, it is recommended to check fo r other occurrences of the same name as the value  associated with the corresponding key in other file  specification dictionaries.  This requires finding all  embeddable file specifications and, for each matching  key, checking for both of the following conditions:  The string value associated with the key ma tches the name of the file being embedded.  A file has not already been embedde d for the file specification.  NOTE 6 If there is already a corresponding key in the  EF dictionary, a file has alread y been embedded for that use of  the file name.  NOTE 7 Files associated with a given file name need  not be unique. The same file name, such as readme  . txt, may be  associated with different embedded files  in distinct file specifications. 7.12 Extensions Dictionary 7.12.1 General The ext ensions dictionary, an entry in the documents cata log dictionary, if present, shall contain one or more  entries identifying developer-defined extensions to the ISO 32000-1 Standard . An extensions dictionary, not  shown, may optionally contain a  Type  entry whose value is the name  Extensions . The keys in the extensions  dictionary shall be names consisting only  of the registered prefixes, described in  Annex E , of the developers  whose extensions are being used.  The values shall be developer extensions dictionaries specifying developer- defined version information as shown in  Ta b l e  50. The extensions dictionary, all developer extensions  dictionary entries in the extensions dictionary, as well as  their entries, all shall be direct objects (i.e., this  information shall be nested directly  within the catalog dictionary  with no indirect objects used). 7.12.2 Developer Extensions Dictionary Ta b l e  50 describes the entries in a dev eloper extensions dictionary.  Table  50   Entries in a developer extensions dictionary   KeyType Value Type name(Optio nal ) The type of PDF object that this  dictionary describes; if present,  shall be  DeveloperExtensions .BaseVersion name(Requ ired ) The name of the PDF version to which this extension applies. The  name shall be consistent  with the syntax used for the  Version  entry of the  catalog dictionary (see  7.7.2, Document Catalog ).ExtensionLevel integer (Requ ired ) An integer defined by the developer to denote the extension being  used. If the developer in troduces more than one extension to a given  BaseVersion  the extension level numbers assigned by that developer shall  increase over time.",""],"117":["' Adobe Systems Incorporated 2008  All rights reserved 109PDF 32000-1:2008 7.12.3 BaseVersion The value of the  BaseVersion  entry shall be a name and shall be consistent with the syntax used for the  Version  entry value of the catalog dictionary (see  7.7.2, Document Catalog ). The value of  BaseVersion , when treated as a version number, shall be less than or equ al to the PDF version, both in the document header  (see  7.5.2, File Header ) and the catalog  Version  key value, if present. The value of  BaseVersion  may be different from the version number in the  document header or that supplied by the  Version  key in the Catalog . This is because it reflects the version of the standard  that has been extended and not the version of this  particular file. NOTE 1 The value of  BaseVersion  is not  to be interpreted as a real number  but as two integers with a PERIOD (2Eh)  between them. 7.12.4 ExtensionLevel The value of the  ExtensionLeve l entry shall be an integer, which sha ll be interpreted wit h respect to the  BaseVersion  value. If a developer has released  multiple extensions against the same  BaseVersion  value,  they shall be ordered over time and the  ExtensionsLeve l numbers shall be a monotonically increasing  sequence over time. EXAMPLE 1 %PDF1.7 <</Type  /Catalog    /Extensions << /ADBE<</BaseVersion   /1.7     /ExtensionLevel   3 >>>>>>EXAMPLE 2 %PDF1.7 <</Type  /Catalog    /Extensions << /GLGR <</BaseVersion   /1.7     /ExtensionLevel   1002 >>>>>>EXAMPLE 3 %PDF1.7 <</Type  /Catalog    /Extensions << /ADBE<</BaseVersion   /1.7     /ExtensionLevel   3 >>      /GLGR <</BaseVersion   /1.7     /ExtensionLevel   1002 >>>>>>",""],"118":["PDF 32000-1:2008 110 ' Adobe Systems Incorporated 2008  All rights reserved 8 Graphics 8.1 General The graphics operators used in PDF content stream s describe the appearance of pages that are to be  reproduced on a raster output device. The facilities described in this clause  are intended for both printer and display applications.  The graphics operators form six main groups:  Gr aphics state operators  manipulate the data structure called the  graphics state , the global framework  within which the other graphics operators ex ecute. The graphics state includes the  current transformation  matrix  (CTM), which maps user space coordinates used  within a PDF content stream into output device  coordinates. It also includes the  current colour , the current clipping path , and many other parameters that  are implicit operands of the painting operators.  Pa th construction operators  specify paths , which define shapes, line trajec tories, and regions of various  sorts. They include operators for beginning a new path , adding line segments and curves to it, and closing  it. Path- painting operators  fill a path with a colour, paint a stroke al ong it, or use it as a clipping boundary.  Oth er painting operators  paint certain self-describing graphics objects. These include sampled images,  geometrically defined shadings, and entire content streams that in turn contain sequences of graphics  operators.  T ext operators  select and show  character glyphs  from fonts  (descriptions of typeface s for representing text  characters). Because PDF treats gly phs as general graphical shapes, many of the text operators could be  grouped with the graphics state or painting operator s. However, the data structures and mechanisms for  dealing with glyph and font descriptions ar e sufficiently specialized that clause  9, \"Text\"  focuses on them.  Ma rked-content operators  associate higher-level logical information with objects in the content stream.  This information does not affect the rendered appearanc e of the content (although it may determine if the  content should be presented at all; see  8.11, \"Optional Content\" ); it is useful to applications that use PDF  for document interchange. Marked content is described in  14.6, \"Marked Content\" .This clause presents general information about de vice-independent graphics in PDF: how a PDF content  stream describes the abstract appearance of a page.  Rendering the device-dependent part of graphicsis  covered in clause 10, \"Rendering\" . The  Bibliography  lists a number of books that give details of these computer  graphics concepts and their implementation.  8.2 Graphics Objects As discussed in  7.8.2, \"Content Streams\" , the data in a content stream shall be interpreted as a sequence of  operators  and their  operands , expressed as basic data objects according to standard PDF syntax. A content  stream can describe the appearance of a page, or it ca n be treated as a graphical element in certain other  contexts.  The operands and operators shall be written sequentia lly using postfix notation. Although this notation  resembles the sequential execution model of the PostScript language, a PDF content stream is not a program  to be interpreted; rather, it is a  static description of a sequence of  graphics objects . There are specific rules,  described below, for writing the operands and  operators that describe a graphics object.  PDF provides five types of graphics objects:  A  p ath object  is an arbitrary shape made up of straight lines, rectangles, and cubic BØzier curves. A path  may intersect itself and may have disconnected sections  and holes. A path object ends with one or more",""],"119":["' Adobe Systems Incorporated 2008  All rights reserved 111PDF 32000-1:2008 painting operators that specify whether the path shall  be stroked, filled, used  as a clipping boundary, or  some combination of these operations.  A  te xt object  consists of one or more character strings that  identify sequences of gly phs to be painted. Like  a path, text can be stro ked, filled, or used as  a clipping boundary.  An  external object (XObject)  is an object defined outside the content stream and referenced as a named  resource (see 7.8.3, \"Resource Dictionaries\" ). The interpretation of an XObject depends on its type. An  image XObject  defines a rectangular array of colour samples to be painted; a  form XObject  is an entire  content stream to be treated as a single graphics  object. Specialized types of form XObjects shall be used  to import content from one PDF file into another  (reference XObjects)  and to group graphical elements  together as a unit for various purposes  (group XObjects) . In particular, the latter are used to define  transparency groups  for use in the transparent imaging model ( transparency group XObjects , discussed in  detail in clause  11, \"Transparency\" ). There is also a PostScript XObjec t that may appear in some existing  PDF files, but it should not be us ed by a PDF 1.7 conforming writer. An  in line image object  uses a special syntax to express the  data for a small image directly within the  content stream.  A  sh ading object  describes a geometric shape whose colour is  an arbitrary function of position within the  shape. (A shading can also be treated as a colour when painting other graphics objects; it is not  considered to be a separate graphics object in that case.)  PDF 1.3 and earlier versions use an  opaque imaging model  in which each graphics  object is painted in  sequence, completely obscuring any previous marks  it may overlay on the page. PDF 1.4 introduced a  transparent imaging model  in which objects can be less than fully op aque, allowing previously painted marks to  show through. Each object is painted on the page with a specified  opacity , which may be constant at every  point within the objects shape or may vary from point  to point. The previously existing contents of the page  form a backdrop with which the new object is  composited , producing results that combine the colours of the  object and backdrop according to their respective opacit y characteristics. The object s at any given point on the  page  forms a transparency stack , where the stacking order is defined to be the order in which the objects shall  be specified, bottommost object first.  All objects in the stack can potentia lly contribute to the result, depending  on their colours, shapes, and opacities.  PDFs graphics parameters are so arranged that objects  shall be painted by default with full opacity, reducing  the behaviour of the transparent imaging model to that of the opaque model. Accordingly, the material in this  clause applies to both the opaque and transparent mo dels except where explicitly stated otherwise; the  transparent model is described in  its full generality in clause  11, \"Transparency\" . Although the painting behaviour described above is often  attributed to individual operators making up an object,  it is always the object as  a whole that is painted.  Figure 9  in Annex L shows the ordering rules for the  operations that define graphics objects. Some operations  shall be permitted only in certain types of graphics  objects or in the intervals between graphics objects (called the  page description level  in the figure). Every  content stream begins at the page description level, w here changes may be made to the graphics state, such  as colours and text attributes, as di scussed in the following sub-clauses.  In the Figure 9  in Annex L , arrows indicate the operators that mark  the beginning or end of each type of  graphics object. Some operators are identified individually, others by general category.  Table  51 summarizes  these categories for all PDF operators.  Table  51   Operator Categories   Category Operators Table General graphics state w, J, j, M, d, ri, i, gs57Special graphics state q, Q, cm57Path construction m, l, c, v, y, h, re59",""],"120":["PDF 32000-1:2008 112 ' Adobe Systems Incorporated 2008  All rights reserved Path painting S, s, f, F, f*, B, B*, b, b*, n60Clipping paths W, W*61Text objects BT, ET107Text state Tc, Tw, Tz, TL, Tf, Tr, TsText positioning Td, TD, Tm, T*108Text showing Tj, TJ, ’, \"109Type 3 fonts d0, d1113 Color CS, cs, SC, SCN, sc, scn, G, g, RG, rg, K, k74Shading patterns sh77Inline images BI, ID, EI92XObjects Do87Marked content MP, DP, BMC, BDC, EMC 320Compatibility BX, EX32Table 51   Operator Categories (continued) Category Operators Table",""],"121":["' Adobe Systems Incorporated 2008  All rights reserved 113PDF 32000-1:2008 Figure  9   Graphics Objects EXAMPLE The path construction operators  m and re signal the beginning of a path object. Inside the path object,  additional path construction operators are  permitted, as are the clipping path operators  W and  W*, but not  general graphics state operators such as  w or J. A path-painting operator, such as  S or f, ends the path  object and returns to the page description level. NOTE A conforming reader may process a content stream  whose operations violate these rules for describing  graphics objects and can produce unpredictable behaviour, even though it may display and print  the stream  correctly. Applications t hat attempt to extract graphics objects fo r editing or other pu rposes depend on the  objects being well formed. The rules for graphics objects are also important for the proper interpretation of  marked content (see  14.6, \"Marked Content\" ). A graphics object also implicitly inclu des all graphics state parameters that affect its behaviour. For instance, a  path object depends on the value of the current colour parameter at the moment the path object is defined. The  effect shall be as if this paramete r were specified as part of the defi nition of the path object. However, the  operators that are invoked at the page description  level to set graphics state parameters shall not be","Path object Allowed operators:   Path construction","Text object Allowed operators:   General graphics state   Color   Text state   Text-showing   Text-positioning   Marked-content","Page description level Allowed operators:   General graphics state   Special graphics state   Color   Text state   Marked-content","Clipping path object Allowed operators:   None","Shading object Allowed operators:   None","In-line image object Allowed operators:   IDExternal object","Allowed operators:   None","(immediate) Path-painting operators (immediate) Path-painting operators m, re EIBIDoshBT ET","W, W*",""],"122":["PDF 32000-1:2008 114 ' Adobe Systems Incorporated 2008  All rights reserved considered to belong to any particular graphics object.  Graphics state parameters should be specified only  when they change. A graphics object can depend on  parameters that were defined much earlier.  Similarly, the individual character strings within a text  object implicitly include the graphics state parameters on  which they depend. Most of  these parameters may be set inside or outsi de the text object. The effect is as if  they were separately specif ied for each text string.  The important point is that there is no semantic sign ificance to the exact arrangement of graphics state  operators. A conforming reader or wr iter of a PDF content stream may  change an arrangement of graphics  state operators to any other arrangem ent that achieves the same values  of the relevant graphics state  parameters for each graphics object. A conforming reader  or writer shall not infer any higher-level logical  semantics from the arrangement of tokens cons tituting a graphics object. A separate mechanism,  marked  content  (see  14.6, \"Marked Content\" ), allows such higher-level information  to be explicitly associated with the  graphics objects.  8.3 Coordinate Systems 8.3.1 General Coordinate systems define the canvas on which all pain ting occurs. They determine  the position, orientation,  and size of the text, graphics, and images that appea r on a page. This sub-clause describes each of the  coordinate systems used in PDF, how they are relate d, and how transformations among them are specified.  NOTE The coordinate systems discussed in this sub-claus e apply to two-dimensional graphics. PDF 1.6 introduced  the ability to display 3D artwork, in which objects ar e described in a three-dimensional coordinate system, as  described in 13.6.5, \"Coordinate  Systems for 3D\" . 8.3.2 Coordinate Spaces 8.3.2.1 General Paths and positions shall be defined in terms of pairs of  coordinates  on the Cartesian plane. A coordinate pair  is a pair of real numbers  x and  y that locate a point horizontally and vertically within a two-dimensional  coordinate space . A coordinate space is determined by the following properties with respect to the current  page:   The location of the origin   The orientation of the  x and y axes   The lengths of the units along each axis  PDF defines several coordinate spaces in which th e coordinates specifying graphics objects shall be  interpreted. The following sub-clauses describe these spaces and the relationships among them.  Transformations among coordinate spaces shall be defined by  transformation matrices , which can specify any  linear mapping of two-dimensional coordinates, including tr anslation, scaling, rotation, reflection, and skewing.  Transformation matrices are discussed in  8.3.3, \"Common Transformations\"  and  8.3.4, \"Transformation  Matrices\" . 8.3.2.2 Device Space The contents of a page ultimately appear on a raster outp ut device such as a display  or a printer. Such devices  vary greatly in the built-in coordinate systems they us e to address pixels within their imageable areas. A  particular devices coordinate system is called its devi ce space. The origin of the device space on different  devices can fall in different places on the output page; on displays, the origin can vary depending on the  window system. Because the paper or other output medi um moves through different printers and imagesetters  in different directions, the axes of their device spaces  may be oriented differently. For instance, vertical (y)",""],"123":["' Adobe Systems Incorporated 2008  All rights reserved 115PDF 32000-1:2008 coordinates may increase from the top of the page to th e bottom on some devices and from bottom to top on  others. Finally, different devices have different resoluti ons; some even have resolutions that differ in the  horizontal and vertical directions.  NOTE If coordinates in a PDF file were specified in devi ce space, the file would be device-dependent and would  appear differently on different devices.  EXAMPLE Images specified in the typical device spaces of  a 72-pixel-per-inch display and a 600-dot-per-inch printer  would differ in size by more than a factor of 8;  an 8-inch line segment on the display would appear less  than 1 inch long on the printer.  Figure 10  in Annex L  shows how the same graphics object, specified in  device space, can appear drastically differen t when rendered on different output devices.  Figure  10   Device Space 8.3.2.3 User Space To avoid the device-dependent effects of specifying obje cts in device space, PDF defines a device-independent  coordinate system that always bears the same relationshi p to the current page, regardless of the output device  on which printing or displaying occurs. This  device-independent coordinate system is called  user space . The user space coordinate system shall be initialized  to a default state for each page of a document. The  CropBox entry in the page dictionary shall specify the re ctangle of user space corresponding to the visible  area of the intended output medium (displ ay window or printed page). The positive  x axis extends horizontally  to the right and the positive  y axis vertically upward, as in standard ma thematical practice (subject to alteration  by the  Rotate  entry in the page dictionary). The length of a unit along both the  x and  y axes is set by the  UserUnit entry  (PDF 1.6)  in the page dictionary (see  Table  30). If that entry is not present or supported, the  default value of 1   72 inch is used. This coordinate system is called  default user space . NOTE 1 In PostScript, the origin of default user space  always corresponds to the lower-left corner of the output  medium. While this convention is common in PDF documents  as well, it is not requir ed; the page dictionarys  CropBox  entry can specify any rectangle of default  user space to be made visible on the medium.  NOTE 2 The default for the size of  the unit in default user space (1   72 inch) is approxima tely the same as a  point , a unit  widely used in the printing industry. It is not exactly t he same, however; there is no  universal definition of a  point. Conceptually, user space is an infinite plane. Only a  small portion of this plane corresponds to the imageable  area of the output device: a re ctangular region defined by the  CropBox  entry in the page dictionary. The region  of default user space that is viewed or printed ca n be different for each page and is described in  14.11.2, \"Page  Boundaries\" . Coordinates in user space (as in any  other coordinate space) may be spec ified as either integers or real  numbers, and the unit size in default user space do es not constrain positions to any arbitrary grid. The  resolution of coordinates in user space is not related in any way to the resolution of pixels in device space.","Device space for 72-dpi screen","Device space for  300-dpi printer",""],"124":["PDF 32000-1:2008 116 ' Adobe Systems Incorporated 2008  All rights reserved The transformation from user space  to device space is defined by the  current transformation matrix (CTM), an  element of the PDF graphics state (see  8.4, \"Graphics State\" ). A conforming reader can adjust the CTM for the  native resolution of a particular output device,  maintaining the device-independence of the PDF page  description.  Figure 11  in Annex L  shows how this allows an object spec ified in user space to appear the same  regardless of the device on which it is rendered.  NOTE 3 The default user space  provides a consistent, dependable starting place for PDF page descriptions regardless  of the output device used. If necessary, a PDF content stre am may modify user space to be more suitable to its  needs by applying the  coordinate transformation operator , cm (see  8.4.4, \"Graphics  State Operators\" ). Thus, what may appear to be absolute coordinates in a content  stream are not absolute with respect to the current  page because they are expressed in a coordinate syst em that may slide around and shrink or expand.  Coordinate system transformation not only enhances device-i ndependence but is a useful tool in its own right.  EXAMPLE A content stream origi nally composed to occupy an entire page can be incor porated without change as an  element of another page by  shrinking the coordinate system  in which it is drawn.  Figure  11   User Space 8.3.2.4 Other Coordinate Spaces In addition to device space and user space, PDF uses  a variety of other coordinate spaces for specialized  purposes:   The coordinates of text shall be specified in  text space. The transformation from text space to user space  shall be defined by a  text matrix  in combination with several text-related parameters in the graphics state  (see  9.4.2, \"Text-Positioning Operators\" ).  Character glyphs in a font shall be defined in  glyph space  (see  9.2.4, \"Glyph Positioning and Metrics\" ). The  transformation from glyph space to text space shall be defined by the  font matrix. For most types of fonts,  this matrix shall be predefined to map 1000 units of glyp h space to 1 unit of text space; for Type 3 fonts, the  font matrix shall be given explicit ly in the font dictionary (see  9.6.5, \"Type 3 Fonts\" ).   All sampled images  shall be defined in  image space . The transformation from image space to user space  shall be predefined and cannot be changed. All images  shall be 1 unit wide by 1 unit high in user space,","User space Device space for 72-dpi screen Device space for  300-dpi printer","CTM",""],"125":["' Adobe Systems Incorporated 2008  All rights reserved 117PDF 32000-1:2008 regardless of the number of samples in the image. To be painted, an image shall be mapped to a region of  the page by temporarily altering the CTM.   A form XObject (discussed in  8.10, \"Form XObjects\" ) is a self-contained content stream that can be treated  as a graphical element within another content stre am. The space in which it is defined is called  form space . The transformation from form space to user space shall be specified by a  form matrix  contained in the form  XObject.  PDF 1.2 defined a type of colour known as a  pattern , discussed in  8.7, \"Patterns\" . A pattern shall be  defined either by a content stream that shall be invo ked repeatedly to tile an area or by a shading whose  colour is a function of position. The space in which a pattern is defined is called  pattern space . The transformation from pattern space to  user space shall be specified by a  pattern matrix  contained in the  pattern.   PDF 1.6 embedded 3D artwork, which is desc ribed in three-dimensional coordinates (see  13.6.5,  \"Coordinate Systems for 3D\" ) that are projected into an annotations target coordinate system (see  13.6.2,  \"3D Annotations\" ).8.3.2.5 Relationships among Coordinate Spaces Figure 12  in Annex L shows the relationships among the coordinate spaces described above. Each arrow in the  figure represents a transformation from one coordinate  space to another. PDF allows modifications to many of  these transformations.  Because PDF coordinate spaces are defined relative to  one another, changes made to one transformation can  affect the appearance of objects defined in several coordinate spaces.  EXAMPLE A change in the CTM,  which defines the transformation from user  space to device space, affects forms,  text, images, and patterns, since they  are all upstream from user space.  8.3.3 Common Tr ansformationsA tr ansformation matrix  specifies the relationship between  two coordinate spaces. By modifying a  transformation matrix, objects can be scaled, rotated, translated, or transformed in other ways.  Figure  12   Relationships Among Coordinate Systems A transformation matrix in PDF shall  be specified by six numbers, usually in the form of an array containing six  elements. In its most general form, this array is denoted [  a b c d e f ]; it can represent any linear  transformation from one coordinate system to another. This  sub-clause lists the arra ys that specify the most  common transformations;  8.3.4, \"Transformation Matrices\" , discusses more mathematical details of  transformations, including information on specifying transfor mations that are combinations of those listed here:","User space Device space Form space","Glyphspace","Text space Image space","Pattern space",""],"126":["PDF 32000-1:2008 118 ' Adobe Systems Incorporated 2008  All rights reserved  Translations shall be specified as [  1 0 0 1 tx ty ], where  tx and  ty shall be the distances to translate the  origin of the coordinate system in the horizontal and vertical dimensions, respectively.   Scaling shall be obtained by [  sx 0 0 sy 0 0 ]. This scales the coordinates so that 1 unit in the horizontal  and vertical dimensions of the new coordinate system is the same size as  sx and  sy units, respectively, in  the previous coordinate system.   Rotations shall be produced by [  cos q sin q -sin q cos q 0 0 ], which has the effect of rotating the  coordinate system axes by an angle  q counter clockwise.   Skew shall be specified by [  1 tan  a tan  b 1 0 0 ], which skews the x axis by an angle  a and the  y axis by an angle  b. Figure 13  in Annex L shows examples of each transformation. The directions of translation, rotation, and skew  shown in the figure correspond to positive values of the array elements.  Figure 13   Effects of Coordinate Transformations NOTE If several transformations are combined, the order in wh ich they are applied is significant. For example, first  scaling and then translating the  x axis is not the same as first translating and then scaling it. In general, to  obtain the expected results, transformations should be done  in the following order: Translate, Rotate, Scale or  skew. Figure 14  in Annex L shows the effect of the order in which tr ansformations are applied. The figure shows two  sequences of transformations applied to a coordinate syste m. After each successive transformation, an outline  of the letter n is drawn.","tytx","sysx","Skewing Rotation Scaling Translation qab",""],"127":["' Adobe Systems Incorporated 2008  All rights reserved 119PDF 32000-1:2008 Figure  14   Effect of Transformation Order NOTE The following transformations are shown in  the figure: a translation of 10 units in the  x direction and 20 units in  the y direction; a rotation of 30 degrees; a scaling by a factor of 3 in the  x direction  In the figure, the axes are shown with a dash pattern  having a 2-unit dash and a 2-un it gap. In addition, the  original (untransformed) axes are show n in a lighter colour for reference.  Notice that the sca le-rotate-translate  ordering results in a distortion of  the coordinate system, leaving the  x and  y axes no longer perpendicular; the  recommended translate-rotate-scale ordering results in no distortion.  8.3.4 Transformation Matrices This sub-clause discusses the mathem atics of transformation matrices.  To understand the mathematics of coordinate transforma tions in PDF, it is vital to remember two points:  T ransformations alter coordinate  systems, not graphics objects . All objects painted before a transformation  is applied shall be unaffected by the transformation . Objects painted after the transformation is applied  shall be interpreted  in the transformed coordinate system.  T ransformation matrices specify the transformation fr om the new (transformed) coordinate system to the  original (untransformed) coordinate system . All coordinates used after the transformation shall be  expressed in the transformed coordinate system. PD F applies the transformation matrix to find the  equivalent coordinates in the untransformed coordinate system.  NOTE 1 Many computer graphics textbooks consider transfo rmations of graphics objects rather than of coordinate  systems. Although either approach is correct and se lf-consistent, some details of  the calculations differ  depending on which point of view is taken.  PDF represents coordinates in a two-dimensional space. The point ( x, y)  in such a space can be expressed in  vector form as [  x y 1 ]. The constant third element of this vector  (1) is needed so that the vector can be used  with 3-by-3 matrices in the ca lculations described below.  The transformation between two coordinate systems can  be represented by a 3-by-3 transformation matrix  written as follows:","Original","Step 1: Translation Step 2: Rotation Step 3: Scaling","Original  Step 1: Scaling Step 2: Rotation Step 3: Translation",""],"128":["PDF 32000-1:2008 120 ' Adobe Systems Incorporated 2008  All rights reserved Because a transformation matrix has only six elements th at can be changed, in most cases in PDF it shall be  specified as the six-element array [  a b c d e f ].  Coordinate transformations shall be  expressed as matrix multiplications:  Because PDF transformation matrices specify the conver sion from the transformed coordinate system to the  original (untransformed) coordinate system,  x ¢ and  y ¢ in this equation shall be the coordinates in the  untransformed coordinate system, and  x and  y shall be the coordinates in the transformed system. The  multiplication is carr ied out as follows: If a series of transformations is carried out, the matric es representing each of the i ndividual transformations can  be multiplied together to produce a single equivalent  matrix representing the composite transformation.  NOTE 2 Matrix multiplication is not commut ativethe order in which ma trices are multiplied is significant. Consider a  sequence of two transformations: a scaling transformati on applied to the user space coordinate system,  followed by a conversion from the resultin g scaled user space to device space. Let  MS be the matrix specifying  the scaling and  MC the current transformation matrix, which transfo rms user space to device space. Recalling  that coordinates are always specified in the transform ed space, the correct order of transformations first  converts the scaled coordinates to default user space and  then converts the default user space coordinates to  device space. This can be expressed as  where XD   denotes the coordinates in device space  XU   denotes the coordinates in default user space  XS   denotes the coordinates in scaled user space  This shows that when a new transformation is concatenate d with an existing one, the matrix representing it  shall be multiplied  before  (premultiplied  with) the existing transformation matrix.  This result is true in ge neral for PDF: when a sequence of transformations is carried out, the matrix  representing the combined transformation  (M¢) is calculated by premultiplying the matrix representing the  additional transformation  (MT ) with the  one representing all previously existing transformations  (M): NOTE 3 When rendering graphics objects, it  is sometimes necessary for a conforming reader to perform the inverse of  a transformationthat is, to find the user space coordinat es that correspond to a given pair of device space","ab0 cd0 ef1","xcyc1>@xy1 >@ab0 cd0 ef 1 u=","xcaxucyue++=ycbxudyuf++=","XDXUMCuXSMSuMCuXSMSMCuu == =","McMTMu=",""],"129":["' Adobe Systems Incorporated 2008  All rights reserved 121PDF 32000-1:2008 coordinates. Not all transformations are invertible, however. For example, if a matrix contains  a, b, c, and  delements that are all zero, all user  coordinates map to the same devic e coordinates and there is no unique  inverse transformation. Such noninvertible transforma tions are not very useful and generally arise from  unintended operations, such as scaling by 0. Use of  a noninvertible matrix when painting graphics objects can  result in unpredictable behaviour.  8.4 Graphics State 8.4.1 General A conforming reader shall maintain an internal data structure called the  graphics state  that holds current  graphics control parameters. These parameters defi ne the global framework within which the graphics  operators execute.  EXAMPLE 1 The  f (fill) operator implicitly uses t he current colour parameter, and the  S (stroke) operator additionally  uses the current line width para meter from the graphics state.  A conforming reader shall initialize the  graphic state at the beginning of each  page with the values specified in  Ta b l e  52 and  Table  53. Ta b l e  52 lists those graphics state parameters that are device-independent and are  appropriate to specify in page descriptions. The parameters listed in  Ta b l e  53 control details of the rendering  (scan conversion) process and are device-dependent; a  page description that is intended to be device- independent should not be written to modify these parameters.  Table  52   Device-Independent Graphics State Parameters   Parameter Type Value CTMarrayThe  cur rent transformation matrix , which maps positions from  user coordinates to device coordinates (see  8.3, \"Coordinate  Systems\" ). This matrix is modified  by each application of the  coordinate transformation operator,  cm. Initial value: a matrix  that transforms default user coordinates to device  coordinates.  clipping  path (internal) The  cur rent clipping path , which defines the boundary against  which all output shall be cropped (see  8.5.4, \"Clipping Path  Operators\"). Initial value: the  boundary of the entire  imageable portion of the output page.  color space name  or arrayThe  c urrent colour space  in which colour values shall be interpreted (see  8.6, \"Colour Spaces\" ). There are two  separate colour space parameters: one for stroking and one  for all other painting operations. Initial value:  DeviceGray . color(various)The  curr ent colour  to be used during painting operations (see  8.6, \"Colour Spaces\" ). The type and interpretation of this  parameter depend on the current colour space; for most  colour spaces, a colour value consists of one to four  numbers. There are two separate colour parameters: one for  stroking and one for all other painting operations. Initial value:  black. text state (various)A set of nine graphics state parameters that pertain only to  the painting of text. These include parameters that select the  font, scale the glyphs to an appropriate size, and accomplish  other effects. The text state parameters are described in  9.3,  \"Text State Parameters and Operators\" . line  width number The thickness, in user space un its, of paths to be stroked  (see 8.4.3.2, \"Line Width\" ). Initial value: 1.0.",""],"130":["PDF 32000-1:2008 122 ' Adobe Systems Incorporated 2008  All rights reserved line  capinteger A code specifying the shape of the endpoints for any open  path that is stroked (see  8.4.3.3, \"Line Cap Style\" ). Initial  value: 0, for square butt caps.  line  joininteger A code specifying the shape of joints between connected  segments of a stroked path (see  8.4.3.4, \"Line Join Style\" ). Initial value: 0, for mitered joins.  miter limit number The maximum length of mitered line joins for stroked paths  (see 8.4.3.5, \"Miter Limit\" ). This parameter limits the length of  spikes produced when line segments join at sharp angles.  Initial value: 10.0, for a miter cutoff below approximately 11.5  degrees.  dash  pattern array and  number A description of the dash pattern to be used when paths are  stroked (see 8.4.3.6, \"Line Dash Pattern\" ). Initial value: a  solid line.  rendering  intent name The  rende ring intent  to be used when converting CIE-based  colours to device colours (see  8.6.5.8, \"Rendering Intents\" ). Initial value:  RelativeColorimetric . stroke adjustment boolean (PDF 1.2)  A flag specifying whether to compensate for  possible rasterization effects when stroking a path with a line  width that is small relative to the pixel resolution of the output  device (see  10.6.5, \"Automatic  Stroke Adjustment\" ). NOTE This is considered a device-independent  parameter, even though the details of its effects  are device-dependent.  Initial value:  false. blend  modename  or array(PDF 1.4) Th e  current blend mode  to be used in the  transparent imaging model (see  11.3.5, \"Blend Mode\"  and  11.6.3, \"Specifying Blending Colour Space and Blend Mode\" ). A conforming reader shall implicit ly reset this parameter to its  initial value at the beginning  of execution of a transparency  group XObject (see  11.6.6, \"Transparency Group XObjects\" ). Initial value:  Normal. soft  maskdictionary  or name(PDF 1.4) A sof t-mask dictionary  (see 11.6.5.2, \"Soft-Mask  Dictionaries\" ) specifying the mask shape or mask opacity  values to be used in the transparent imaging model (see  11.3.7.2, \"Source Shape and Opacity\"  and  11.6.4.3, \"Mask  Shape and Opacity\" ), or the name  None if no such mask is  specified. A conforming reader shall implicitly reset this  parameter implicitly reset to its initial value at the beginning of  execution of a transparency group XObject (see  11.6.6,  \"Transparency Group XObjects\" ). Initial value:  None. alpha  constant number (PDF 1.4) T he constant shape or c onstant opacity value to be  used in the transparent imaging model (see  11.3.7.2, \"Source  Shape and Opacity\"  and  11.6.4.4, \"Constant Shape and  Opacity\" ). There are two separate alpha constant  parameters: one for stroking and one for all other painting  operations. A conforming reader shall implicitly reset this  parameter to its initial value at  the beginning of execution of a  transparency group XObject (see  11.6.6, \"Transparency  Group XObjects\" ). Initial value: 1.0.  Table 52   Device-Independent Graphics State Parameters (continued) Parameter Type Value",""],"131":["' Adobe Systems Incorporated 2008  All rights reserved 123PDF 32000-1:2008 alpha  sourceboolean (PDF 1.4) A fla g specifying whether the current soft mask and  alpha constant parameters shall be interpreted as shape  values (true) or opacity values ( false). This flag also governs the interpretation of the  SMask  entry, if any, in an image  dictionary (see  8.9.5, \"Image Dictionaries\" ). Initial value:  false. Table  53   Device-Dependent Graphics State Parameters   Parameter Type Value overprint boolean (PDF 1.2) A flag specifying (on output devices that support  the overprint control feature) wh ether painting in one set of  colorants should cause the corresponding areas of other  colorants to be erased ( false) or left unchanged ( true); see 8.6.7, \"Overprint Control\" . In PDF 1.3, there are two separate  overprint parameters: one for stroking and one for all other  painting operations. Initial value:  false. overprint  modenumber (PDF 1.3) A code specifying whether a colour component  value of 0 in a  DeviceCMYK  colour space should erase that  component (0) or leave it unchanged (1) when overprinting  (see 8.6.7, \"Overp rint Control\" ). Initial value: 0.  black  generation function  or name(PDF 1.2) A  function that calculates the level of the black  colour component to use when converting  RGB  colours to CMYK (see  10.3.4, \"Conversion from DeviceRGB to  DeviceCMYK\"). Initial value: a conforming reader shall  initialize this to a suitable device dependent value. undercolor  removalfunction  or name(PDF 1.2) A function that calculates the reduction in the  levels of the cyan, magenta, and yellow colour components to  compensate for the amount of black added by black  generation (see  10.3.4, \"Conversion from DeviceRGB to  DeviceCMYK\"). Initial value: a conforming reader shall  initialize this to a suitable device dependent value. transfer function,  array, or name (PDF 1.2) A  function that adjusts device gray or colour  component levels to compensate for nonlinear response in a  particular output device (see  10.4, Transfer Functions ). Initial value: a conforming reader  shall initialize this to a  suitable device dependent value. halftone dictionary,  stream,  or name(PDF 1.2) A hal ftone screen for gray and colour rendering,  specified as a halftone dictionary or stream (see  10.5,  \"Halftones\" ). Initial value: a conforming reader shall initialize  this to a suitable device dependent value. flatnessnumber The precision with which curv es shall be rendered on the  output device (see  10.6.2, \"Flatness Tolerance\" ). The value of this parameter (positive num ber) gives the maximum error  tolerance, measured in output device pixels; smaller numbers  give smoother curves at the  expense of more computation  and memory use. Initial value: 1.0.  Table 52   Device-Independent Graphics State Parameters (continued) Parameter Type Value",""],"132":["PDF 32000-1:2008 124 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 1 Some graphics state parameters  are set with specific  PDF operators, some are set by including a particular  entry in a graphics state parameter dictionary, and some can be specified either way.  EXAMPLE 2 The current line width can be set either with the  w operator or (in PDF 1.3) with the  LW entry in a graphics  state parameter dictionary, whereas the current colour  is set only with specific operators, and the current  halftone is set only with a graphics state parameter dictionary. In general, a conforming reader, when interpreting th e operators that set graphics state parameters, shall  simply store them unchanged for later use when interpreting the painting operators.However, some parameters  have special properties or call for behaviour  that a conforming reader shall handle:   Most parameters shall be of the correct type or have values that fall within a certain range.   Parameters that are numeric values, such as the curr ent colour, line width, and miter limit, shall be forced  into valid range, if necessar y. However, they shall not be adjusted to  reflect capabilities of  the raster output device, such as resolution or number of distingu ishable colours. Painting operators perform such  adjustments, but the adjusted values shall no t be stored back into the graphics state.   Paths shall be internal objects that shall not be directly represented in PDF.  NOTE 2 As indicated in  Table  52 and  Ta b l e  53, some of the parameterscolor space, color, and overprinthave two  values, one used for stroking (of paths and text objects) and one for all other painting operations. The two  parameter values can be set independently, allowing for operations such as combined filling and stroking of the  same path with different colours.  Except where noted, a term such as  current colour should be interpreted to  refer to whichever colour parameter applies to the oper ation being performed. When necessary, the individual  colour parameters are distinguished explicitly as the  stroking colour and the  nonstroking colour . 8.4.2 Graphics State Stack A PDF document typically contains ma ny graphical elements that are inde pendent of each other and nested to  multiple levels. The  graphics state stack  allows these elements to make local changes to the graphics state  without disturbing the graphics state of the surrounding en vironment. The stack is a LIFO (last in, first out) data  structure in which the contents of the graphics stat e may be saved and later restored using the following  operators:  The  q operator shall push a copy of the  entire graphics state onto the stack.  The  Q operator shall restore the entire graphics state to  its former value by popping it from the stack.  NOTE These operators can be used to encapsulate a graphica l element so that it can  modify parameters of the  graphics state and later restore them to their previous values.  Occurrences of the  q and  Q operators shall be balanced within a giv en content stream (or within the sequence  of streams specified in a page dictionarys  Contents  array).  smoothness number (PDF 1.3)  The precision with which colour gradients are to be  rendered on the output device (see  10.6.3, \"Smoothness  Tolerance\" ). The value of this parameter (0 to 1.0) gives the  maximum error tolerance, expressed as a fraction of the  range of each colour component; smaller numbers give  smoother colour transitions  at the expense of more  computation and memory use. Initial value: a conforming  reader shall initialize this to a suitable device dependent  value.  Table 53   Device-Dependent Graphics State Parameters (continued) Parameter Type Value",""],"133":["' Adobe Systems Incorporated 2008  All rights reserved 125PDF 32000-1:2008 8.4.3 Details of Graphics State Parameters 8.4.3.1 General This sub-clause gives details of  several of the device-independent gr aphics state parameters listed in  Table  52. 8.4.3.2 Line Width The  line width parameter specifies the thickness of the line used  to stroke a path. It shall be a non-negative  number expressed in user space units; stroking a path shall entail painting all points whose perpendicular  distance from the path in user space is less than or eq ual to half the line width. The effect produced in device  space depends on the current transformation matrix (CTM) in  effect at the time the path is stroked. If the CTM  specifies scaling by different factors in the horizontal and vertical dimensions, the thickness of stroked lines in  device space shall vary according to their orientation.  The actual line width achieved can differ from the  requested width by as much as 2 device pixels, dependi ng on the positions of lines with respect to the pixel  grid. Automatic stroke adjustment may be used to ensure uniform line width; see  10.6.5, \"Automatic Stroke  Adjustment\". A line width of 0 shall denote the thi nnest line that can be rendered at devi ce resolution: 1 device pixel wide.  However, some devices cann ot reproduce 1-pixel lines, and on high -resolution devices, they are nearly  invisible. Since the results of rendering such zero-wid th lines are device-dependent, they should not be used.  8.4.3.3 Line Cap Style The  line cap style shall specify the shape that shall be used at the ends of open subpaths (and dashes, if any)  when they are stroked.  Ta b l e  54 shows the possible values.  8.4.3.4 Line Join Style The  line join style shall specify the shape to be used at the corners of paths that are stroked.  Ta b l e  55 shows the possible values. Join styles shall be significant  only at points where consecutive segments of a path  connect at an angle; segments that meet or inters ect fortuitously shall receive no special treatment.  Table  54   Line Cap Styles   Style Appearance Description 0Butt cap. T he stroke shall be squared off at the endpoint of the path.  There shall be no projection beyond the end of the path.  1Round cap . A semicircular arc with a diameter equal to the line width  shall be drawn around the endpoint and shall be filled in.  2Projecting square cap . The stroke shall continue beyond the endpoint  of the path for a distance equal to half the line width and shall be squared off.  Table  55   Line Join Styles   Style Appearance Description 0Miter join. The outer edges of the stroke s for the two segments shall be extended until they meet at an angle,  as in a picture frame. If the  segments meet at too sharp an angle  (as defined by the miter limit  parametersee  8.4.3.5, \"Miter Limit\" ), a bevel join shall be used  instead.",""],"134":["PDF 32000-1:2008 126 ' Adobe Systems Incorporated 2008  All rights reserved NOTE The definition of round join was  changed in PDF 1.5. In rare cases,  the implementation of the previous  specification could prod uce unexpected results. 8.4.3.5 Miter Limit When two line segments meet at a sharp angle and mitered  joins have been specified as  the line join style, it is  possible for the miter to extend far beyond the thickness of the line stroking the path. The  miter limit shall  impose a maximum on the ratio of the miter length to the line width (see  Figure 15  in Annex L). When the limit  is exceeded, the join is converted from a miter to a bevel.  The ratio of miter length to line width is directly related to the angle  j between the segments in user space by  the following formula:  EXAMPLE A miter limit of 1. 414 converts miters to bevels for j less than 90  degrees, a limit of 2. 0 converts them for j  less than 60 degrees, and a limit of 10.0 converts them for j less than approximately 11.5 degrees.  Figure 15   Miter Length 8.4.3.6 Line Dash Pattern The  line  dash pattern  shall control the pattern of dashes and gaps us ed to stroke paths. It shall be specified by  a dash array  and a  dash phase . The dash arrays elements shall be numbers that specify the lengths of  alternating dashes and gaps; the numbers shall be nonn egative and not all zero. The dash phase shall specify  the distance into the dash pattern at which to start the dash. The elements of both the dash array and the dash  phase shall be expressed in user space units.  Before beginning to stroke a path, the dash array shall  be cycled through, adding up the lengths of dashes and  gaps. When the accumulated length equals the value spec ified by the dash phase, stroking of the path shall  begin, and the dash array shall be used cyclically from that point onward.  Ta b l e  56 shows examples of line  1Round join . An arc of a circle with a diameter equal to the line width  shall be drawn around the point where the two segments meet,  connecting the outer edges of the strokes for the two segments. This  pieslice-shaped figure shall be filled in, producing a rounded corner.  2Bevel join. The two segments shall be finished with butt caps (see  8.4.3.3, \"Line Cap Style\" ) and the resulting notch beyond the ends of  the segments shall be filled with a triangle.  Table 55   Line Join Styles (continued) Style Appearance Description","miterLength lineWidth ---------------------------- -1M2--- '„§•sin----------------- -=","Miter length","Line widthj",""],"135":["' Adobe Systems Incorporated 2008  All rights reserved 127PDF 32000-1:2008 dash patterns. As can be seen from the table, an empt y dash array and zero phase can be used to restore the  dash pattern to a solid line.  Dashed lines shall wrap around curves and corners just as solid stroked lines do. The ends of each dash shall  be treated with the current line cap style, and corners  within dashes shall be treated with the current line join  style. A stroking operation shall take no measures to coordinate the dash pattern with features of the path; it  simply shall dispense dashes and gaps along the pa th in the pattern defined by the dash array.  When a path consisting of several subpaths is stroked,  each subpath shall be treated independentlythat is,  the dash pattern shall be restarted and the dash phase shall be reapplied to it at the beginning of each subpath.  8.4.4 Graphics State Operators Ta b l e  57 shows the operators that set the values of parame ters in the graphics state. (See also the colour  operators listed in  Ta b l e  74 and the text state operators in  Ta b l e  105 .) Table  56   Examples of Line Dash Patterns   Dash Array and Phase Appearance Description [ ] 0No dash; solid, unbroken lines [ 3 ] 03 units on, 3 units off,  [ 2 ] 11 on, 2 off, 2 on, 2 off,  [ 2 1 ] 02 on, 1 off, 2 on, 1 off,  [ 3 5 ] 62 off, 3 on, 5 off, 3 on, 5 off,  [ 2 3 ] 111 on, 3 off, 2 on, 3 off, 2 on,  Table  57   Graphics State Operators   Operands Operator Description qSave the current graphics state on the graphics state stack (see  8.4.2, \"Graphics State Stack\" ).  QRestore the graphics state by removing the most recently saved  state from the stack and making it the current state (see  8.4.2, \"Graphics State Stack\" ). a b c d e fcmModify the current transformation  matrix (CTM) by concatenating  the specified matrix (see  8.3.2, \"Coordinate Spaces\" ). Although the  operands specify a matrix, they shall be written as six separate  numbers, not as an array.  lineWidth wSet the line width in the graphics state (see  8.4.3.2, \"Line Width\" ). lineCap JSet the line cap style in the graphics state (see  8.4.3.3, \"Line Cap  Style\" ). lineJoin jSet the line join style in the graphics state (see  8.4.3.4, \"Line Join  Style\" ). miterLimit M","Set the miter limit in the graphics state (see  8.4.3.5, \"Miter Limit\" ). dashArray dashPhase dSet the line dash pattern in the graphics state (see  8.4.3.6, \"Line  Dash Pattern\" ). intentri(PDF 1.1)  Set the colour rendering intent in the graphics state (see  8.6.5.8, \"Rendering Intents\" ).",""],"136":["PDF 32000-1:2008 128 ' Adobe Systems Incorporated 2008  All rights reserved 8.4.5 Graphics State Pa rameter DictionariesWhile some parameters in the graphics state ma y be set with individual operators, as shown in  Ta b l e  57, others  may not. The latter may only be set with the generic graphics state operator  gs (PDF 1.2).  The operand  supplied to this operator shall be the name of a  graphics state parameter dictionary  whose contents specify the  values of one or more graphics state parameters. This name shall be looked up in the  ExtGState  subdictionary  of the current resource dictionary.  The graphics state parameter dictionary is also used by  type 2 patterns, which do not have a content stream in  which the graphics state operators could be invoked (see  8.7.4, \"Shading Patterns\" ). Each entry in the parameter dictionary shall specify the value of an individual graphics state parameter, as  shown in  Ta b l e  58. All entries need not be present for every invocation of the  gs operator; the supplied  parameter dictionary may include any combinat ion of parameter entries. The results of  gs shall be cumulative;  parameter values established in previous in vocations persist until explicitly overridden.  NOTE Note that some parameters appear in both  Table  57 and  Table  58; these parameters can be set either with  individual graphics state operators or with  gs. It is expected that any future extensions to the graphics state will  be implemented by adding new entries to the graphics  state parameter dictionary  rather than by introducing  new graphics state operators.  flatness iSet the flatness tolerance in the graphics state (see  10.6.2,  \"Flatness Tolerance\" ). flatness i s a number in the range 0 to 100; a  value of 0 shall specify the output devices default flatness  tolerance. dictNamegs(PDF 1.2)   Set the specified parameters in the graphics state.  dictName  shall be the name of a graphics state parameter  dictionary in the  ExtGState  subdictionary of the current resource  dictionary (see the next sub-clause).  Table  58   Entries in a Graphics State Parameter Dictionary   KeyType Description Type name (Optional)  The type of PDF object that th is dictionary describes; shall  be  ExtGState  for a graphics state parameter dictionary.  LWnumber (Optional; PDF  1.3)  The lin e width (see  8.4.3.2, \"Line Width\" ). LCinteger (Optional; PDF  1.3)  T he line cap style (see  8.4.3.3, \"Line Cap Style\" ). LJinteger (Optional; PDF  1.3)  T he line join style (see  8.4.3.4, \"Line Join Style\" ).  MLnumber (Optional; PDF  1.3)  The miter limit (see 8.4.3.5, \"Miter Limit\" ).  Darray(Optional; PDF  1.3)   The line dash pattern, expressed as an array of  the form [ dashArray  dashPhase  ], where  dashArray  shall be itself an  array and  dashPhase  shall be an integer (see  8.4.3.6, \"Line Dash  Pattern\"). RIname (Optional; PDF  1.3)  T he name of the rendering intent (see  8.6.5.8,  \"Rendering Intents\" ). Table 57   Graphics State Operators (continued) Operands Operator Description",""],"137":["' Adobe Systems Incorporated 2008  All rights reserved 129PDF 32000-1:2008 OPboolean (Optional)  A flag specifying whether to apply overprint (see  8.6.7,  \"Overprint Control\"). In PDF 1.2 and earlier, there is a single overprint  parameter that applies to all painting operations. Beginning with PDF  1.3, there shall be two separate ov erprint parameters : one for stroking  and one for all other painting operations. Specifying an  OP entry shall  set both parameters unless there is also an  op entry in the same  graphics state parameter dictionary, in which case the  OP entry shall  set only the overprint parameter for stroking.  opboolean (Optional; PDF  1.3) A fl ag specifying whether to apply overprint (see  8.6.7, \"Overprint Control\" ) for painting operations other than stroking. If  this entry is absent, the  OP entry, if any, shall also set this parameter.  OPMinteger (Optional; PDF  1.3) Th e overprint mode (see  8.6.7, \"Overprint  Control\" ). Font array(Optional; PDF  1.3) An ar ray of the form [  font size ], where  font shall be an indirect reference to a font dictionary and  size shall be a number  expressed in text space units. These two objects correspond to the  operands of the  Tf operator (see 9.3, \"Text State Parameters and  Operators\"); however, the first operand shall be an indirect object  reference instead of a resource name.  BGfunction(Optional)  The black-generation function, which maps the interval  [ 0.0 1.0 ] to the interval [  0.0  1.0 ] (see 10.3.4, \"Conversion from  DeviceRGB to DeviceCMYK\" ). BG2function or name (Optional; PDF  1.3)  Same as BG except that the value may also be  the name Default, denoting the black- generation function that was in  effect at the start of the page. If both  BG and  BG2 are present in the  same graphics state parameter dictionary,  BG2 shall take precedence.  UCRfunction(Optional)  The undercolor-removal function, which  maps the interval  [ 0.0 1.0 ] to the interval [  1. 0  1.0 ] (see 10.3.4, \"Conversion from  DeviceRGB to DeviceCMYK\" ). UCR2function or name (Optional; PDF  1.3)  Same as UCR except that the value may also be  the name Default, denoting the undercolor-removal function that was  in effect at the start of the page. If both  UCR and  UCR2  are present in  the same graphics state parameter dictionary,  UCR2 shall take precedence.  TRfunction, array, or  name(Optional)   The transfer function, wh ich maps the interval [  0.0 1.0 ] to the interval [  0.0 1.0  ] (see 10.4, \"Transfer Functions\" ). The value shall  be either a single function (which applies to all process colorants) or  an array of four functions (which apply to the process colorants  individually). The name  Identity  may be used to represent the identity  function.  TR2 function, array, or  name(Optional; PDF  1.3) Same as TR except that the value may also be the  name Default, denoting the transfer func tion that was in effect at the  start of the page. If both  TR and  TR2 are present in the same graphics  state parameter dictionary,  TR2 shall take precedence.  HTdictionary,  stream, or name(Optional)  The halftone dictionary or stream (see  10.5, \"Halftones\" ) or  the name Default, denoting the halftone th at was in effect at the start of  the page.  FLnumber (Optional; PDF  1.3)  T he flatness tolerance (see  10.6.2, \"Flatness  Tolerance\" ).  SMnumber (Optional; PDF","1.3)  The smoothness tolerance (see  10.6.3,  \"Smoothness Tolerance\" ). Table 58   Entries in a Graphics State Parameter Dictionary (continued) Key Type Description",""],"138":["PDF 32000-1:2008 130 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE The following shows two gr aphics state parameter dictionaries. In the first, automatic stroke adjustment is  turned on, and the dictionary includes a tr ansfer function that inverts its value,  f (x) = 1 - x.  In the second,  overprint is turned off, and the dictionary includes a parabolic transfer function,  f (x) = (2x - 1) 2, with a  sample of 21 values. The domain of the transfer function, [  0.0  1.0 ], is mapped to [  0 20 ], and the range  of the sample values, [  0 255 ], is mapped to the range of the transfer function, [  0.0 1.0 ].10 0 obj% Page object << /Type  /Page/Parent  5 0 R/Resources  20 0 R /Contents  40 0 R>>endobj 20 0 obj% Resource dictionary for page <<  /ProcSet [ /PDF /Text  ] /Font  << /F1 25 0 R  >> /ExtGState  << /GS1  30 0 R /GS2  35 0 R    >>>>endobj 30 0 obj% First graphics state parameter dictionary","<<  /Type  /ExtGState  /SA true /TR  31 0 R >>endobj SAboolean (Optional)  A flag specifying whether to apply automatic stroke  adjustment (see  10.6.5, \"Automatic Stroke Adjustment\" ). BMname or array (Optional; PDF  1.4) Th e current blend mode to be used in the  transparent imaging model (see  11.3.5, \"Blend Mode\"  and  11.6.3,  \"Specifying Blending Colour Space and Blend Mode\" ). SMaskdictionary or  name(Optional; PDF  1.4) T he current soft mask, specifying the mask shape  or mask opacity values that shall  be used in the transparent imaging  model (see  11.3.7.2, \"Source Shape and Opacity\"  and  11.6.4.3, \"Mask  Shape and Opacity\" ). Although the current soft mask is sometimes referred to as a soft clip,  altering it with the  gs operator completely replaces the old value with  the new one, rather than intersecting the two as is done with the  current clipping path parameter (see  8.5.4, \"Clipping Path Operators\" ). CAnumber  (Optional; PDF  1.4) T he current stroking alp ha constant, specifying the  constant shape or constant opacity value that shall be used for  stroking operations in the tr ansparent imaging model (see  11.3.7.2,  \"Source Shape and Opacity\"  and  11.6.4.4, \"Constant Shape and  Opacity\" ). canumber (Optional; PDF  1.4)  Same as CA, but for nonstroking operations.  AISboolean (Optional; PDF  1.4) T he alpha source flag (alpha is shape),  specifying whether the current soft mask and alpha constant shall be interpreted as shape values ( true) or opacity values ( false ). TKboolean (Optional; PDF  1.4)  T he text knockout flag, shall determine the  behaviour of overlapping glyphs withi n a text object in the transparent  imaging model (see  9.3.8, \"Text Knockout\" ). Table 58   Entries in a Graphics State Parameter Dictionary (continued) Key Type Description",""],"139":["' Adobe Systems Incorporated 2008  All rights reserved 131PDF 32000-1:2008 31 0 obj% First transfer function <<  /FunctionType  0 /Domain  [ 0.0 1.0 ] /Range  [ 0.0 1.0  ] /Size 2 /BitsPerSample  8 /Length  7 /Filter /ASCIIHexDecode >>stream 01 00 >endstream endobj 35 0 obj % Second graphics state parameter dictionary <<  /Type  /ExtGState  /OP  false /TR  36 0 R >>endobj 36 0 obj % Second transfer function <<  /FunctionType  0 /Domain  [ 0.0 1.0 ] /Range  [ 0.0 1.0  ]","/Size 21 /BitsPerSample  8 /Length  63 /Filter /ASCIIHexDecode >>stream FF CE A3 7C 5B 3F 28 16 0A 02 00 02 0A 16 28 3F 5B 7C A3 CE FF >endstream endobj 8.5 Path Construction and Painting 8.5.1 General Paths d efine shapes, trajectories, and regi ons of all sorts. They shall be used to draw lines, define the shapes  of filled areas, and specif y boundaries for clipping other graphics . The graphics state shall include a  current  clipping path  that shall define the clipping boundary for the  current page. At the beginning of each page, the  clipping path shall be initialized  to include the entire page.  A path shall be composed of straight and curved li ne segments, which may connect to one another or may be  disconnected. A pair of segments shall be said to  connect  only if they are defined  consecutively, with the  second segment starting where the first one ends. Thus, the order in which the segments of a path are defined  shall be significant. Nonconse cutive segments that meet or intersect  fortuitously shall not be considered to  connect.  NOTE A path is made up of one or more disconnected  subpaths , each comprising a sequence of connected  segments. The topology of the path  is unrestricted: it may be concav e or convex, may contain multiple  subpaths representing disjoint  areas, and may intersect itself in arbitrary ways.  The  h operator explicitly shall connect the end of a subpath back to its starting point; such a subpath is said to  be  closed . A subpath that has not been explicitly closed is said to be  open .",""],"140":["PDF 32000-1:2008 132 ' Adobe Systems Incorporated 2008  All rights reserved As discussed in  8.2, \"Graphics Objects\" , a path object is defined by a seque nce of operators to construct the  path, followed by one or more operators to paint the path or to use it as a clipping boundary. PDF path  operators fall into three categories:  Path construction operators  (8.5.2, \"Path Constr uction Operators\" ) define the geometry of a path. A path is  constructed by sequentially applying one or more of these operators.  Pa th-painting operators  (8.5.3, \"Path-Painting Operators\" ) end a path object, usually causing the object to  be painted on the current page in any of a variety of ways.  Clipping path operators  (8.5.4, \"Clipping Path Operators\"), invoked immediately before a path-painting  operator, cause the path object also to be used  for clipping of subsequent graphics objects.  8.5.2 Path Construction Operators 8.5.2.1 General A page description shall begin with an empty path and shall build up its definition by invoking one or more path  construction operators to add segments to it. The path  construction operators may be invoked in any sequence,  but the first one invoked shall be  m or  re to begin a new subpath. The path definition may conclude with the  application of a path-painting operator such as  S, f, or b (see  8.5.3, \"Path-Painting Operators\" ); this operator  may optionally be preceded by one of the clipping path operators  W or W* (8.5.4, \"Clipping Path Operators\" ). NOTE Note that the path construction  operators do not place any marks on the  page; only the painting operators do  that. A path definition is not complete until a path-painting operator has been applied to it.  The path currently under construction is called the  current path . In PDF (unlike PostScript), the current path is  not  part of the graphics state and is  not saved and restored along with the  other graphics state parameters.  PDF paths shall be strictly internal objects with no ex plicit representation. After the current path has been  painted, it shall become no longer defined; there is  then no current path until a new one is begun with the  m or re operator.  The trailing endpoint of the segmen t most recently added to  the current path is referred to as the  current point. If the current path is empty, the current point shall be undefined. Most operators that add a segment to the  current path start at the current point; if the current point is undefined, an error shall be generated.  Ta b l e  59 shows the path construction operators. All opera nds shall be numbers denoting coordinates in user  space.  Table  59   Path Construction Operators   Operands Operator Description x ymBegin a new subpath by moving the current point to  coordinates ( x, y), omitti ng any connecting line segment. If  the previous path construction operator in the current path  was also m, the new  m overrides it; no vestige of the  previous  m operation remains in the path.  x yl (lowercase  L)Append a straight line segment from the current point to the  point (x, y). Th e new current point shall be ( x, y). x1 y1 x2 y2 x3 y3cAppend a cubic BØzier curve to the current path. The curve  shall extend from the current point to the point ( x3 , y3 ), using  (x1 , y1 ) and ( x2 , y2 ) as the BØzier control points (see  8.5.2.2,  \"Cubic BØzier Curves\" ). The new current point shall be  (x3 , y3 ).",""],"141":["' Adobe Systems Incorporated 2008  All rights reserved 133PDF 32000-1:2008 8.5.2.2 Cubic BØzier Curves Curved path segments shall be specified as  cubic BØzier curves . Such curves shall be defined by four points:  the two endpoints (the current point  P0 and the final point  P3 ) and two  control points  P1 and  P2 . Given the  coordinates of the four points, the curve shall be generated by varying the parameter  t from 0.0 to 1.0 in the  following equation:  When t = 0.0, the value of the function  R (t)  coincides with the current point  P0 ; when  t = 1.0,  R (t) c oincides with  the final point P3 . Intermediate values of  t generate intermediate points along the curve. The curve does not, in  general, pass through the two control points  P1 and  P2 . NOTE 1 Cubic BØzier curves have two useful properties:  The curve can be very quickly split into smaller pieces for rapid rendering.  The curve is contained within the convex  hull of the four points defining the  curve, most easily visualized as the  polygon obtained by stretching a rubber band around the ou tside of the four points. This property allows rapid  testing of whether the curve lies completely outside  the visible region, and hence does not have to be  rendered.  NOTE 2 The  Bibliography  lists several books that describe cu bic BØzier curves in more depth. x2 y2 x3 y3vAppend a cubic BØzier curve to the current path. The curve  shall extend from the curr ent point to the point ( x3 , y3 ), using  the current point and ( x2 , y2 ) as the BØzier control points (see  8.5.2.2, \"Cubic BØzier Curves\" ). The new current point shall  be ( x3 , y3 ). x1 y1 x3 y3yAppend a cubic BØzier curve to the current path. The curve  shall extend from the curr ent point to the point ( x3 , y3 ), using  (x1 , y1 ) and ( x3 , y3 ) as the BØzier control points (see  8.5.2.2,  \"Cubic BØzier Curves\" ). The new current point shall be  (x3 , y3"," ). hClose the current subpath by appending a straight line  segment from the current point  to the starting point of the  subpath. If the current s ubpath is already closed,  h shall do nothing.  This operator terminates the current subpath. Appending  another segment to the current path shall begin a new  subpath, even if the new se gment begins at the endpoint  reached by the  h operation.  x y width  height reAppend a rectangle to the current path as a complete  subpath, with lower-left corner ( x, y) a nd dimensions  width and  height  in user space. The operation  x y width  height  reis equivalent to  x y m( x + width  ) y l( x + width  ) ( y + height  ) lx ( y + height  ) lhTable 59   Path Construction Operators (continued) Operands Operator Description","Rt() 1 t3P03t1t2P13t21tP2t3P3+++ =",""],"142":["PDF 32000-1:2008 134 ' Adobe Systems Incorporated 2008  All rights reserved The most general PDF operator for cons tructing curved path segments is the  c operator, which specifies the  coordinates of points  P1 , P2 , and  P3 explicitly, as shown in  Figure 16  in Annex L. (The starting point,  P0 , is  defined implicitly by the current point.) Figure 16   Cubic BØzier Curve Generated by the c Operator Two more operators,  v and y, each specify one of the two co ntrol points implicitly (see  Figure 17  in Annex L). In  both of these cases, one control point and the final po int of the curve shall be supplied as operands; the other  control point shall be implied:   For the  v operator, the first control point shall coincide with initial point of the curve.   For the  y operator, the second control point shall coincide with final point of the curve.  Figure 17   Cubic BØzier Curves Generated by the v and y Operators 8.5.3 Path-Painting Operators 8.5.3.1 General The path-painting operators end a path object, causing it to be painted on the current page in the manner that  the operator specifies. The principa l path-painting operators shall be  S (for  stroking ) and  f (for  filling). Variants","x1 y1 x2 y2 x3 y3 c","P0 (current point) P2 (x2 , y2 )P3 (x3 , y3 )","P1 (x1, y1 )","x2 y2 x3 y3 v","Current point (x2 ,  y2 )(x3 ,  y3 )","x1 y1 x3 y3 y","Current point (x1 ,  y1 )(x3 ,  y3 )",""],"143":["' Adobe Systems Incorporated 2008  All rights reserved 135PDF 32000-1:2008 of these operators combine stroking and filling in a single operation or  apply different rule s for determining the  area to be filled.  Ta b l e  60 lists all the path-painting operators.  8.5.3.2 Stroking The  S  operator shall paint a line along the current path.  The stroked line sh all follow each straight or curved  segment in the path, centred on the segment with sides  parallel to it. Each of the paths subpaths shall be  treated separately.  The results of the  S operator shall depend on the current settings of various parameters in the graphics state  (see  8.4, \"Graphics State\" , for further information on these parameters):   The width of the stroked line shall be determined by the current line width parameter ( 8.4.3.2, \"Line  Width\" ).  The colour or pattern of the line shall be determined  by the current colour and colour space for stroking  operations.  Table  60   Path-Painting Operators   Operands Operator Description SStroke the path.  sClose and stroke the path. This operator shall have the same effect as the  sequence h S.  fFill the path, using the nonzero winding number rule to determine the region  to fill (see 8.5.3.3.2, \"Nonzero Winding Number Rule\" ). Any subpaths that  are open shall be implicitly closed before being filled. FEquivalent to  f; included only for compatibility. Although PDF reader applications shall be able to accept th is operator, PDF writer applications  should use  f instead.  f*Fill the path, using the even-odd rule to determine the region to fill (see  8.5.3.3.3, \"Even-Odd Rule\" ). BFill and then stroke the path, using the nonzero winding number rule to  determine the region to fill. This operator shall produce the same result as  constructing two identical path objects, painting the first with  f and the  second with S. NOTE The filling and stroking por tions of the operation consult  different values of several graphics state parameters, such as  the current colour. See also  11.7.4.4, \"Special  Path-Painting  Considerations\" . B*Fill and then stroke the path, using the  even-odd rule to determine the region  to fill. This operator shall produce the same result as  B, except that the path  is filled as if with  f* instead of  f. See also  11.7.4.4, \"Special Path-Painting  Considerations\" . bClose, fill, and then stroke the path, us ing the nonzero winding number rule  to determine the region to fill. This operator shall have the same effect as the  sequence h B. See also  11.7.4.4, \"Special Path-Painting Considerations\" . b*Close, fill, and then stroke the path,  using the even-odd rule to determine the  region to fill. This operat or shall have the same effect as the sequence h B*.  See also  11.7.4.4, \"Special Path-Painting Considerations\" . nEnd the path object without filling or stroking it. This operator shall be a path- painting no-op, used primarily for the side effect of changing the current  clipping path (see  8.5.4, \"Clipping Path Operators\" ).",""],"144":["PDF 32000-1:2008 136 ' Adobe Systems Incorporated 2008  All rights reserved  The line may be painted either solid or with a dash pattern, as specified by the current line dash pattern  (see  8.4.3.6, \"Line Dash Pattern\" ).   If a subpath is open, the unconnected ends shall be tr eated according to the current line cap style, which  may be butt, rounded, or square (see  8.4.3.3, \"Line Cap Style\" ).  Wherever two consecutive segments  are connected, the joint between them shall be treated according to  the current  line join style, which may be mitered, rounded, or beveled (see  8.4.3.4, \"Line Join Style\" ). Mitered joins shall be subject to the current  miter limit (see 8.4.3.5, \"Miter Limit\" ). Points at which unconnected segments happen to meet or  intersect receive no special treatment. In particular,  using an explicit  l operator to give the appearance of closing a subpath, rather than using  h, may result in a  messy corner, because line caps are applied instead of a line join.  The  stroke adjustment  parameter  (PDF 1.2)  specifies that coordinates and line widths be adjusted  automatically to produce strokes of uniform  thickness despite rasterization effects (see  10.6.5, \"Automatic  Stroke Adjustment\" ). If a subpath is degenerate (consists of a single-point  closed path or of two or more points at the same  coordinates), the  S operator shall paint it only if  round line caps have been spec ified, producing a filled circle  centered at the single point. If butt or proj ecting square line caps have been specified,  S shall produce no  output, because the orientation of the  caps would be indeterminate. This ru le shall apply only to zero-length  subpaths of the path being stroked, and not to zero-length  dashes in a dash pattern. In the latter case, the line  caps shall always be painted, since their orientation is  determined by the direction  of the underlying path. A  single-point open subpath  (specified by a trailing  m operator) shall produce no output.  8.5.3.3 Filling 8.5.3.3.1 General The  f ope rator shall use the current nonstroking colour to pain t the entire region enclosed by the current path. If  the path consists of several disconnected subpaths,  f shall paint the insides of all subpaths, considered  together. Any subpaths  that are open shall be implicit ly closed before being filled.  If a subpath is degenerate (consists of a single-point  closed path or of two or more points at the same  coordinates),  f shall paint the single device pixel lying under that point; the result is device-dependent and not  generally useful. A single-point open  subpath (specified by a trailing  m operator) shall produce no output.  For a simple path, it is intuitively clear what region lie s inside. However, for a more  complex path, it is not  always obvious which points lie inside the  path. For more detailed information, see  10.6.4, Scan Conversion  Rules .EXAMPLE A path that intersects itself or  has one subpath t hat encloses another. The path machinery shall use one of two rules for determining which points lie inside a path: the nonzero  winding number rule and the even-odd rule, both discussed in detail below. The nonzero winding number rule is  more versatile than the even-odd rule and shall be the standard rule the  f operator uses. Similarly, the  Woperator shall use this rule to determine the inside of the current clipping path. The even-odd rule is  occasionally useful for special effects or for compatibility with other graphics systems; the  f* and  W* operators  invoke this rule.  8.5.3.3.2 Nonzero Winding Number Rule The  n onzero winding number rule  determines whether a given point is inside a path by conceptually drawing a  ray from that point to infinity in any direction and then examining the places where a segment of the path  crosses the ray. Starting with a count of 0, the rule adds  1 each time a path segment crosses the ray from left to  right and subtracts 1 each time a segment crosses from righ t to left. After counting all  the crossings, if the result  is 0, the point is outside the  path; otherwise,  it is inside.",""],"145":["' Adobe Systems Incorporated 2008  All rights reserved 137PDF 32000-1:2008 The method just described does not sp ecify what to do if a path segment  coincides with or is tangent to the  chosen ray. Since the direction of the ray is arbitrary,  the rule simply chooses a ray that does not encounter  such problem intersections.  For simple convex paths, the nonzero winding number rule defines the inside and outside as one would  intuitively expect. The more interesting cases are those  involving complex or self-i ntersecting paths like the  ones shown in  Figure 18  in Annex L. For a path consisting of a five-pointed st ar, drawn with five connected  straight line segments intersecting each other, the rule  considers the inside to be the entire area enclosed by  the star, including the pentagon in the centre. For a  path composed of two concen tric circles, the areas  enclosed by both circles are considered to be inside, prov ided that both are drawn in  the same direction. If the  circles are drawn in opposite directions , only the doughnut shape between them  is inside, accord ing to the rule;  the doughnut hole is outside.  Figure  18   Nonzero Winding Number Rule 8.5.3.3.3 Even-Odd Rule An alternative to the nonzero winding number rule is the  even-odd rule . This rule determine s whether a point is  inside a path by drawing a ray from that point in any direction and simply counting the number of path segments  that cross the ray, regardless of direction. If this number  is odd, the point is inside; if even, the point is outside.  This yields the same results as the nonzero winding nu mber rule for paths with simple shapes, but produces  different results for  more complex shapes.  Figure 19  shows the effects of applying the even-odd rule to  complex paths. For the five -pointed star, the rule  considers the triangular points to be inside the path, bu t not the pentagon in the centre. For the two concentric  circles, only the doughnut shape betwee n the two circles is considered inside, regardless of the directions in  which the circles are drawn.  Figure  19   Even-Odd Rule 8.5.4 Clipping Path Operators The graphics state shall contain a  current clipping path  that limits the regions of the page affected by painting  operators. The closed subpaths of this  path shall define the area that can be painted. Marks falling inside this  area shall be applied to the page; those falling outside it sha ll not be. Sub-clause  8.5.3.3, \"Filling\"  discusses  precisely what shall be considered to be inside a path.",""],"146":["PDF 32000-1:2008 138 ' Adobe Systems Incorporated 2008  All rights reserved In the context of the transparent imaging model  (PDF 1.4), the current clipping path constrains an objects  shape (see  11.2, \"Overview of Transparency\" ). The effective shape is the intersection of the objects intrinsic  shape with the clipping path; the source shape value sha ll be 0.0 outside this intersection. Similarly, the shape  of a transparency group (defined as the union of the sha pes of its constituent objects) shall be influenced both  by the clipping path in effect when each of the objects is painted and by the one in effect at the time the groups  results are painted onto its backdrop.  The initial clipping path shall include the entire page. A clipping path operator ( W or W*, shown in  Table  61) may appear after the last path construction operator an d before the path-painting operator that terminates a  path object. Although the clipping path operator appears  before the painting operator, it shall not alter the  clipping path at the point where it appears. Rather, it shal l modify the effect of the succeeding painting operator.  After  the path has been painted, the clipping path in the  graphics state shall be set to the intersection of the  current clipping path and the newly constructed path.  NOTE 1 In addition to path objects, text objects may also be used for clipping; see  9.3.6, \"Text Rendering Mode\" . The  n operator (see  Ta b l e  60) is a no-op path-painting operator; it shall cause no marks to be placed on the  page, but can be used with a clipping path operator to e stablish a new clipping path. That is, after a path has  been constructed, the sequence W n shall intersect that pa th with the current clipping path and shall establish a  new clipping path.  NOTE 2 There is no way to enlarge the current clipping path  or to set a new clipping path without reference to the  current one. However, since the clipping path is part of  the graphics state, its effect  can be localized to specific  graphics objects by enclosing the modification of the clip ping path and the painting of those objects between a  pair of  q and  Q operators (see  8.4.2, \"Graphics State Stack\" ). Execution of the  Q operator causes the clipping  path to revert to the value that was saved by the  q operator before the clip ping path was modified.  8.6 Colour Spaces 8.6.1 General PDF includes facilities for specifying  the colours of graphics objects to  be painted on the current page. The  colour facilities are divided into two parts:  Colour specification. A conforming writer may  specify abstract colours in a device-independent way.  Colours may be described in any of  a variety of colour systems, or  colour spaces . Some colour spaces are  related to device colour representation (grayscale,  RGB , CMYK), others to human visual perception (CIE- based). Certain special features are also modelled as colour spaces: patterns, colour mapping,  separations, and high-fidelity and multitone colour.  Colo ur rendering . A conforming reader shall reproduce colours on the raster output device by a multiple- step process that includes some combination of  colour conversion, gamma  correction, halftoning, and  scan conversion. Some aspects of this process use in formation that is specifi ed in PDF. However, unlike  the facilities for colour specificatio n, the colour-rendering facilities are device-dependent and should not be  included in a page description.  Figure 20  and  Figure 21  illustrate the division between PDFs (dev ice-independent) colour specification and (device-dependent) colour-rendering facilities. This sub-clause describes  the colour specif ication features, covering everything that PDF documents need to specify colours. The fac ilities for controlling colour rendering  Table  61   Clipping Path Operators   Operands Operator Description WModify the current clipping path by intersecting it with the current path, using  the nonzero winding number rule to determine which regions lie inside the  clipping path.  W*Modify the current clipping path by intersecting it with the current path, using  the even-odd rule to determine which regions lie inside the clipping path.",""],"147":["' Adobe Systems Incorporated 2008  All rights reserved 139PDF 32000-1:2008 are described in clause  10, \"Rendering\" ; a conforming writer should use these facilities only to configure or  calibrate an output device or to achieve special device-dependent effects.  8.6.2 Colour Values As described in  8.5.3, \"Path-Painting Operators\" , marks placed on the page by operators such as  f and S shall have a colour that is determined by the  current colour  parameter of the graphics state. A colour value consists  of one or more  colour components , which are usually numbers. A gray  level shall be specified by a single  number ranging from 0.0 (black) to 1.0 (white). Full colour values may be specified in any of several ways; a  common method uses three numeric values to specify red, green, and blue components.  Colour values shall be in terpreted according to the  current colour space , another parameter of the graphics  state. A PDF content stream first sele cts a colour space by invoking the  CS operator (for the stroking colour) or  the cs operator (for the nonstroking colour). It then selects colour values within that colour space with the  SCoperator (stroking) or the  sc operator (nonstroking). There are also convenience operators G, g, RG, rg, K, and  kthat select both a colour space and a co lour value within it in a single step.  Ta b l e  74 lists all the colour- setting operators.  Sampled images (see  8.9, \"Images\" ) specify the colour values of individual samples with respect to a colour  space designated by the image object itself. While thes e values are independent of the current colour space  and colour parameters in the graphics state, all later stages of colour processing shall treat them in exactly the  same way as colour valu es specified with the  SC or  sc operator.  8.6.3 Colour Space Families Colour spaces are classified into  colour space families . Spaces within a family share the same general  characteristics; they shall be distingu ished by parameter values supplied at  the time the space is specified. The  families fall into thre e broad categories:  Device colour spaces directly specify colours or shades of gray  that the output device shall produce. They  provide a variety of colour specific ation methods, including grayscale,  RGB  (red-green-blue), and  CMYK(cyan-magenta-yellow-blac k), corresponding to the colour space families  DeviceGray , DeviceRGB , and DeviceCMYK . Since each of these families consists of just  a single colour space wit h no parameters, they  may be referred to as the  DeviceGray , DeviceRGB , and  DeviceCMYK  colour spaces.  CIE- based colour spaces  shall be based on an international standard for colour specification created by  the Commission Internationale de lclairage (Interna tional Commission on Illumination). These spaces  specify colours in a way that is independent of the c haracteristics of any particular output device. Colour  space families in this category include  CalGray, CalRGB, Lab, and  ICCBased . Individual colour spaces  within these families shall be specified by means of dictionaries c ontaining the paramete r values needed to  define the space.  Spec ial colour spaces  add features or pro perties to an underlying colour sp ace. They include facilities for  patterns, colour mapping, separations, and high-fidelity and multitone colour. The corresponding colour  space families are  Pattern, Indexed , Separation , and  DeviceN . Individual colour spaces within these  families shall be specified by  means of additional parameters.  Ta b l e  62 summarizes the colour space families in PDF. Table  62   Colour Space Families   Device CIE-based Special DeviceGray  (PDF 1.1) CalGray  (PDF 1.1)Indexed  (PDF 1.1) DeviceRGB  (PDF 1.1)CalRGB (PDF 1.1) Pattern (PDF 1.2) DeviceCMYK  (PDF 1.1)Lab (P DF  1.1)Separation  (PDF 1.2) ICCBased  (PDF 1.3)DeviceN  (PDF 1.3)",""],"148":["PDF 32000-1:2008 140 ' Adobe Systems Incorporated 2008  All rights reserved Figure  20   Colour Specification","Color spaces Color values Sources of  color values CalRGB","Conversion to internal X, Y, Z values","A, B, C X, Y, Z sc, SC, sh,BI, Do (image XObject)","Alternative color transform","tint","Anothercolor space","scn, SCN, sh,BI, Do (image XObject) Indexed","Table lookup","Anothercolor space","CIE-basedcolor spaces Device color spaces Specialcolor spaces Pattern","sc, SC, sh,BI, Do (image XObject) scn, SCN","Anothercolor space","Pattern dictionary","CalGray Asc, SC, sh,BI, Do (image XObject)","indexpattern Separation Lab","A, B, C sc, SC, sh,BI, Do (image XObject) ICCBased     scn, SCN, sh,BI, Do (image XObject)","DeviceCMYK","C, M, Y, K k, K, sc, SC, sh,BI, Do (image XObject) Another(4-component) color space DeviceGray","grayg, G, sc, SC, sh,BI, Do (image XObject) Another(1-component) color space","Alternative color transform","ncomponents","Anothercolor space scn, SCN, sh,BI, Do (image XObject) DeviceN","DeviceRGB","rg, RG, sc, SC, sh,BI, Do (image XObject) R, G, BDefaultCMYK","DefaultGray","DefaultRGB","Another(3-component) color space","ncomponents",""],"149":["' Adobe Systems Incorporated 2008  All rights reserved 141PDF 32000-1:2008 Figure  21   Colour Rendering A colour space shall be defined by an array object whose fir st element is a name object identifying the colour  space family. The remaining array elements, if any, are pa rameters that further characterize the colour space;  their number and types vary according to the particular  family. For families that do  not require pa rameters, the colour space may be specified simply by the  family name itself in stead of an array.  A colour space shall be specified in one of two ways:   Within a content stream, the  CS or  cs operator establishes the current colour space parameter in the  graphics state. The operand shall always be name object,  which either identifies one of the colour spaces  that need no additional parameters ( DeviceGray , DeviceRGB , DeviceCMYK , or some cases of  Pattern) or shall be used as a key in the  ColorSpace  subdictionary of the current resource dictionary (see  7.8.3,","Conversion  from CIE-based to device color space","R, G, BC, M, Y, K grayDevice color values (depending onresults of conversion)","R, G, BC, M, Y, K Conversion from input device color space to devices process color model","Transfer functions (percomponent)","Halftones (percomponent)","Any single device colorant Devices process colorant(s) UCR, BGTR, HTHT","X, Y, Z","graytint","(not specied by PDF)","ncomponents","Any  n device colorants Component(s) of devices process color model",""],"150":["PDF 32000-1:2008 142 ' Adobe Systems Incorporated 2008  All rights reserved \"Resource Dictionaries\" ). In the latter case, the value of the dictionary entry in turn shall be a colour space  array or name. A colour space array shall never be inline within a content stream.   Outside a content stream, certain objects, such as  image XObjects, shall specify a colour space as an  explicit parameter, oft en associated with the key  ColorSpace . In this case, the colour space array or name  shall always be defined directly as a PDF object, not by an entry in the  ColorSpace  resource  subdictionary. This convention also applies when colour spaces are defined in terms of other colour  spaces.  The following operators shall set the current colour space and current colour parameters in the graphics state:  CS shall set the stroking colour space;  cs shall set the nonstroking colour space.  SC and  SCN shall set the stroking colour;  sc and  scn shall set the nonstroking colour. Depending on the  colour space, these operators shall have one or more operands, each specifying one component of the  colour value. G, RG, and  K shall set the stroking colour space implicitly  and the stroking colour as specified by the  operands;  g, rg, and  k do the same for the nonstroking colour space and colour.  8.6.4 Device Colour Spaces 8.6.4.1 General The device colour spaces enable a page description to s pecify colour values that ar e directly related to their  representation on an output device. Colour values in these spaces map directly (or by simple conversions) to  the application of device colorants, such as quantities of  ink or intensities of display phosphors. This enables a  conforming writer to control colours precisely for a part icular device, but the results might not be consistent  from one device to another.  Output devices form colours  either by adding light source s together or by subtractin g light from an illuminating  source. Computer displays and film re corders typically add colours; printing  inks typically subtract them. These  two ways of forming colours give ri se to two complementary methods  of colour specification, called  additive  and subtractive  colour (see  Figure L.1  in Annex L). The most widely used forms of these two types of colour  specification are known as  RGB and  CMYK , respectively, for the names of the primary colours on which they  are based. They correspond to the following device colour spaces:  DeviceGray  controls the intensity of achromatic  light, on a scale from black to white.  DeviceRGB  controls the intensities of red, green, and blue  light, the three additive primary colours used in  displays.  DeviceCMYK  controls the concentrations of cyan, magenta,  yellow, and black inks, the four subtractive  process colours used in printing.  NOTE Although the notion of explicit colo ur spaces is a PDF 1.1 feature, the  operators for specifying colours in the  device colour spaces G, g, RG, rg, K, and  kare available in all versions of PDF. Beginning with PDF 1.2,  colours specified in device colour sp aces can optionally be remapped systemat ically into other colour spaces;  see 8.6.5.6, \"Default Colour Spaces\" . In the transparent imaging model  (PDF 1.4) , the use of device colour spaces  is subject to special treatment  within a transparency group whose group colour space is CIE-based (see  11.4, \"Transparency Groups\"  and 11.6.6, \"Transparency Group XObjects\" ). In particular, the device colour space operators should be used only if  device colour spaces have been remapped to CIE- based spaces by means of the default colour space  mechanism. Otherwise, the results are implementation-dependent and unpredictable.",""],"151":["' Adobe Systems Incorporated 2008  All rights reserved 143PDF 32000-1:2008 8.6.4.2 DeviceGray Colour Space Black, white, and intermediate shades of gray are  special cases of full colour. A grayscale value shall be  represented by a single number in the range 0.0 to 1. 0, where 0.0 corresponds to  black, 1.0 to white, and  intermediate values to different gray levels. EXAMPLE This example shows alter native ways to select the  DeviceGray  colour space and a specific gray level  within that space for stroking operations. /DeviceGray CS% Set DeviceGray colour space gray  SC% Set gray level gray  G% Set both in one operation The  CS and  SC operators shall select the current stroking colo ur space and current stroking colour separately;  G shall set them in combination. (The  cs, sc, and  g operators shall perform the same functions for nonstroking  operations.) Setting either current colour space to  DeviceGray  shall initialize the corresponding current colour  to 0.0. 8.6.4.3 DeviceRGB Colour Space Colours in the  DeviceRGB  colour space shall be specified according to the additive  RGB  (red-green-blue)  colour model, in which col our values shall be defined by three components representing the intensities of the  additive primary colorants red, green, and blue. Each  component shall be specified by a number in the range  0.0 to 1.0, where 0.0 shall denote the complete absence of a primary component and 1.0 shall denote  maximum intensity.  EXAMPLE This example shows alte rnative ways to  select the DeviceRGB  colour space and a specific colour within  that space for stro king operations.  /DeviceRGB  CS% Set DeviceRGB colour space red green  blue  SC% Set colour red green  blue  RG% Set both in one operation The  CS and  SC operators shall select the current stroking colo ur space and current stroking colour separately;  RG shall set them in combination. The  cs, sc, and  rg operators shall perform the same functions for  nonstroking operations. Setting either current colour space to  DeviceRGB  shall initialize the red, green, and  blue components of the corresponding current colour to 0.0.  8.6.4.4 DeviceCMYK Colour Space The  De viceCMYK  colour space allows colours to be  specified according to the subtractive  CMYK (cyan-magenta-yellow-black) model typical of printers and other paper-based output devices. The four components in  a DeviceCMYK  colour value shall represent the concentrations  of these process colorants. Each component  shall be a number in the range 0.0 to 1.0, where 0.0 shall denote the complete absence of a process colorant  and 1.0 shall denote maximum concentration (absorbs  as much as possible of the additive primary).  NOTE As much as the reflective colour s (CMYK) decrease reflection with increased ink values and radiant colours  (RGB) increases the intensity of colours with increas ed values the values work in an opposite manner. EXAMPLE The following shows alte rnative ways to select the DeviceCMYK colour space and a specific colour within  that space for stro king operations.  /DeviceCMYK  CS% Set DeviceCMYK colour space cyan magenta  yellow  black  SC % Set colour cyan magenta  yellow  black  K% Set both in one operation The  CS and  SC operators shall select the current stroking colo ur space and current stroking colour separately;  K shall set them in combination. The  cs, sc, and  k operators shall perform the same functions for nonstroking  operations. Setting either current colour space to  DeviceCMYK  shall initialize the cyan, magenta, and yellow  components of the corresponding current colour to 0.0 and the black component to 1.0.",""],"152":["PDF 32000-1:2008 144 ' Adobe Systems Incorporated 2008  All rights reserved 8.6.5 CIE-Based Colour Spaces 8.6.5.1 General Calibrated colour in PDF shall be de fined in terms of an international standard used in the graphic arts,  television, and printing industries.  CIE-based  colour spaces enable a page description to specify colour values  in a way that is related to human visual perception. Th e goal is for the same colour specification to produce  consistent results on different output device s, within the limitations of each device;  Figure L.2  in Annex Lillustrates the kind of variation in colour reproduction that can result fr om the use of uncal ibrated colour on different devices. PDF 1.1 supports thre e CIE-based colour space families, named  CalGray , CalRGB, and  Lab ; PDF 1.3 added a fourth, named  ICCBased . NOTE 1 In PDF 1.1, a colour space family named  CalCMYK  was partially defined, with the expectation that its definition  would be completed in a future version. However, this feature has been deprecated. PDF 1.3 and later  versions support calibrated four-component colo ur spaces by means  of ICC profiles (see  8.6.5.5, \"ICCBased  Colour Spaces\" ). A conforming reader should ignore  CalCMYK  colour space attributes and render colours  specified in this family as if  they had been specified using  DeviceCMYK . NOTE 2 The details of the CIE colourimet ric system and the theory on which it  is based are beyond the scope of this  specification; see the  Bibliography  for sources of further information.  The semantics of CIE-based colour  spaces are defined in terms of the relationship betw een the spaces components and the tristimulus values  X, Y, and Z of the CIE 1931  XYZ  space. The  CalRGB and  Lab colour spaces  (PDF 1.1)  are special cases of three-component CIE-based colour spaces, known as  CIE-based ABC  colour spaces. These spaces are  defined in terms of a two-stage, nonlinear transformation of the CIE 1931  XYZ space. The formulation of such  colour spaces models a simple  zone theory  of colour vision, consisting of  a nonlinear trichromatic first stage  combined with a nonlinear opponent-colour second stage. This formulation allows colours to be digitized with  minimum loss of fidelity, an important consideration in sampled images.  Colour values in a CIE-based  ABC  colour space shall have three components, arbitrarily named  A, B, and  C.The first stage shall transform these components by first  forcing their values to a sp ecified range, then applying  decoding functions , and then multiplying the results by a  3-by-3 matrix, producing three intermediate  components arbitrarily named  L, M, and  N. The second stage shall transform these intermediate components  in a similar fashion, producing the final  X, Y, and  Z components of the CIE 1931  XYZ space (see  Figure 22 ). Figure  22   Component Transformations in a CIE-based  ABC Colour Space Colour spaces in the CI E-based families shall be  defined by an array  [ name  dictionary  ]where na me  is the name of the family and  dictionary  is a dictionary containing parameters that further  characterize the space. The entries in this dictionary  have specific interpretations  that depend on the colour  space; some entries are required and  some are optional. See th e sub-clauses on specific  colour space families  for details.  Setting the current stroking or nonstroking colour spac e to any CIE-based colour  space shall initialize all  components of the corresponding current colour to 0.0 (unless the range of valid values for a given component  does not include 0.0, in which case the  nearest valid value shall be substituted.)","Decode  ABCDecode  LMN","ABC","Matrix  ABC","LMN","Matrix  LMN","XYZ",""],"153":["' Adobe Systems Incorporated 2008  All rights reserved 145PDF 32000-1:2008 NOTE 3 The model and terminology used here CIE-based ABC  (above) and  CIE-based A  (below)are derived from  the PostScript language, which supports these colour  space families in their full generality. PDF supports  specific useful cases of CIE-based  ABC and CIE-based  A spaces; most others can be represented as  ICCBased  spaces.  8.6.5.2 CalGray Colour Spaces A Ca lGray  colour space  (PDF 1.1) is a special case of a single-compon ent CIE-based colour space, known as  a CIE-based A  colour space. This type of space is the one-di mensional (and usually achromatic) analog of CIE- based  ABC spaces. Colour values in a CIE-based  A space shall have a single component, arbitrarily named  A.Figure 23  illustrates the tran sformations of the A component to  X, Y, and  Z components of the CIE 1931  XYZspace.  Figure  23   Component Transformations in a CIE-based  A Colour Space A Ca lGray  colour space shall be a CIE-based  A colour space with only one transformation stage instead of  two. In this type of space,  A represents the gray component of a calib rated gray space. This component shall  be in the range 0.0 to 1.0. The decoding function (denoted by Decode  A in Figure 23 ) is a gamma function  whose coefficient shall be specified by the  Gamma entry in the colour space dictionary (see  Ta b l e  63). The  transformation matrix denoted by Matrix  A in the figure is derived from the dictionarys  WhitePoint entry, as  described below. Since there is no second transformation stage, Decode  LMN  and Matrix  LMN  shall be implicitly taken to be identity transformations.  The transformation defined by the  Gamma and WhitePoint  entries is  Table  63   Entries in a CalGray  Colour Space Dictionary   KeyType Value WhitePoint array(Required)  An array of three numbers [ XW YW ZW ] specifying the  tristimulus value, in the CIE 1931  XYZ  space, of the diffuse white point;  see 8.6.5.3, \"CalRGB Colour Spaces\" , for further discussion. The  numbers  XW and  ZW shall be positive, and  YW shall be equal to 1.0.  BlackPoint array(Optional)  An array of three numbers [  XB YB ZB ] specifying the tristimulus value, in the CIE 1931  XYZ  space, of the diffuse black point;  see 8.6.5.3, \"CalRGB Colour Spaces\" , for further discussion. All three of these numbers shall be non -negative. Default value: [  0.0 0.0 0.0 ]. Gamma number (Optional)  A number  G defining the gamma for the gray  (A) component.  G shall be positive and is generally greater than or equal  to 1. Default value: 1.","Decode  ADecode  LMN","A","LMN","Matrix  A","Matrix  LMN","XYZ","XL X WAGu==YMYWAGu==ZN Z WAGu==",""],"154":["PDF 32000-1:2008 146 ' Adobe Systems Incorporated 2008  All rights reserved In other words, the  A component shall be first decoded by the gamma function, and the result shall be  multiplied by the components of the white point to obtain the  L, M, and  N components of the intermediate  representation. Since there is no second stage, the  L, M, and  N components shall also be the  X, Y, and  Zcomponents of the final representation.  EXAMPLE 1 The examples in this su b-clause illustrate interesting and useful special cases of  CalGray  spaces. This  example establishes a space consisting of the Y di mension of the CIE 1931 XY Z space with the CCIR XA/ 11recommended D65 white point. [ /CalGray<< /WhitePoint  [ 0.9505  1.0000  1.0890  ] >>]EXAMPLE 2 This example establishes a  calibrated gray space wit h the CCIR XA/11recomme nded D65 white point  and opto-electronic transfer function.  [ /CalGray<<  /WhitePoint  [ 0.9505  1.0000  1.0890  ] /Gamma 2.222 >>]8.6.5.3 CalRGB Colour Spaces A Ca lRGB  colour space is a CIE-based  ABC colour space with only one transformation stage instead of two. In  this type of space,  A, B, and  C represent calibrated red, green, and blue colour values. These three colour  components shall be in the range 0.0  to 1.0; component values falling outs ide that range sha ll be adjusted to  the nearest valid value without error indication . The decoding functions  (denoted by Decode  ABC in Figure  22) are gamma functions whose coeffi cients shall be specified by the  Gamma  entry in the colour space  dictionary (see  Ta b l e  64). The transformation matrix denoted by Matrix  ABC in Figure 22  shall be defined by  the dictionarys  Matrix  entry. Since there is no second transformation stage, Decode  LMN and Matrix  LMN  shall be implicitly taken to  be identity transformations.  The  White Point  and  BlackPoint  entries in the colour space dictionary shall control the overall effect of the  CIE-based gamut mapping function described in sub-clause  10.2, \"CIE-Based Colour to Device Colour\" . Typically, the colours specified by  WhitePoint and  BlackPoint  shall be mapped to the nearly lightest and  nearly darkest achromatic colours that the output device is capable of rendering in a way that preserves colour  appearance and visual contrast.  Table  64   Entries in a CalRGB Colour Space Dictionary   KeyType Value WhitePoint array(Required)  An array of three numbers [  XW YW ZW ] specifying the tristimulus  value, in the CIE 1931  XYZ space, of the diffuse white point; see below for  further discussion. The numbers  XW and ZW shall be positive, and  YW shall be  equal to 1.0.  BlackPoint array(Optional)  An array of three numbers [  XB YB ZB] specifying the tristimulus  value, in the CIE 1931  XYZ space, of the diffuse black point; see below for  further discussion. All three of these  numbers shall be non-negative. Default  value: [ 0.0  0.0 0.0  ].  Gamma array(Optional)   An array of three numbers [  GR GG GB"," ] specifying the gamma for  the red, green, and blue  (A, B, and  C) components of the colour space.  Default value: [  1.0 1.0 1.0 ]. Matrixarray(Optional)  An array of nine numbers [  XA YA ZA XB YB ZB XC YC ZC] specifying the linear interpretation of the decoded  A, B, and  C components of  the colour space with respect to the final  XYZ  representation. Default value:  the identity matrix [  1 0 0 0 1 0 0 0 1 ].",""],"155":["' Adobe Systems Incorporated 2008  All rights reserved 147PDF 32000-1:2008 WhitePoint represents the diffuse achromatic highlight,  not a specular highlight. Specular highlights,  achromatic or otherwise, are often reprod uced lighter than the diffuse highlight.  BlackPoint  represents the  diffuse achromatic shadow; its value is  limited by the dynamic range of the i nput device. In images produced by  a photographic system, the values of  WhitePoint  and  BlackPoint  vary with exposure, system response, and  artistic intent; hence, their values are image-dependent.  The transformation defined by the  Gamma and Matrix  entries in the  CalRGB  colour space dictionary shall be  The  A, B, and C components shall first be decoded individually by the gamma functions. The results shall be  treated as a three-element vector and multiplied by  Matrix  (a 3-by-3 matrix) to obtain the  L, M, and  Ncomponents of the intermediate representation. Since th ere is no second stage, these shall also be the  X, Y, and  Z components of the final representation.  EXAMPLE The following shows an example of a  CalRGB  colour space for the CCIR XA/11recommended D65  white point with 1.8 gammas and Sony Trinitron phosphor chromaticities.  [ /CalRGB<<  /WhitePoint  [ 0.9505 1.0000  1.0890  ] /Gamma [ 1.8000  1.8000  1.8 000]  /Matrix  [ 0.4497  0.2446 0.0252   0.3163 0.6720  0.1412   0.1845 0.0833  0.9227 ]>>]The parameters of a  CalRGB colour space may be specified in terms  of the CIE 1931 chromaticity coordinates  (xR , yR ), (xG , yG ), ( xB , yB ) of the red, green, and blue phosphor s, respectively, and the chromaticity ( xW , yW ) of the diffuse white point corresponding to a linear  RGB value ( R, G, B) , where  R, G, and  B should all equal 1.0.  The standard CIE notation uses lowercase letters to specify chromaticity coordinates and uppercase letters to  specify tristimulus values. Given this information,  Matrix  and  WhitePoint shall be calculated as follows:","XLX AAGRuXBBGGuXCCGu++==YMYAAGRuYBBGGuYCCGu++==ZN Z AAGRuZBBGGuZCCGBu++==","zyWxGxByRuxRxByGuxRxGyBu+u =","YAyRR------ xGxByWuxWxByGuxWxGyu+z---------------------------------------------------------------------------------------------------------------------------------- u=XAYAxRyR------ u=ZAYA1xRyR--------------- 1 '„¤‚§•u=","YByGG------ xRxByWuxWxByRuxWxRyu+z--------------------------------------------------------------------------------------------------------------------------------- u=XBYBxGyG------ u=ZBYB1xGyG--------------- 1 '„¤‚§•u=",""],"156":["PDF 32000-1:2008 148 ' Adobe Systems Incorporated 2008  All rights reserved 8.6.5.4 Lab Colour Spaces A Lab  colour space is a CIE-based  ABC colour space with two transformation stages (see  Figure 22 ). In this  type of space,  A, B, and C represent the  L*, a*, and  b* components of a CIE 1976  L*a*b* space. The range of  the first  (L*) component shall be 0 to 100; the ranges of the second and third  (a* and  b*) components shall be  defined by the  Range entry in the colour space dictionary (see  Ta b l e  65).  Figure L.3  in Annex L  illustrates the coordinates of a typical  Lab colour space;  Figure L.4  in  Annex L  compares  the gamuts (ranges of representable colours) for  L*a*b* , RGB, and  CMYK spaces.  A La b  colour space shall not specify exp licit decoding functions or matrix coefficients for either stage of the  transformation from  L*a*b* space to  XYZ  space (denoted by Decode  ABC, Matrix  ABC, Decode  LMN , and Matrix  LMN in Figure 22 ). Instead, these parameters shall have  constant implicit values. The first  transformation stage shall be defined by the equations  Table  65   Entries in a Lab Colour Space Dictionary   KeyType Value WhitePoint array(Required)  An array of three numbers [  XW YW ZW ] that shall specify the  tristimulus value, in the CIE 1931  XYZ  space, of the diffuse white point; see  8.6.5.3, \"CalRGB Colour Spaces\"  for further discussion. The numbers  XW and  ZW shall be positive, and  YW shall be 1.0.  BlackPoint array(Optional)  An array of three numbers [  XB YB ZB ] that shall specify the  tristimulus value, in the CIE 1931  XYZ  space, of the diffuse black point; see  8.6.5.3, \"CalRGB Colour Spaces\"  for further discussion. All three of these  numbers shall be non-negative. Default value: [  0.0 0.0 0.0 ].  Rangearray(Optional)   An array of four numbers [  amin amax  bmin  bmax ] that shall specify  the range of valid values for the  a* and  b* (B and  C) components of the colour  spacethat is,  and  Component values falling outside the specified range shall be adjusted to the  nearest valid value without error indication.  Default value: [ 100 100 10 0  100  ].","YCyBB------ xRxGyWuxWxGyRuxWxRyu+z---------------------------------------------------------------------------------------------------------------------------------- u=XCYCxByB------ u=ZCYC1xByB--------------- 1 '„¤‚§•u=","XWXARuXBGuXCBu++=YWYARuYBGuYCBu++=ZWZARuZBGuZCBu++=","amina* a maxdd","bminb* b maxdd",""],"157":["' Adobe Systems Incorporated 2008  All rights reserved 149PDF 32000-1:2008 The second transformation stage shall be  where the function  g (x)  shall be defined as  EXAMPLE The following defines the CIE 1976 L*a*b* spac e with the CCIR XA/11recommended D65 white point.  The a* and b* components, although theoretically unboun ded, are defined to lie in the useful range -128  to +127.  [ /Lab<<  /WhitePoint  [ 0.9505 1.0000  1.0890  ] /Range  [ -128 127  -128 127  ]>>]8.6.5.5 ICCBased Colour Spaces ICCBased  colour spaces  (PDF 1.3) shall be based on a cross-platform  colour profile  as defined by the  International Color Co nsortium (ICC) (see , Bibliography). Unlike the  CalGray , CalRGB, and  Lab  colour  spaces, which are characterized by entrie s in the colour space dictionary, an  ICCBased  colour space shall be  characterized by a sequence of bytes in a standard format.  Details of the profile format can be found in the ICC  specification (see , Bibliography ).  An IC CBased  colour space shall be an array:  [ /ICCBased stream  ]The stream shall contain the ICC profile. Besides  the usual entries common to all streams (see  Table  5), the  profile stream shall have the additional entries listed in  Ta b l e  66. Table  66   Additional Entries Specific to an ICC Profile Stream Dictionary   KeyType Value Ninteger (Required)  The number of colour components in the colour space described  by the ICC profile data. This number  shall match the number of components  actually in the ICC profile.  N shall be 1, 3, or 4.","LL*16+116 ------------------ -a*500 -------- -+=ML*16+116 ------------------ -=NL*16+116 ------------------ -b*200 -------- -=","XXWgLu=YYWgMu=ZZWgNu=","gxx3=ifx629------tgx108 841 -------- -x429------'„§•u=otherwise",""],"158":["PDF 32000-1:2008 150 ' Adobe Systems Incorporated 2008  All rights reserved The ICC specification is an evolving standard.  Ta b l e  67 shows the versions of the ICC specification on which  the IC CBased  colour spaces that PDF versions 1.3 and la ter shall use. (Earlier versions of the ICC  specification shall also be supported.)  Conforming writers and readers should follow these guidelines:   A conforming reader shall support IC C.1:2004:10 as required  by PDF 1.7, which will enable it to properly  render all embedded ICC profiles regardless of the PDF version.  A conforming reader shall always process an embedded ICC profile according to the corresponding  version of the PDF being processed as shown in  Ta b l e  67 above; it shall not substitute the Alternate colour  space in these cases.  A conforming writer should use ICC 1:2004-10 prof iles. It may embed profiles conforming to a later ICC  version. The conforming reader should process such profiles according to  Ta b l e  67; if that is not possible,  it shall substitute the Alternate colour space.   Conforming writers shall only use the profile types shown in  Ta b l e  68 for specifying calibrated colour  spaces for colouring graphic objects. Each of the indica ted fields shall have one of the values listed for that  field in the second column of the table. Profiles shall satisfy  both the criteria shown in the table. The  terminology is taken from  the ICC specifications.  Alternatearray or name(Optional)   An alternate colour space that shall be used in case the one  specified in the stream data is not  supported. Non-conforming readers may  use this colour space. The alternat e space may be any valid colour space  (except a Pattern  colour space) that has the number of components specified  by N. If this entry is omitted and the co nforming reader does not understand  the ICC profile data, the colour  space that shall be used is  DeviceGray , DeviceRGB , or  DeviceCMYK , depending on whether the value of  N is 1, 3, or  4, respectively.  There shall not be conversion of source colour values, such as a tint  transformation, when using the alternate  colour space. Colour values within  the range of the  ICCBased  colour space might not be within the range of the  alternate colour space. In this case, the nearest values within the range of the  alternate space shall be substituted.  Rangearray(Optional)  An array of 2 u N numbe rs [  min0 max 0 min1 max1  ] that shall specify the minimum and maximum valid values of the corresponding colour  components. These values shall match  the information in the ICC profile.  Default value: [  0.0 1.0  0.0 1.0  ].  Metadata stream (Optional; PDF  1.4) A met adata stream  that shall contain metadata for the  colour space (see  14.3.2, \"Metadata Streams\" ). Table  67   ICC Specification Versions Supported by ICC Based Colour Spaces   PDF Version ICC Specification Version 1.33.31.4ICC.1:1998-09 and its  addendum ICC.1A:1999-04 1.5ICC.1:2001-12 1.6ICC.1:2003-09 1.7ICC.1:2004-10 (ISO  15076-1:2005) Table 66   Additional Entries Specific to  an ICC Profile Stream Dictionary (continued) Key Type Value",""],"159":["' Adobe Systems Incorporated 2008  All rights reserved 151PDF 32000-1:2008 NOTE 1 XYZ and 16-bit L*a*b* profiles are not listed. The terminology used in PDF colour spaces and ICC col our profiles is similar, bu t sometimes the same terms  are used with different meanings. The default value for each component in an  ICCBased  colour space is 0. The  range of each colour component is a function of the colour  space specified by the profile and is indicated in the  ICC specification. The ranges for several ICC colour spaces are shown in  Ta b l e  69.Since the ICCBased colour space is being used as a source colour  space, only the to CIE profile information  (AToB  in ICC terminology) shall be used; the from CIE ( BToA ) information shall be ignored when present. An  ICC profile may also specify a  rendering intent , but a conforming reader shall ignore this information; the  rendering intent shall be specified in  PDF by a separate parameter (see  8.6.5.8, \"Rendering Intents\" ). The requirements stated above apply to an  ICCBased colour space that is used  to specify the  source colours  of graphics objects. When such a space is used as the  blending colour space for a transparency group in the  transparent imaging model (see  11.3.4, \"Blending Colour Space\" ; 11.4, \"Transparency Groups\" ; and  11.6.6,  \"Transparency Group XObjects\" ), it shall have both to CIE  (AToB)  and from CIE  (BToA)  information. This is  because the group colour space shall be used as both the destination for objects being painted within the group  and the source for the groups results. ICC  profiles shall also be used in specifying  output intents  for matching  the colour characteristics of a PDF  document with those of a  target output device or  production environment.  When used in this context, they sh all be subject to still other constrai nts on the to CIE and from CIE  information; see  14.11.5, \"Output Intents\" , for details.  The representations of  ICCBased colour spaces are less compact than  CalGray, CalRGB , and  Lab , but can represent a wider range of colour spaces.  NOTE 2 One particular colour space is the standard  RGB or  sRGB, defined in the International Electrotechnical  Commission (IEC) document  Color Measurement and Management in  Multimedia Systems and Equipment (see, Bibliography ). In PDF, the  sRGB colour space can only be expressed as an  ICCBased  space,  although it can be approximated by a  CalRGB  space. EXAMPLE The following shows an  ICCBased  colour space for a typical three-component RGB space. The profiles  data has been encoded in hexadecimal representation for readability; in actual practice, a lossless  decompression filter such as  FlateDecode  should be used.  10 0 obj % Colour space [ /ICCBased 15 0 R ]Table  68   ICC Profile Types   Header Field Required Value deviceClass icSigInputClass (’scnr’)icSigDisplayClass (’mntr’) icSigOutputClass (’prtr’) icSigColorSpaceClass (’spac’) colorSpace icSigGrayData (’GRAY’) icSigRgbData (’RGB  ’)icSigCmykData (’CMYK’) icSigLabData (’Lab  ’)Table  69   Ranges for Typical ICC Colour Spaces   ICC Colour Space Component Ranges Gray [ 0.0 1.0 ]RGB[ 0.0 1.0 ]CMYK[ 0.0 1.0 ]L*a*b* L*:  [  0 100  ];  a* and   b*: [ 128 127 ]",""],"160":["PDF 32000-1:2008 152 ' Adobe Systems Incorporated 2008  All rights reserved endobj 15 0 obj% ICC profile stream <<  /N 3 /Alternate  /DeviceRGB  /Length  1605 /Filter /ASCIIHexDecode >>stream00 00 02 0C 61 70 70 6C 02 00 00 00 6D 6E 74 7252 47 42 20 58 59 5A 20 07 CB 00 02 00 16 00 0E00 22 00 2C 61 63 73 70 41 50 50 4C 00 00 00 0061","70 70 6C 00 00 04 01 00 00 00 00 00 00 00 0200 00 00 00 00 00 F6 D4 00 01 00 00 00 00 D3 2B00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00","00 00 00 00 00 00 00 00 00 00 00 0000 00 00 09 64 65 73 63 00 00 00 F0 00 00 00 7172 58 59 5A 00 00 01 64 00 00 00 14 67 58 59 5A00 00 01 78 00 00 00 14 62 58 59 5A 00 00 01 8C00 00 00 14 72 54 52","43 00 00 01 A0 00 00 00 0E67 54 52 43 00 00 01 B0 00 00 00 0E 62 54 52 4300 00 01 C0 00 00 00 0E 77 74 70 74 00 00 01 D000 00 00 14 63 70 72 74 00 00 01 E4 00 00 00 2764 65 73 63 00 00 00 00 00 00","00 17 41 70 70 6C65 20 31 33 22 20 52 47 42 20 53 74 61 6E 64 6172 64 00 00 00 00 00 00 00 00 00 00 00 17 41 7070 6C 65 20 31 33 22 20 52 47 42 20 53 74 61 6E64 61 72 64 00 00 00 00 00 00 00 00 00","00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 58 59 5A 58 59 5A 20 00 00 00 00 00 00 63 0A00 00 35 0F 00 00 03 30 58 59 5A 20 00 00 00 00","00 00 53 3D 00 00 AE 37 00 00 15 76 58 59 5A 2000 00 00 00 00 00 40 89 00 00 1C AF 00 00 BA 8263 75 72 76 00 00 00 00 00 00 00 01 01 CC 63 7563 75 72 76 00 00 00 00 00 00 00 01 01 CC 63 7563 75 72","76 00 00 00 00 00 00 00 01 01 CC 58 5958 59 5A 20 00 00 00 00 00 00 F3 1B 00 01 00 0000 01 67 E7 74 65 78 74 00 00 00 00 20 43 6F 7079 72 69 67 68 74 20 41 70 70 6C 65 20 43 6F 6D70 75 74 65 72 73","20 31 39 39 34 00 >endstream endobj 8.6.5.6 Default Colour Spaces Colours that are specified in  a device colour space ( DeviceGray , DeviceRGB , or DeviceCMYK ) are device- dependent. By setting  default colour spaces (PDF 1.1) , a conforming writer can request that such colours shall  be systematically transformed  (remapped)  into device-independen t CIE-based colour spaces. This capability  can be useful in a variety of circumstances:   A document originally intended for one output  device is redirected to a different device.   A document is intended to be compatible with no n-compliant readers and thus  cannot specify CIE-based  colours directly.   Colour corrections or rendering intents need to be applied to device colours (see  8.6.5.8, \"Rendering  Intents\" ).  A colour space is selected for painting each graphics ob ject. This is either the current colour space parameter  in the graphics state or a colour space given as an  entry in an image XObject, inline image, or shading",""],"161":["' Adobe Systems Incorporated 2008  All rights reserved 153PDF 32000-1:2008 dictionary. Regardless of how the colour space is spec ified, it shall be subject to remapping as described  below.  When a device colour space is selected, the  ColorSpace  subdictionary of the current resource dictionary (see  7.8.3, \"Resource Dictionaries\" ) is checked for the presence of an entry designating a corresponding default  colour space ( DefaultGray, DefaultRGB, or DefaultCMYK , corresponding to  DeviceGray , DeviceRGB , or DeviceCMYK , respectively). If such an entry is present, its value shall be used as the colour space for the  operation currently being performed.  Colour values in the original device  colour space shall be passed unchang ed to the default colour space, which  shall have the same number of components as the orig inal space. The default co lour space should be chosen  to be compatible with the original, taking into account the components ranges and whether the components  are additive or subtractive. If a colour value lies outs ide the range of the default colour space, it shall be  adjusted to the nearest valid value.  Any colour space other than a  Lab, Indexed , or Pattern  colour space may be used as a default colour space  and it should be compatible  with the original device colour space as described above.  If the selected space is a special co lour space based on an underlying devic e colour space, the default colour  space shall be used in place of the underlying spac e. This shall apply to th e following colour spaces:  The underlying colour space of a  Pattern  colour space   The base colour space of an  Indexed  colour space   The alternate colour space of a  Separation  or  DeviceN  colour space (but only if the alternate colour space  is actually selected) See 8.6.6, \"Special Colour Spaces\" , for details on these colour spaces.  There is no conversion of colour values, such as a ti nt transformation, when using the default colour space.  Colour values that are within the range of the device co lour space might not be within the range of the default  colour space (particularly if the default is an  ICCBased  colour space). In this case, the nearest values within  the range of the default space are used. For this reason, a  Lab  colour space shall not be used as the  DefaultRGB  colour space.  8.6.5.7 Implicit Conversion of CIE-Based Colour Spaces In cases where a source colour space accurately re presents the particular output device being used, a  conforming reader should avoid converting the component  colour values but use the s ource values directly as  output values. This avoids any unwa nted computational error and in the case of 4 component colour spaces  avoids the conversion from 4 components to 3 and back  to 4, a process that loses critical colour information. NOTE 1 In workflows in which PDF documents are intended for  rendering on a specific tar get output device (such as a  printing press with particular inks and media), it is often useful to specify the source  colours for some or all of a  documents objects in a CIE-based colour space that  matches the calibration of the intended device. The  resulting document, although tailored to  the specific characteristics of  the target device, remains device- independent and will produce reasonable results if retar geted to a different out put device. However, the  expectation is that if the document  is printed on the intended  target device, source colours that have been  specified in a colour space matching the calibration of the device will pass through unchanged, without  conversion to and from the intermediate CIE 1931  XYZ space as depicted in  Figure 22 . NOTE 2 In particular, when colours intended for a  CMYK output device are specified in an  ICCBased  colour space  using a matching  CMYK printing profile, converting such colours from four components to three and back is  unnecessary and results in a loss of fidelity in the bla ck component. In such cases, a conforming reader may  provide the ability for the user to specify a particular cali bration to use for printing, pr oofing, or previewing. This  calibration is then considered to be that of the native colour space of the intended output device (typically  DeviceCMYK ), and colours expressed in a CIE-based source  colour space matching it can be treated as if  they were specified directly in the devices native colour space.",""],"162":["PDF 32000-1:2008 154 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 3 The conditions under which such implicit conversion is  done cannot be specified in PDF, since nothing in PDF  describes the calibration of  the output device (although an output inte nt dictionary, if present, may suggest  such a calibration; see  14.11.5, \"Output Intents\" ). The conversion is completely hidden by the conforming  reader and plays no part in the interpretation of PDF colour spaces.  When this type of implicit conversion is done, all of the semantics of the device colour space shall also apply,  even though they do not apply to CIE-based spaces in general. In particular:   The nonzero overprint mode (see  8.6.7, \"Overprint Control\" ) shall determine the inte rpretation of colour  component values in the space.   If the space is used as the ble nding colour space for a transparency group in the transparent imaging  model (see  11.3.4, \"Blending Colour Space\" ; 11.4, \"Transparency Groups\" ; and  11.6.6, \"Transparency  Group XObjects\" ), components of the space, such as  Cyan, may be selected in a  Separation  or  DeviceN colour space used within the group (see  8.6.6.4, \"Separation Colour Spaces\"  and  8.6.6.5, \"DeviceN Colour  Spaces\" ).  Likewise, any uses of device colour spaces for ob jects within such a transparency group have well-defined  conversions to the group colour space.  NOTE 4 A source colour space can be s pecified directly (for example, with an  ICCBased  colour space) or indirectly  using the default colour space mechanism (for example,  DefaultCMYK; see 8.6.5.6, \"Default Colour Spaces\" ). The implicit conversion of a CIE-based colour space to  a device space should not depend on whether the CIE- based space is specified directly or indirectly.  8.6.5.8 Rendering Intents Although CIE-based colour specificat ions are theoretically device-indepen dent, they are subject to practical  limitations in the colour reproduction capabilities of the  output device. Such limitat ions may sometimes require compromises to be made among various properties of a co lour specification when rendering colours for a given  device. Specifying a  rendering intent  (PDF 1.1) allows a conforming writer to set priorities regarding which of  these properties to preserve and which to sacrifice.  EXAMPLE The conforming writer  might request that colours falling within the output devices ga mut (the range of  colours it can reproduce) be rendered exactly while sacr ificing the accuracy of out-of-gamut colours, or  that a scanned image such as a phot ograph be rendered in a perceptually  pleasing manner at the cost of  strict colourimetric accuracy. Rendering intents shall be specified with the  ri operator (see  8.4.4, \"Graphics State Operators\" ), the  RI entry in  a graphics state parameter dictionary (see  8.4.5, \"Graphics State  Parameter Dictionaries\" ), or with the  Intententry in image dictionaries (see  8.9.5, \"Image Dictionaries\" ). The value shall be a name identifying the  rendering intent.  Ta b l e  70 lists the standard rendering intents that shall be recognized.  Figure L.5  in Annex Lillustrates their effects. Thes e intents have been chosen to correspond to thos e defined by the International  Color Consortium (ICC), an industry organization that  has developed standards for device-independent colour.  If a conforming reader does not recognize the specified name, it shall use the  RelativeColorimetric  intent by default.  NOTE Note, however, that the exact set of rendering intents  supported may vary from one  output device to another; a  particular device may not support all possible intents or  may support additional ones beyond those listed in the  table. See 11.7.5, \"Rendering Parameters and Transparency\" , and in particular  11.7.5.3, \"Rendering Intent and  Colour Conversions\" , for further discussion of the role of rendering intents in the transparent imaging model.",""],"163":["' Adobe Systems Incorporated 2008  All rights reserved 155PDF 32000-1:2008 8.6.6 Special Colour Spaces 8.6.6.1 General Special colour spaces add features or properties to an  underlying colour space. There are four special colour  space families:  Pattern , Indexed , Separation , and  DeviceN . Table  70   Rendering Intents   Name Description AbsoluteColorimetric Colours shall be represented solely with respect to the  light source; no correction shall be made for the output  mediums white point (such as  the colour of unprinted  paper). Thus, for example, a monitors white point, which  is bluish compared to that of a printers paper, would be  reproduced with a blue cast . In-gamut colours shall be reproduced exactly; out-of-g amut colours shall be mapped  to the nearest value within the reproducible gamut.  NOTE 1 This style of repr oduction has the advantage  of providing exact colour matches from one  output medium to another. It has the  disadvantage of causing colours with  Yvalues between the mediums white point and  1.0 to be out of gamut. A typical use might be  for logos and solid colours that require exact  reproduction across different media.  RelativeColorimetric Colours shall be represented with respect to the  combination of the light sour ce and the output mediums  white point (such as the colour of unprinted paper). Thus,  a monitors white point can be reproduced on a printer by  simply leaving the paper unmarked, ignoring colour  differences between the two media. In-gamut colours shall  be reproduced exactly; out -of-gamut colours shall be mapped to the nearest value  within the reproducible  gamut.  NOTE 2 This style of repr oduction has the advantage  of adapting for the varying white points of  different output media. It has the  disadvantage of not providing exact colour  matches from one medium to another. A  typical use might be for vector graphics.  SaturationColours shall be represented i n a manner that preserves  or emphasizes saturation.  Reproduction of in-gamut  colours may or may not be  colourimetrically accurate.  NOTE 3 A typical use might be for business graphics,  where saturation is the most important  attribute of the colour.  Perceptual Colours shall be represented in  a manner that provides a  pleasing perceptual appearance. To preserve colour  relationships, both in-gamut  and out-of-gamut colours  shall be generally modified from their precise colourimetric  values. NOTE 4 A typical use might be for scanned images.",""],"164":["PDF 32000-1:2008 156 ' Adobe Systems Incorporated 2008  All rights reserved 8.6.6.2 Pattern Colour Spaces A Patter n  colour space  (PDF 1.2)  specifies that an area is to be painted with a  pattern  rather than a single  colour. The pattern shall be either a  tiling pattern  (type  1) or a  shading pattern  (type  2).  8.7, \"Patterns\" , discusses patterns in detail.  8.6.6.3 Indexed Colour Spaces An Inde xed  colour space specifies that an  area is to be painted using a  colour map or  colour table  of arbitrary  colours in some other space. A confo rming reader shall treat each sample  value as an index into the colour  table and shall use the colour value it finds there. Th is technique can considerably reduce the amount of data  required to represent a sampled image.  An Inde xed  colour space shall be defined by a four-element array:  [ /Indexed  base  hival lookup  ]The first element shall be the colour space family name  Indexed . The remaining elements shall be parameters  that an  Indexed  colour space requires; their meanings are discussed below. Setting the current stroking or  nonstroking colour space to an  Indexed  colour space shall initialize the co rresponding current colour to 0.  The  ba se  parameter shall be an array or name that identifies the  base colour space  in which the values in the  colour table are to be interpreted. It shall be any device or CIE-based colour space or  (PDF 1.3) a Separation or  DeviceN  space, but shall not be a  Pattern space or another  Indexed  space. If the base colour space is  DeviceRGB , the values in the colour table shall be interpret ed as red, green, and blue components; if the base  colour space is a CIE-based  ABC space such as a  CalRGB  or  Lab  space, the values shall be interpreted as  A, B, and  C components.  The  hiv al  parameter shall be an integer that  specifies the maximum valid index  value. The colour table shall be  indexed by integers in the range 0 to  hival. hival shall be no greater than 255, which is the integer required to  index a table with 8-bit index values.  The colour table shall be defined by the  lookup  parameter, which may be either a stream or  (PDF 1.2) a byte  string. It shall provide the mapping between index valu es and the corresponding colours in the base colour  space.  The colour table data shall be  m ¥ (hival + 1) bytes long, where  m is the number of colour components in the  base colour space. Each byte shall be an unsigned integer in the range 0 to 255 that shall be scaled to the  range of the corresponding colour component in the base  colour space; that is, 0 corresponds to the minimum  value in the range for that component, and 255 corresponds to the maximum.  The colour components for each entry in the table shall appear consecutively in the string or stream.  EXAMPLE 1 If the base colour space is  DeviceRGB  and the indexed colour space contains two colours, the order of  bytes in the string or stream is R 0 G0 B0 R1 G1 B1 , where letters denote the colour component and  numeric subscripts denote the table entry.  EXAMPLE 1 The following illustrates the specification of an In dexed colour space that maps 8-bit index values to  three-component colour values in the  DeviceRGB  colour space.  [ /Indexed /DeviceRGB 255< 000000  FF0000  00FF00  0000FF  B57342   >]The example shows only the first five colour values in the  lookup string; in all, there should be 256 colour  values and the string should be 768 bytes long. Havi ng established this colour  space, the program can  now specify colours as single-component values in the  range 0 to 255. For example, a colour value of 4  selects an  RGB colour whose components are coded as the hexadecimal integers B5, 73, and 42.",""],"165":["' Adobe Systems Incorporated 2008  All rights reserved 157PDF 32000-1:2008 Dividing these by 255 and scaling the results to the range 0.0 to 1.0 yields a colour with red, green, and  blue components of 0.710, 0.451, and 0.259, respectively.  Although an  Indexed  colour space is useful mainly for images, index values can also be used with the colour  selection operators  SC, SCN , sc, and  scn . EXAMPLE 2 The following selects the same colour as does an image sample value of 123. 123  scThe index value should be an integer in the range 0 to  hival . If the value is a real number, it shall be rounded to  the nearest integer; if it  is outside the range 0 to  hival, it shall be adjusted to the nearest value within that range.  8.6.6.4 Separation Colour Spaces A Sep aration  colour space  (PDF 1.2)  provides a means for specifying the  use of additional colorants or for  isolating the control of individual colour components  of a device colour space for a subtractive device. When  such a space is the current colour space, the curren t colour shall be a single-component value, called a  tint, that controls the application of the given colorant or colour components only.  NOTE 1 Colour output devices produce full colour by combining  primary or process colorants  in varying amounts. On  an additive colour device such as a display, the primar y colorants consist of red,  green, and blue phosphors;  on a subtractive device such as a printer, they typica lly consist of cyan, magenta, yellow, and sometimes black  inks. In addition, some devices can apply special colorants, often called  spot colorants , to produce effects that  cannot be achieved with the standard process colora nts alone. Examples include metallic and fluorescent  colours and special textures.  NOTE 2 When printing a page, most devices produce a single  composite page on which all process colorants (and spot  colorants, if any) are combined.  However, some devices, such as  imagesetters, produce a separate,  monochromatic rendition of the page, called a  separation , for each colorant. When the separations are later  combinedon a printing press, for exampleand the pr oper inks or other colorants are applied to them, the  result is a full-colour page.  NOTE 3 The  term  separation  is often misused as a synonym for an individual device colorant. In the context of this  discussion, a printing system  that produces separation s generates a separate piece of physical medium  (generally film) for each colorant. It is these pieces  of physical medium that ar e correctly referred to as  separations. A particular colorant properly constitute s a separation only if the device is generating physical  separations, one of which corresponds to the given colorant. The  Separation colour space is so named for  historical reasons, but it has evolved to the broader  purpose of controlling the application of individual  colorants in general, regardless of whether they are actually realized as physical separations.  NOTE 4 The operation of a  Separation  colour space itself is independent of the characteristics of any particular output  device. Depending on the device, the space may or may not correspond to a true, physical separation or to an  actual colorant. For example, a  Separation  colour space could be used to control the application of a single  process colorant (such as cyan) on a composite device  that does not produce physical separations, or could  represent a colour (such as orange) for which no  specific colorant exists on the device. A  Separation  colour  space provides consistent, predictable  behaviour, even on devices that c annot directly generate the requested  colour.  A Separation  colour space is defined as follows:  [ /Separation  name  alternateSpace  tintTransform  ]It shall be a four-element array whose first ele ment shall be the colour space family name  Separation . The  remaining elements are parameters that a  Separation  colour space requires; their meanings are discussed  below.  A colour value in a  Separation  colour space shall consist of a single ti nt component in the range 0.0 to 1.0. The  value 0.0 shall represent the minimum amount of colorant that can be applied; 1.0 shall represent the  maximum. Tints shall always be treated as  subtractive  colours, even if the device produces output for the  designated component by an additive method. Thus, a tint  value of 0.0 denotes the lightest colour that can be",""],"166":["PDF 32000-1:2008 158 ' Adobe Systems Incorporated 2008  All rights reserved achieved with the given colorant, and 1.0 is the darkest.  The initial value for both the stroking and nonstroking  colour in the graphics state shall be 1.0. The  SCN and  scn operators respectively sha ll set the current stroking  and nonstroking colour to a tint value. A sampled image with single-component samples may also be used as a  source of tint values.  NOTE 5 This convention is the same as for  DeviceCMYK  colour components but opposite to the one for  DeviceGray and  DeviceRGB .The  name  parameter is a name object that shall specify the name of the colorant that this  Separation  colour space is intended to represent (or one of the special names  All or  None ; see below). Such colorant names are  arbitrary, and there may be any number of them, subject to implementation limits.  The special colorant name All shall refer collectively to  all colorants available on an output device, including  those for the standard process colorants. When a  Separation  space with this colorant name is the current  colour space, painting operators shall apply tint  values to all available colorants at once.  NOTE 6 This is useful for purposes such as painting regist ration targets in the same place on every separation. Such  marks are typically painted as the last step in compos ing a page to ensure that th ey are not overwritten by  subsequent painting operations.  The special colorant name  None shall not produce any visible output. Painting operations in a  Separation space with this colorant name shall have no effect on the current page.  A conforming reader shall support  Separation  colour spaces with the colorant names  All and  None on all  devices, even if the devices are not capable  of supporting any others. When processing  Separation  spaces  with either of these colorant names conforming readers shall ignore the  alternateSpace  and  tintTransform parameters (discussed belo w), although valid values  shall still be provided.  At the moment the colour space is set to a  Separation  space, the conforming reader shall determine whether  the device has an available colorant corresponding to  the name of the requested sp ace. If so, the conforming  reader shall ignore the  alternateSpace  and  tintTransform  parameters; subsequent painting operations within  the space shall apply the designated colorant dire ctly, according to the  tint values supplied.  The preceding paragraph applies only to subtractive out put devices such as printers and imagesetters. For an  additive device such as a computer display, a  Separation  colour space never applies a process colorant  directly; it always reverts to the alternate colour sp ace as described below. This is because the model of  applying process colorants independently does not work as intended on an additive device.  EXAMPLE 1 Painting tints of the  Red component on a white background produces a result that varies from white to  cyan.  This exception applies only to  colorants for additive devices, not to the specific names  Red, Green , and  Blue. In contrast, a printer might have a (subtractive) ink named  Red , which should work as a  Separation  colour space just the same as any other supported colorant.  If the colorant name associated with a  Separation  colour space does not correspond to a colorant available on  the device, the conforming reader s hall arrange for subsequent painting operations to be performed in an  alternate colour space.  The intended colours may be approximated by colours in a device or CIE-based colour  space, which shall then be rendered with the usual primary or process colorants: The  a lternateSpace  parameter shall be an array or name object that identifies the alternate colour space,  which may be any device or CIE-based colour space but may not be another special colour space  (Pattern , Indexed , Separation , or  DeviceN ). The  tintTransform  parameter shall be a function (see  7.10, \"Functions\" ). During subsequent painting  operations, a conforming reader calls this function to transfor m a tint value into colour component values in  the alternate colour space. The function shall be  called with the tint value and shall return the  corresponding colour component values. That is, the number of components and the interpretation of their  values shall depend on the alternate colour space.",""],"167":["' Adobe Systems Incorporated 2008  All rights reserved 159PDF 32000-1:2008 NOTE 7 Painting in the alternate colour space may produce  a good approximation of the  intended colour when only  opaque objects are painted. However, it does not correctly  represent the interactions between an object and its  backdrop when the object is painted with  transparency or when overprinting (see  8.6.7, \"Overprint Control\" ) is  enabled.  EXAMPLE 2 The  following  illustrate s the specification of a  Separation  colour space (object 5) that is intended to  produce a colour named LogoGreen. If the output device has no colorant corresponding to this colour,  DeviceCMYK  is used as the alternate colour space, and the tint transformation function (object 12) maps  tint values linearly into shades of a CMYK co lour value approximating the LogoGreen colour.  5 0 obj % Colour space [  /Separation /LogoGreen /DeviceCMYK 12 0 R] endobj 12 0 obj% Tint transformation function <<  /FunctionType  4 /Domain  [ 0.0  1.0 ] /Range  [ 0.0  1.0   0.0   1.0  0.0  1.0  0.0  1.0  ] /Length  62>>stream {  dup  0.84  mul  exch  0.00 exch dup  0.44  mul  exch  0.21 mul}endstream endobj See 11.7.3, \"Spot Colours and Transparency\" , for further discussion of the role of  Separation  colour spaces in  the transparent imaging model.  8.6.6.5 DeviceN Colour Spaces DeviceN  colour spaces  (PDF 1.3) may contain an arbitrary number of colour components.","NOTE 1 They provide greater flexibility than is possi ble with standard device colour spaces such as  DeviceCMYK  or  with individual  Separation  colour spaces.  EXAMPLE 1 It is poss ible to create a DeviceN  colour space consisting of only t he cyan, magenta, and yellow colour  components, with the black component excluded.  NOTE 2DeviceN colour spaces are used in applications such as these:  High-fidelity colour is the use of more than the st andard CMYK process colorants to produce an extended  gamut, or range of colours. A popular example is the PANTONE He xachrome system, which uses six colorants: the usual cyan, magenta, yello w, and black, plus orange and green.  Multitone colour systems use a single-component image to  specify multiple colour  components. In a duotone,  for example, a single-component image can be used to  specify both the black com ponent and a spot colour  component. The tone reproduction is generally different fo r the different components. For example, the black  component might be painted with the exact sample data  from the single-component  image; the spot colour  component might be generated as a nonlinear function  of the image data in a ma nner that emphasizes the  shadows.  Figure L.6  in Annex L  shows an example that uses black  and magenta colour components. In  Figure  L.7  in Annex L, a single-component grayscale  image is used to generate a quadtone re sult that uses four  colorants: black and three  PANTONE spot colours. See  EXAMPLE 5 in this sub-clause for the code used to  generate this image.",""],"168":["PDF 32000-1:2008 160 ' Adobe Systems Incorporated 2008  All rights reserved DeviceN  shall be used to represent colour sp aces containing multiple components that correspond to colorants  of some target device. As with  Separation  colour spaces, conforming readers shall be able to approximate the  colorants if they are not available on the current output  device, such as a display. To  accomplish this, the colour  space definition provides a tint tran sformation function that shall be us ed to convert all the components to an  alternate colour space.  PDF 1.6 extended the meaning of  DeviceN  to include colour spaces that are referred to as  NChannel  colour spaces . Such colour spaces may contain an arbitrary number  of spot and process components, which may or  may not correspond to specific device colorants (the pr ocess components shall be from a single process colour  space). They provide informa tion about each comp onent that allows conforming  readers more flexibility in  converting colours. These colour spaces shall be identified by a value of  NChannel  for the  Subtype entry of  the attributes dictionary (see  Ta b l e  71). A value of  DeviceN for the  Subtype  entry, or no value, shall mean that  only the previous features shall be su pported. Conforming readers that do  not support PDF 1.6 shall treat these  colour spaces as normal  DeviceN  colour spaces and shall use the tint  transformation function as appropriate.  Conforming writers using the  NChannel  features should follow certain guidelines, as noted throughout this  sub-clause, to achieve go od backward compatibility. EXAMPLE 2 They may use their own blending  algorithms for on-scr een viewing and composit e printing, rather than  being required to use a specified tint transformation function. DeviceN  colour spaces shall be defined in a similar way to  Separation  colour spacesin fact, a  Separation colour space can be defined as a  DeviceN  colour space with only one component.  A De viceN  colour space shall be specified as follows:  [ /DeviceN  names  alternateSpace  tintTransform  ]or  [ /DeviceN  names  alternateSpace  tintTransform  attributes  ]It is a four- or five-element array whose firs t element shall be the colour space family name  DeviceN . The remaining elements shall be parameters that a  DeviceN  colour space requires.  The  na mes  parameter shall be an array of name objects specifying the individual colour components. The  length of the array shall determine the number of components in the  DeviceN  colour space, which is subject to  an implementation limit; see  Annex C .The component names shall all be different from one another, except for  the name  None, which may be repeated as described late r in this sub-clause. The special name  All , used by  Separation  colour spaces, shall not be used. Colour values shall be tint components in the range 0.0 to 1.0: For  DeviceN  colour spaces that do not have a subtype of  NChannel, 0.0 shall represent the minimum  amount of colorant; 1.0 shall represent the maximum. Ti nts shall always be treated  as subtractive colours,  even if the device produces output  for the designated component by an a dditive method. Thus, a tint value  of 0.0 shall denote the lightest co lour that can be achieved with the gi ven colorant, and 1.0 the darkest.  NOTE 3 This convention is the same one as for  DeviceCMYK  colour components but opposite to the one for  DeviceGray  and  DeviceRGB .For  NChannel  colour spaces, values for additive process colours (such as  RGB) shall be specified in their  natural form, where 1.0 shall repres ent maximum intensity of colour. When this space is set to the current colour space (using the  CS or cs operators), each component shall be  given an initial value of 1.0. The  SCN and  scn  operators respectively shall set the current stroking and  nonstroking colour. Operand values supplied to  SCN or  scn shall be interpreted as co lour component values in  the order in which the colours are given in the  names  array, as are the values in a sampled image that uses a  DeviceN  colour space.",""],"169":["' Adobe Systems Incorporated 2008  All rights reserved 161PDF 32000-1:2008 The  alternateSpace  parameter shall be an array or name object that can be any device or CIE-based colour  space but shall not be another special colour space ( Pattern, Indexed , Separation , or DeviceN ). When the  colour space is set to a  DeviceN  space, if any of the component names in the colour space do not correspond  to a colorant available on the device, the conforming re ader shall perform subsequent painting operations in  the alternate colour space specified by this parameter. For  NCha nnel  colour spaces, the components shall be evaluated  individually; that is, only the ones not present  on the output device shall use the alternate colour space.  The  tintT ransform  parameter shall specify a function (see  7.10, \"Functions\" ) that is used to transform the tint  values into the alternate colour space. It shall be called with  n tint values and returns  m colour component  values, where n is the number of components needed to specify a colour in the  DeviceN  colour space and  m is  the number required by the alternate colour space. NOTE 4 Painting in the alternate colour space may produce  a good approximation of the  intended colour when only  opaque objects are painted. However, it does not correctly  represent the interactions between an object and its  backdrop when the object is painted with  transparency or when overprinting (see  8.6.7, \"Overprint Control\" ) is  enabled.  The colour component name  None, which may be present only for  DeviceN  colour spaces that do not have the  NChannel subtype, indicates that the corresponding colour  component shall never be painted on the page, as  in a Separation  colour space for the  None colorant. When a  DeviceN  colour space is painting the named  device colorants directly, colour components corresponding to  None  colorants shall be discarded. However,  when the  DeviceN  colour space reverts to its alternate colour space, those components shall be passed to the  tint transformation function, which may use them as desired.  A De viceN  colour space whose component colorant names are all  None shall always discard its output, just  the same as a  Separation  colour space for  None; it shall never revert to the alternate colour space. Reversion  shall occur only if at least one colour component (other than  None ) is specified and is not available on the  device.  The optional  attributes  parameter shall be a dictionary (see  Ta b l e  71) containing additional information about  the components of colour space that conforming read ers may use. Conforming readers need not use the  alternateSpace  and  tintTransform  parameters, and may instead use cust om blending algorithms, along with  other information provided in the attributes di ctionary if present. (If the value of the  Subtype entry in the  attributes dictionary is  NChannel, such information shall be present.) However,  alternateSpace  and  tintTransform  shall always be provided for conforming readers that want to use them or do not support PDF 1.6.  Table  71   Entries in a DeviceN Colour Space Attributes Dictionary   Key Type Value Subtypename (Optional; PDF 1.6)  A name specifying the preferred treatment for the  colour space. Values shall be  DeviceN  or NChannel. Default value:  DeviceN .",""],"170":["PDF 32000-1:2008 162 ' Adobe Systems Incorporated 2008  All rights reserved A value of  NChannel for the  Subtype  entry indicates that some of the ot her entries in this dictionary are  required rather than optional. The  Colorants  entry specifies a colorants dictionary  that contains entries for all  the spot colorants in the colour space; they shall be defined using individual  Separation  colour spaces. The  Process entry specifies a  process dictionary  (see  Ta b l e  72) that identifies the process colour space that is  used by this colour space and the names  of its components. It shall be present if  Subtype is NChannel and the  colour space has process colour components. An  NChannel  colour space shall contain components from at  most one process colour space. For colour spaces that have a value of  NChannel  for the  Subtype entry in the attributes dictionary (see  Ta b l e  71), the following restrictions  apply to process colours:   There may be colour components from at most one process colour space, which may be any device or  CIE-based colour space.  For a non- CMYK colour space, the names of the process components shall appear sequentially in the  names  array, in the normal colour space order (for example,  Red, Green, and  Blue ). However, the names  in the names  array need not match the actual colour space names (for example, a  Red  component need  not be named  Red).The mapping of names is specifie d in the process dictionary (see  Ta b l e  72 and  discussion below), which shall be present.   Definitions for process colorants should not appear in  the colorants dictionary. Any such definition shall be  ignored if the colorant is also present in the proce ss dictionary. Any component not specified in the process  dictionary shall be considered to be a spot colorant. For a  CMYK colour space, a subset of the components may be present, and they may appear in any order  in the names  array. The reserved names  Cyan, Magenta , Yellow , and  Black shall always be considered  to be process colours, which do not necessarily corres pond to the colorants of a specific device; they need  not have entries in the process dictionary.   The values associated with the process components shall be stored in their natural form (that is,  subtractive colour values for  CMYK and additive colour values for  RGB), since they shall be interpreted  Colorants dictionary (Required if  Subtype is NChannel  and the colour space includes spot  colorants; otherwise optional)  A dictionary describing the individual  colorants that shall be used in the  DeviceN  colour space. For each entry in  this dictionary, the key shall be a colorant name and the value shall be an  array defining a  Separation  colour space for that colorant (see  8.6.6.4,  \"Separation Colour Spaces\" ). The key shall match the colorant name  given in that colour space.  This dictionary provides information  about the individual colorants that  may be useful to some conforming readers. In particular, the alternate  colour space and tint transformation function of a  Separation  colour space  describe the appearance of that colo rant alone, whereas those of a  DeviceN  colour space describe only the appearance of its colorants in  combination.  If Subtype is NChannel, this dictionary shall have entries for all spot  colorants in this colour space. This dictionary may also include additional  colorants not used by this colour space.  Process dictionary (Required if  Subtype is NChannel  and the colour space includes  components of a process colour space, otherwise optional; PDF 1.6)  A dictionary (see  Table  72) that describes the process colour space whose  components are included in this colour space. MixingHints dictionary (Optional; PDF 1.6)  A dictionary (see  Table  73) that specifies optional  attributes of the inks that shall be used in blending calculations when used  as an alternative to the tint transformation function. Table 71   Entries in a DeviceN Colour Space Attributes Dictionary (continued) Key Type Value",""],"171":["' Adobe Systems Incorporated 2008  All rights reserved 163PDF 32000-1:2008 directly as process values by consumers making use of the process dictionary. (For additive colour spaces,  this is the reverse of how colour values are specified for  DeviceN , as described above in the discussion of  the names  parameter.) The  Mi xingHints  entry in the attributes dictionary specifies a  mixing hints dictionary  (see  Ta b l e  73) that  provides information about the characteristics of colora nts that may be used in blending calculations when the  actual colorants are not available on the target device. Conforming readers need not use this information.  Table  72   Entries in a DeviceN Process Dictionary   KEYTYPEVALUE ColorSpace name or  array(Required)  A name or array identifying the process colour space, which  may be any device or CIE-based colour space. If an  ICCBased  colour  space is specified, it shall provide  calibration information appropriate for  the process colour components specified in the  names  array of the DeviceN  colour space.  Components array(Required)  An array of component names that correspond, in order, to the  components of the process colour space specified in  ColorSpace . For  example, an RGB colour space shall have three names corresponding to  red, green, and blue. The names may be  arbitrary (that is, not the same as  the standard names for the colour space components) and shall match  those specified in the  names  array of the  DeviceN  colour space, even if all  components are not present in the  names  array. Table  73   Entries in a DeviceN Mixing Hints Dictionary   Key Type Value Soliditiesdictionary (Optional)   A dictionary specifying the solidity of inks that shall be used in  blending calculations when used as an alternative to the tint  transformation function. For each entry, the key shall be a colorant name, and the value shall be a number between 0.0 and 1.0. This  dictionary need not contain entries for all colorants used in this colour  space; it may also include additional colorants not used by this colour  space.  A value of 1.0 simulates an ink that  completely covers the inks beneath;  a value of 0.0 simulates a transparen t ink that completely reveals the  inks beneath. An entry with a key of  Default  specifies a value that shall  be used by all components in the associated  DeviceN  colour space for  which a solidity value is not explicitly provided. If  Default  is not present,  the default value for unspecified colorants shall be 0.0; conforming  readers may choose to use other values. If this entry is present,  PrintingOrder  shall also be present. PrintingOrderarray(Required if  Solidities  is present)  An array of colorant names,  specifying the order in which inks shall be laid down. Each component in  the  names  array of the  DeviceN  colour space shall appear in this array  (although the order is unrelated  to the order specified in the  names array). This entry may also list colorants unused by this specific  DeviceN instance.",""],"172":["PDF 32000-1:2008 164 ' Adobe Systems Incorporated 2008  All rights reserved Each entry in the mixing hints dictionary refers to colo rant names, which include spot colorants referenced by  the Colorants  dictionary. Under some circumstances, they may  also refer to one or more individual process  components called  Cyan, Magenta , Yellow , or Black when  DeviceCMYK  is specified as the process colour  space in the process dictionary. Howe ver, applications shall ignore these process component entries if they can  obtain the information  from an ICC profile.  NOTE 5 The mixing hints subdictionaries (as well as the color ants dictionary) may specify co lorants that are not used in  any given instance of a  DeviceN  colour space. This allows them  to be referenced from multiple  DeviceN colour spaces, which can produce smaller file sizes as  well as consistent colour definitions across instances. For consistency of colour, conforming  readers should follow these guidelines:   The conforming reader shall apply either the specified tin t transformation function or invoke the same  alternative blending algorithm for all  DeviceN  instances in the document.  NOTE 6 When the tint transformation func tion is used, the burden is on the conf orming writer to guarantee that the  individual function definitions chosen for all  DeviceN  instances produce similar colour appearances throughout  the document.  Blending algorithms should produce a similar appearance for colours when they are used as separation  colours or as a component of a  DeviceN  colour space.  EXAMPLE 3 This example shows a  DeviceN  colour space consisting of three colour components named  Orange , Green, and  None. In this example, the  DeviceN  colour space, object 30, ha s an attributes dictionary  whose  Colorants  entry is an indirect reference to object 45 (w hich might also be referenced by attributes  dictionaries of other  DeviceN  colour spaces).  tintTransform1 , whose definition is not shown, maps three  colour components (tints of the colorants  Orange , Green , and  None) to four colour components in the  alternate colour space,  DeviceCMYK . tintT ransform2  maps a single colour component (an orange tint) to  four components in  DeviceCMYK . Likewise, tintTransform3  maps a green tint to  DeviceCMYK , and  tintTransform4  maps a tint of PANTONE 131 to  DeviceCMYK .30 0 obj% Colour space [  /DeviceN[ /Orange  /Green  /None  ]/DeviceCMYK tintTransform1 << /Colorants  45 0 R >>]endobj DotGain dictionary (Optional)  A dictionary specifying the  dot gain  of inks that shall be used  in blending calculations when used as an alternative to the tint  transformation function. Dot gain (or loss) represents the amount by  which a printers halftone dots change as the ink spreads and is  absorbed by paper. For each entry, the key shall be a colorant name, and the value shall be a function that maps values in the ra nge 0 to 1 to values in the range 0  to 1. The dictionary may list co lorants unused by this specific  DeviceN instance and need not list all colorants. An entry with a key of  Default shall specify a function to be used by all colorants for which a dot gain  function is not explicitly specified. Conforming readers may ignore values in this dictionary when other  sources of dot gain information are available, such as ICC profiles  associated with the process colour space or tint transformation functions  associated with individual colorants.  Table 73   Entries in a DeviceN  Mixing Hints Dictionary (continued) Key Type Value",""],"173":["' Adobe Systems Incorporated 2008  All rights reserved 165PDF 32000-1:2008 EXAMPLE 4 45  0 obj % Colorants dictionary <<  /Orange   [ /Separation /Orange /DeviceCMYK tintTransform2  ] /Green  [ /Separation  /Green  /DeviceCMYK  tintTransform3   ]/PANTONE#20131  [ /Separation /PANTONE#20131 /DeviceCMYKtintTransform4  ]>>endobj NOTE 7EXAMPLE 5 through  EXAMPLE 8 show the use of  NChannel colour spaces. EXAMPLE 5 This example  shows  the use of calibrated CMYK process components.  EXAMPLE 6  shows the use of  Lab  process components. 10 0 obj % Colour space [  /DeviceN [/Magenta /Spot1 /Yellow /Spot2] alternateSpace tintTransform1 << %  Attributes  dictionary /Subtype /NChannel /Process << /ColorSpace [/ICCBased  CMYK_ICC profile ]/Components [/Cyan /Magenta /Yellow /Black]  >>/Colorants << /Spot1 [/Separation /Spot1  alternateSpace  tintTransform2 ]/Spot2 [/Separation /Spot2  alternateSpace  tintTransform3 ] >>>>]endobj EXAMPLE 6 10  0 obj %Colour space [ /DeviceN [/L /a /b /Spot1 /Spot2] alternateSpace tintTransform1 << % Attributes  dictionary /Subtype /NChannel /Process<< /ColorSpace [ /Lab << /WhitePoint ... /Range ... >> ]  /Components [/L /a /b] >>","/Colorants << /Spot1 [/Separation /Spot1  alternateSpace  tintTransform2  ]/Spot2 [/Separation /Spot2  alternateSpace  tintTransform3 ]>>>>]EXAMPLE 7 This example shows the recommended convention for  dealing with situations where a spot colorant and a  process colour component have the same name. Since the  names  array may not have duplicate names,",""],"174":["PDF 32000-1:2008 166 ' Adobe Systems Incorporated 2008  All rights reserved the process colours should be given different names, which are mapped to process components in the  Components  entry of the process dictionary. In this case,  Red  refers to a spot colorant;  ProcessRed , ProcessGreen , and  ProcessBlue  are mapped to the components of an  RGB colour space. 10 0 obj% Colour space [ /DeviceN[/ProcessRed /ProcessGreen /ProcessBlue /Red]  alternateSpace tintTransform1 << %  Attributes  dictionary /Subtype /NChannel /Process<< /ColorSpace [ /ICCBased  RGB_ICC profile ]/Components [/ProcessRed /ProcessGreen /ProcessBlue] >>/Colorants << /Red [/Separation /Red  alternateSpace  tintTransform2  ] >> >>]EXAMPLE 8 This example shows the use  of a mixing hints dictionary. 10 0 obj% Colour space [/DeviceN[/Magenta /Spot1 /Yellow /Spot2]  alternateSpace tintTransform1 <</Subtype /NChannel /Process << /ColorSpace [ /ICCBased  CMYK_ICC profile  ]/Components [/Cyan /Magenta /Yellow /Black] >>/Colorants << /Spot1 [/Separation /Spot1  alternateSpace  tintTransform2  ]/Spot2 [/Separation /Spot2  alternateSpace  tintTransform2  ]>>/MixingHints <</Solidities << /Spot1 1.0 /Spot2 0.0 >>/DotGain<< /Spot1  function1 /Spot2  function2 /Magenta  function3 /Yellow  function4 >>/PrintingOrder [/Magenta /Yellow /Spot1 /Spot2] >>>>]See 11.7.3, \"Spot Colours and Transparency\" , for further discussion of the role of  DeviceN  colour spaces in the  transparent imaging model.  8.6.6.6 Multitone Examples NOTE 1 The following examples illustrate various interesting and useful special cases of the use of  Indexed  and  DeviceN  colour spaces in combination to produce multitone colours.  NOTE 2EXAMPLE 1 and  EXAMPLE 2  in this sub-clause illustrate the use of  DeviceN to create duotone colour spaces.",""],"175":["' Adobe Systems Incorporated 2008  All rights reserved 167PDF 32000-1:2008 EXAMPLE 1 In this example, an  Indexed  colour space maps index values in the range 0 to 255 to a duotone  DeviceN space in cyan and black. In effect, the index values ar e treated as if they were tints of the duotone space,  which are then mapped into tints of the two underlyin g colorants. Only the beginning of the lookup table  string for the  Indexed  colour space is shown; the full table  would contain 256 two-byte entries, each  specifying a tint value for cyan and black, for a tota l of 512 bytes. If the alternate colour space of the  DeviceN  space is selected, the tint transformation function (object 15 in the example) maps the two tint  components for cyan and black to the four components for a  DeviceCMYK  colour space by supplying  zero values for the other two components.  10 0 obj %Colour space [  /Indexed [ /DeviceN  [ /Cyan /Black  ] /DeviceCMYK  15 0 R ]255< 6605  6806  6907 6B09 6C0A   >]endobj 15 0 obj % Tint transformation function <<  /FunctionType  4 /Domain  [ 0.0  1.0  0.0   1.0 ] /Range  [ 0.0  1.0   0.0   1.0  0.0  1.0  0.0  1.0  ] /Length  16>>","stream { 0 0 3 -1 roll }endstream endobj EXAMPLE 2 This example shows the definition of another duotone colour space, this time using black and gold  colorants (where gold is a spot colorant) and using a  CalRGB space as the alternate colour space. This  could be defined in the same way as in the preceding example, with a tint transformation function that  converts from the two tint components to colours in the alternate  CalRGB colour space. 30 0 obj % Colour space [  /Indexed  [ /DeviceN [ /Black /Gold ][ /CalRGB  <<  /WhitePoint  [ 1.0 1.0  1.0 ] /Gamma [ 2.2 2.2 2.2 ]>>]35 0 R  % Tint transformation function ]255 Lookup table  ]endobj NOTE 3 Given a formula for converting any comb ination of black and gold tints to calibrated  RGB, a 2-in, 3-out type 4  (PostScript calculator) function could be used for the ti nt transformation. Alternatively, a type 0 (sampled)  function could be used, but this would require a la rge number of sample points  to represent the function  accurately; for example, sampling each input variable  for 256 tint values between 0.0 and 1.0 would require  256","2"," = 65,536 samples. But since the  DeviceN colour space is being used as the base of an  Indexed  colour  space, there are actually only 256 possible co mbinations of black and gold tint values.",""],"176":["PDF 32000-1:2008 168 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 3 This example shows a more compact way to repres ent this information is to  put the alte rnate colour values directly into the lookup table alongside the  DeviceN  colour values. 10 0 obj% Colour space [  /Indexed  [ /DeviceN [ /Black /Gold  /None  /None  /None  ][ /CalRGB  <<  /WhitePoint  [ 1.0 1.0  1.0 ] /Gamma [ 2.2 2.2 2.2 ]>>]20 0 R  % Tint transformation function ]255 Lookup table  ]endobj NOTE 4 In  EXAMPLE 3 in this sub-clause, each entry in the lookup table has  five components: two for the black and  gold colorants and three more (specified as  None) for the equivalent  CalRGB colour components. If the black  and gold colorants are avail able on the output device, the  None components are ignored; if black and gold are  not available, the tint transformation function is  used to convert a five-component colour into a three- component equivalent in the alternate  CalRGB colour space. But because, by  construction, the third, fourth,  and fifth components are the  CalRGB components, the tint transformation  function can merely discard the first  two components and return the last three. This can be  readily expressed with a type 4 (PostScript calculator)  function (see  EXAMPLE 4  in this sub-clause).EXAMPLE 4 This example shows a type 4  (PostScript calculator) function. 20 0 obj% Tint transformation function <<  /FunctionType  4 /Domain  [ 0.0  1.0  0.0   1.0  0.0  1.0   0.0  1.0  0.0","  1.0 ] /Range  [ 0.0  1.0   0.0  1.0  0.0  1.0 ] /Length  27>>stream{ 5 3 roll pop pop  }endstream endobj EXAMPLE 5 This example uses an extension of the techni ques described above to pr oduce the quadtone (four- component) image shown in  Figure L.7  in  Annex L.5 0 obj % Image XObject <<  /Type  /XObject  /Subtype  /Image  /Width  288  /Height  288  /ColorSpace  10 0 R /BitsPerComponent  8 /Length  105278  /Filter /ASCII85Decode >>stream Data for grayscale image  endstream endobj 10 0 obj% Indexed colour space for image ["," /Indexed  15 0 R% Base colour space",""],"177":["' Adobe Systems Incorporated 2008  All rights reserved 169PDF 32000-1:2008 255% Table has 256 entries 30 0 R% Lookup table ]endobj 15 0 obj % Base colour space (  DeviceN ) for Indexed space [ /DeviceN[  /Black % Four colorants (black plus three spot colours)   /PANTONE#20216#20CVC   /PANTONE#20409#20CVC   /PANTONE#202985#20CVC   /None % Three components for alternate space   /None   /None ]16 0 R% Alternate colour space 20 0 R% Tint transformation function ]endobj 16 0 obj% Alternate colour space for DeviceN space [ /CalRGB << /WhitePoint  [ 1.0  1.0 1.0  ] >>]endobj 20 0 obj % Tint transformation function for DeviceN space <<  /FunctionType  4 /Domain  [ 0.0  1.0  0.0   1.0  0.0  1.0   0.0  1.0","  0.0  1.0  0.0  1.0   0.0   1.0 ] /Range  [ 0.0  1.0   0.0   1.0  0.0  1.0 ] /Length  44>>stream { 7 3 roll% Just discard first four values   pop  pop  pop pop}endstream endobj 30 0 obj % Lookup table for Indexed colour space <<  /Length  1975  /Filter [ /ASCII85Decode  /FlateDecode ]>>stream 8;T1BB2\"M7*!\"psYBt1k\\gY1T<D&tO]r*F7Hga*  Additional data (  seven components for each table entry  ) endstream endobj NOTE 5 As in the preceding examples, an  Indexed  colour space based on a  DeviceN  space is used to paint the  grayscale image shown on the left in the plate with four  colorants: black and three PANTONE spot colours. The  alternate colour space is a simple calibrated  RGB. Thus, the  DeviceN  colour space has seven components:  the four desired colorants plus the three components  of the alternate space. The example shows the image  XObject (see  8.9.5, \"Image Dictionaries\" ) representing the quadtone image,  followed by the colour space used  to interpret the image data.  8.6.7 Overprint Control The graphics state contains an  overprint parameter , controlled by the  OP and  op entries in a graphics state  parameter dictionary. Overprint control is useful mainly on devices that prod uce true physical separations, but it  is available on some composite devices as well. Althou gh the operation of this parameter is device-dependent,",""],"178":["PDF 32000-1:2008 170 ' Adobe Systems Incorporated 2008  All rights reserved it is described here rather than in the sub-clause on  colour rendering, because it pertains to an aspect of  painting in device colour spaces that is important to many applications.  Any painting operation marks some spec ific set of device colorants, depending on the colour space in which  the painting takes place. In a  Separation  or  DeviceN  colour space, the colorants to be marked shall be  specified explicitly; in a device or CI E-based colour space, they shall be implied by the process colour model of  the output device (see clause  10, \"Rendering\" ). The overprint parameter is a boolean flag that determines how  painting operations affect colorants other than those explicit ly or implicitly specified by  the current colour space.  If the overprint parameter is  false  (the default value), painting a colour in any colour space shall cause the  corresponding areas of unspecified colorants to be erased  (painted with a tint value of  0.0). The effect is that  the colour at any position on the page is whatever wa s painted there last, which is  consistent with the normal  painting behaviour of the opaque imaging model.  If the overprint parameter is  true and the output device supports overprinting, erasing actions shall not be  performed; anything previously paint ed in other colorants is left undisturbed. Consequently, the colour at a  given position on the page may be a combined result of seve ral painting operations in different colorants. The  effect produced by such overprinting is device-dependent and is not defined here.  NOTE 1 Not all devices support overprinting. Furthermore, m any PostScript printers support it only when separations  are being produced, and not  for composite output.  If overprinting is not supported, the value of the overprint parameter shall be ignored.  An additional graphics state parameter, the  overprint mode (PDF 1.3) , shall affect the interpretation of a tint  value of 0.0 for a colour component in a  DeviceCMYK  colour space when overprinting is enabled. This  parameter is controlled by the  OPM entry in a graphics state parameter dictionary; it shall have an effect only  when the overprint parameter is  true , as described above.  When colours are specified in a  DeviceCMYK colour space and the native colour space of the output device is  also DeviceCMYK , each of the source colour components controls the corresponding device colorant directly.  Ordinarily, each source colour component value replac es the value previously painted for the corresponding  device colorant, no matter what the ne w value is; this is the default behavio ur, specified by overprint mode 0.  When the overprint mode is 1 (also called  nonzero overprint mode ), a tint value of 0.0 for a source colour  component shall leave the corresponding component of the  previously painted colour unchanged. The effect is  equivalent to painting in a  DeviceN  colour space that includes only those components whose values are  nonzero. EXAMPLE If the overprint parameter is  true and the overprint mode is 1, the operation  0. 2 0. 3 0.0 1.0  kis equivalent to  0. 2 0. 3 1.0 scnin the colour space shown in this example. 10 0 obj%Colour space [ /DeviceN [ /Cyan /Magenta  /Black ] /DeviceCMYK  15 0 R] endobj 15 0 obj% Tint transformation function <<  /FunctionType  4 /Domain  [ 0.0  1.0   0.0   1.0  0.0  1.0 ] /Range  [ 0.0  1.0  0.0  1.0   0.0"," 1.0  0.0  1.0 ]",""],"179":["' Adobe Systems Incorporated 2008  All rights reserved 171PDF 32000-1:2008  /Length  13>>stream { 0 exch  }endstream endobj Nonzero overprint mode shall apply only to painting operations that use the current colour in the graphics state  when the current colour space is  DeviceCMYK  (or is implicit ly converted to  DeviceCMYK ; see 8.6.5.7, \"Implicit  Conversion of CIE-Based Colour Spaces\" ). It shall not apply to the painting  of images or to any colours that are  the result of a computation, such as those in a shading pattern or conversions from some other colour space. It  also shall not apply if the devices native colour space is not  DeviceCMYK ; in that case, source colours shall be  converted to the devices native colour space, and all co mponents participate in the conversion, whatever their  values.  NOTE 2 This is shown explicitly in the alternate co lour space and tint transformation function of the  DeviceN  colour  space (see  EXAMPLE 3  in 8.6.6, \"Special Colour Spaces\" ). See 11.7.4, \"Overprinting and Transparency\" , for further discussion of the role of overprinting in the transparent  imaging model. 8.6.8 Colour Operators Ta b l e  74 lists the PDF operators that control colour spaces  and colour values. Also colour-related is the  graphics state operator  ri, listed in Ta b l e  57 and discussed under  8.6.5.8, \"Rendering Intents\" . Colour operators  may appear at the page description level or inside text objects (see  Figure 9  in Annex L).  Table  74   Colour Operators   Operands Operator Description name CS(PDF 1.1)  Set the current colour space to  use for stroking operations. The  operand  name  shall be a name object. If the colour space is one that can  be specified by a name and no additional parameters ( DeviceGray , DeviceRGB , DeviceCMYK , and certain cases of  Pattern), the name may be specified directly. Otherwise,  it shall be a name defined in the  ColorSpace  subdictionary of the current resource dictionary (see  7.8.3, \"Resource Dictionaries\" ); the associated value shall be an array  describing the colour space (see  8.6.3, \"Colour Space Families\" ).  The names  DeviceGray , DeviceRGB , DeviceCMYK , and  Patternalways identify the corresponding colour spaces directly; they never refer  to resources in the  ColorSpace  subdictionary.  The  CS operator shall also set the curren t stroking colour to its initial  value, which depends on the colour space:  In a D eviceGray , DeviceRGB , CalGray , or CalRGB  colour space, the  initial colour shall have all components equal to 0.0.  In a D eviceCMYK  colour space, the initial colour shall be  [ 0.0 0.0 0.0 1.0 ].  In a La b  or ICCBased  colour space, the initial colour shall have all  components equal to 0.0 unless that falls outside the intervals specified  by the spaces  Range  entry, in which case the nearest valid value shall be  substituted.  In an In dexed  colour space, the initial colour value shall be 0.  In a Sep aration  or DeviceN  colour space, the initial tint value shall be 1.0  for all colorants.  In a Pattern colour space, the initial colour shall be a pattern object that  causes nothing to be painted.  name cs(PDF 1.1)  Same as  CS but used for nonstroking operations.",""],"180":["PDF 32000-1:2008 172 ' Adobe Systems Incorporated 2008  All rights reserved Invoking operators that specif y colours or other colour-related parameters  in the graphics state is restricted in  certain circumstances. This restrict ion occurs when defining graphical figu res whose colours shall be specified  separately each time they are used. Specifically , the restriction applies in these circumstances:  In any glyph description that uses the  d1 operator (see  9.6.5, \"Type 3 Fonts\" )  In the content stre am of an uncoloured tiling pattern (see  8.7.3.3, \"Uncoloured Tiling Patterns\" ) c1 cnSC(PDF 1.1)  Set the colour to use for stroking operations in a device, CIE- based (other than  ICCBased ), or Indexed  colour space. The number of  operands required and their interpretation depends on the current  stroking colour space:  For DeviceGray , CalGray , and  Indexed  colour spaces, one operand  shall be required ( n   1). For D eviceRGB , CalRGB , and  Lab  colour spaces, three operands shall  be required ( n   3). For D eviceCMYK , four operands shall be required ( n   4). c1 cnc1 cn name SCN SCN(PDF  1.2) Same as SC but also supports  Pattern, Separation, DeviceN  and ICCBased  colour spaces.  If the current stroking colour space is a  Separation , DeviceN , or ICCBased  colour space, the operands  c1 cn shall be numbers. The  number of operands and their interpre tation depends on the colour space.  If the current stroking colour space is a  Pattern colour space,  name  shall  be the name of an entry in the  Pattern subdictionary of the current  resource dictionary (see  7.8.3, \"Resource Dictionaries\" ). For an uncoloured tiling pattern ( PatternType    1 and  PaintType   2), c1 cnshall be component values specifying  a colour in the patterns underlying  colour space. For other types of pa tterns, these operands shall not be  specified.  c1 cnsc(PDF  1.1) Sam e as  SC but used for nonstroking operations.  c1 cnc1 cn name scn scn (PDF  1.2) Sam e as  SCN but used for nonstroking operations.  gray GSet the stroking colour space to  DeviceGray (or the  DefaultGray  colour space; see  8.6.5.6, \"Default  Colour Spaces\" ) and set the gray level to use  for stroking operations.  gray shall be a number between 0.0 (black) and  1.0 (white).  gray gSame as  G but used for nonstroking operations.  r g bRGSet the stroking colour space to  DeviceRGB (or the DefaultRGB colour  space; see  8.6.5.6, \"Default Colour Spaces\" ) and set the colour to use for  stroking operations. Each operand shall be a number between 0.0  (minimum intensity) and  1.0 (maximum intensity).  r g brg","Same as  RG but used for nonstroking operations.  c m y kKSet the stroking colour space to  DeviceCMYK  (or the  DefaultCMYK colour space; see  8.6.5.6, \"Default Colour Spaces\" ) and set the colour to  use for stroking operations. Each o perand shall be a number between 0.0  (zero concentration) and 1.0 (maximum  concentration). The behaviour of  this operator is affected by the overprint mode (see  8.6.7, \"Overprint  Control\" ).  c m y kkSame as  K but used for nonstroking operations.  Table 74   Colour Operators (continued) Operands Operator Description",""],"181":["' Adobe Systems Incorporated 2008  All rights reserved 173PDF 32000-1:2008 In these circumstances, the following actions cause an error:   Invoking any of the following operators:  CSscnKcsGkSCgri SCNRG sh scrg Invoking the  gs operator with any of the following entries in the graphics state parameter dictionary:  TRBG UCRTR2BG2 UCR2 HT Painting an image. However, painting an  image mask  (see  8.9.6.2, \"Stencil Masking\" ) shall be permitted  because it does not specify colours;  instead, it designates places where the current colour shall be  painted.  8.7 Patterns 8.7.1 General Patterns come in two varieties:  T iling patterns  consist of a small graphical figure (called a  pattern cell ) that is replicated at fixed horizontal  and vertical intervals to fill the area to be painted. The graphics object s to use for tiling  shall be described by a content stream.  Sha ding patterns  define a  gradient fill  that produces a smooth transition between colours across the area.  The colour to use shall be specified as a function  of position using any of  a variety of methods.  NOTE 1 When operators such as  S (stroke),  f (fill), and Tj (show text) paint an area of  the page with the current colour,  they ordinarily apply a single colour that covers the area uniformly. However, it is also possible to apply paint  that consists of a repeating graphical figure or a smooth ly varying colour gradient instead of a simple colour.  Such a repeating figure or smooth gradient is called a  pattern.  Patterns are quite general, and have many  uses; for example, they can be used to create variou s graphical textures, such as weaves, brick walls,  sunbursts, and similar geometrical and chromatic effects.  NOTE 2 Older techniques such as defining a pattern by using ch aracter glyphs in a special font and painting them  repeatedly with the  Tj operator should not be used. Another technique,  defining patterns as halftone screens,  should not be used because the effects produced are device-dependent.  Patterns shall be specifie d in a special family of colour spaces named  Pattern . These spaces shall use  pattern  objects  as the equivalent of colour values instead of t he numeric component values used with other spaces. A  pattern object shall be a dictionary or a stream, depending on the type of pattern; the term  pattern dictionary  is  used generically throughout this sub-clause to refer to eit her a dictionary object or the dictionary portion of a  stream object. (Those pattern objects that are streams are specifically identified as such in the descriptions of  particular pattern types; unless otherwise stated, they ar e understood to be simple dictionaries instead.) This  sub-clause describes  Pattern colour spaces and the specification of colour values within them.  NOTE 3 See  8.6, \"Colour Spaces\" , for information about colour spaces and colour values in general and  11.6.7,  \"Patterns and Transparency\" , for further discussion of  the treatment of patterns  in the transparent imaging  model.",""],"182":["PDF 32000-1:2008 174 ' Adobe Systems Incorporated 2008  All rights reserved 8.7.2 General Properties of Patterns A pattern dictionary contains descriptive information defi ning the appearance and prop erties of a pattern. All  pattern dictionaries shall contain an entry named  PatternType , whose value identifies the kind of pattern the  dictionary describes: type 1 for a tilin g pattern or type 2 for a shading patt ern. The remaining contents of the  dictionary depend on the pattern type and are detailed in the sub-clauses on individual pattern types.  All patterns shall be treated as colours; a  Pattern colour space shall be established with the  CS or  cs operator  just like other colour spaces, and a particular patter n shall be installed as t he current colour with the  SCN or  scn  operator (see  Ta b l e  74).  A patterns appearance is described with respect to its  own internal coordinate system. Every pattern has a  pattern matrix , a transformation matrix that  maps the patterns internal c oordinate system to the default  coordinate system of the patterns  parent content stream  (the content stream in which the pattern is defined as  a resource). The concatenation of the pattern matrix wi th that of the parent cont ent stream establishes the  pattern coordinate space , within which all graphics objects in  the pattern shall be interpreted.  NOTE 1 If a pattern is used on a  page, the pattern appears in the  Pattern subdictionary of that pages resource  dictionary, and the pattern matrix maps pattern space  to the default (initial) coordinate space of the page.  Changes to the pages transformation matrix that occur  within the pages content stream, such as rotation and  scaling, have no effect on the pattern; it maintains its  original relationship to the page no matter where on the  page it is used. Similarly, if a patter n is used within a form XObject (see  8.10, \"Form XObjects\" ), the pattern  matrix maps pattern space to the forms default user sp ace (that is, the form coordinate space at the time the  form is painted with the  Do operator). A pattern may be used within anot her pattern; the inner patterns matrix  defines its relationship to the pattern space of the outer pattern.  NOTE 2 PostScript allows a pattern to be defined in one co ntext but used in another. For example, a pattern might be  defined on a page (that is, its pattern matrix maps the pa ttern coordinate space to the user space of the page)  but be used in a form on that page, so that its relation ship to the page is independent of each individual  placement of the form. PDF does not su pport this feature; in PDF, all patterns shall be local to the context in  which they are defined.  8.7.3 Tiling Patterns 8.7.3.1 General A tiling p attern  consists of a small graphical figure called a  pattern cell . Painting with the pattern replicates the  cell at fixed horizontal and vertical in tervals to fill an area. The effect is  as if the figure we re painted on the  surface of a clear glass tile, identical copies of whic h were then laid down in an array covering the area and  trimmed to its boundaries . This process is called  tiling the area.  The pattern cell can in clude graphical element s such as filled ar eas, text, and sampled  images. Its  shape need not be rectangular, and the spacing of tiles can differ  from the dimensions of the cell itself. When performing  painting operations such as  S (stroke) or  f (fill), the conforming re ader shall paint the cell on the current page as  many times as necessary to fill an area . The order in which individual tiles (i nstances of the cell) are painted is  unspecified and unpredictable; figures  on adjacent tiles should not overlap.  The appearance of the pattern cell shall be defined by  a content stream containing the painting operators  needed to paint one instance of the cell. Beside s the usual entries common to all streams (see  Table  5), this streams dictionary may contain the additional entries listed in  Table  75.  Table  75   Additional Entries Specific to a Type 1 Pattern Dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Pattern for a pattern dictionary.  PatternType integer (Required)  A code identifying the type of pattern that this dictionary  describes; shall be 1 for a tiling pattern.",""],"183":["' Adobe Systems Incorporated 2008  All rights reserved 175PDF 32000-1:2008 PaintType integer (Required)  A code that determines how the colour of the pattern cell  shall be specified:  a)Coloured  tiling pattern . The patterns content stream shall specify the colours used to paint the pattern cell. When the content  stream begins execution, the curr ent colour is the one that was  initially in effect in the pattern s parent content stream. This is  similar to the definition of the pattern matrix; see  8.7.2, \"General  Properties of Patterns\" . b)Unco loured tiling pattern . The patterns content stream shall not  specify any colour information. In stead, the entire pattern cell is  painted with a separately specified colour each time the pattern is  used. Essentially, the cont ent stream describes a  stencil through  which the current colour shall be poured. The content stream  shall not invoke operators that sp ecify colours or other colour- related parameters in the graphics state; otherwise, an error  occurs (see 8.6.8, \"Colour Operators\" ). The content stream may  paint an image mask, however, since it does not specify any  colour information (see 8.9.6.2, \"Stencil Masking\" ). TilingType integer (Required)  A code that controls adjustm ents to the spacing of tiles  relative to the device pixel grid:  a)C onstant spacing . Pattern cells shall be spaced  consistentlythat is, by a multiple of a device pixel. To achieve  this, the conforming reader may need to distort the pattern cell  slightly by making small adjustments to  XStep , YStep , and the  transformation matrix. The amount of distortion shall not exceed 1  device pixel.  b)No distortion. The pattern cell shall not be distorted, but the  spacing between pattern cells may vary by as much as 1 device  pixel, both horizontally and vertically, when the pattern is painted.  This achieves the spacing requested by  XStep  and  YStep  on  average  but not necessarily for each individual pattern cell.  c)Con stant spacing and faster tiling . Pattern cells shall be spaced  consistently as in tiling type 1 but with additional distortion  permitted to enable a more efficient implementation.  BBoxrectangle (Required)  An array of four numbers in the pattern coordinate system  giving the coordinates of the left, bottom, right, and top edges,  respectively, of the pattern cells bounding box. These boundaries  shall be used to clip the pattern cell.  XStep number (Required)  The desired horizontal spacing between pattern cells,  measured in the pattern coordinate system.  YStep number (Required)  The desired vertical spacing between pattern cells,  measured in the pattern coordinate system.  NOTEXStep and  YStep  may differ from the dimensions of the  pattern cell implied by the  BBox entry. This allows tiling  with irregularly shaped figures. XStep  and   YStep  may be either positive  or negative but shall not be zero. Resources dictionary (Required)  A resource dictionary that s hall contain all of the named  resources required by the pa tterns content  stream (see  7.8.3,  \"Resource Dictionaries\" ). Matrixarray(Optional)  An array of six numbers specifying the pattern matrix (see  8.7.2, \"General Prop erties of Patterns\" ). Default value: the identity  matrix [ 1 0 0 1 0 0 ].  Table 75   Additional Entries Specific to a Type 1 Pattern Dictionary (continued) KeyType Value",""],"184":["PDF 32000-1:2008 176 ' Adobe Systems Incorporated 2008  All rights reserved The pattern dictionarys  BBox , XStep , and  YStep  values shall be interpreted in the pattern coordinate system,  and the graphics objects in the patterns content stream shall be defined with respect to that coordinate system.  The placement of pattern cells in the t iling is based on the location of one  key pattern cell , which is then  displaced by multiples of  XStep  and  YStep  to replicate the pattern. The origin of the key pattern cell coincides  with the origin of the pattern coordinate system. The phase of the  tiling can be controlled by the translation  components of the  Matrix  entry in the pattern dictionary.  Prior to painting with a tiling  pattern, the conforming writer shall establis h the pattern as the current colour in the  graphics state. Subsequent painting operations tile th e painted areas with the pattern cell described by the  patterns content stream. To obtain the pattern cell, the conforming reader shall perform these steps:  a) Saves the current graphics state (as if by invoking the  q operator) b) Installs the graphics state that was in effect at the begi nning of the patterns parent co ntent stream, with the current  transformation matrix altered by the pattern matrix as described in  8.7.2, \"General Properties of Patterns\"  c) Paints the graphics obje cts specified in the pa tterns content stream  d) Restores the saved graphics state (as if by invoking the  Q operator) NOTE The patterns content stream should not set any of  the device-dependent parameters  in the graphics state (see  Ta b l e  53) because it may result in incorrect output.  8.7.3.2 Coloured Tiling Patterns A col oured tiling pattern  is a pattern whose colour is self-contained. In the course of painting the pattern cell,  the patterns content stream explicitly sets the colour of  each graphical element it paints. A single pattern cell  may contain elements that are paint ed different colours; it may also co ntain sampled gra yscale or colour  images. This type of pattern is identi fied by a pattern type of 1 and a paint type of 1 in the pattern dictionary.  When the current colour space is a  Pattern  space, a coloured tiling pattern  shall be selected  as the current  colour by supplying its name as the single operand to the  SCN or  scn  operator. This name shall be the key of  an entry in the  Pattern subdictionary of the current resource dictionary (see  7.8.3, \"Resource Dictionaries\" ), whose value shall be the stream object representing the pattern. Since the pattern defines its own colour  information, no additional operands representing colour components shall be specified to  SCN or  scn . EXAMPLE 1 If P1 is the name of a pattern resource in the current reso urce dictionary, the follo wing code establishes it  as the current nonstroking colour:  /Pattern cs /P1 scn NOTE 1 Subsequent executio ns of nonstroking painti ng operators, such as  f (fill), Tj (show text), or Do (paint external  object) with an image mask, use the designated pa ttern to tile the ar eas to be painted.  NOTE 2 The following defines a page (object 5) that paints  three circles and a triangle using a coloured tiling pattern  (object 15) over a yellow background. The pattern consists  of the symbols for the four suits of playing cards  (spades, hearts, diamonds, and clubs), which are char acter glyphs taken from the ZapfDingbats font (see  D.6,  \"ZapfDingbats Set and Encoding\" ); the patterns content stream spec ifies the colour  of each glyph.  Figure L.8 in Annex L shows the results.  EXAMPLE 2 5  0 obj % Page object <<  /Type  /Page  /Parent  2 0 R /Resources  10 0 R  /Contents  30 0 R /CropBox  [ 0 0 225  225 ]>>endobj 10 0 obj% Resource dictionary for page << /Pattern  << /P1 15 0 R  >>",""],"185":["' Adobe Systems Incorporated 2008  All rights reserved 177PDF 32000-1:2008 >>endobj 15 0 obj % Pattern definition <<  /Type  /Pattern  /PatternType  1% Tiling pattern  /PaintType  1% Coloured  /TilingType  2 /BBox [ 0 0 100 100 ] /XStep  100   /YStep  100  /Resources  16 0 R  /Matrix  [ 0.4  0.0 0.0  0.4 0.0  0.0 ] /Length  183>>stream BT% Begin text object /F1  1 Tf % Set text font and size 64 0 0 64 7.1771  2.4414  Tm% Set text matrix 0 Tc % Set character spacing 0 Tw % Set word spacing 1.0  0.0 0.0  rg% Set nonstroking colour to red ( \\001"," ) Tj% Show spade glyph 0.7478  -0.007 TD% Move text position0.0  1.0 0.0  rg% Set nonstroking colour to green ( \\002  ) Tj% Show heart glyph -0.7323 0.7813  TD% Move text position0.0  0.0 1.0  rg% Set nonstroking colour to blue ( \\003  ) Tj% Show diamond glyph 0.6913  0.007 TD% Move text position0.0  0.0 0.0  rg% Set nonstroking colour to black ( \\004  ) Tj% Show club glyph ET% End text object endstream endobj 16 0 obj % Resource dictionary for pattern << /Font  << /F1  20 0 R  >>>>endobj 20 0 obj % Font for pattern <<  /Type  /Font  /Subtype  /Type1  /Encoding  21 0 R  /BaseFont  /ZapfDingbats >>","endobj 21 0 obj % Font encoding <<  /Type  /Encoding  /Differences  [ 1 /a109 /a110  /a111  /a112  ]>>endobj 30 0 obj % Contents of page <<  /Length  1252  >>stream 0.0  G% Set stroking colour to black",""],"186":["PDF 32000-1:2008 178 ' Adobe Systems Incorporated 2008  All rights reserved 1.0  1.0 0.0  rg% Set nonstroking colour to yellow 25 175  175  -150 re% Construct rectangular path f% Fill path /Pattern  cs% Set pattern colour space /P1 scn% Set pattern as nonstroking colour 99.92  49.92  m% Start new path 99.92  77.52  77.52  99.92 49.92 99.92 c % Construct lower-left circle 22.32  99.92  -0.08 77.52  -0.08 49.92 c-0.08 22.32  22.32  -0.08 49.92 -0.08 c77.52  -0.08 99.92  22.32  99.92  49.92  cB% Fill and stroke path 224.96  49.92 m% Start new path 224.96  77.52 202.56  99.92  174.96  99.92 c % Construct lower-right circle 147.36  99.92 124.96  77.52  124.96  49.92 c124.96  22.32","147.36  -0.08 174.96  -0.08 c202.56  -0.08 224.96  22.32 224.96  49.92  cB% Fill and stroke path 87.56  201.70  m% Start new path 63.66  187.90  55.46 157.32  69.26  133.40  c % Construct upper circle 83.06  109.50  113.66  101.30  137.56  115.10  c161.46  128.90  169.66  159.50  155.86  183.40  c142.06  207.30  111.46  215.50  87.56 201.70  cB% Fill and stroke path 50 50 m% Start new path 175  50 l% Construct triangular path 112.5  158.253  lb% Close, fill, and stroke path endstream endobj NOTE 3 Several features of  EXAMPLE 2 in this sub-clause are noteworthy:  The three circles and the triangle are painted with the sa me pattern. The pattern cells align, even though the  circles and triangle are not aligned with respect to t he pattern cell. For example, the position of the blue  diamonds varies relative to the three circles.  The pattern cell does not completely cover the tile: it  leaves the spaces between the glyphs unpainted. When  the tiling pattern is used as a colour, the existing  background (the yellow rectangle) shows through these  unpainted areas.  8.7.3.3 Uncoloured Tiling Patterns An un coloured tiling pattern  is a pattern that has no inherent colour: the colour shall be specified separately  whenever the pattern is used. It provi des a way to tile different regions of the page with pattern cells having the  same shape but different colours. This type of pattern sh all be identified by a pattern type of 1 and a paint type  of 2 in the pattern dictionary. The patterns content stream  shall not explicitly specif y any colours; it may paint  an image mask (see  8.9.6.2, \"Stencil Masking\" ) but no other kind of image.  A Pattern colour space representing  an uncoloured tiling pattern shall have  a parameter: an object identifying  the underlying colour space  in which the actual colour of the pattern shall be specified. The underlying colour  space shall be given as the second element of the array that defines the  Pattern colour space.  EXAMPLE 1 The array  [","/Pattern  /DeviceRGB  ]defines a  Pattern colour space with  DeviceRGB  as its underlying colour space.",""],"187":["' Adobe Systems Incorporated 2008  All rights reserved 179PDF 32000-1:2008 NOTE The underlying colour space cannot be another  Pattern colour space.  Operands supplied to the  SCN or scn  operator in such a colour space shall include a colour value in the  underlying colour space, specified by one or more numeric colour components, as well as the name of a  pattern object representing an  uncoloured tiling pattern.  EXAMPLE 2 If the current resource dictionary (see  7.8.3, \"Resource Dictionaries\" ) defines Cs3 as the name of a  ColorSpace  resource whose value is the  Pattern colour space shown above and P2 as a  Patternresource denoting an uncoloured tiling pattern, the code  /Cs3 cs0.30 0.75 0.21 /P2 scn establishes Cs3 as the current nonstr oking colour space and P2 as the current nonstroking colour, to be  painted in the colour represented  by the specified components in the  DeviceRGB  colour space.  Subsequent executions of nonstroking painting operators, such as  f (fill), Tj (show text), and  Do (paint  external object) with an image mask, us e the designated pattern and colour to tile the areas to be painted.  The same pattern can be used repeatedly with a different colour each time.  EXAMPLE 3 This example is similar to  EXAMPLE 2  in  8.7.3.2, except that it uses an uncoloured tiling pattern to paint  the three circles and the triangle,  each in a different colour (see  Figure L.9  in Annex L ). To do so, it  supplies four operands each time it invokes t he scn operator: three numbers denoting the colour  components in the underlying  DeviceRGB  colour space, along with the name of the pattern.  5 0 obj % Page object <<  /Type  /Page  /Parent  2 0 R /Resources  10 0 R  /Contents  30 0 R /CropBox  [ 0 0 225  225 ]>>endobj 10 0 obj % Resource dictionary for page <<  /ColorSpace  << /Cs12 12 0 R  >> /Pattern  << /P1 15 0 R  >>>>endobj 12","0 obj %Colour space [ /Pattern  /DeviceRGB  ]endobj 15 0 obj % Pattern definition <<  /Type  /Pattern  /PatternType  1% Tiling pattern  /PaintType  2% Uncoloured  /TilingType  2 /BBox [ 0 0 100 100 ] /XStep  100   /YStep  100  /Resources  16 0 R  /Matrix  [ 0.4  0.0 0.0  0.4 0.0  0.0 ] /Length  127>>stream BT% Begin text object /F1  1 Tf% Set text font and size 64 0 0 64 7.1771  2.4414  Tm% Set text matrix 0 Tc % Set character spacing 0 Tw % Set word spacing (","\\001  ) Tj% Show spade glyph",""],"188":["PDF 32000-1:2008 180 ' Adobe Systems Incorporated 2008  All rights reserved 0.7478  -0.007 TD% Move text position ( \\002 ) Tj % Show heart glyph -0.7323  0.7813  TD% Move text position ( \\003 ) Tj % Show diamond glyph 0.6913  0.007 TD% Move text position ( \\004 ) Tj% Show club glyph ET% End text object endstream endobj 16 0 obj% Resource dictionary for pattern << /Font  << /F1  20 0 R >>>>endobj 20 0 obj% Font for pattern <<  /Type  /Font  /Subtype  /Type1  /Encoding  21 0 R  /BaseFont  /ZapfDingbats >>endobj 21 0 obj% Font encoding <<  /Type  /Encoding  /Differences  [ 1 /a109 /a110  /a111  /a112","]>>endobj 30 0 obj% Contents of page <<  /Length  1316  >>stream0.0  G% Set stroking colour to black 1.0  1.0 0.0  rg% Set nonstroking colour to yellow 25 175  175  -150 re% Construct rectangular path f% Fill path /Cs12 cs% Set pattern colour space 0.77  0.20 0.00 /P1 scn% Set nonstroking colour and pattern 99.92  49.92  m% Start new path 99.92  77.52  77.52  99.92 49.92 99.92 c % Construct lower-left circle 22.32  99.92  -0.08 77.52  -0.08 49.92 c-0.08 22.32  22.32  -0.08 49.92 -0.08 c77.52  -0.08 99.92  22.32  99.92  49.92  cB% Fill and stroke path 0.2  0.8 0.4","/P1 scn% Change nonstroking colour 224.96  49.92 m% Start new path 224.96  77.52 202.56  99.92  174.96  99.92 c % Construct lower-right circle 147.36  99.92 124.96  77.52  124.96  49.92 c124.96  22.32 147.36  -0.08 174.96  -0.08 c202.56  -0.08 224.96  22.32 224.96  49.92  cB% Fill and stroke path 0.3  0.7 1.0  /P1 scn% Change nonstroking colour 87.56  201.70  m% Start new path 63.66  187.90  55.46 157.30  69.26  133.40  c % Construct upper circle 83.06  109.50  113.66  101.30  137.56  115.10  c161.46  128.90  169.66  159.50  155.86  183.40  c142.06  207.30  111.46  215.50"," 87.56 201.70  cB% Fill and stroke path",""],"189":["' Adobe Systems Incorporated 2008  All rights reserved 181PDF 32000-1:2008 0.5  0.2 1.0  /P1 scn% Change nonstroking colour 50 50 m% Start new path 175  50 l% Construct triangular path 112.5  158.253  lb% Close, fill, and stroke path endstream endobj 8.7.4 Shading Patterns 8.7.4.1 General Shading patterns  (PDF 1.3) provide a smooth transition between colours across an area to be painted,  independent of the resolution of any pa rticular output device and without specifying the number of steps in the  colour transition. Patterns of this type shall be descri bed by pattern dictionaries with a pattern type of 2.  Ta b l e  76 shows the contents of this type of dictionary.  The most significant entry is  Shading, whose value shall be a  shading object  defining the properties of the  shading patterns  gradient fill . This is a complex paint that determines the type of colour transition the shading  pattern produces when painted across an area. A shading object shall be a dictionary or a stream, depending  on the type of shading; the term  shading dictionary  is used generically throughout this sub-clause to refer to  either a dictionary object or the dictionary portion of a stream object. (Those shading objects that are streams  are specifically identified as such in the descriptions of  particular shading types; unless otherwise stated, they  are understood to be simp le dictionaries instead.)  By setting a shading pattern as the current colour in th e graphics state, a PDF cont ent stream may use it with  painting operators such as  f (fill), S (stroke),  Tj (show text), or  Do (paint external object) with an image mask to  paint a path, character glyph, or mask with a smooth colour  transition. When a shading is used in this way, the  geometry of the gradient fill is independen t of that of the object being painted.  8.7.4.2 Shading Operator When the area to be painted is a relati vely simple shape whose geometry is th e same as that of the gradient fill  itself, the  sh operator may be used instead of  the usual painting operators.  sh accepts a shading dictionary as  an operand and ap plies the corresponding gr adient fill directly to current user space. This op erator does not Table  76   Entries in a Type 2 Pattern Dictionary   KeyType Value Type name (Optional)   The type of PDF object that this dictionary describes; if  present, shall be  Pattern for a pattern dictionary.  PatternType integer (Required)  A code identifying the type of pattern that this dictionary  describes; shall be 2 for a shading pattern.  Shadingdictionary  or stream(Required)  A shading object (see below) defining the shading patterns  gradient fill. The contents of the dictio nary shall consist of the entries in  Table  78 and those in one of Tables  79 to 84. Matrixarray(Optional)  An array of six numbers specifying the pattern matrix (see  8.7.2, \"General Prop erties of Patterns\" ). Default value: the identity  matrix [ 1 0 0 1 0 0 ].  ExtGState dictionary (Optional)  A graphics state parameter dictionary (see  8.4.5, \"Graphics  State Parameter Dictionaries\" ) containing graphics state parameters to  be put into effect temporarily while the shading pattern is painted. Any  parameters that are so specified  shall be inherited from the graphics  state that was in effect at the begi nning of the content stream in which  the pattern is defined as a resource.",""],"190":["PDF 32000-1:2008 182 ' Adobe Systems Incorporated 2008  All rights reserved require the creation of a pattern dictionary or a path and works without reference to the current colour in the  graphics state.  Table  77 describes the  sh operator.  NOTE Patterns defined by type  2 pattern dictionaries do not  tile. To create a tiling pattern containing a gradient fill,  invoke the sh operator from within the content st ream of a type 1 (tiling) pattern.  8.7.4.3 Shading Dictionaries A shading dictionary specifies details of  a particular gradient fill, including  the type of shading to be used, the  geometry of the area to be shaded, and the geometry of the gradient fill. Va rious shading types are available,  depending on the value of the dictionarys  ShadingType  entry:   Function-based shadings (type 1) define the colour of every point in the domain using a mathematical  function (not necessarily  smooth or continuous).   Axial shadings (type 2) define a colour blend along a line between two points, optionally extended beyond  the boundary points by continuing the boundary colours.   Radial shadings (type 3) define a blend between two  circles, optionally extended beyond the boundary  circles by continuing the boundary colours. This ty pe of shading is commonly used to represent three- dimensional spheres and cones.   Free-form Gouraud-shaded triangle meshes (type  4) define a common construct used by many three- dimensional applications to represent complex coloured  and shaded shapes. Vertices are specified in free- form geometry.  Lattice-form Gouraud-shaded triangle meshes (type  5) are based on the same geometrical construct as  type 4 but with vertices specified  as a pseudorectangular lattice.   Coons patch meshes (type 6) construct a shading from one or more colour patches, each bounded by four  cubic BØzier curves.   Tensor-product patch meshes (type 7) are similar to  type 6 but with additional control points in each patch,  affording greater control over colour mapping.  NOTE 1Ta b l e  78 shows the entries that all shading dictionaries shar e in common; entries specific to particular shading  types are described in the relevant sub-clause.  NOTE 2 The term  target coordinate space , used in many of the following descrip tions, refers to the coordinate space  into which a shading is painted. For shadings used with a type 2 pattern dictionary, this is the pattern  Table  77   Shading Operator   Operands Operator Description name sh(PDF 1.3) Pain t the shape and colour shading described by a shading  dictionary, subject to the current clipping path. The current colour in the  graphics state is neither used nor altered.  The effect is different from that of  painting a path using a shading pattern as the current colour.  name  is the name of a shading dictionary resource in the  Shadingsubdictionary of the current resource dictionary (see  7.8.3, \"Resource  Dictionaries\" ). All coordinates in the shading dictionary are interpreted  relative to the current user space. (By  contrast, when a shading dictionary is  used in a type 2 pattern, the coordinates are expressed in pattern space.) All  colours are interpreted in the colour space identified by the shading  dictionarys  ColorSpace  entry (see  Ta b l e  78). The  B ackground  entry, if  present, is ignored.  This operator should be applied only  to bounded or geometrically defined  shadings. If applied to an unbounded shading, it paints the shadings  gradient fill across the entire clippi ng region, which may be time-consuming.",""],"191":["' Adobe Systems Incorporated 2008  All rights reserved 183PDF 32000-1:2008 coordinate space, discussed in  8.7.2, \"General Pro perties of Patterns\" . For shadings used directly with the  shoperator, it is the current user space.  Shading types 4 to 7 shall be defined by a stream cont aining descriptive data characterizing the shadings  gradient fill. In these cases, the  shading dictionary is also a stream  dictionary and may contain any of the  standard entries common to all streams (see  Ta b l e  5). In particular, shall include a  Length  entry.  In addition, some shading dictionaries also include a  Function entry whose value shall be a function object  (dictionary or stream) defining how co lours vary across the area to be  shaded. In such cases, the shading  Table  78   Entries Common to A ll Shading Dictionaries   KeyType Value ShadingType integer (Required)  The shading type:  1 Function-based shading  2 Axial shading  3 Radial shading  4 Free-form Gouraud-shaded triangle mesh  5 Lattice-form Gouraud-shaded triangle mesh  6 Coons patch mesh  7 Tensor-product patch mesh  ColorSpace name  or  array(Required)  The colour space in which colour values shall be expressed. This may be any devi ce, CIE-based, or special colour  space except a  Pattern  space. See  8.7.4.4, \"Colour Space: Special  Considerations\"  for further information.  Background array(Optional)  An array of colour components appropriate to the colour  space, specifying a single background colour value. If present, this  colour shall be used, before any painting operation involving the  shading, to fill those portions of the area to be painted that lie outside  the bounds of the shading object.  NOTE In the opaque imaging model,  the effect is as if the  painting operation were perf ormed twice: first with the  background colour and then with the shading.  NOTE The background colour is applied only when the shading  is used as part of a shading pa ttern, not when it is painted  directly with the sh operator.  BBoxrectangle (Optional)   An array of four numbers giving the left, bottom, right, and  top coordinates, respectively, of  the shadings bounding box. The  coordinates shall be interpreted in  the shadings target coordinate  space. If present, this bounding  box shall be applied as a temporary  clipping boundary when the shading is painted, in addition to the  current clipping path and any other clipping boundaries in effect at that  time. AntiAliasboolean (Optional)   A flag indicating whether to filter the shading function to  prevent  aliasing  artifacts.  NOTE The shading operators sample shading functions at a rate  determined by the resolution of the output device.  Aliasing can occur if the func tion is not smoot hthat is, if  it has a high spatial frequency relative to the sampling  rate. Anti-aliasing can be computationally expensive and  is usually unnecessary, since most shading functions are  smooth enough or are sampled at a high enough  frequency to avoid aliasing effects. Anti-aliasing may not  be implemented on some output devices, in which case  this flag is ignored.  Default value: false.",""],"192":["PDF 32000-1:2008 184 ' Adobe Systems Incorporated 2008  All rights reserved dictionary usually defines the geometry of the shading,  and the function defines the colour transitions across  that geometry. The function is required for some types  of shading and optional for others. Functions are  described in detail in  7.10, \"Functions\" . NOTE 3 Discontinuous colour transitions, or those with hi gh spatial frequency, may exhibit aliasing effects when painted  at low effective resolutions.  8.7.4.4 Colour Space: Special Considerations 8.7.4.4.1 General Conceptually, a shading determines a colour value for each individual point within the area to be painted. In  practice, however, the shading may actually be used to  compute colour values only for some subset of the  points in the target area, with the colours of the inte rvening points determined by interpolation between the  ones computed. Conforming readers are free to use this  strategy as long as the interpolated colour values  approximate those defined by the shading to within the  smoothness tolerance specified in the graphics state  (see  10.6.3, \"Smoothness Tolerance\" ). The  ColorSpace  entry common to all shading dictionaries not only  defines the colour space in which the  shading specifies its colour values but also determines the colour space  in which colour interpolation is performed.  NOTE 1 Some types of shading (4 to 7) perform  interpolation on a parametric value supplied as  input  to the shadings  colour function, as described in the re levant sub-clause. This form of interp olation is conceptua lly distinct from the interpolation described here, which operates on the  output  colour values produced by the colour function  and takes place within the shadings target colour space.  Gradient fills between colours defined  by most shadings may be implemente d using a variety of interpolation  algorithms, and these algorithms  may be sensitive to the characte ristics of the colour space.  NOTE 2 Linear interpolation, for example, may hav e observably different results when applied in a  DeviceCMYK  colour  space than in a  Lab  colour space, even if the starting and  ending colours are perceptually identical. The  difference arises because the two colour spaces are not linear relative to each other. Shadings shall be rendered according to the following rules:  If  ColorSpace  is a device colour space different from the nati ve colour space of the output device, colour  values in the shading shall be converted to the nati ve colour space using the standard conversion formulas  described in  10.3, \"Conversions among Device Colour Spaces\" . To optimize performance, these  conversions may take place at any time (before or after any interpolation on the colour values in the  shading). Thus, shadings defined with device colour spaces may have  colour gradient fills that are less  accurate and somewhat device-dependent. (This does  not apply to axial and radial shadingsshading  types 2 and 3because those shading types  perform gradient fill calculations on a single variable and  then convert to parametric colours.)  If  ColorSpace  is a CIE-based colour space,  all gradient fill calculations sh all be performed in that space.  Conversion to device colours shall occur only afte r all interpolation calculations have been performed.  Thus, the colour gradients are device-independent for the colours generated at each point.  If  ColorSpace  is a Separation  or  DeviceN  colour space, a colour conversion (to the alternate colour  space) occurs only if one or more of the specified colorants is not supported by the device. In that case,  gradient fill calculations shall  be performed in the designated  Separation  or DeviceN  colour space before  conversion to the alternate space. Thus, nonlinear ti nt transformation functions  shall be accommodated for  the best possible representation of the shading.  If  ColorSpace  is an Indexed  colour space, all colour values specif ied in the shading shall be immediately converted to the base colour space. Depending on  whether the base colour  space is a device or CIE- based space, gradient fill calculati ons shall be performed as  stated above. Interpol ation shall never occur in an Indexed  colour space, which is quantized and therefor e inappropriate for calculations that assume a",""],"193":["' Adobe Systems Incorporated 2008  All rights reserved 185PDF 32000-1:2008 continuous range of colours. For similar reasons, an  Indexed  colour space shall not be used in any  shading whose colour values are generated by a function; this rule applies to any shading dictionary that  contains a  Function  entry.  8.7.4.5 Shading Types 8.7.4.5.1 General In addition to the entries listed in  Ta b l e  78, all shading dictionaries have entries specific to the type of shading  they represent, as indica ted by the value of their  ShadingType  entry. The following sub-clauses describe the  available shading types and the dictionary entries specific to each.  8.7.4.5.2 Type 1 (Function-Based) Shadings In Type 1 (function-based) shadings, the colour at every point in the domain is defined by a specified  mathematical function. The function need not be smooth  or continuous. This type is the most general of the  available shading types and is useful  for shadings that cannot be adequat ely described with any of the other  types. Ta b l e  79 shows the shading dictionary entries specific to  this type of shading, in addition to those  common to all shading dictionaries (see  Ta b l e  78).This type of shading shall not be used with an  Indexed  colour space.  The domain rectangle ( Domain) establishes an internal coordinate space for the shading that is independent of  the target coordinate space in which it shall be painted. The colour function(s) ( Function ) specify the colour of  the shading at each point within this domain rectangle. The transformation matrix ( Matrix ) then maps the  domain rectangle into a corresponding rectangle or paralle logram in the target coordinate space. Points within  the shadings bounding box ( BBox) that fall outside this transformed do main rectangle shall be painted with the  shadings background colour ( Background ); if the shading dictionary has no  Background  entry, such points  shall be left unpainted. If the function is undefined at  any point within the declared domain rectangle, an error  may occur, even if the corresponding transforme d point falls outside the shadings bounding box.  8.7.4.5.3 Type 2 (Axial) Shadings Type 2 (axial) shadings define a colour blend that varies  along a linear axis between two endpoints and extends  indefinitely perpendicular to that axis. The shading may  optionally be extended beyond either or both endpoints  Table  79   Additional Entries Specific to a Type 1 Shading Dictionary   KeyType Value Domainarray(Optional)  An array of four numbers [  xmin  xmax  ymin  ymax  ] specifying the rectangular domain of coordinates  over which the colour function(s)  are defined. Default value: [  0.0   1.0  0.0  1.0  ]. Matrixarray(Optional)  An array of six numbers specifying a transformation matrix  mapping the coordinate space specified by the  Domain entry into the  shadings target coordinate space.  NOTE To map the domain rectangle [  0.0  1.0  0.0  1.0  ] to a 1-inch  square with lower-left corner at coordinates (100, 100) in  default user space, the  Matrix  value would be  [ 72 0 0 72 100  100 ].  Default value: the identity matrix [  1 0 0 1 0 0 ]. Function function(Required)  A 2-in, n-out function or an array of  n 2-in, 1-out functions  (where  n is the number of colour components in the shading dictionarys  colour space). Each functions domain  shall be a superset  of that of the  shading dictionary. If the value returned by the function for a given colour  component is out of range, it shall be adjusted to the nearest valid value.",""],"194":["PDF 32000-1:2008 186 ' Adobe Systems Incorporated 2008  All rights reserved by continuing the boundary colours indefinitely.  Ta b l e  80 shows the shading dictionary entries specific to this  type of shading, in addition to those  common to all shading dictionaries (see  Ta b l e  78). This type of shading shall not be used with an  Indexed  colour space.  The colour blend shall be accomplished by linearly mapping each point ( x, y) a long the axis between the  endpoints ( x0 , y0 ) and ( x1 , y1 ) to a corresponding point in the domain  specified by the shading dictionarys  Domain entry. The points (0,  0) and (1,  0) in the domain correspond respectively to ( x0 , y0 ) and ( x1 , y1 ) on the  axis. Since all points along a line in domain space perpendicular to the line from (0,  0) to (1,  0) have the same  colour, only the new value of  x needs to be computed:  The value of the parametric variable  t is then determined from  x ¢ as follows:  For 0  £ x ¢ £ 1, t = t0 + (t1 - t0 ) ¥ x ¢. For  x ¢ < 0, if the first element of the  Extend array is  true , then  t = t0 ; otherwise,  t is undefined and the  point shall be left unpainted.  For  x ¢ > 1, if the second element of the  Extend array is  true , then  t = t1 ; otherwise,  t is undefined and the  point shall be left unpainted.  The resulting value of  t shall be passed as input to the function(s) defined by the shading dictionarys  Function entry, yielding the component values of the colour with which to paint the point ( x, y). NOTEFigure L.10  in","Annex L  shows three examples of the use of an axia l shading to fill a rectangle and display text.  The area to be filled extends beyond t he shadings bounding box. The shading is the same in all three cases,  except for the values of the  Background  and  Extend entries in the shading dictionary. In the first example, the  shading is not extended at either end and no background co lour is specified; therefor e, the shading is clipped  to its bounding box at both ends. The second example still has no background co lour specified, but the  shading is extended at both ends; the  result is to fill the remaining portions of the filled area with the colours  Table  80   Additional Entries Specific  to a Type 2 Shading Dictionary   KeyType Value Coordsarray(Required)   An array of four numbers [  x0 y0 x1 y1 ] specifying the starting  and ending coordinates of the axis, expressed in the shadings target  coordinate space.  Domainarray(Optional)  An array of two numbers [  t0 t1 ] specifying the limiting values of  a parametric variable  t. The variable is considered to vary linearly  between these two values as the colour gradient varies between the  starting and ending points of the axis. The variable  t becomes the input  argument to the colour function(s). Default value: [  0.0 1.0 ]. Function function(Required)  A 1-in,  n-out function or an array of  n 1-in, 1-out functions  (where n is the number of colour componen ts in the shading dictionarys  colour space). The function(s) shall be called with values of the  parametric variable  t in the domain defined by the  Domain  entry. Each  functions domain shall be a superset of  that of the shading dictionary. If  the value returned by the function for a given colour component is out of  range, it shall be adjusted  to the nearest valid value.  Extendarray(Optional)  An array of two boolean values specifying whether to extend  the shading beyond the starting and ending points of the axis,  respectively. Default value: [  false  false ].","xcx1x0xx0uy1y0yy0u+x1x02y1y02+------------------------------------------------------------------------------------------------------ -=",""],"195":["' Adobe Systems Incorporated 2008  All rights reserved 187PDF 32000-1:2008 defined at the ends of the shading. In the third  example, the shading is extended at both ends and a  background colour is specified; th erefore, the background colour is us ed for the portions of the filled area  beyond the ends of the shading.  8.7.4.5.4 Type 3 (Radial) Shadings Type 3 (radial) shadings define a colour blend that va ries between two circles. Sh adings of this type are  commonly used to depict three-dimensional spheres and  cones. Shading dictionaries for this type of shading  contain the entries shown in  Ta b l e  81, as well as those common to all shading dictionaries (see  Table  78).  This type of shading shall not be used with an  Indexed  colour space.  The colour blend is based on a family of  blend circles  interpolated between the star ting and ending circles that  shall be defined by the shading dictionarys  Coords entry. The blend circles shall be defined in terms of a  subsidiary parametric variable  which varies linearly between 0.0 and 1.0 as  t varies across the domain from  t0 to t1 , as specified by the  dictionarys  Domain  entry. The centre and radius of each blend ci rcle shall be given by  the following parametric  equations:  Each value of  s between 0.0 and 1.0 determines a corresponding value of  t, which is passed as the input  argument to the function(s) defin ed by the shading dictionarys  Function  entry. This yields the component  values of the colour with wh ich to fill the corresponding blend circ le. For values of  s not lying between 0.0 and  Table  81   Additional Entries Specific to a Type 3 Shading Dictionary   KeyType Value Coordsarray(Required)  An array of six numbers [  x0 y0 r0 x1 y1 r1 ] specifying the  centres and radii of the starting an d ending circles, expressed in the  shadings target coordinate space. The radii  r0 and r1 shall both be  greater than or equal to 0. If one radius is 0, the corresponding circle shall  be treated as a point; if both ar e 0, nothing shall be painted.  Domainarray(Optional)  An array of two numbers [  t0 t1 ] specifying the limiting values of  a parametric variable  t. The variable is considered to vary linearly  between these two values as the colour gradient varies between the  starting and ending circles. The variable  t becomes the input argument to  the colour function(s). Default value: [  0.0 1.0 ].  Function function(Required)  A 1-in, n-out function or an array of  n 1-in, 1-out functions  (where  n is the number of colour components in the shading dictionarys  colour space). The function(s) shall be called with values of the  parametric variable  t in the domain defined by the shading dictionarys  Domain entry. Each functions domain shal l be a superset of that of the  shading dictionary. If the value returned by the function for a given colour  component is out of range, it shall be adjusted to the nearest valid value.  Extendarray(Optional)  An array of two boolean values specifying whether to extend  the shading beyond the starting and ending circles, respectively. Default  value: [ false false ].","stt0t1t0-------------- =","xcs() x 0sx1x0u+= ycs() y 0sy1y0u+= rs() r 0sr1r0u+=",""],"196":["PDF 32000-1:2008 188 ' Adobe Systems Incorporated 2008  All rights reserved 1.0, the boolean elements of the shading dictionarys  Extend array determine whether and how the shading is  extended. If the first of the two elements is  true , the shading shall be extended beyond the defined starting  circle to values of  s less than 0.0; if the second element is  true, the shading shall be extended beyond the  defined ending circle to  s values greater than 1.0.  NOTE 1 Either of the starting and ending circles may be larger  than the other. If the shading  is extended at the smaller  end, the family of blend circles continues as far as that value of  s for which the radius of the blend circle  r (s) = 0. If the shading is extended at the larg er end, the blend ci rcles continue as far as that  s value for which  r (s) is larg e enough to encompass the shadings entire bounding box ( BBox). Extending the shading can thus  cause painting to extend beyond the areas defined by t he two circles themselves. The two examples in the  rightmost column of Figure L.11  in  Annex L  depict the results of extending th e shading at the smaller and larger  ends, respectively.  Conceptually, all of the blend circles shall be painted in order of increasing values of  s, from smallest to largest.  Blend circles extending beyond the starting circle shall be  painted in the same colour defined by the shading  dictionarys  Function  entry for the starting circle ( t = t0 , s = 0.0). Blend circles extending beyond the ending  circle shall be painted in the colour defined for the ending circle ( t = t1 , s = 1.0). The painting is opaque, with  the colour of each circle completely overlaying those pr eceding it. Therefore, if a point lies within more than one  blend circle, its final colour shall be t hat of the last of the enclosing circle s to be painted, corresponding to the  greatest value of  s. NOTE 2 If one of the starting and ending circles entirely contains the other, the shading depicts a sphere, as in  Figure  L.12  and Figure L.13  in  Annex L . In Figure L.12  in  Annex L , the inner circle has zero radius; it is the starting  circle in the figure on the left and the ending circle in the figure on the right. Neither shading is extended at  either the smaller or larger end. In  Figure L.13  in  Annex L , the inner circle in both figures has a nonzero radius  and the shading is extended at the larger end. In each pl ate, a background colour is specified for the figure on  the right but not for th e figure on the left.  NOTE 3 If neither circle contains the othe r, the shading depicts a cone. If the star ting circle is larger, the cone appears  to point out of the page. If the  ending circle is larger, the cone appears to point into the page (see  Figure L.11  in Annex L ).  EXAMPLE 1 This example pa ints the leaf-covered branch shown in  Figure L.14  in Annex L . Each leaf is filled with the  same radial shading (object number 5). The colour func tion (object 10) is a stitching function (described in  7.10.4, \"Type 3 (Stitching) Functions\" ) whose two subfunctions (objects 11 and 12) are both exponential  interpolation functions (see  7.10.3, \"Type 2 (Exponential  Interpolation) Functions\"). 5 0 obj % Shading dictionary <<  /ShadingType  3 /ColorSpace  /DeviceCMYK  /Coords  [ 0.0  0.0 0.096  0.0  0.0 1.0  00] % Concentric circles  /Function  10 0 R  /Extend [ true  true ]>>","endobj 10 0 obj%Colour function <<  /FunctionType  3 /Domain  [ 0.0 1.0 ] /Functions  [ 11 0 R  12 0 R  ] /Bounds  [ 0.708  ] /Encode  [ 1.0 0.0 0.0 1.0 ]>>endobj 11 0 obj % First subfunction <<  /FunctionType  2 /Domain  [ 0.0 1.0 ] /C0 [ 0.929  0.357  1.000  0.298  ] /C1 [ 0.631  0.278  1.000  0.027  ] /N 1.048>>endobj",""],"197":["' Adobe Systems Incorporated 2008  All rights reserved 189PDF 32000-1:2008 12 0 obj % Second subfunction <<  /FunctionType  2 /Domain  [ 0.0 1.0 ] /C0 [ 0.929 0.357  1.000  0.298  ] /C1 [ 0.941 0.400  1.000  0.102  ] /N 1.374>>endobj EXAMPLE 2 This example shows how each leaf shown in  Figure L.14  in  Annex L  is drawn as a path and then filled  with the shading (where t he name Sh1 is associated with object 5 by the  Shading subdictionary of the  current resource dictionary; see  7.8.3, \"Resource Dictionaries\" ).316.789  140.311  m% Move to start of leaf 303.222  146.388  282.966  136.518  279.122  121.983  c % Curved segment 277.322  120.182  l% Straight line 285.125  122.688  291.441  121.716  298.156  119.386  c % Curved segment 336.448  119.386  l% Straight line 331.072  128.643  323.346  137.376  316.789  140.311  c % Curved segment W","n% Set clipping path q% Save graphics state 27.7843  0.0000 0.0000  -27.7843  310.2461  121.1521  cm % Set matrix /Sh1 sh% Paint shadingQ% Restore graphics state 8.7.4.5.5 Type 4 Shadings (Free-Form Gouraud-Shaded Triangle Meshes) Type 4 shadings (free-form Gouraud-shaded triangle meshes) are commonly used to represent complex  coloured and shaded three-dimensional shapes. The area to  be shaded is defined by a path composed entirely  of triangles. The colour at each vertex of the  triangles is specified, and a technique known as  Gouraud  interpolation is used to colour the interiors. The interpolation functions defining the shading may be linear or  nonlinear.  Table  82 shows the entries specific to this type of shad ing dictionary, in addition to those common to  all shading dictionaries (see  Ta b l e  78) and stream dictionaries (see  Ta b l e  5). Table  82   Additional Entries Specific to a Type 4 Shading Dictionary   Key Type Value BitsPerCoordinate integer (Required)  The number of bits used to represent each vertex  coordinate. The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.  BitsPerComponent integer (Required)  The number of bits used to represent each colour  component. The value shall be  1, 2, 4, 8, 12, or 16.  BitsPerFlag integer (Required)  The number of bits used to represent the edge flag for  each vertex (see below). The value of  BitsPerFlag  shall be 2, 4, or 8, but only the least significant  2 bits in each flag value shall be used. The value for the edge flag shall be 0, 1, or 2.  Decode array(Required)  An array of numbers specifying how to map vertex  coordinates and colour components into the appropriate ranges of  values. The decoding method is similar to that used in image  dictionaries (see  8.9.5.2, \"Decode Arrays\" ). The ranges shall be specified as follows:  [ xmin xmax  ymin ymax  c1,min c1,max   cn,min cn,max  ]Only one pair of  c values shall be specified if a  Function  entry is present.",""],"198":["PDF 32000-1:2008 190 ' Adobe Systems Incorporated 2008  All rights reserved Unlike shading types 1 to 3, types 4 to 7 shall be repres ented as streams. Each stream contains a sequence of  vertex coordinates and colour data that defines the triang le mesh. In a type 4 shading, each vertex is specified  by the following values, in the order shown:  f x y c1  cnwhere f  is the vertexs edge flag (discussed below)  x an d  y are its horizontal and vertical coordinates  c1  cn are its colour components  All vertex coordinates shall be expressed in the shading s target coordinate space.  If the shading dictionary  includes a  Function  entry, only a single parametric value,  t, shall be specified for each vertex in place of the  colour components  c1  cn . The  ed ge flag  associated with each vertex determines the way  it connects to the other vertices of the triangle  mesh. A vertex  va with an edge flag value  fa = 0 begins a new triangle, unconnected to any other. At least two  more vertices  (vb and  vc ) shall be provided, but their edge flags sha ll be ignored. These three vertices define a  triangle ( va , vb , vc ), as shown in  Figure 24 . Figure  24   Starting a New Triangle in a Free-form Gouraud-shaded Triangle Mesh Function function (Optional)  A 1-in, n-out function or an array of  n 1-in, 1-out functions  (where  n is the number of colour components in the shading  dictionarys colour space). If this  entry is present, the colour data for  each vertex shall be specified by a single parametric variable rather  than by  n separate colour components. The designated function(s)  shall be called with each interpolated value of the parametric  variable to determine the actual co lour at each point. Each input  value shall be forced into the range interval specified for the  corresponding colour component in the shading dictionarys  Decode  array. Each functions domain shall be a superset of that  interval. If the value returned by the function for a given colour  component is out of range, it shall be adjusted to the nearest valid  value.  This entry shall not be used with an  Indexed  colour space.  Table 82   Additional Entries Specific to  a Type 4 Shading Dictionary (continued) Key Type Value","fa=0(Start new triangle)","Previoustrianglevavcvb",""],"199":["' Adobe Systems Incorporated 2008  All rights reserved 191PDF 32000-1:2008 Subsequent triangles shall be defined by a single new  vertex combined with two vertices of the preceding  triangle. Given triangle ( va , vb , vc ), where vertex  va precedes vertex  vb in the data stream and  vb precedes  vc , a new vertex  vd can form a new triangle on side  vbc or side  vac , as shown in  Figure 25 . (Side vab is assumed to  be shared with a preceding triangle and therefore is not  available for continuing the mesh.) If the edge flag is  fd = 1 (side  vbc ), the next vertex forms the triangle ( vb , vc , vd ); if the edge flag is  fd = 2 (side  vac ), the next  vertex forms the triangle ( va , vc , vd ). An edge flag of  fd = 0 starts a new triangle, as described above.  Figure 25   Connecting Triangles in a Free-form Gouraud-shaded Triangle Mesh Complex shapes can be created by using the edge flag s to control the edge on which subsequent triangles are  formed.  EXAMPLE Figure 26  shows two simple examples. Mesh 1 begins with triangle 1 and uses the following edge flags to  draw each succeeding triangle:  Mesh 2 again begins with triangle 1 and uses the following edge flags:  The stream shall provide vertex data for a whole number  of triangles with appropriate edge flags; otherwise, an  error occurs.","Three new vertices","vdvfvefd=0fd=1","vavcvbOne newvertexvd","vavcvbfd=2One newvertexvd","vavcvb","1fafbfc0=== 7fi2=","2fd1=8fj2=","3fe1=9fk2=","4ff1=10 f l1=","5fg1=11 f m1=","6fh1=","1fafbfc0=== 4ff2=","2fd1=5fg2=","3fe2=6fh2=",""],"200":["PDF 32000-1:2008 192 ' Adobe Systems Incorporated 2008  All rights reserved Figure  26   Varying the Value of the Edge Flag to Create Different Shapes The data for each vertex consists of the following items, reading in sequence from higher-order to lower-order  bit positions:   An edge flag, expressed in  BitsPerFlag  bits   A pair of horizontal and vertic al coordinates, expressed in  BitsPerCoordinate  bits each   A set of  n colour components (where  n is the number of components in the shadings colour space),  expressed in  BitsPerComponent  bits each, in the order expected by the  sc operator  Each set of vertex data shall occupy a whole number of byte s. If the total number of bits required is not divisible  by 8, the last data byte for each vertex is padded  at the end with extra bits, which shall be ignored. The  coordinates and colour values shall be decoded according to the  Decode  array in the same way as in an image  dictionary (see  8.9.5.2, \"Decode Arrays\" ). If the shading dictionary contains a  Function  entry, the colour data for each vertex shall be specified by a  single parametric value  t rather than by  n separate colour components. All lin ear interpolation within the triangle  mesh shall be done using the  t values. After interpolation, the results shall be passed to the function(s)  specified in the  Function  entry to determ ine the colour at each point.  8.7.4.5.6 Type 5 Shadings (Lattice-Form Gouraud-Shaded Triangle Meshes) Type 5 shadings (lattice-form Gouraud-shaded triangle meshes) are similar to type 4, but instead of using free- form geometry, their vertices are arranged in a  pseudorectangular lattice , which is topologically equivalent to a  rectangular grid. The vertices are organized into rows, which need not be geometrically linear (see  Figure 27 ). Figure  27   Lattice-form Triangle Meshes","Mesh 1Mesh 2vlvjvivfvevcvavevgvavhvcvdvkvbvhvgvdvmvm = vbvk = vdvh = va","vfvb1453625897431101126","Ideal lattice(i, j)(i, j+1)(i+1, j)(i+1, j+1)","Pseudorectangular lattice",""],"201":["' Adobe Systems Incorporated 2008  All rights reserved 193PDF 32000-1:2008 Ta b l e  83 shows the shading dictionary entries specific to this  type of shading, in addition to those common to all  shading dictionaries (see  Ta b l e  78) and stream dictionaries (see  Ta b l e  5). The data stream for a type 5 shading has the same form at as for type 4, except th at type 5 does not use edge  flags to define the geometry of the triangle mesh. The dat a for each vertex thus consists of the following values,  in the order shown:  x y c1  cnwhere x an d  y shall be the vertexs horizontal and vertical coordinates  c1  cn shall be its colour components  All vertex coordinates are expressed in the shadings targ et coordinate space. If the shading dictionary includes  a Function  entry, only a single  parametric value,  t, shall be present for each vertex in place of the colour  components  c1  cn . The  V erticesPerRow  entry in the shading dictionary  gives the number of vertices in each row of the lattice. All  of the vertices in a row shall be  specified sequentially, followed by  those for the next row. Given  m rows of  kvertices each, the triangles of the mesh shall be construc ted using the following triplets  of vertices, as shown in  Figure 27 : Table  83   Additional Entries Specific to a Type 5 Shading Dictionary   Key Type Value BitsPerCoordinate integer (Required)  The number of bits used to represent each vertex  coordinate. The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.  BitsPerComponent integer (Required)  The number of bits used to represent each colour  component. The value shall be  1, 2, 4, 8, 12, or 16.  VerticesPerRow integer (Required)  The number of vertices in each row of the lattice; the  value shall be greater than or equal to 2. The number of rows need  not be specified.  Decode array(Required)  An array of numbers specifying how to map vertex  coordinates and colour components into the appropriate ranges of  values. The decoding method is similar to that used in image  dictionaries (see  8.9.5.2, \"Decode Arrays\" ). The ranges shall be specified as follows:  [ xmin xmax  ymin ymax  c1,min c1,max   cn,min  cn,max  ]Only one pair of  c values shall be specified if a  Function  entry is present.  Function function (Optional)  A 1-in, n-out function or an array of  n 1-in, 1-out functions  (where  n is the number of colour components in the shading  dictionarys colour space). If this  entry is present, the colour data for  each vertex shall be specified by a single parametric variable rather  than by n separate colour components. The designated function(s)  shall be called with each interpolated value of the parametric  variable to determine the actual colour at each point. Each input  value shall be forced into the range interval specified for the  corresponding colour component in the shading dictionarys  Decode  array. Each functions domain shall be a superset of that  interval. If the value returned by the function for a given colour  component is out of range, it shal l be adjusted to the nearest valid  value. This entry shall not be used with an  Indexed  colour space.",""],"202":["PDF 32000-1:2008 194 ' Adobe Systems Incorporated 2008  All rights reserved See 8.7.4.5.5, \"Type 4 Shadings (Free-Form Gouraud-Shaded Triangle Meshes)\"  for further details on the  format of the vertex data.  8.7.4.5.7 Type 6 Shadings (Coons Patch Meshes) Type 6 shadings (Coons patch meshes) are constructed from one or more  colour patches , each bounded by  four cubic BØzier curves. Degenerate BØzier curves are a llowed and are useful for certain graphical effects. At  least one complete patch shall be specified.  A Coons patch generally has two independent aspects:   Colours are specified for each corner  of the unit square, and bilinear interpolation is used to fill in colours  over the entire unit square (see the upper figure in  Figure L.15  in Annex L).  Coordinates are mapped from the unit square into  a four-sided patch whose  sides are not necessarily  linear (see the lower figure in  Figure L.15  in Annex L ). The mapping is continuous: the corners of the unit  square map to corners of the patch and the sides of th e unit square map to sides of  the patch, as shown in  Figure 28 . The sides of the patch are given by four cubic BØzier curves,  C1 , C2 , D1 , and  D2 , defined over a pair of  parametric variables,  u and v, that vary horizontally and vertically  across the unit square. The four corners of  the Coons patch satisfy the following equations:  Figure  28   Coordinate Mapping from a Unit Square to a Four-sided Coons Patch Two surfaces can be described that are linear interp olations between the b oundary curves. Along the  u axis,  the surface  SC is defined by","Vij,Vij 1 +, Vi1+j,for 0 i m 2 dd0j k2 dd,Vij 1 +, Vi1+j,Vi1+j1+,","C10() D 10()=","C11() D 20()=","C20() D 11()=","C21() D 21()=","D1C1D2C2","vu",""],"203":["' Adobe Systems Incorporated 2008  All rights reserved 195PDF 32000-1:2008 Along the  v axis, the surface  SD is given by  A third surface is the bilinear inte rpolation of the four corners:  The coordinate mapping for the shading is given by the surface  S, defined as  This defines the geometry of each pa tch. A patch mesh is constructed from  a sequence of one or more such  coloured patches.  Patches can sometimes appear to fold over on themselvesfor  example, if a boundar y curve intersects itself.  As the value of parameter  u or  v increases in parameter space, the location of the corresponding pixels in  device space may change direction so that new pixels are mapped onto previous pixels already mapped. If  more than one point ( u, v) in  parameter space is mapped to the same point in device space, the point selected  shall be the one with the largest value of  v. If multiple points have the same  v, the one with the largest value of  u shall be selected. If one patch overlaps another, the patch that appears later in the data stream shall paint  over the earlier one.  NOTE The patch is a control surface rather than a painting  geometry. The outline of a pr ojected square (that is, the  painted area) might not be the same as the patch boundary  if, for example, the patch folds over on itself, as  shown in  Figure 29 . Figure 29   Painted Area and Boundary of a Coons Patch","SCuv() 1v C1u()uvC2u()u+=","SDuv() 1u D1v() u D 2v()u+u=","SBuv() 1v 1uC10()u> uC11()u+@uv1u C20()u> uC21()u@+u+=","SSCSDSB+=","Appearance Painted area Patch boundary",""],"204":["PDF 32000-1:2008 196 ' Adobe Systems Incorporated 2008  All rights reserved Ta b l e  84 shows the shading dictionary entries  specific to this type of shading, in addition to those common to all  shading dictionaries (see  Ta b l e  78) and stream dictionaries (see  Ta b l e  5).  The data stream provides a sequence of BØzier contro l points and colour values that define the shape and  colours of each patch. All of a patchs control points are  given first, followed by the co lour values for its corners.  This differs from a triangle mesh (shading types 4 and  5), in which the coordinates and colour of each vertex  are given together. All control point coordinates are expr essed in the shadings target coordinate space. See  8.7.4.5.5, \"Type 4 Shadings (Free-Form Gouraud-Shaded Triangle Meshes)\"  for further details on the format of  the data. As in free-form triangle meshes (type 4), each patch has an  edge flag  that indicates which edge, if any, it  shares with the previous patch. An edge flag of 0 begins a new patch, unc onnected to any other. This shall be  followed by 12 pairs of coordinates,  x1 y1 x2 y2  x12 y12 , which specify the BØzier control points that define  the four boundary curves.  Figure 30  shows how these control points correspond to the cubic BØzier curves  C1 , C2 , D1 , and  D2 identified in  Figure 28 . Colour values shall be given for the four corners of the patch, in the  same order as the control points corresponding to the corners. Thus,  c1 is the colour at coordinates ( x1 , y1 ), c2at (x4 , y4 ), c3 at ( x7 , y7 ), and  c4 at (x10 , y10 ), as shown in the figure.  Table  84   Additional Entries Specific  to a Type 6 Shading Dictionary   Key Type Value BitsPerCoordinate integer (Required)  The number of bits used to represent each geometric  coordinate. The value shall be 1,  2, 4, 8, 12, 16, 24, or 32.  BitsPerComponent integer (Required)  The number of bits used to represent each colour  component. The value shall be 1, 2, 4, 8, 12, or 16.  BitsPerFlag integer (Required)  The number of bits used to represent the edge flag for  each patch (see below). The value shal l be 2, 4, or 8, but only the  least significant 2 bits in each flag value shall be used. Valid values  for the edge flag shall be  0, 1, 2, and 3.  Decode array(Required)  An array of numbers specifying how to map coordinates  and colour components into the appr opriate ranges of values. The  decoding method is similar to that  used in image dictionaries (see  8.9.5.2, \"Decode Arrays\" ). The ranges shall be specified as follows:  [ xmin  xmax  ymin ymax  c1,min c","1,max   cn,min cn,max ]Only one pair of  c values shall be specified if a  Function  entry is present. Function function (Optional)  A 1-in, n-out function or an array of  n 1-in, 1-out functions  (where  n is the number of colour components in the shading  dictionarys colour space). If this  entry is present, the colour data for  each vertex shall be specified by a single parametric variable rather  than by  n separate colour components. The designated function(s)  shall be called with each interpolated value of the parametric  variable to determine the actual co lour at each point. Each input  value shall be forced into the range interval specified for the  corresponding colour component in the shading dictionarys  Decode  array. Each functions domain shall be a superset of that  interval. If the value returned by the function for a given colour  component is out of range, it shall be adjusted to the nearest valid  value.  This entry shall not be used with an  Indexed  colour space.",""],"205":["' Adobe Systems Incorporated 2008  All rights reserved 197PDF 32000-1:2008 Figure  30   Colour Values and Edge Flags in Coons Patch Meshes Figure 30  also shows how nonzero values of the edge flag ( f = 1, 2, or 3) connect a new patch to one of the  edges of the previous pa tch. In this case, some of the previous patc hs control points serve implicitly as control  points for the new patch as well (see  Figure 31 ), and therefore shall not be explicitly repeated in the data  stream. Ta b l e  85 summarizes the required data values for various values of the edge flag.  Figure  31   Edge Connections in a Coons Patch Mesh","538679111221410","Use this side when next  f = 3.Use this side when next  f = 1.Use this side when next  f = 2.This side already attached to previous patch. Start a  new patch when next  f = 0.c1c2c3c4C1C2D2D1","When fB = 0, start a new patch. Patch B fB = 1 Patch A Patch B fB = 3","Patch B fB = 2","21453c1 c2","1293411224311c1 c1 c2 c4 1476823c3 c1 c2 c2","10",""],"206":["PDF 32000-1:2008 198 ' Adobe Systems Incorporated 2008  All rights reserved If the shading dictionary contains a  Function  entry, the colour data for each corner of a patch shall be specified  by a single parametric value  t rather than by  n separate colour components  c1  cn . All linear interpolation within the mesh shall be done using the  t values. After interpolation, the results shall be passed to the  function(s) specified in the  Function  entry to determ ine the colour at each point.  8.7.4.5.8 Type 7 Shadings (Tensor-Product Patch Meshes) Type 7 shadings (tensor-product patch  meshes) are identical to ty pe 6, except that they are based on a bicubic  tensor-product patch defined by 16 co ntrol points instead of t he 12 control points that define a Coons patch.  The shading dictionaries representing the two  patch types differ only in the value of the  ShadingType  entry and  in the number of control points specified for each patch in the data stream.  NOTE Although the Coons patch is more concise and easier  to use, the tensor-product pa tch affords greater control  over colour mapping.  Table  85   Data Values in a Coons Patch Mesh   Edge FlagNext Set of Data Values f   0x1 y1 x2 y2 x3 y3 x4 y4 x5 y5 x6 y6x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12c1 c2 c3 c4New patch; no implicit values  f   1x5 y5 x6 y6 x7 y7 x","8 y8 x9 y9 x10 y10 x11 y11 x12 y12c3 c4Implicit values:  (x1 , y1 ) = (x4 , y4 ) previous c1 = c2 previous(x2 , y2 ) = (x5 , y5 ) previous c2 = c3 previous(x3 , y3 ) = (x6 , y6 ) previous (x4 , y4 ) = (x7 , y7"," ) previous f   2x5 y5 x6 y6 x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12c3 c4Implicit values: (x1 , y1 ) = (x7 , y7 ) previous c1 = c3 previous(x2 , y2 ) = (x8 , y8 ) previous c2 = c4 previous(x3 , y3 ) = (x9",", y9 ) previous (x4 , y4 ) = (x10 , y10 ) previousf   3x5 y5 x6 y6 x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12c3 c4Implicit values:  (x1 , y1 ) = (x10 , y10 ) previousc1 = c4 previous(x2 , y2 ) = (x11 , y","11 ) previousc2 = c1 previous(x3 , y3 ) = (x12 , y12 ) previous(x4 , y4 ) = (x1 , y1 ) previous",""],"207":["' Adobe Systems Incorporated 2008  All rights reserved 199PDF 32000-1:2008 Like the Coons patch mapping, the tensor-product patch mapping is controlled by the location and shape of  four cubic BØzier curves marking the boundaries of th e patch. However, the tens or-product patch has four  additional, internal control points to adjust the mapping. The 16 control points can be arranged in a 4-by-4  array indexed by row and column, as follows (see  Figure 32 ): p03p13p23p33p02p12p22p32p01p11p21p31p00p10p20p30Figure  32   Control Points in a Tensor-product Patch As in a Coons patch mesh, the geometry of the tensor-p roduct patch is described by a surface defined over a  pair of parametric variables,  u and  v, which vary horizontally and vertically across the unit square. The surface  is defined by the equation  where pij is the control point in column  i and row  j of the tensor, and  Bi and  Bj are the  Bernstein polynomials  Since each point  pij is actually a pair of coordinates ( xij , yij ), the surface can also be expressed as","p02p00p01p12p22p21p11p10p20p30p31p32p33p23p13p03","Suv () p ijBiu() B jv()uu j0=3ƒi0=3ƒ=","B0t() 1 t3=","B1t() 3t 1 t2u=","B2t() 3 t21tu=","B3t()t3=",""],"208":["PDF 32000-1:2008 200 ' Adobe Systems Incorporated 2008  All rights reserved The geometry of the tensor-product patch can be visualized in terms of a cubic BØzier curve moving from the  bottom boundary of the patch to the top. At the bottom  and top, the control points of this curve coincide with  those of the patchs bottom ( p00  p30 ) and top ( p03  p33 ) boundary curves, respecti vely. As the curve moves  from the bottom edge of the patch to the top, each of its fo ur control points follows a trajectory that is in turn a  cubic BØzier curve defined by the four control points in  the corresponding column of the array. That is, the  starting point of the moving curve follows  the trajectory defined by control points  p00  p03 , the trajectory of the  ending point is defined by points  p30  p33 , and those of the two intermediate control points by  p10  p13 and p20  p23 . Equivalently, the patch can be considered to be trac ed by a cubic BØzier curve moving from the left  edge to the right, with its control points following the trajectories defined by the rows of the coordinate array  instead of the columns.  The Coons patch (type 6) is actually  a special case of the tensor-product patch (type 7) in which the four  internal control points ( p11 , p12 , p21 , p22 ) are implicitly defined by the bou ndary curves. The values of the  internal control points are given by these equations:  In the more general tensor-produ ct patch, the values of these  four points are unrestricted.  The coordinates of the control points in a tensor-product pa tch shall be specified in the shadings data stream in  the following order:  456731415 8 21316 9 1121110 All control point coordinates shall be expressed in the shadings target coordinate space. These shall be  followed by the colour values for the four corners of the  patch, in the same order as the corners themselves. If  the patchs edge flag  f is 0, all 16 control points and four corner  colours shall be explicitly specified in the data  stream. If  f is 1, 2, or 3, the control points and colours fo r the patchs shared edge are implicitly understood to  be the same as those along the specified edge of the previous patch and shall not be repeated in the data  stream.  Ta b l e  86 summarizes the data values for various values of the edge flag  f, expressed in terms of the","xuv xijBiuBjvuu j0=3ƒi0=3ƒ=","yuv yijBiuBjvuu j0=3ƒi0=3ƒ=","p1119e4p00u6p01p10+u2p03p30+u3p31p13+u1p33u++>@u=","p1219e4p03u6p02p13+u2p00p33+u3p32p10+u1pu30++>@u=","p2119e4p30u6p31p20+u2p33p00+u3p01p23+u1p03u++>@u=","p2219e4p33u6p32p23+u2p30p03+u3p02p20+u1p00u++>@u=",""],"209":["' Adobe Systems Incorporated 2008  All rights reserved 201PDF 32000-1:2008 row and column indices used in  Figure 32 . See 8.7.4.5.5, \"Type 4 Shadings (Free-Form Gouraud-Shaded  Triangle Meshes)\"  for further details on the format of the data.  8.8 External Objects 8.8.1 General An ex ternal object  (commonly called an  XObject) is a graphics object whose contents are defined by a self- contained stream, separate from the content stream in  which it is used. There are three types of external  objects:  An  im age XObject  (8.9.5, \"Image Dictionaries\" ) represents a sampled visual image such as a photograph.  A  form XObject  (8.10, \"Form XObjects\" ) is a self-contained description  of an arbitrary sequence of  graphics objects.  A  PostScript XObject  (8.8.2, \"PostScript XObjects\" ) contains a fragment of code expressed in the  PostScript page description language. Po stScript XObjects should not be used. Table  86   Data values in a tensor-product patch mesh   Edge FlagNext Set of Data Values f   0x00 y00 x01 y01 x02 y02 x03 y03 x13 y13 x23 y23 x33 y33 x32 y32x31 y31 x30 y30 x20 y20 x10 y10 x11 y11 x12 y12 x22 y22 x21 y21c00 c03"," c33 c30New patch; no implicit values  f   1x13 y13 x23 y23 x33 y33 x32 y32 x31 y31 x30 y30x20 y20 x10 y10 x11 y11 x12 y12 x22 y22 x21 y21c33 c30Implicit values:  (x00 , y00 ) = (x03 , y03 ) previous c00 = c03 previous(x01 , y01 ) = (x13",", y13 ) previous c03 = c33 previous(x02 , y02 ) = (x23 , y23 ) previous (x03 , y03 ) = (x33 , y33 ) previous f   2x13 y13 x23 y23 x33 y33 x32 y32 x31 y31 x30 y30x20 y20 x10 y10 x11 y11 x12 y12 x22 y22 x21 y21","c33 c30Implicit values:  (x00 , y00 ) = (x33 , y33 ) previousc00 = c33 previous(x01 , y01 ) = (x32 , y32 ) previousc03 = c30 previous(x02 , y02 ) = (x31 , y31 ) previous(x03 , y03 ) = (x30 , y30 ) previousf   3x13 y13 x23 y23 x33 y33 x32 y","32 x31 y31 x30 y30x20 y20 x10 y10 x11 y11 x12 y12 x22 y22 x21 y21c33 c30Implicit values:  (x00 , y00 ) = (x30 , y30 ) previousc00 = c30 previous(x01 , y01 ) = (x20 , y20 ) previousc03 = c00 previous(x02 , y02 ) = (x10 , y10",") previous(x03 , y03 ) = (x00 , y00 ) previous",""],"210":["PDF 32000-1:2008 202 ' Adobe Systems Incorporated 2008  All rights reserved Two further categories of external objects,  group XObjects  and  reference XObjects (both PDF 1.4) , are actually  specialized types of form XObjects with additional properties. See  8.10.3, \"Group XObjects\"  and  8.10.4,  \"Reference XObjects\"  for additiona l information. Any XObject can be painted as part of  another content stream by means of the  Do operator (see  Ta b l e  87). This operator applies to any type of  XObjectimage, form, or PostScript. T he syntax is the same in all cases,  although details of the operators behaviour differ depending on the type.  8.8.2 PostScript XObjects Beginning with PDF 1.1, a content stream may include  PostScript language fragments. These fragments may  be used only when printing to a Post Script output device; they  shall have no effect either when viewing the  document on-screen or when printing it to a non-PostS cript device. In addition, conforming readers may not be  able to interpret the PostScript fragments. Hence, this  capability should be used with extreme caution and only  if there is no other way to achieve the same result. I nappropriate use of PostScri pt XObjects can cause PDF  files to print incorrectly.  A PostScript XObject is an XObject stream whose  Subtype  entry has the value  PS. A PostScript XObject dictionary may contain the entries shown in  Ta b l e  88 in addition to the usual entries common to all streams  (see  Ta b l e  5). If a PDF content stream is translated by a conf orming reader into the PostScript language, any  Do operation  that references a PostScript XObject  may be replaced by the contents of th e XObject stream itself. The stream  shall be copied without interpretation. The PostScript fr agment may use Type 1 and TrueType fonts listed in the  Font  subdictionary of the current resource dictionary (see  7.8.3, \"Resource Dictionaries\" ), accessing them by  their Bas eFont  names using the PostScript  findfont  operator. The fragment shall not use other types of fonts  listed in the  Font  subdictionary. It should not reference the  PostScript definitions  corresponding to PDF  procedure sets (see  14.2, \"Procedure Sets\" ), which are subject to change.  Table  87   XObject Operator   Operands Operator Description name DoPaint the specified XO bject. The operand  name shall appear as a key in  the XObject subdictionary of the current resource dictionary (see  7.8.3,  \"Resource Dictionaries\" ). The associated value shall be a stream whose  Type  entry , if present, is  XObject. The effect of  Do depends on the value  of the XObjects  Subtype entry, which may be  Image (see 8.9.5, \"Image  Dictionaries\" ),  Fo rm  (see 8.10, \"Form XObjects\" ), or PS (see 8.8.2,  \"PostScript XObjects\" ). Table  88   Additional Entries Specific to  a PostScript XObject Dictionary   KeyType Value Type name (Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  XObject for a PostScript XObject.  Subtypename (Required)   The type of XObject that this dictionary describes; shall be  PS for a PostScript XObject.  Alternatively, the value of this entry may be  Form, with an additional  Subtype2  entry whose value shall be  PS.Level1 stream (Optional)   A stream whose contents shall be  used in place of the PostScript  XObjects stream when the target PostSc ript interpreter is known to support  only LanguageLevel 1.",""],"211":["' Adobe Systems Incorporated 2008  All rights reserved 203PDF 32000-1:2008 8.9 Images 8.9.1 General PDFs painting operators incl ude general facilities for dealing with sampled images. A  sampled image (or just  image for short) is a rectangular array of  sample values, each representing a colour. The image may  approximate the appearance of some natural scene obtained through an input scanner or a video camera, or it  may be generated synthetically.  Figure  33   Typical Sampled Image NOTE 1 An image is defined by a sequence of samples obtained by scanning the image array in row or column order.  Each sample in the array consists of as many colour  components as are needed for the colour space in which  they are specifiedfor example, one component for  DeviceGray , three for  DeviceRGB , four for DeviceCMYK , or whatever number is required by a particular  DeviceN  space. Each component is a 1-, 2-, 4-,  8-, or  (PDF 1.5)  16-bit integer, permitting the repr esentation of 2,  4, 16, 256, or  (PDF 1.5)  65536 distinct values  for each component. Other component sizes can be accommodated when a  JPXDecode filter is used; see  7.4.9, \"JPXDecode Filter\" . NOTE 2 PDF provides two means for specifying images:  An image  XObject  (described in  8.9.5, \"Image Dictionaries\" ) is a stream object whose dictionary specifies  attributes of the image and whose data contains the image  samples. Like all external objects, it is painted on  the page by invoking the  Do operator in a content stream (see  8.8, \"External Objects\" ). Image XObjects have  other uses as well, such as for alternate images (see  8.9.5.4, \"Alternate Images\" ), image masks ( 8.9.6,  \"Masked Images\" ), and thumbnail images ( 12.3.4, \"Thumbnail Images\" ). An inli ne image  is a small image that is completely defined both attributes and data directly inline within a  content stream. The kinds of im ages that can be represented  in this way are limited; see  8.9.7, \"Inline Images\" for details.  8.9.2 Image Parameters The properties of an imageresolution, orientation, sc anning order, and so forthare entirely independent of  the characteristics of the ra ster output device on which the image is  to be rendered. A conforming reader  usually renders images by a sampling technique that atte mpts to approximate the colour values of the source  as accurately as possible. The actual accuracy achieved  depends on the resolution a nd other properties of the  output device.  To paint an image, four interrelated items shall be specified:   The format of the image: number of columns (width), number of rows (height), number of colour  components per sample, and number of bits per colour component   The sample data constituting the images visual content",""],"212":["PDF 32000-1:2008 204 ' Adobe Systems Incorporated 2008  All rights reserved  The correspondence between coordinates in user space and those in the images own internal coordinate  space, defining the region of user space that will receive the image   The mapping from colour component values in the image data to component values in the images colour  space All of these items shall be specifie d explicitly or implicitly by an  image XObject or an inline image.  NOTE For convenience, the following sub-clauses refer co nsistently to the object defining an image as an  image  dictionary . Although this term properly refers only to the di ctionary portion of the stream object representing an  image XObject, it should be understood to apply equally to  the streams data portion or to the parameters and  data of an inline image.  8.9.3 Sample Representation The source format for an image shall be described by four parameters:   The width of the image in samples   The height of the image in samples   The number of colour components per sample   The number of bits per colour component  The image dictionary shall specify th e width, height, and number of bits per component explicitly. The number  of colour components shall be inferred from the colour space specified in the dictionary.  NOTE For images using the  JPXDecode filter (see 7.4.9, \"JPXDecode Filter\" ), the number of bits per component is  determined from the image data and not specified in th e image dictionary. The colour space may or may not be  specified in the dictionary. Sample data shall be represented as a stream of bytes,  interpreted as 8-bit unsigned integers in the range 0 to  255. The bytes constitute a continuous bit stream, with the high-order bit of ea ch byte first. This bit stream, in  turn, is divided into units of  n bits each, where  n is the number of bits per component. Each unit encodes a  colour component value, given with high-o rder bit first; units of 16 bits sha ll be given with the most significant  byte first. Byte boundaries shall be ignored, except t hat each row of sample data shall begin on a byte  boundary. If the number of data bits per row is not a mult iple of 8, the end of the row is padded with extra bits to  fill out the last byte. A conforming read er shall ignore these padding bits.  Each n-b it unit within the bit stream shall be interpreted as an unsigned integer in the range 0 to 2 n- 1, with the  high-order bit first. The image dictionarys  Decode  entry maps this integer to a colour component value,  equivalent to what could be used with colour operators such as  sc or  g. Colour components shall be  interleaved sample by sample; for example, in a three-component  RGB image, the red, green, and blue  components for one sample are followed by the red, green, and blue components for the next.  If the image dictionary’s  ImageMask  entry is  false  or absent, the colour samples in an image shall be  interpreted according to the colour space specified in the image dictionary (see  8.6, \"Colour Spaces\" ), without  reference to the colour parameters in the graphics state. However, if the image dictionarys  ImageMask  entry is  true , the sample data sha ll be interpreted as a  stencil mask  for applying the graphics states nonstroking colour  parameters (see  8.9.6.2, \"Stencil Masking\" ). 8.9.4 Image Coordinate System Each image has its own intern al coordinate system, or  image space . The image occupies a rectangle in image  space  w units wide and  h units high, where  w and  h are the width and height of the image in samples. Each  sample occupies one square unit. The coordinate origin (0,  0) is at the upper-left corner of the image, with  coordinates ranging from 0 to  w horizontally and 0 to  h vertically.",""],"213":["' Adobe Systems Incorporated 2008  All rights reserved 205PDF 32000-1:2008 The images sample data is ordered by row, with the horizontal coordinate varying most rapidly. This is shown  in Figure 34 , where the numbers inside the squares indicate the  order of the samples, counting from 0. The  upper-left corner of the first sample is at coordinates (0,  0), the second at (1,  0), and so on through the last  sample of the first row, whos e upper-left corner is at ( w - 1, 0) and whose upper-right corner is at ( w, 0). The  next samples after that are at coordinates (0,  1), (1,  1), and so on to the final sample of the image, whose  upper-left corner is at ( w - 1, h - 1) and whose lower-right corner is at ( w, h). NOTE The image coordinate system and scanning order impos ed by PDF do not preclude using different conventions  in the actual image. Coordinate transformations can be used to map from other conventions to the PDF  convention.  The correspondence between image space and user space  is constant: the unit squa re of user space, bounded  by user coordinates (0,  0) and (1,  1), corresponds to the boundary of the image in image space (see  Figure  35). Following the normal convention for user space, the coordinate (0,  0) is at the  lower-left  corner of this  square, corresponding to coordinates (0,  h) in  image space. The implicit transformation from image space to  user space, if specified explicitly, would be described by the matrix [  1  w 0 0 -1  h 0 1 ].  Figure  34   Source Image Coordinate System Figure 35   Mapping the Source Image An image can be placed on the output page in an y position, orientation,  and size by using the  cm operator to  modify the current transforma tion matrix (CTM) so as to map the unit square of user space to the rectangle or  parallelogram in which the image  shall be painted. Typically, th is is done within a pair of  q and  Q operators to","01h-12h012 w-1w01w-1ww+12w-1(h-1)w(h-1)w+1hw-1","h","0w0(0, 1) (1, 1) (0, 0) (1, 0) Unit square in user space","Current page","Source image CTM",""],"214":["PDF 32000-1:2008 206 ' Adobe Systems Incorporated 2008  All rights reserved isolate the effect of the transformation, which can in clude translation, rotation, reflection, and skew (see  8.3, \"Coordinate Systems\" ).  EXAMPLE If the  XObject subdictionary of the current  resource dictionary defines the name Image1 to denote an  image XObject, the code shown in this example paints  the image in a rectangle whose lower-left corner is  at coordinates (100,  200), that is rotated 45 degrees counter clockwise, and that is 150 units wide and 80  units high.  q% Save graphics state 1 0 0 1 100 200 cm% Translate 0. 7071  0. 7071  -0. 7071  0. 7071  0 0 cm % Rotate 150  0 0 80 0 0 cm% Scale /Image1  Do% Paint image Q% Restore graphics state As discussed in 8.3.4, \"Transformation Matrices\" , these three transformations could be combined into  one. Of course, if the aspect  ratio (width to height) of the original  image in this example is different from  150:80, the result  will be distorted.  8.9.5 Image Dictionaries 8.9.5.1 General An image dictionarythat is, the dictionary portion of  a stream representing an image XObjectmay contain  the entries listed in  Table  89 in addition to the usual entr ies common to all streams (see  Ta b l e  5). There are  many relationships among these entries, and the current colour space may limit the choices for some of them.  Attempting to use an image dictionary  whose entries are inconsistent with each other or with the current colour  space shall cause an error.  The entries described here are appropriate for a  base imageone that is invoked directly with the  Do operator.  Some of the entries should not be used for images us ed in other ways, such as for alternate images (see  8.9.5.4, \"Alternate Images\" ), image masks (see  8.9.6, \"Masked Images\" ), or thumbnail images (see  12.3.4,  \"Thumbnail Images\" ). Except as noted, such irrelevant entrie s are simply ignored by a conforming reader  Table  89   Additional Entries Specif ic to an Image Dictionary   KeyType Value Type name (Optional)   The type of PDF object that this dictionary describes; if  present, shall be  XObject for an image XObject.  Subtypename (Required)  The type of XObject that this dictionary describes; shall  be  Image for an image XObject.  Width integer (Required)   The width of the image, in samples.  Heightinteger (Required)   The height of the  image, in samples.  ColorSpace name  or  array(Required for images, except those that use the  JPXDecode filter;  not allowed forbidden for image masks)  The colour space in which  image samples shall be specified; it can be any type of colour  space except  Pattern.If the image uses the  JPXDecode  filter, this entry may be present: If  ColorSpace  is present, any colour space specifications in  the JPEG2000 data shall be ignored. If  ColorSpace  is absent, the colour space specifications in the  JPEG2000 data shall be used. The  Decode  array shall also be  ignored unless  ImageMask  is true.",""],"215":["' Adobe Systems Incorporated 2008  All rights reserved 207PDF 32000-1:2008 BitsPerComponent integer (Required except for image  masks and images that use the  JPXDecode filter) The number of bits used to represent each  colour component. Only a single value shall be specified; the  number of bits shall be the same for all colour components. The  value shall be 1, 2, 4, 8, or (in PDF 1.5) 16. If  ImageMask  is true , this entry is optional, but if sp ecified, its value shall be 1.  If the image stream uses  a filter, the value of  BitsPerComponent shall be consistent with the size of the data samples that the filter  delivers. In particular, a  CCITTFaxDecode  or JBIG2Decode  filter shall always deliver 1-bit samples, a  RunLengthDecode  or DCTDecode  filter shall always deliver 8-bit samples, and an  LZWDecode  or FlateDecode  filter shall deliver samples of a  specified size if a predictor function is used. If the image stream uses the  JPXDecode filter, this entry is optional  and shall be ignored if present. The bit depth is determined by the  conforming reader in the proc ess of decoding the JPEG2000  image. Intent name (Optional; PDF  1.1) T he name of a colour rendering intent to be  used in rendering the image (see  8.6.5.8, \"Rendering Intents\" ). Default value: the current renderin g intent in the graphics state.  ImageMask boolean (Optional)  A flag indicating whether the image shall be treated as  an image mask (see  8.9.6, \"Masked Images\" ). If this flag is  true, the value of  BitsPerComponent  shall be 1 and  Mask and  ColorSpace  shall not be specified;  unmasked areas shall be painted using the current nonstroking colour. Default value:  false . Maskstream  or array(Optional except for image masks; not allowed for image masks;  PDF 1.3)  An image XObject defining an image mask to be applied  to this image (see  8.9.6.3, \"Explicit Masking\"), or an array  specifying a range of colours to be applied to it as a colour key  mask (see 8.9.6.4, \"Colour Key Masking\" ). If  Im ageMask  is  true , this entry shall not be present.  Decode array(Optional)  An array of numbers describing how to map image  samples into the range of values appropriate for the images colour  space (see  8.9.5.2, \"Decode Arrays\" ). If Imag eMask  is true , the  array shall be either [  0 1 ] or [  1 0 ]; otherwise, its length shall be twice the number of colour components required by  ColorSpace . If  the image uses the  JPXDecode  filter and  ImageMask  is false, Decode  shall be ignored by a conforming reader. Default value: see  8.9.5.2, \"Decode Arrays\" . Interpolate boolean (Optional)  A flag indicating whether image interpolation shall be performed by a conforming reader (see  8.9.5.3, \"Image  Interpolation\" ). Default value:  false. Alternates array(Optional; PDF  1.3) An array of alternate image dictionaries for this  image (see  8.9.5.4, \"Alternate Images\" ). The order of elements  within the array shall have no signifi cance. This entry shall not be present in an image XObject that is itself an alternate image.  Table 89   Additional Entries Specific  to an Image Dictionary (continued) KeyType Value",""],"216":["PDF 32000-1:2008 208 ' Adobe Systems Incorporated 2008  All rights reserved SMaskstream (Optional; PDF  1.4)   A subsidiary image XObject defining a  soft- mask image (see 11.6.5.3, \"Soft-Mask Images\" ) that shall be used  as a source of mask shape or  mask opacity values in the transparent imaging model. The alpha source parameter in the  graphics state determines whether the mask values shall be interpreted as shape or opacity.  If present, this entry shall override the current soft mask in the  graphics state, as well as the images  Mask  entry, if any. However,  the other transparency-related graphics state parametersblend  mode and alpha constantshall remain in effect. If  SMask  is absent, the image shall have no  associated soft mask (although the  current soft mask in the graphics state may still apply).  SMaskInData integer (Optional for images that use the  JPXDecode filter, meaningless  otherwise; PDF  1.5) A code specifying how soft-mask information  (see 11.6.5.3, \"Soft-Mask Images\" ) encoded with image samples  shall be used: 0 If present, encoded soft-mask image information shall be ignored. 1  The images data stream includes encoded soft-mask values. A conforming reader may create a soft-mask image from the  information to be used as a source of mask shape or mask  opacity in the transparency imaging model. 2 The images data stream includes colour channels that have  been preblended with a background; the image data also  includes an opacity channel. A conforming reader may create a  soft-mask image with a  Matte entry from the opacity channel  information to be used as a source of mask shape or mask  opacity in the transparency model. If this entry has a nonzero value,  SMask shall not be specified. See  also 7.4.9, \"JPXDecode Filter\" .Default value: 0. Name name (Required in PDF  1.0; optional otherwise)  The name by which this  image XObject is referenced in the  XObject subdictionary of the  current resource dictionary (see  7.8.3, \"Resource Dictionaries\" ). This entry is obsolescent and shall no longer be used.  StructParent integer (Required if the image is a  structural content item; PDF 1.3) Th e  integer key of the images entry in  the structural parent tree (see  14.7.4.4, \"Finding Structure Elements from Content Items\" ). IDbyte string (Optional; PDF  1.3; indirect reference preferred)  The digital  identifier of the images parent Web Capture content set (see  14.10.6, \"Object Attributes Related to Web Capture\" ).  OPIdictionary (Optional; PDF  1.2)  An OPI version dictionary for the image; see  14.11.7, \"Open Prepress Interface (OPI)\" . If Ima geMask  is true, this entry shall be ignored.  Metadata stream (Optional; PDF  1.4) A met adata stream  containing metadata for the  image (see  14.3.2, \"Metadata Streams\" ). OCdictionary (Optional; PDF  1.5)  An  optional content gr oup or optional content  membership dictionary (see  8.11, \"Optional Content\" ), specifying  the optional content properties for  this image XObject. Before the  image is processed by a conforming reader, its visibility shall be determined based on this entry. If it is determined to be invisible,  the entire image shall be skipp ed, as if there were no  Do operator  to invoke it. Table 89   Additional Entries Specific  to an Image Dictionary (continued) KeyType Value",""],"217":["' Adobe Systems Incorporated 2008  All rights reserved 209PDF 32000-1:2008 EXAMPLE This example defines an image 256  samples wide by 256 high, with 8 bi ts per sample in the DeviceGray  colour space. It paints the image on a page with its lower-left corner positioned at coordinates (45,  140) in  current user space and scaled to a width and height of 132 user space units.  20 0 obj % Page object <<  /Type  /Page  /Parent  1 0 R /Resources  21 0 R  /MediaBox  [ 0 0 612 792 ] /Contents  23 0 R>>endobj 21 0 obj % Resource dictionary for page <<  /ProcSet [ /PDF /ImageB ] /XObject  << /Im1  22 0 R  >>>>endobj 22 0 obj % Image XObject <<  /Type  /XObject  /Subtype  /Image  /Width  256  /Height  256  /ColorSpace  /DeviceGray  /BitsPerComponent  8 /Length  83183  /Filter /ASCII85Decode",">>stream 9LhZI9h\\GY9i+bb;,p:e;G9SP92/)X9M J>^:f14d;,U(X8P;cO;G9e];c$=k9Mn\\]  Image data representing 65,536 samples  8P;cO;G9e];c$=k9Mn\\]~> endstream endobj 23 0 obj % Contents of page << /Length  56 >>stream q% Save graphics state 132 0 0 132 45 140 cm% Translate to (45,140) and scale by 132 /Im1  Do% Paint image Q% Restore graphics state endstream endobj 8.9.5.2 Decode Arrays An images data stream is in itially decomposed into int egers in the domain 0 to 2 n -1, where  n is the value of  the image dictionarys  BitsPerComponent  entry. The images  Decode  array specifies a linear mapping of  each integer component value to a number that would be appropriate as a component value in the images  colour space.  Each pair of numbers in a  Decode array specifies the lower and upper values to which the domain of sample  values in the image is mapped. A  Decode  array shall contain one pair of numbers for each component in the  colour space specified by the images  ColorSpace  entry. The mapping for each colour component, by a  conforming reader shall be a linear transformation; t hat is, it shall use the following formula for linear  interpolation:",""],"218":["PDF 32000-1:2008 210 ' Adobe Systems Incorporated 2008  All rights reserved This formula is used to convert a value  x between  xmin and  xmax to a corresponding value  y between  ymin  and  ymax , projecting along the line defined by the points ( xmin , ymin ) and ( xmax , ymax ). NOTE 1 While this formula applies to values outside the domain  xmin  to xmax  and does not require that  xmin  < xmax  , note that interpolation used for colour conversion, such as the  Decode  array, does require that  xmin < xmax  and clips  x values to this domain so that  y = ymin for all x £ xmin , and y = ymax  for all  x  xmax . For a  Decode  array of the form [  Dmin   Dmax ], this can be written as  where n sh all be the value of  BitsPerComponent  x  shall be the input value,  in the domain 0 to 2 n - 1 Dmin and  Dmax shall be the values  specified in the  Decode  array  y  is the output value, which shall be  interpreted in the images colour space  Samples with a value of 0 shall be mapped to  Dmin  , those with a value of 2 n - 1 shall be mapped to  Dmax , and  those with intermediate values shall be mapped linearly between  Dmin and  Dmax . Ta b l e  90 lists the default  Decode  ar rays which shall be used with the variou s colour spaces by a conforming reader.  NOTE 2 For most colour spaces, the  Decode  arrays listed in the table map into the full range of allowed component  values. For an  Indexed  colour space, the default  Decode  array ensures that component values that index a  colour table are passed through unchanged.  Table  90   Default Decode Arrays   Colour Space Decode Array DeviceGray [","0.0  1.0 ]DeviceRGB [ 0.0  1.0  0.0  1.0   0.0   1.0 ]DeviceCMYK [ 0.0  1.0  0.0  1.0   0.0   1.0  0.0  1.0 ]CalGray[ 0.0  1.0 ]CalRGB[ 0.0  1.0  0.0  1.0   0.0   1.0 ]Lab [ 0  100  amin   amax  bmin   bmax ] where  amin  , amax , bmin , and  bmax correspond to the values in the  Range array of the  images colour space","y Interpolate x x min xmax ymin ymax   =ymin xxmin  ymax ymin xmax xmin ---------------------------- u'„¤‚§•+=","y Interpolate x 0 2 n1Dmin Dmax     =DminxDmax Dmin 2n1------------------------------ -u'„¤‚§•+=",""],"219":["' Adobe Systems Incorporated 2008  All rights reserved 211PDF 32000-1:2008 NOTE 3 It is possible to specify a mapping that  inverts  sample colour intensities by specifying a  Dmin value greater than  Dmax . For example, if the images colour space is  DeviceGray and the  Decode  array is [ 1.0 0.0  ], an input  value of 0 is mapped to 1.0 (white); an input value of 2 n - 1 is mapped to 0.0 (black).  The  Dmin and  Dmax parameters for a colour component need not fall within the range of values allowed for that  component.  NOTE 4 For instance, if an application uses 6-bit numbers  as its native image sample format, it can represent those  samples in PDF in 8-bit form, setting the two unused hi gh-order bits of each sample to 0. The image dictionary  should then specify a  Decode  array of [  0.00000  4.04762  ], which maps input values from 0 to 63 into the  range 0.0 to 1.0 (4.04762 being approximately equal to 255  ‡ 63). If an output value falls outside the range allowed for a  component, it shall be automatically adjusted to the  nearest allowed value.  8.9.5.3 Image Interpolation When the resolution of a source image  is significantly lower than that of th e output device, each source sample  covers many device pixels. As a re sult, images can appear jaggy or blocky. These visual artifacts can be  reduced by applying an  image interpolation  algorithm during rendering. Instead of painting all pixels covered by  a source sample with the same colour, image interpolation attempts to produce a smooth transition between  adjacent sample values.  Image interpolation is enabled by setting the  Interpolate  entry in the image dictionary to  true . It shall be  disabled by default because it may increa se the time required to render the image. NOTE A conforming Reader may choose  to not implement this feature of  PDF, or may use any specific  implementation of interpolation that it wishes. 8.9.5.4 Alternate Images Alternate images  (PDF 1.3)  provide a straightforward and backward-compatible way to include multiple  versions of an image in a PDF file for different purpos es. These variant representations of the image may differ,  for example, in resolution or in colour space. The primary goal is to reduce the need to maintain separate  versions of a PDF document for low-resolution  on-screen viewing and high-resolution printing.  A base image (that is, the image XObject referred to in a resource dictionary) may contain an  Alternates  entry.  The value of this entry shall be an array of  alternate image dictionaries  specifying variant r epresentations of the  base image. Each alternate image dictionary shall cont ain an image XObject for one variant and shall specify  its properties.  Ta b l e  91 shows the contents of an alternate image dictionary. ICCBased Same as the value of  Range in the ICC profile of the images  colour space  Indexed [ 0 N ], where  N   2n  1Pattern(Not permitted with images) Separation [ 0.0  1.0 ]DeviceN [  0.0  1.0  0.0  1.0    0.0  1.0 ] (one pair of elements for  each colour component) Table 90   Default Decode Arrays (continued) Colour Space Decode Array",""],"220":["PDF 32000-1:2008 212 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE The following shows an image with  a single alternate. Th e base image is a gra yscale image, and the  alternate is a high-resolution  RGB image stored on a Web server.  10 0 obj% Image XObject <<  /Type  /XObject  /Subtype  /Image  /Width  100  /Height  200  /ColorSpace  /DeviceGray  /BitsPerComponent  8 /Alternates  15 0 R /Length  2167 /Filter /DCTDecode >>stream Image data  endstream endobj 15 0 obj% Alternate images array [  << /Image  16 0 R /DefaultForPrinting  true   >>]endobj 16 0 obj% Alternate image <<  /Type  /XObject  /Subtype  /Image  /Width  1000  /Height  2000  /ColorSpace  /DeviceRGB  /BitsPerComponent","8 /Length  0% This is an external stream  /F << /FS  /URL   /F ( http : / / www  . myserver . mycorp . com / images  / exttest . jpg  )   >>  /FFilter  /DCTDecode >>streamendstream endobj Table  91   Entries in an Alternate Image Dictionary   Key Type Value Imagestream(Required)  The image XObject for the alternate image.  DefaultForPrintingboolean (Optional)  A flag indicating whether this alternate image shall be the  default version to be used for printi ng. At most one alternate for a  given base image shall be so designated. If no alternate has this entry  set to true , the base image shall be used for printing by a conforming  reader.  OCdictionary (Optional; PDF  1.5) An optional content group (see  8.11.2, \"Optional  Content Groups\" ) or optional content mem bership dictionary (see  8.11.2.2, \"Optional Content Membership Dictionaries\" ) that facilitates  the selection of which alternate image to use.",""],"221":["' Adobe Systems Incorporated 2008  All rights reserved 213PDF 32000-1:2008 In PDF 1.5, optional content (see  8.11, \"Optional Content\" ) may be used to facilitate selection between  alternate images. If an ima ge XObject contains both an  Alternates  entry and an  OC entry, the choice of which  image to use shall be determined as follows: a) If the images  OC entry specifies that the base image is  visible, that image shall be displayed. b) Otherwise, the list of alternates spe cified by the  Alternates  entry is examined, and the first alternate containing an  OCentry specifying that its content should be visible shall be sh own. (Alternate image s that have no  OC entry shall not be  shown.)  8.9.6 Masked Images 8.9.6.1 General Ordinarily, in the opaque imaging model, images mark a ll areas they occupy on the page as if with opaque  paint. All portions of the image, wh ether black, white, gray, or colour,  completely obscure any marks that may  previously have existed in the same place on the pa ge. In the graphic arts industry and page layout  applications, however, it is common  to crop or mask out the background of an image and then place the  masked image on a different background so that th e existing background shows through the masked areas. A  number of PDF features are available for achieving such masking effects:  The  ImageMask  entry in the image dictionary, specifies  that the image data shall be used as a  stencil  mask  for painting in the current colour.  The  Mask  entry in the image dictionary  (PDF 1.3)  specifies a separate image XObject which shall be used  as an  explicit mask  specifying which areas of the image to paint and which to mask out.   Alternatively, the  Mask  entry  (PDF 1.3) specifies a range of colours which shall be masked out wherever  they occur within the image. This technique is known as  colour key masking. NOTE 5 Earlier versions of PDF  commonly simulated masking by defining a clipping path enclosing only those of an  images samples that are to be painted. However, if the clipping path is very complex (or if there is more than  one clipping path) not all conforming Readers will render the results in the same way. An alternative way to  achieve the effect of an explicit mask is to define the image being clipped as a pattern, make it the current  colour, and then paint the explicit mask as an image whose  ImageMask  entry is  true. In the transparent imaging model, a fourth type of masking effect,  soft masking , is available through the  SMask entry  (PDF 1.4) or the  SMaskInData  entry  (PDF 1.5)  in the image dictionary; see  11.6.5, \"Specifying Soft  Masks\" , for further discussion.  8.9.6.2 Stencil Masking An im age mask  (an image XObject whose  ImageMask  entry is  true ) is a monochrome image in which each  sample is specified by a single bit. However, instead of being painted in opaque black and white, the image  mask is treated as a  stencil mask that is partly opaque and partly transparent. Sample values in the image do  not represent black and white pixels; rather, they designate places on the  page that should either be marked  with the current colour or masked out (not marked at all). Areas that are masked out retain their former  contents. The effect is like applying pa int in the current colour through a cut-out stencil, which lets the paint  reach the page in some places and masks it out in others.  An image mask differs from an ordinary image in the following significant ways:   The image dictionary shall not contain a  ColorSpace  entry because sample values represent masking  properties (1 bit per sample) rather than colours.   The value of the  BitsPerComponent  entry shall be 1.  The  Decode  entry determines how the source samples shall be interpreted. If the  Decode  array is [  0 1 ] (the default for an image mask), a sample value of 0 shall mark the page with the current colour, and a 1",""],"222":["PDF 32000-1:2008 214 ' Adobe Systems Incorporated 2008  All rights reserved shall leave the previous contents unchanged. If the  Decode  array is [  1 0 ], these meanings shall be  reversed.  NOTE 6 One of the most important uses of  stencil masking is for painting character glyphs represented as bitmaps.  Using such a glyph as a stencil mask transfers only its b lack bits to the page, leaving the white bits (which  are really just background) unchanged. For reasons discussed in  9.6.5, \"Type 3 Fonts\" , an image mask, rather  than an image, should almost always be used to paint glyph bitmaps.  If image interpolation (see  8.9.5.3, \"Image Interpolation\" ) is requested during stenc il masking, the effect shall  be to smooth the edges of the mask, not to interpolate  the painted colour values. This effect can minimize the  jaggy appearance of a low-resolution stencil mask.  8.9.6.3 Explicit Masking In PDF 1.3, the  Mask entry in an image dictionary may be an image mask, as described in sub-clause  8.9.6.2,  \"Stencil Masking\" , which serves as an  explicit mask for the primary (base) image. The base image and the  image mask need not have the same resolution ( Width  and  Height values), but since all images shall be  defined on the unit square in user space, thei r boundaries on the page will coin cide; that is, they will overlay  each other. The image mask indicates which places on  the page shall be painted and which shall be masked  out (left unchanged). Unmasked areas shall be painted  with the corresponding portions of the base image;  masked areas shall not be.  8.9.6.4 Colour Key Masking In PDF 1.3, the  Mask entry in an image dictionary may be an array specifying a range of colours to be masked  out. Samples in the image that fall within this range sha ll not be painted, allowing th e existing background to  show through.  NOTE 1 The effect is similar to that of  the video technique known as chroma-key.  For colour key masking, the value of the  Mask  entry shall be an array of 2 ¥  n integers,  [ min1 max 1  minn maxn ], where  n is the number of colour components in the images colour space. Each  integer shall be in the range 0 to 2 BitsPerComponent  - 1, representing colour values  before  decoding with the  Decode  array. An image sample shall be masked (not painted) if all of its colour components before decoding,  c1  cn , fall within the specifie d ranges (that is, if  mini £ ci £ maxi for all 1  £ i £ n). When colour key masking is  specified, the use of a  DCTDecode or lossy  JPXDecode filter for the stream can  produce unexpected results. NOTE 2DCTDecode  is always a lossy filter while  JPXDecode has a lossy filter option. Th e use of a lossy filter mean  that the output is only an approximation of the original  input data. Therefore, the use  of this filter may lead to  slight changes in the colour values of image samples, possibly causing samples that were intended to be  masked to be unexpectedly painted instead, in  colours slightly different from the mask colour.  8.9.7 Inline Images As an alternative to the im age XObjects described in  8.9.5, \"Image Dictionaries\" , a sampled image may be  specified in the form of an  inline image. This type of image shall be defined  directly within the content stream in  which it will be painted ra ther than as a separate object. Becaus e the inline format give s the reader less  flexibility in managing th e image data, it shall be used only  for small images (4 KB or less).  An inline image object shall be delimited in the content stream by the operators  BI (begin image), ID (image  data), and  EI (end image). These operators are summarized in  Ta b l e  92. BI an d  ID shall bracket a series of  key-value pairs specifying the characteristics of  the image, such as its dimensions and colour space; the image  data shall follow between the  ID and  EI operators. The format is thus analogous  to that of a stream object such  as an image XObject:",""],"223":["' Adobe Systems Incorporated 2008  All rights reserved 215PDF 32000-1:2008 BI Key-value pairs  ID Image data  EIInline image objects shall not be nested; that is, two  BI operators shall not appear without an intervening  EI to  close the first object. Similarly, an  ID operator shall only appear between a  BI and its balancing  EI. Unless the  image uses  ASCIIHexDecode  or  ASCII85Decode  as one of its filters, the  ID operator shall be followed by a  single white-space character, and the next character  shall be interpreted as the  first byte of image data.  The key-value pairs appearing between the  BI and ID operators are analogous to t hose in the dictionary portion  of an image XObject (though the syntax is different).  Table  93 shows the entries that are valid for an inline  image, all of which shall have the same  meanings as in a stream dictionary (see  Ta b l e  5) or an image dictionary  (see  Table  89). Entries other than those listed shall be ignored; in particular, the  Type , Subtype , and  Length entries normally found in a stream or image dictionary a re unnecessary. For convenience, the abbreviations  shown in the table may be used in  place of the fully spelled-out keys.  Ta b l e  94 shows additional abbreviations  that can be used for the names of colour spaces and filters.  These abbreviations are valid only in inline imag es; they shall not be used in image XObjects.  JBIG2Decode and  JPXDecode are not listed in  Ta b l e  94 because those filters shall not be used with inline images.  Table  92   Inline Image Operators   Operands Operator Description BIBegin an inline image object.  IDBegin the image data for an inline image object.  EIEnd an inline image object.  Table  93   Entries in an Inline Image Object   Full Name Abbreviation BitsPerComponent BPCColorSpace CSDecode DDecodeParms DPFilter FHeightHImageMask IMIntent  (PDF 1.1) No abbreviation Interpolate I (uppercase I)Width WTable  94   Additional Abbreviations in an Inline Image Object   Full Name Abbreviation DeviceGray GDeviceRGB RGB",""],"224":["PDF 32000-1:2008 216 ' Adobe Systems Incorporated 2008  All rights reserved The colour space specified by the  ColorSpace  (or  CS) entry shall be one of the standard device colour spaces  (DeviceGray , DeviceRGB , or  DeviceCMYK ). It shall not be a CIE-based colour space or a special colour  space, with the exception  of a limited form of  Indexed  colour space whose base colour space is a device space  and whose colour table is specified by a byte string (see  8.6.6.3, \"Indexed Colour Spaces\" ). Beginning with  PDF 1.2, the value of the  ColorSpace  entry may also be the name of a colour space in the  ColorSpace subdictionary of the current  resource dictionary (see  7.8.3, \"Resource Dictionaries\" ). In this case, the name  may designate any colour space that  can be used with an image XObject.  NOTE 1 The names  DeviceGray , DeviceRGB , and  DeviceCMYK  (as well as their abbreviations  G, RGB, and  CMYK ) always identify the corresponding colour spaces  directly; they never refer to resources in the  ColorSpace subdictionary.  The image data in an inline image may be encoded by using any of the standard PDF filters  except JPXDecode  and JBIG2Decode. The bytes between the  ID and EI operators shall be treated the same as a stream objects  data (see  7.3.8, \"Stream Objects\" ), even though they do not follow the standard stream syntax.  NOTE 2 This is an exception to the usual rule that the data  in a content stream shall be  interpreted according to the  standard PDF syntax for objects.  EXAMPLE This example shows an inline image 17 samples wide by 17 high with 8 bits per component in the  DeviceRGB  colour space. The image has been encoded  using LZW and ASCII base-85 encoding. The  cm operator is used to scale it to a width and height of 17 units in user space and position it at  coordinates (298,  388). The  q and Q operators encapsulate the  cm operation to limit its effect to resizing  the image.  q% Save graphics state 17 0 0 17 298  388  cm% Scale and translate coordinate space BI% Begin inline image object /W 17% Width in samples /H 17 % Height in samples /CS /RGB% Colour space /BPC 8% Bits per component /F [ /A85  /LZW ]% Filters ID% Begin image data J1/gKA>.]AN&J?]-<HW]aRVcg*bb.\\eKAdVV%/PcZ  Omitted data  R.s(4KE3&d&7hb*7[%Ct2HCqC~>EI% End inline image object Q% Restore graphics state DeviceCMYK CMYKIndexed I (u ppercase I) ASCIIHexDecode AHxASCII85Decode A85 LZWDecode LZW FlateDecode  (PDF 1.2) Fl (upp ercase F, lowercase L) RunLengthDecode RLCCITTFaxDecode CCFDCTDecode DCTTable 94   Additional Abbreviations in  an Inline Image Object (continued) Full Name Abbreviation",""],"225":["' Adobe Systems Incorporated 2008  All rights reserved 217PDF 32000-1:2008 8.10 Form XObjects 8.10.1 General A form XObject  is a PDF content stream that is a self-con tained description of any sequence of graphics  objects (including path objects, text objects, and sampled im ages). A form XObject may be painted multiple  timeseither on several pages or at  several locations on the same pageand produces the same results each  time, subject only to the graphics state at the time it is  invoked. Not only is this sh ared definition economical to  represent in the PDF file, but under suitable circumstanc es the conforming reader can optimize execution by  caching the results of rendering the form XObject for repeated reuse.  NOTE 1 The  term  form also refers to a completely different kind of object, an  interactive form  (sometimes called an  AcroForm), discussed in  12.7, \"Interactive Forms\" . Whereas the form XObjects described in this sub-clause  correspond to the notion of forms in the PostScript l anguage, interactive forms are the PDF equivalent of the  familiar paper instrument. Any unqualified use of the word  form is understood to refer to an interactive form; the  type of form described here is alwa ys referred to explicitly as a  form XObject . Form XObjects have various uses:   As its name suggests, a form XObject may  serve as the template for an entire page.  EXAMPLE A program that prints filled-in tax forms can first  paint the fixed template as a form XObject and then paint  the variable information on top of it.   Any graphical element that is to be used repeatedly, such as a company logo or a standard component in  the output from a computer-aided design system, may be defined as a form XObject.   Certain document elements that are not part of a  pages contents, such as annotation appearances (see  12.5.5, \"Appearance Streams\" ), shall be represented as form XObjects.   A specialized type of form XObject, called a  group XObject (PDF 1.4) , can be used to group graphical  elements together as a unit for various purposes (see  8.10.3, \"Group XObjects\" ). In particular, group  XObjects shall be used to define transparency group s and soft masks for use in the transparent imaging  model (see  11.6.5.2, \"Soft-Mask Dictionaries\"  and  11.6.6, \"Transparency Group XObjects\" ).  Another specialized type of form XObject, a  reference XObject (PDF 1.4) , may be used to import content  from one PDF document into another (see  8.10.4, \"Reference XObjects\" ). A writer shall perform the follo wing two specific operations in  order to use a form XObject: a)Define the appearance of the form XObject . A form XObject is a PDF content st ream. The dictionary portion of the  stream (called the  form dictionary ) shall contain descriptive information about the form XObject; the body of the stream  shall describe the graphics objects that produce its appearan ce. The contents of the form dictionary are described in  8.10.2, \"Form Dictionaries\" . b)Pain t the form XObject . The  Do operator (see  8.8, \"External Objects\" ) shall paint a form XObject whose name is  supplied as an operand. The name shall be defined in the  XObject subdictionary of the current resource dictionary.  Before invoking this operator, the content stream in which it appears should set appropriate parameters in the graphics  state. In particular, it should alter the current transformati on matrix to control the position, size, and orientation of the  form XObject in user space.  Each form XObject is defined in its own coordinate system, called  form space . The BBox entry in the form  dictionary shall be expressed in form space, as shall be any coordinates used in the form XObjects content  stream, such as path coordinates. The  Matrix  entry in the form dictionary shall specify the mapping from form  space to the current user space. Each ti me the form XObject is painted by the  Do operator, this matrix shall be  concatenated with the current transfor mation matrix to define the mapping from form space to device space.  NOTE 2 This differs from the  Matrix entry in a pattern dictionary, which maps pattern space to the initial user space of  the content stream in which the pattern is used.",""],"226":["PDF 32000-1:2008 218 ' Adobe Systems Incorporated 2008  All rights reserved When the Do operator is applied to a form XObject, a conforming reader shall perform the following tasks:  a) Saves the current graphics stat e, as if by invoking the  q operator (see  8.4.4, \"Graphics State Operators\" ) b) Concatenates the matrix from the form dictionarys  Matrix  entry with the current transformation matrix (CTM)  c) Clips according to the form dictionarys  BBox entry d) Paints the graphics objects specified in the forms content stream  e) Restores the saved graphics st ate, as if by invoking the  Q operator (see  8.4.4, \"Graphics State Operators\" ) Except as described above, t he initial graphics state for the form shall be inherited from the graphics state that  is in effect at the time  Do is invoked.  8.10.2 Form Dictionaries Every form XObject shall have a  form type , which determines the format and meaning of the entries in its form  dictionary. This specification only  defines one form type, Type 1. Form  XObject dictionaries may contain the  entries shown in  Ta b l e  95, in addition to the usual entries common to all streams (see  Ta b l e  5). Table  95   Additional Entries Specific  to a Type 1 Form Dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  XObject for a form XObject.  Subtypename (Required)  The type of XObject that this dictionary describes; shall be Form  for a form XObject.  FormType integer (Optional)  A code identifying the type  of form XObject that this  dictionary describes. The only valid  value is 1. Default value: 1.  BBoxrectangle (Required)  An array of four numbers  in the form coordinate system  (see above), giving the coordinates of  the left, bottom, right, and top  edges, respectively, of the form XObjects bounding box. These  boundaries shall be used to clip the form XObject and to determine its  size for caching.  Matrixarray(Optional)  An array of six numbers specifying the  form matrix , which  maps form space into user space (see  8.3.4, \"Transformation  Matrices\"). Default value: the identity matrix [  1 0 0 1 0 0 ].  Resources dictionary (Optional but strongly recommended; PDF  1.2) A  dictionary specifying  any resources (such as fonts a nd images) required by the form  XObject (see  7.8, \"Content Streams and Resources\" ). In a PDF whose version is 1.1 and earlier, all named resources used in  the form XObject shall be included in the resource dictionary of each  page object on which the form XObject appears, regardless of whether  they also appear in the resource  dictionary of the form XObject. These  resources should also be specified in the form XObjects resource  dictionary as well, to determine wh ich resources are used inside the  form XObject. If a resource is included in both dictionaries, it shall  have the same name in both locations.  In PDF 1.2 and later versions, form XObjects may be independent of  the content streams in which they appear, and this is strongly  recommended although not required. In an independent form XObject,  the resource dictionary of the fo rm XObject is required and shall  contain all named resources used by the form XObject. These  resources shall not be promoted  to the outer content streams  resource dictionary, although that st reams resource dictionary refers  to the form XObject.",""],"227":["' Adobe Systems Incorporated 2008  All rights reserved 219PDF 32000-1:2008 EXAMPLE The following shows a simple form XObject that paints a filled square 1000 units on each side.  6 0 obj % Form XObject <<  /Type  /XObject  /Subtype  /Form  /FormType  1 /BBox [ 0 0 1000  1000  ] /Matrix  [ 1 0 0 1 0 0 ] /Resources  << /ProcSet [ /PDF ] >>Group dictionary (Optional; PDF  1.4) A group attributes dictionary  indicating that the  contents of the form XObject  shall be treated as a group and  specifying the attributes of that group (see  8.10.3, \"Group XObjects\" ). If a  Re f  entry (see below) is present, the group attributes shall also  apply to the external page imported by that entry, which allows such an  imported page to be treated as a gr oup without further modification.  Refdictionary (Optional; PDF  1.4)  A  reference dictionary identifying a page to be  imported from another  PDF file, and for which the form XObject serves  as a proxy (see  8.10.4, \"Reference  XObjects\" ). Metadata stream(Optional; PDF  1.4) A met adata stream  containing metadata for the  form XObject (see  14.3.2, \"Metadata Streams\" ). PieceInfo dictionary (Optional; PDF  1.3)  A p age-piece dictionary associated with the form  XObject (see  14.5, \"Page-Piece Dictionaries\" ). LastModifieddate (Required if  PieceInfo  is present; optional otherwise; PDF  1.3) Th e  date and time (see  7.9.4, \"Dates\" ) when the form XObjects contents  were most recently  modified. If a page-piece dictionary ( PieceInfo ) is present, the modification date shall be used to ascertain which of the  application data dictionaries it contains correspond to the current  content of the form (see  14.5, \"Page-Piece Dictionaries\" ). StructParent integer (Required if the form XObject is a structural content item; PDF  1.3)The integer key of the form XObjects ent ry in the structural parent tree  (see 14.7.4.4, \"Finding Structure Elements from Content Items\" ). StructParents integer (Required if the form  XObject contains marked- content sequences that  are structural co ntent items; PDF  1.3) T he integer key of the form  XObjects entry in the structural parent tree (see  14.7.4.4, \"Finding  Structure Elements from Content Items\" ). At most one of the entries  StructParent  or StructParents  shall be present. A form XObject shall be either a  content item in its entirety or  a container for marked-cont ent sequences that are  content items, but  not both.  OPIdictionary (Optional; PDF","1.2) An OPI version dictionary for the form XObject  (see 14.11.7, \"Open Prepress Interface (OPI)\" ). OCdictionary (Optional; PDF  1.5)  An o ptional content group  or optional content  membership dictionary (see  8.11, \"Optional Content\" ) specifying the  optional content properties for the  form XObject. Be fore the form is processed, its visibility shall be determi ned based on this entry. If it is  determined to be invisible, the entire  form shall be skipped, as if there  were no  Do operator to invoke it. Name name (Required in PDF 1.0; optional otherwise)  The name by which this  form XObject is referenced in the  XObject  subdictionary of the current  resource dictionary (see  7.8.3, \"Resource Dictionaries\" ). NOTE This entry is obsolescent and its use is no longer  recommended.  Table 95   Additional Entries Specific to a Type 1 Form Dictionary (continued) KeyType Value",""],"228":["PDF 32000-1:2008 220 ' Adobe Systems Incorporated 2008  All rights reserved  /Length  58>>stream0 0 m0 1000  l1000  1000  l1000  0 lfendstream endobj 8.10.3 Group XObjects A gr oup XObject  (PDF 1.4)  is a special type of form XObject that can be used to group graphical elements  together as a unit for various purposes. It sha ll be distinguished by the presence of the optional  Group  entry in  the form dictionary (see  8.10.2, \"Form Dictionaries\" ). The value of this entry shall be a subsidiary  group  attributes dictionary  describing the properties of the group.  As shown in  Table  96, every group XObject shall have a  group subtype  (specified by the  S entry in the group  attributes dictionary) that determine s the format and meaning of the dictionarys remaining entries. This  specification only defines one subtype, a  transparency group XObject  (subtype  Transparency ) representing a  transparency group for use in the transparent imaging model (see  11.4, \"Transparency Groups\" ). The  remaining contents of this type  of dictionary are described in  11.6.6, \"Transparency Group XObjects\" . 8.10.4 Reference XObjects 8.10.4.1 General Reference XObjects (PDF 1.4)  enable one PDF document to import content from another. The document in  which the reference occurs is called the  containing document ; the one whose content is being imported is the  target document . The target document may reside in a file ex ternal to the containing document or may be  included within it as an embedded file stream (see  7.11.4, \"Embedded File Streams\" ).  The reference XObject in the containing document shall be a form XObject containing the  Ref entry in its form  dictionary, as described below. Th is form XObject shall serve as a  proxy  that shall be displayed or printed by a  conforming reader in place of the imported content.  NOTE 3 The proxy might consist of a low-resolution image of  the imported content, a piece of  descriptive text referring  to it, a gray box to be displayed in its place, or any other similar placeholder.  Conforming readers that  do not recognize the  Ref entry shall simply display or print the proxy as an ordinary  form XObject. Those readers that do  implement reference XObjects shall us e the proxy in place of the imported  content if the latter is unavailable. A conforming reader  may also provide a user interface to allow editing and  updating of imported content links.  Table  96   Entries Common to all Group Attributes Dictionaries   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Group  for a group attributes dictionary.  Sname (Required)  The group subtype , which identifies the type of group whose  attributes this dictionary describes and determines the format and  meaning of the dictionarys remaini ng entries. The only group subtype  defined is  Transparency ; see 11.6.6, \"Transparency Group XObjects\" , for the remaining contents of this type of dictionary.",""],"229":["' Adobe Systems Incorporated 2008  All rights reserved 221PDF 32000-1:2008 The imported content shall consist of a single, complete PDF page in the target document. It shall be  designated by a  reference dictionary , which in turn shall  be the value of the  Ref entry in the reference XObjects  form dictionary (see  8.10.2, \"Form Dictionaries\" ). The presence of the  Ref entry shall distinguish reference  XObjects from other types of form XObjects.  Ta b l e  97 shows the contents of the reference dictionary.  When the imported content replaces the proxy, it shall be transformed according to the proxy objects  transformation matrix and clipped to the boundarie s of its bounding box, as specified by the  Matrix  and  BBox entries in the proxys form dictionary (see  8.10.2, \"Form Dictionaries\" ). The combination of the proxy objects  matrix and bounding box thus implicitly defines the  bounding box of the imported page. This bounding box  typically coincides with the imported pages crop box or art box (see  14.11.2, \"Page Boundaries\" ), but may not  correspond to any of the defined page boundaries. If  the proxy objects form dictionary contains a  Group  entry,  the specified group attributes shall apply to the imported page as well, which allows the imported page to be  treated as a group without further modification.  8.10.4.2 Printing Reference XObjects When printing a page containing reference XObjects, an  application may emit an y of the following items,  depending on the capabilities of the co nforming reader, the user s preferences, and the nat ure of the print job:  The imported content designated by the reference XObject   The reference XObject as a proxy for the imported content   An OPI proxy or substitute image taken from the reference XObjects OPI dictionary, if any (see  14.11.7,  \"Open Prepress Interface (OPI)\" ) The imported content or the reference XObject may also be  emitted, by a conforming reader, in place of an OPI  proxy when generating OPI comments in a PostScript output stream.  8.10.4.3 Special Considerations Certain special considerations arise when refere nce XObjects interact with other PDF features:   When the page imported by a referenc e XObject contains annotations (see  12.5, \"Annotations\" ), all  annotations that contain a printable, u nhidden, visible appearance stream ( 12.5.5, \"Appearance Streams\" ) shall be included in the rendering of the imported page. If the  proxy is a snapshot image of the imported  page, it shall also include the annotation appearanc es. These appearances shall therefore be converted  into part of the proxys content stream, either as subsidia ry form XObjects or by flattening them directly into  the content stream.   Logical structure information associated with a page (see  14.7, \"Logical Structure\" ) may be ignored when  importing the page into another document with a refe rence XObject. In a target document with multiple  Table  97   Entries in a Re ference Dictionary  KeyType Value Ffile specification (Required)  The file containing  the target document.  Pageinteger  or text string (Required)  A page index or page label (see  12.4.2, \"Page Labels\" ) identifying the page of the target document containing the content to  be imported. This reference is a weak one and may be inadvertently  invalidated if the referenced page is  changed or replaced in the target  document after the re ference is created.  IDarray(Optional)  An array of two byte strings constituting a file identifier (see  14.4, \"File Identifiers\" ) for the file containing  the target document. The  use of this entry improves an reader s chances of finding the intended  file and allows it to warn the user  if the file has changed since the  reference was created.",""],"230":["PDF 32000-1:2008 222 ' Adobe Systems Incorporated 2008  All rights reserved pages, structure elements occurring on the imported page  are typically part of a  larger structure pertaining  to the document as a whole; such elements cannot me aningfully be incorporated into the structure of the  containing document. In a one-page target document or one made up of independent, structurally  unrelated pages, the logical structure for the imported p age may be wholly self-contained; in this case, it  may be possible to incorporate this structure informat ion into that of the containing document. However,  PDF provides no mechanism for the logical structure hierar chy of one document to refer indirectly to that of  another.  8.11 Optional Content 8.11.1 General Optional content  (PDF 1.5)  refers to sub-clau ses of content in a PDF document  that can be selectively viewed  or hidden by document autho rs or consumers. This capability is useful  in items such as CAD drawings, layered  artwork, maps, and multi-language documents. NOTE The following sub-clauses describe the PDF  structures used to implement optional content: 8.11.2, \"Optional Content Groups\" , describes the primary structures used  to control the visibility of content.  8.11.3, \"Making Graphical Content Optional\" , describes how individual pieces  of content in a document may  declare themselves as belonging to one or more optional content groups. 8.11.4, \"Configuring Optional Content\" , describes how the states of optional content groups are set. 8.11.2 Optional Content Groups 8.11.2.1 General An optional content group is a dicti onary representing a collection of gr aphics that can be made visible or  invisible dynamically by users of conforming readers.  The graphics belonging to such a group may reside  anywhere in the document: they need not be consecut ive in drawing order, nor even belong to the same  content stream.  Ta b l e  98 shows the entries in an optional content group dictionary.  In its simplest form, each dictionary shall contain a  Type  entry and a  Name  for presentation in a user interface.  It may also have an  Intent  entry that may describe its intended use (see  8.11.2.3, \"Intent\" ) and a  Usage entry that shall describe the na ture of its content (see  8.11.4.4, \"Usage and Usage Application Dictionaries\" ).Table  98   Entries in an Optional Content Group Dictionary   Key Type Value Type name (Required)  The type of PDF object that this dictionary describes; shall be OCG for an optional content group dictionary. Name text string (Required)  The name of the optional  content group, suitable for  presentation in a readers user interface. Intent name or  array (Optional)  A single intent name or an array containing any combination of  names. PDF defines two names,  View  and  Design , that may indicate the  intended use of the graphics in th e group. A conforming reader may  choose to use only groups that have a specific intent and ignore others.  Default value: View . See  8.11.2.3, \"Intent\"  for more information. Usage dictionary (Optional)  A usage dictionary  describing the nature of the content  controlled by the group. It may be used  by features th at automatically  control the state of the group  based on outside factors. See  8.11.4.4,  \"Usage and Usage Application Dictionaries\"  for more information.",""],"231":["' Adobe Systems Incorporated 2008  All rights reserved 223PDF 32000-1:2008 Individual content elements in a document may specify  the optional content group or groups that affect their  visibility (see  8.11.3, \"Making Graphical Content Optional\" ). Any content whose visibility shall be affected by a  given optional content group is said to belong to that group. A group shall be assigned a state, which is either  ON or OFF. States themselves are not part of the PDF  document but may be set pr ogrammatically or through the readers us er interface to change the visibility of  content. When a document is first opened by a conforming reader, the groups states shall be initialized based  on the documents default configuration dictionary (see  8.11.4.3, \"Optional Content Configuration  Dictionaries\"). Content belonging to a group shall be visible when the group is  ON and invisible when it is  OFF. Content may  belong to multiple groups, which ma y have conflicting states. These cases shall be described by the use of  optional content membership dictionaries , described in the next sub-clause. 8.11.2.2 Optional Content  Membership Dictionaries As mentioned above, content may belong to a single  optional content group and shall be visible when the  group is  ON  and invisible when it is  OFF. To express more complex visibility  policies, content shall not declare  itself to belong directly to an optio nal content group but rather to an  optional content membership dictionary , whose entries are shown in  Ta b l e  99. NOTE 18.11.3, \"Making Graphical Content Optional\"  describes how content declares its membership in a group or  membership dictionary. An optional content membership  dictionary may express its  visibility policy in two ways: The  P entry may specify a simple boolean expression in dicating how the optional content groups specified  by the OCGs  entry determine the visibility of content  controlled by the membership dictionary.  PDF 1.6 introduced the  VE entry, which is a visibility expression th at may be used to specify an arbitrary boolean expression for computing the visibility of content from the st ates of optional content groups.  Table  99   Entries in an Optional Co ntent Membership Dictionary   Key Type Value Type name(Required)  The type of PDF object that this dictionary describes; shall be OCMD for an optional content membership dictionary. OCGsdictionary or  array(Optional)  A dictionary or array of dictionaries specifying the optional  content groups whose states shall determine the visibility of content  controlled by this membership dictionary.  Null values or references to deleted objects shall be ignored. If this entry is  not present, is an empty array, or contai ns references only to null or deleted  objects, the membership dictionary shall have no ef fect on the visibility of any content. Pname(Optional)   A name specifying the  visibility policy  for content belonging to  this membership dictionary. Valid values shall be: AllOn visible only if all of the entries in  OCGs are  ONAnyOnvisible if any of the entries in  OCGs are  ONAnyOffvisible if any of the entries in  OCGs are  OFF AllOff visible only if all of the entries in  OCGs are  OFF Default value:  AnyOn VEarray(Optional; PDF 1.6)  An array specifying a  visibility expression , used to  compute visibility of content based on a set of opt ional content groups; see  discussion below.",""],"232":["PDF 32000-1:2008 224 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 2 Since the  VE entry is more general, if it is  present and supported by  the conforming reader software, it should  be used in preference to  OCGs  and  P. However, for compatibility purposes, conforming writers should use  OCGs and  P entries where possible. When the use of  VE is necessary to express the intended behaviour,  OCGs and  P entries should also be provided to approximate  the behaviour in non-conforming reader software. A visibility expression is an array with the following characteristics:  Its first element shall be a name representing a boolean operator ( And, Or, or Not). Subsequent elements shall be either optional c ontent groups or other visibility expressions.   If the first element is  Not, it shall have only one subsequen t element. If the first element is  And or  Or, it  shall have one or more subsequent elements.   In evaluating a visibility expression, the  ON state of an optional content  group shall be equated to the  boolean value  true ; OFF shall be equated to  false . Membership dictionaries are useful in cases such as these:  Some content may choose to be  invisible when a group is  ON and  visible when it is OFF. In this case, the  content would belong to a membership dictionary whose  OCGs  entry consists of a single optional content  group and whose  P entry is  AnyOff or  AllOff.NOTE 3 It is legal to have an  OCGs  entry consisting of a single group and a  P entry that is  AnyOn  or AllOn . However,  in this case it is preferable to use an optional c ontent group directly because it uses fewer objects.  Some content may belong to more than one group and  needs to specify its policy when the groups are in  conflicting states. In this case, the content wo uld belong to a membership dictionary whose  OCGs entry  consists of an array of optional content groups and whose  P entry specifies the visibility policy, as  illustrated in EXAMPLE 1  in this sub-clause. EXAMPLE 2 in this sub-clause show s the equivalent policy  using visibility expressions. EXAMPLE 1 This example shows content belonging to a mem bership dictionary whose OCGs  entry consists of an  array of optional content groups and whose  P entry specifies th e visibility policy. << /Type /OCMD  % Content belonging to this optional content  % membership dictionary is controlled by the states  /OCGs [12 0 R 13 0 R 14 0 R]  % of three optional content groups. /P /AllOn  % Content is visible only if the state of all three >> % groups is ON; otherwise its hidden. EXAMPLE 2 This example shows a visibi lity expression equivalent to  EXAMPLE 1  in this sub-clause << /Type /OCMD   /VE [/And 12 0 R 13 0 R 14 0 R]  % Visibility expression equivalent to  EXAMPLE 1.>>  EXAMPLE 3 This example shows a more comp licated visibility expression bas ed on five optional content groups,  represented by objects 1 through 5. It is equivalent to OCG 1 OR (NOT OCG 2) OR (OCG 3 AND OCG 4 AND OCG 5) << /Type /OCMD   /VE [/Or% Visibility expression: OR   1 0 R % OCG 1 [/Not 2 0 R] % NOT OCG 2   [/And 3 0 R 4 0 R 5 0 R] % OCG 3 AND OCG 4 AND OCG 5  ]>>",""],"233":["' Adobe Systems Incorporated 2008  All rights reserved 225PDF 32000-1:2008 8.11.2.3 Intent PDF defines two intents:  Design, which may be used to represent a document designers structural  organization of artwork, and  View , which may be used fo r interactive use by do cument consumers. A  conforming writer shall not use a value other than  Design or  View .NOTE The  Intent  entry in  Table  98 provides a way to distinguish between different intended uses of optional content.  For example, many document design applications,  such as CAD packages, offer layering features for  collecting groups of graphics together  and selectively hiding or viewing them for the convenience of the author.  However, this layering may be different (at a finer granul arity, for example) than w ould be useful to consumers  of the document. Therefore, it is po ssible to specify different intents for  optional content groups within a single  document. A conforming reader may decide to use  only groups that are of  a specific intent. Configuration dictionaries (see  8.11.4.3, \"Optional Content Configuration Dictionaries\" ) may also contain an  Intent en try. If one or more of a groups intents is contai ned in the current configurations set of intents, the  group shall be used in determin ing visibility. If there is no match, the  group shall have no effect on visibility.  If the configurations  Intent is an empty array, no grou ps shall be used in determin ing visibility;  therefore, all content shall be considered visible. 8.11.3 Making Graphical Content Optional 8.11.3.1 General Graphical content in a PDF file may be made optional  by specifying membership in an optional content group  or optional content membership dictionary. Two pr imary mechanisms exist for defining membership:  Sections of content streams delimited  by marked-content operators may be  made optional, as described in  8.11.3.2, \"Optional Content in Content Streams\" . Form and image XObjects and annotations may be made op tional in their entirety by means of a dictionary  entry, as described in  8.11.3.3, \"Optional Content in XObjects and Annotations\" .When a piece of optional content in a PDF file is det ermined that it shall be hidden, the following occurs:   The content shall not be drawn.  Graphics state operations, such as  setting the colour, tran sformation matrix, and clipping, shall still be  applied. In addition, graphics state side effects that  arise from drawing operators shall be applied; in  particular, the current text position shall be updated even for text wrapped in optional content. In other  words, graphics state parameters that persist past t he end of a marked-content section shall be the same  whether the optional content is visible or not.  Hiding a section of optional content shall not change t he colour of objects that do not belong to the same  optional content group.  This rule shall also apply to operators that set state that is not strictly graphics state; for example,  BX and EX.  Objects such as form XObjects and annotations that  have been made optional may be skipped entirely,  because their contents are encapsulated such that no  changes to the graphics state (or other state) persist  beyond the processing of their content stream. Other features in conformi ng readers, such as search ing and editing, may be af fected by the ability to  selectively show or hide content. A conforming reader may choose whether to use the documents current state  of optional content groups (and, corres pondingly, the documents visible grap hics) or to supply their own states  of optional content groups to control the graphics they process.  NOTE 4 Tools to select and move annotations should ho nour the current on-screen visi bility of annotations when  performing cursor tracking and mouse-click processing.  A full text search engine, however, may need to",""],"234":["PDF 32000-1:2008 226 ' Adobe Systems Incorporated 2008  All rights reserved process all content in a document, regardless of its current visibility on-screen. Export filters might choose the  current on-screen visibility, the full c ontent, or present the user with a se lection of OCGs to control visibility. NOTE 5 A non-conforming reader that does not support op tional content, such as one  that only supports PDF 1.4  functionality, will draw and process all content in a document. 8.11.3.2 Optional Content in Content Streams Sections of content in a cont ent stream (including a page’s  Contents  stream, a form or patterns content  stream, glyph descriptions a Type 3 font as specified by its  CharProcs entry, or an annotations appearance)  may be made optional by enclosing them between the marked-content operators  BDC  and  EMC (see  14.6,  \"Marked Content\" ) with a marked-content ta g of OC. In addition, a  DP marked-content operator may be placed  in a pages content stream to force a reference to an  optional content group or grou ps on the page, even when  the page has no current content in that layer.  The property list associated with the marked content sha ll specify either an optional content group or optional  content membership dictionary to which the content belongs. Because a group shall be an indirect object and a  membership dictionary contains references to indirect  objects, the property list shall be a named resource listed  in the Properties  subdictionary of the curren t resource dictionary (see  14.6.2, \"Property Lists\" ), as shown in  EXAMPLE 1 and  EXAMPLE 2  in this sub-clause. Although the marked-content tag shall be  OC, other applications of marked content are not precluded from  using  OC as a tag. The marked content shall be considered  to be for optional content only if the tag is  OC and  the dictionary operand is a valid optional content  group or optional content membership dictionary. NOTE 1 To avoid conflict with other  features that used marked content  (such as logical structure; see  14.7, \"Logical  Structure\" ), the following strategy is recommended: Where content is to be tagged with  optional content markers  as well as other marker s, the optional content  markers should be nested inside the other marked content.  Where optional content and the other markers would overlap but there is not strict containment, the optional  content should be broken up into two or more  BDC/EMC  sections, nesting the optional  content sections inside  the others as necessary. Breaking up optional content spans does not damage the nature  of the visibility of the  content, whereas the same guarantee cannot be made for all other uses of marked content. NOTE 2 Any marked content tagg ed for optional content that is nested insi de other marked content tagged for optional  content is visible only if all the levels  indicate visibility. In other words, if  the settings that apply to the outer level  indicate that the content should  be hidden, the inner level is hidden regardless of its settings. In the following example, the st ate of the Show Greeting op tional content group directly  controls the visibility of  the text string Hello on the page. When the group is  ON, the text shall be visible; when the group is  OFF, the text shall be hidden. EXAMPLE 1 % Within a content stream ... /OC /oc1 BDC% Optional content follows BT/F1 1 Tf 12 0 0 12 100 600 Tm (Hello) Tj ETEMC% End of optional content ... <<% In the resources dictionary /Properties << /oc1 5 0 R >> % This dictionary maps the name oc1 to an  ...% optional content group (object 5) >>5 0 obj % The OCG controlling the visibility",""],"235":["' Adobe Systems Incorporated 2008  All rights reserved 227PDF 32000-1:2008 <<  % of the text. /Type /OCG /Name (Show Greeting)  >>endobj The example above shows one piece of content associat ed with one optional content group. There are other  possibilities:  More than one section of content may refer to the same group or membership dictionary, in which case the  visibility of both sectio ns is always the same.   Equivalently, although less space-efficient, different  sections may have separate membership dictionaries  with the same  OCGs  and  P entries. The sections  shall have identical visibility behaviour.   Two sections of content may belong to membership di ctionaries that refer to the same group(s) but with  different  P settings. For example, if one section has no  P entry, and the other has a  P entry of  AllOff, the visibility of the two sections  of content shall be opposite. That is,  the first section shall be visible when the  second is hidden, and vice versa. The following example demonstrates both the direct use  of optional content groups and the indirect use of  groups through a membership dictionary. The content (a black rectangle frame) is drawn if either of the images  controlled by the groups named Image A or Image B is shown. If both groups are hidden, the rectangle frame  shall be hidden. EXAMPLE 2 % Within a content stream ... /OC /OC2 BDC % Draws a black rectangle frame 0 g4 w100 100 412 592 re s EMC/OC /OC3 BDC % Draws an image XObject  q412 0 0 592 100 100 cm /Im3 Do QEMC/OC /OC4 BDC % Draws an image XObject  q412 0 0 592 100 100 cm /Im4 Do QEMC... <<  % The resource dictionary /Properties << /OC2 20 0 R /OC3 30 0 R /OC4 40 0 R >> /XObject << /lm3 50 0 R /lm4 /60 0 R >> >>20 0 obj <<% Optional content membership dictionary /Type /OCMD /OCGs [30 0 R 40 0 R] /P /AnyOn>>endobj 30 0 obj % Optional content group Image A <</Type /OCG /Name (Image A)",""],"236":["PDF 32000-1:2008 228 ' Adobe Systems Incorporated 2008  All rights reserved >>endobj 40 0 obj % Optional content group Image B <</Type /OCG /Name (Image B) >>endobj 8.11.3.3 Optional Content in XObjects and Annotations In addition to marked content  within content streams, form XObj ects and image XObjects (see  8.8, \"External  Objects\" ) and annotations (see  12.5, \"Annotations\" ) may contain an  OC entry, which shall be an optional  content group or an optional content membership dictionary.  A form or image XObject’s visibility  shall be determined by the state of the group  or those of the groups  referenced by the membership dictionary in conjunction with its  P (or  VE) entry, along with t he current visibility  state in the context in which the XObjec t is invoked (that is, whether objects ar e visible in the contents stream at  the place where the  Do operation occurred).  Annotations have various flags controlling on-screen and  print visibility (see  12.5.3, \"Annotation Flags\" ). If an  annotation contains an  OC entry, it shall be visible for screen or print only if the flags have the appropriate  settings and the group or membership dictionary indicates it shall be visible. 8.11.4 Configuring Optional Content 8.11.4.1 General A PDF document containing optional content may specify th e default states for the optional content groups in  the document and indicate which external factors shall be used to alter the states.  NOTE The following sub-clauses describe the PDF struct ures that are used to specify this information. 8.11.4.2, \"Optional Content Properties Dictionary\"  describes the structure that  lists all the optional content  groups in the document and their possible configurations.  8.11.4.3, \"Optional Content  Configuration Dictionaries\"  describes the structures  that specify  initial state  settings and other information a bout the groups in the document.  8.11.4.4, \"Usage and Usage Application Dictionaries\"  and  8.11.4.5, \"Determining the State of Optional Content  Groups\"  describe how the states of groups can  be affected based on external factors.  8.11.4.2 Optional Content Properties Dictionary The optional  OCProperties  entry in the document catalog (see  7.7.2, \"Document Catalog\" ) shall contain, when  present, the  optional content properties dictionary , which contains a list of all the  optional content groups in the  document, as well as information about  the default and alternate configur ations for optional content. This  dictionary shall be present if the file  contains any optional content; if it  is missing, a conforming reader shall  ignore any optional content structures in the document. This dictionary contains the following entries: Table  100    Entries in the Optional Content Properties Dictionary   Key Type Value OCGsarray (Required)  An array of indirect referenc es to all the optional content  groups in the document (see  8.11.2, \"Optional Content Groups\" ), in any  order. Every optional content group shall be included in this array.",""],"237":["' Adobe Systems Incorporated 2008  All rights reserved 229PDF 32000-1:2008 8.11.4.3 Optional Content Configuration Dictionaries The  D a nd  Configs  entries in Ta b l e  100  are  con figuration dictionaries , which represent different presentations  of a documents optional content groups for use by conforming readers. The  D configuration dictionary shall be  used to specify the initial state of the optional  content groups when a document is first opened.  Configs  lists  other configurations that may be used  under particular circumstances. The en tries in a configuration dictionary  are shown in  Ta b l e  101 . Ddictionary (Required)  The default viewing optional content configuration dictionary  (see 8.11.4.3, \"Optional Content Configuration Dictionaries\" ).Configs array (Optional) An array of alternate optional content configuration  dictionaries (see  8.11.4.3, \"Optional Content Configuration Dictionaries\" ).Table  101    Entries in an Optional Content Configuration Dictionary   Key Type Value Name text string(Optional)  A name for the configuration, suitable for presentation in a  user interface. Creator text string(Optional)  Name of the application or  feature that created this  configuration dictionary. BaseState name (Optional)  Used to initialize the states of all the optional content  groups in a document when this config uration is applied. The value of  this entry shall be one of the following names: ON The states of all groups shall be turned  ON.OFF  The states of all groups shall be turned  OFF .Unchanged  The states of all groups shall be left unchanged. After this initializati on, the contents of the  ON and  OFF  arrays shall be processed, overriding the state of the groups included in the arrays. Default value: ON.If  Base State  is present in the documents default configuration  dictionary, its value shall be  ON.ONarray(Optional)   An array of optional conten t groups whose state shall be set to ON when this configuration is applied. If the  Bas eState  entry is ON, this entry is redundant. OFF array(Optional)   An array of optional conten t groups whose state shall be set to OFF  when this configuration is applied. If the  Bas eState  entry is OFF , this entry is redundant. Intent name or array (Optional)  A single intent name or an array containing any  combination of names. it shall be used to determine which optional  content groups states to consider  and which to ignore in calculating  the visibility of content (see  8.11.2.3, \"Intent\" ). PDF defines two intent names,  View  and  Design . In addition, the  name  All shall indicate the set of all intents, including those not yet  defined. Default value:  View . The value shall be  View  for the  documents default  configuration.  Table 100   Entries in the Optional Content Properties Dictionary (continued) Key Type Value",""],"238":["PDF 32000-1:2008 230 ' Adobe Systems Incorporated 2008  All rights reserved ASarray (Optional)  An array of usage application dictionaries (see  Ta b l e  103 ) specifying which usage dictionary categories (see  Table  102) shall be consulted by conforming readers to automatically set the states of  optional content groups based on external factors, such as the current  system language or viewing magnification, and when they shall be applied.  Orderarray (Optional)   An array specifying the order  for presentation of optional  content groups in a conforming reade rs user interface. The array  elements may include the following objects: Optional content group dictionaries, whose  Name entry shall be displayed in the user interface by the conforming reader. Arrays of optional content groups which may be displayed by a  conforming reader in a tree or  outline structure.  Each nested array may optionally have as its first element a text string to be used as a  non-selectable label in a conforming readers user interface.  Text labels in nested arrays shall be used to present collections of  related optional content groups, and not to communicate actual  nesting of content inside multiple layers of groups (see  EXAMPLE 1  in  8.11.4.3, \"Optional Content  Configuration Dictionaries\" ). To reflect  actual nesting of groups in the c ontent, such as for layers with  sublayers, nested arrays of groups wi thout a text label shall be used  (see EXAMPLE 2  in 8.11.4.3, \"Optional Content Configuration  Dictionaries\" ).An empty array [] explicitly specifies that no groups shall be presented. In the default configuration dictionary, the default value shall be an  empty array; in other configuration  dictionaries, the default shall be  the Order  value from the default configuration dictionary. Any groups not listed in this array shall not be presented in any user  interface that uses  the configuration. ListMode name (Optional)   A name specifying which op tional content groups in the  Order  array shall be displayed to the user. Valid values shall be: AllPages  Display all groups in the  Order array. VisiblePages  Display only those groups in the  Order  array that are  referenced by one or more visible pages. Default value: AllPages.RBGroups array (Optional)  An array consisting of one or more arrays, each of which  represents a collection of optional  content groups whose states shall  be intended to follow a radio button  paradigm. That is, the state of at  most one optional content group in each array shall be  ON at a time. If  one group is turned  ON, all others shall be turned  OFF . However,  turning a group from  ON to OFF  does not force any other group to be  turned  ON.An empty array [] explicitly indica tes that no such collections exist. In the default configuration dictionary, the default value shall be an  empty array; in other configuration dictionaries, the default is the  RBGroups  value from the default configuration dictionary. Table 101   Entries in an Optional Co ntent Configuration Dictionary (continued) Key Type Value",""],"239":["' Adobe Systems Incorporated 2008  All rights reserved 231PDF 32000-1:2008 NOTEEXAMPLE 1 and EXAMPLE 2  in this sub-clause illustrate the use of the  Order  entry to control the display of  groups in a user interface. EXAMPLE 1 Given the following PDF objects: 1 0 obj <</Type /OCG /Name (Skin)>> endobj % Optional content groups 2 0 obj <</Type /OCG /Name (Bones)>> endobj 3 0 obj <</Type /OCG /Name (Bark)>> endobj 4 0 obj <</Type /OCG /Name (Wood)>> endobj 5 0 obj% Configuration dictionary << /Order [[(Frog Anatomy) 1 0 R 2 0  R] [(Tree Anatomy) 3 0 R 4 0 R] ] >>   A conforming reader should display th e optional content groups as follows: Frog Anatomy SkinBonesTree Anatomy BarkWood EXAMPLE 2 Given the following PDF objects: % Page contents /OC /L1 BDC% Layer 1 /OC /L1a BDC % Sublayer A of layer 1 0 0 100 100 re f EMC/OC /L1b BDC % Sublayer B of layer 1 0 100 100 100 re f EMCEMC... << /L1 1 0 R % Resource names  /L1a 2 0 R /L1b 3 0 R >>...%Optional content groups 1 0 obj <</Type /OCG /Name (Layer 1)>> endobj 2 0 obj <</Type /OCG /Name (Sublayer A)>> endobj 3 0 obj <</Type /OCG /Name (Sublayer B)>> endobj ... 4 0 obj% Configuration dictionary << /Order [1 0 R [2 0 R 3 0 R]] >>     A conforming reader should display the OCGs as follows: Layer 1Sublayer A Sublayer B Locked array(Optional; PDF 1.6)  An array of optional c ontent groups that shall be locked when this configuration is applied. The state of a locked group  cannot be changed through the user  interface of a conforming reader.  Conforming writer s can use this entry to prevent the visibility of  content that depends  on these groups from being changed by users. Default value: an empty array. A conforming reader may allow the states of optional content groups  from being changed by means other t han the user interface, such as  JavaScript or items in the  AS entry of a configuration dictionary.  Table 101   Entries in an Optional Co ntent Configuration Dictionary (continued) Key Type Value",""],"240":["PDF 32000-1:2008 232 ' Adobe Systems Incorporated 2008  All rights reserved The  AS entry is an  auto state  array consisting of one or more  usage application dictionaries  that specify how  conforming readers shall automatically set the state of op tional content groups based on external factors, as  discussed in the following sub-clause.  8.11.4.4 Usage and Usage Application Dictionaries Optional content groups  are typically constructed to control the visibility of graphic  objects that are related in  some way. Objects can be related in  several ways; for example, a group may contain content in a particular  language or content suitable for vi ewing at a particular magnification. An optional content groups usage dictionary (the value of the  Usage entry in an optional content group  dictionary; see  Table  98) shall contain information describing the natu re of the content controlled by the group.  This dictionary can contain any combination of the entries shown in  Table  102 .Table  102    Entries in an Optional Content Usage Dictionary   Key Type Value CreatorInfo dictionary (Optional)  A dictionary used by the creating application to store  application-specific data associated wi th this optional content group. It  shall contain two required entries: Creator  A text string specifying the appl ication that cr eated the group. Subtype A name defining the type of co ntent controlled by the group.  Suggested values include but shall not be limited to  Artwork , for graphic-design or publishing applications, and  Technical , for technical designs such as building plans or schematics. Additional entries may be included to present information relevant to the  creating application or related applications. Groups whose  Intent entry contains  Design  typically include a  CreatorInfo  entry. Language dictionary (Optional)  A dictionary specifying the languag e of the content controlled by  this optional content group. It may contain the following two entries: Lang  (required) A text string that specifies a language and possibly  a locale (see  14.9.2, \"Natural Language Specification\" ). For  example, es-MX represents Mexican Spanish. Preferred  (optional)  A name whose values shall be either  ON or OFF . Default value:  OFF . it shall be used by conforming readers  when there is a partial match  but no exact match between the  system language and the language strings in all usage  dictionaries. See  8.11.4.4, \"Usage and Usage Application  Dictionaries\"  for more information. Export dictionary (Optional)  A dictionary containing one entry,  ExportState , a name whose  value shall be either  ON or  OFF . This value shall indicate the  recommended state for content in this  group when the document (or part of  it) is saved by a conforming reader to a format that does not support  optional content (for example, a raster image format).  Zoom dictionary (Optional)  A dictionary specifying a range of  magnifications at which the  content in this optional content group is best viewed. It shall contain one or  both of the following entries: min The minimum recommended magnif ication factor at which the  group shall be  ON. Default value: 0. max The magnification factor be low which the group shall be  ON. Default value: infinity.",""],"241":["' Adobe Systems Incorporated 2008  All rights reserved 233PDF 32000-1:2008 While the data in the usage dictionary serves as information for a document user to examine, it may also be  used by conforming readers  to automatically manipulate th e state of optional content groups based on external  factors such as current system  language settings or zoom level. Document authors may use  usage application  dictionaries  to specify which entries in the  usage dictionary shall be consulted to automatically set the state of  optional content groups based on such factors. Usage  application dictionaries shall be listed in the  AS entry in an optional content configuration dictionary (see  Table  101). If no AS entry is present, states shall not be  automatically adjusted based on usage information. A usage application dictionary specif ies the rules for which usage entries shall be used by conforming readers  to automatically manipulate the state of optional co ntent groups, which groups shall be affected, and under  which circumstances.  Ta b l e  103  shows the entries in a usage application dictionary. Usage application dictionaries shall only be used by in teractive conforming readers, and shall not be used by  applications that use PDF as  final form output (see  8.11.4.5, \"Determining the  State of Optional Content  Groups\"  for more information).  Printdictionary (Optional)  A dictionary specifying that the content in this group is shall be  used when printing. It may contain the following optional entries: Subtype A name object specifying the kind of content controlled by the  group; for example,  Trapping , PrintersMarks  and  Watermark .PrintState  A name that shall be either  ON or OFF , indicating that the  group shall be set to that state when the document is printed  from a conforming reader. View dictionary (Optional)  A dictionary that shall have a single entry,  ViewState , a name  that shall have a value of either  ON or OFF , indicating that the group shall  be set to that state when the documen t is opened in a conforming reader. User dictionary  (Optional)  A dictionary specifying one or more users for whom this optional  content group is primarily intended. Each dictionary shall have two  required entries: Type  A name object that shall be either  Ind  (individual),  Ttl (title), or Org (organization). Name  A text string or array of text  strings representing the name(s)  of the individual, position or organization. PageElementdictionary (Optional)  A dictionary declaring that the  group contains a pagination  artifact. It shall contain one entry,  Subtype, whose value shall be a name  that is either  HF (header/footer),  FG (foreground image or graphic),  BG(background image or graphic), or  L (logo).  Table  103    Entries in a Usage Application Dictionary   Key Type Value Eventname (Required)  A name defining the situation in which this usage application  dictionary should be used. Shall be one of  View , Print, or Export .OCGsarray (Optional)  An array listing the optional cont ent groups that shall have their  states automatically managed based on information in their usage  dictionary (see  8.11.4.4, \"Usage and Usage Application Dictionaries\" ). Default value: an empty array, indicating that no groups shall be affected. Category array (Required)  An array of names, each of which corresponds to a usage  dictionary entry (see  Table  102 ). When managing the states of the  optional content groups in the  OCGs array, each of the corresponding  categories in the groups usage dictionary shall be considered. Table 102   Entries in an Optional Content Usage Dictionary (continued) Key Type Value",""],"242":["PDF 32000-1:2008 234 ' Adobe Systems Incorporated 2008  All rights reserved The  Event entry specifies whether the usage settings shall be  applied during viewing, printing, or exporting the  document. The  OCGs entry specifies the set of optional content groups to which usage settings shall be  applied. For each of the groups in  OCGs, the entries in its usage dictionary (see  Ta b l e  102 ) specified by  Category shall be examined to yield a  recommended state  for the group. If all the entries yield a recommended  state of  ON, the groups state shall be set to  ON; otherwise, its state shall be set to  OFF.The entries in the usage dictionary shall be used as follows: View : The state shall be the value of the  ViewState  entry. This entry allows a document to contain content  that is relevant only when the document is viewed intera ctively, such as instructi ons for how to interact with  the document. Print: The state shall be the value of the  PrintState  entry. If  PrintState  is not present, the state of the  optional content group shall be left unchanged. Export: The state shall be the value of the  ExportState  entry. Zoom : If the current magnification level of th e document is greater than or equal to  min and less than  max, the ON state shall be used; otherwise,  OFF shall be used. User: The  Name entry shall specify a name or names to  match with the users  identification. The  Type entry determines how the  Name  entry shall be interpreted (name, title, or organization). If there is an exact  match, the ON state shall be used; otherwise  OFF shall be used. Language : This category shall allow the  selection of content based on  the language and locale of the  application. If an exact match to the language and locale is found among the  Lang entries of the optional  content groups in the usage application dictionarys  OCGs  list, all groups that have exact matches shall  receive an  ON recommendation. If no exact match is found,  but a partial match is  found (that is, the  language matches but not the locale),  all partially matching groups that have  Preferred  entries with a value of ON shall receive an  ON recommendation. All other groups shall receive an  OFF recommendation. There shall be no restriction on multiple entries with the same value of  Event, in order to allow documents with  incompatible usage application dictionaries to be combined into larger documents and have their behaviour  preserved. If a given optional cont ent group appears in more than one  OCGs ar ray, its state shall be  ON only if all categories in all the usage application dictio naries it appears in shall have a state of  ON. EXAMPLE This example shows the use of an auto st ate array with usage applicat ion dictionaries. The  AS entry in  the default configuration dictionary is an array of th ree usage application dictionaries, one for each of the  Event values View , Print, and  Export. /OCProperties  % OCProperties dictionary in document catalog << /OCGs [1 0 R 2 0 R 3 0 R 4 0 R] /D  << /BaseState /OFF % The default configuration /ON [1 0 R] /AS [% Auto state array of  usage application dictionaries << /Event /View /Category [/Zoom] /O CGs [1 0 R 2 0 R 3 0 R 4 0 R] >>  << /Event /Print /Category [/Print] /OCGs [4 0 R] >> << /Event /Export /Category [/Export] /OCGs [3 0 R 4 0 R] >> ]>>>>... 1 0 obj  << /Type /OCG  /Name (20000 foot view) /Usage << /Zoom << /max 1.0 >> >> >>endobj 2 0 obj  << /Type /OCG",""],"243":["' Adobe Systems Incorporated 2008  All rights reserved 235PDF 32000-1:2008 /Name (10000 foot view) /Usage << /Zoom << /min 1.0 /max 2.0 >> >> >>endobj 3 0 obj  << /Type /OCG  /Name (1000 foot view) /Usage << /Zoom << /min 2.0 /max 20.0 >> /Export << /ExportState /OFF >> >> >>endobj 4 0 obj  << /Type /OCG  /Name (Copyright notice) /Usage << /Print << /PrintState /ON >>  /Export << /ExportState /ON>> >> >>endobj In the example, the usage applicat ion dictionary  with event type  View  specifies that all optional content groups  shall have their states managed based on zoom level when  viewing. Three groups (objec ts 1, 2, and 3) contain  Zoom  usage information. Object 4 has none; therefore, it sh all not be affected by zoom level changes. Object 3  shall receive an OFF recommendation when exporting. When printi ng or exporting, object 4 shall receive an  ON recommendation.  8.11.4.5 Determining the State of Optional Content Groups This sub-clause summarizes the rules by which confor ming readers make use of  the configuration and usage  application dictionaries to set the state of optional content  groups. For purposes of this discussion, it is useful to  distinguish the following type s of conforming readers:  Viewer applications which allow users to in teract with the document in various ways.  Design applications, which offer layering features for  collecting groups of graphics together and selectively  hiding or viewing them. NOTE 1 The following rules are not meant to apply to design  applications; they may manage their states in an entirely  different manner if they choose.  Aggregating applications, which import PDF files as graphics.  Printing applications,  which print PDF files.When a document is first opened, its optional content groups shall be assigned a state based on the  D (default)  configuration dictionary in the  OCProperties  dictionary: a) The value of  BaseState  shall be applied to all the groups. b) The groups listed in either the  ON or OFF  array (depending on which one is opposite to  BaseState ) shall  have their states adjusted. This state shall be the state used by printing and agg regating application. Such applications shall not apply the  changes based on usage application dictionaries described  below. However, for more  advanced functionality,  they may provide user control for manipulating th e individual states of  optional content groups. NOTE 2 Viewer applications may also provide users with an opti on to view documents in this state (that is, to disable  the automatic adjustments discussed below). This option  permits an accurate preview of the content as it will  appear when placed into an aggregating application or sent to a stand-alone printing system. The remaining discussion in this sub-clause applies on ly to viewer applications. Such applications shall  examine the  AS array for usage application dictionaries that have an  Event of type  View . For each one found,",""],"244":["PDF 32000-1:2008 236 ' Adobe Systems Incorporated 2008  All rights reserved the groups listed in its  OCGs array shall be adjusted as described in  8.11.4.4, \"Usage and Usage Application  Dictionaries\".Subsequently, the document is ready for interactive viewin g by a user. Whenever there is a change to a factor  that the usage application dictionaries with event type  View  depend on (such as zoom level), the  corresponding dictionaries shall be reapplied.  The user may manipulate optional content  group states manually or by triggering  SetOCGState  actions (see  12.6.4.12, \"Set-OCG-State Actions\" ) by, for example, clicking links or bookmarks. Manual changes shall  override the states that were set automatically. The stat es of these groups remain overridden and shall not be  readjusted based on usage application dictionaries with event type  View  as long as the document is open (or  until the user reverts the document to its original state).  When a document is printed by a viewer applicatio n, usage application dict ionaries with an event type  Printshall be applied over the current states of optional  content groups. These changes shall persist only for the  duration of the print operation; then all groups shall revert to their prior states. Similarly, when a document is exported to a format t hat does not support optional  content, usage application  dictionaries with an event type  Export  shall be applied over the current states of optional content groups.  Changes shall persist only for the dura tion of the export operati on; then all groups shall revert to their prior  states. NOTE 3 Although the event types  Print and  Export have identically named counterparts that are usage categories, the  corresponding usage application dictionaries are permitt ed to specify that other  categories may be applied.",""],"245":["' Adobe Systems Incorporated 2008  All rights reserved 237PDF 32000-1:2008 9 Text 9.1 General This clause describes the special fac ilities in PDF for dealing with textspeci fically, for representing characters  with glyphs from fonts. A glyph is a  graphical shape and is subject to all graphical manipulations, such as  coordinate transformation. Because of  the importance of text in most page descriptions, PDF provides higher- level facilities to describe,  select, and render glyphs c onveniently and efficiently.  The first sub-clause is a general description of how gl yphs from fonts are painted on the page. Subsequent  sub-clauses cover these topics in detail:  T ext state . A subset of the graphics state parameters pertain  to text, including para meters that select the  font, scale the glyphs to an appropriate si ze, and accomplish other graphical effects.  T ext objects and operators . The text operators specify the glyphs to be painted, represented by string  objects whose values shall be interpreted as sequenc es of character codes. A text object encloses a  sequence of text operators and associated parameters.  Fo nt data structures . Font dictionaries and associated data  structures provide information that a  conforming reader needs to interpret the text and positi on the glyphs properly. The definitions of the glyphs  themselves shall be contained in  font programs , which may be embedded in  the PDF file, built into a conforming reader, or obtained from an external font file.  9.2 Organization and Use of Fonts 9.2.1 General A ch aracter  is an abstract symbol, whereas a  glyph  is a specific graphical rendering of a character.  EXAMPLE 1 The glyphs A,  A, and  A are renderings of the abstract A character.  NOTE 1 Historically these two terms have often been used  interchangeably in computer  typography (as evidenced by  the names chosen for some PDF dictionary keys and Post Script operators), but advances in this area have  made the distinction more meaningful. Consequently, this standard distinguishes between characters and  glyphs, though with some residual names that are inconsistent.  Glyphs are organized into fonts . A font defines glyphs for a particular character set. EXAMPLE 2 The Helvetica and Times  fonts define glyphs for a set  of standard Lati n characters.  A font for use with a conforming reader is prepared in the form of a program. Such a  font program  shall be  written in a special-purpose language, such as the  Type 1 , TrueType , or OpenType  font format, that is  understood by a specialized font interpreter.  In PDF, the term  font refers to a  font dictionary , a PDF object that identifies the font program and contains  additional information about it. There are seve ral different font types, identified by the  Subtype entry of the font  dictionary.  For most font types, the font program shall be defined in a separate  font file , which may be either embedded in  a PDF stream object or obtained from an ex ternal source. The font program contains  glyph descriptions  that  generate glyphs.  A content stream paints glyphs on the  page by specifying a font dictionary  and a string object that shall be  interpreted as a sequence of one or more character codes  identifying glyphs in the font. This operation is called  showing  the text string; the text strings drawn in this way are called  show strings . The glyph description  consists of a sequence of graphics op erators that produce the sp ecific shape for that char acter in this font. To  render a glyph, the conforming re ader executes the glyph description.",""],"246":["PDF 32000-1:2008 238 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 2 Programmers who have expe rience with scan conversion of general  shapes may be concerned about the  amount of computation that this de scription seems to imply. However, th is is only the abstract behaviour of  glyph descriptions and font programs, not how they are  implemented. In fact, an ef ficient implementation can  be achieved through careful caching and  reuse of previously rendered glyphs.  9.2.2 Basics of Showing Text EXAMPLE 1 This example illustrates the most straightforward use of a font. The te xt ABC is placed 10 inches from the  bottom of the page and 4 inches from t he left edge, using 12-point Helvetica.  BT/F13  12 Tf288  720  Td( ABC  ) TjETThe five lines of this example perform these steps:  a)  Begin a text object.  b)  Set the font and font size to use, installing them as  parameters in the text state. In this case, the font  resource identified by the name F13 specifies the font externally known as Helvetica. c)  Specify a starting position on the page, setting parameters in the text object.  d)  Paint the glyphs for a string of  characters at that position. e)  End the text object.  These paragraphs explain these operations in more detail.  To paint glyphs, a content stream shall fi rst identify the font to be used. The  Tf operator shall specify the name  of a font resourcethat is, an entry in the  Font  subdictionary of the current re source dictionary. The value of  that entry shall be a font dictionary. The font dictionary  shall identify the fonts externally known name, such as  Helvetica, and shall supply some additional information that the conforming reader needs to paint glyphs from  that font. The font dictionary may provide  the definition of the font program itself.  NOTE 1 The font resource  name presented to the  Tf operator is arbitrary, as are the names for all kinds of resources. It  bears no relationship to an actual font name, such as Helvetica.  EXAMPLE 2 This Example illustrates an exce rpt from the current pages resource  dictionary, which defines the font  dictionary that is referenced as F13 (see  EXAMPLE 1 in this sub-clause).  /Resources << /Font  << /F13 23 0 R >>>>23 0 obj<<  /Type  /Font  /Subtype  /Type1  /BaseFont  /Helvetica>>endobj A font defines the glyphs at one standard size. This stan dard is arranged so that the nominal height of tightly  spaced lines of text is 1 unit. In the default user coordi nate system, this means the standard glyph size is 1 unit  in user space, or 1   72 inch. Starting with PDF 1.6, the size of th is unit may be specified as greater than 1   72 inch by means of the  UserUnit entry of the page dictionary; see  Ta b l e  30. The standard-size font shall then be  scaled to be usable. The scale factor is specified as the second operand of the  Tf operator, thereby setting the  text font size  parameter in the graphics state.  EXAMPLE 1  in this sub-clause estab lishes the Helvet ica font with a 12-unit size in the graphics state.",""],"247":["' Adobe Systems Incorporated 2008  All rights reserved 239PDF 32000-1:2008 Once the font has been selected and scaled, it may be used to paint glyphs. The  Td operator shall adjust the  translation components of the text matrix, as described in  9.4.2, \"Text-Positioning Operators\" . When executed  for the first time after  BT, Td shall establish the text position in th e current user coordinate system. This  determines the position on the page  at which to begin painting glyphs.  The  Tj o perator shall take a string operand and shall pain t the corresponding glyphs, using the current font and  other text-related parameters in the graphics state.  NOTE 2 The  Tj operator treats each element of the string (an int eger in the range 0 to 255) as a character code (see  EXAMPLE 1 in this sub-clause).  Each byte shall select a glyph description in the font, and the glyph description shall be executed to paint that  glyph on the page. This is the behaviour of  Tj for simple fonts, such as ordinary  Latin text fonts. Interpretation of  the string as a sequence of character codes is  more complex for composite fonts, described in  9.7, \"Composite  Fonts\" . What these steps produce on the page is not a 12- point  glyph, but rather a 12- unit  glyph, where the unit size  shall be that of the text space at the  time the glyphs are rendered on the page. The actual size of the glyph shall  be determined by the text matrix ( Tm ) in the text object, several text  state parameters, and the current  transformation matrix (CTM) in the graphics state; see  9.4.4, \"Text Space Details\" . EXAMPLE 3 If the text space is later scaled to make the  unit size 1 centimeter, painting  glyphs from the same 12-unit font generates results that  are 12 centimeters high.  9.2.3 Achieving Special Graphical Effects Normal uses of  Tj and other glyph-painting  operators cause black-filled glyphs to be painted. Other effects may  be obtained by combining font operators with general graphics operators.  The colour used for painting glyphs shall be the curren t colour in the graphics st ate: either t he nonstroking  colour or the stroking colour (or both), depending on the text rendering mode (see  9.3.6, \"Text Rendering  Mode\" ). The default colour shall be black (in DeviceGray ), but other colours may be  obtained by executing an  appropriate colour-setting operator or operators (see  8.6.8, \"Colour Operators\" ) before painting the glyphs. EXAMPLE 1 This example uses text rendering mode 0 and the g o perator to fill glyphs in 50 percent gray, as shown in  Figure 36 . BT/F13  48 Tf20 40 Td0 Tr0.5  g( ABC  ) TjETFigure  36   Glyphs painted in 50% gray","ABC",""],"248":["PDF 32000-1:2008 240 ' Adobe Systems Incorporated 2008  All rights reserved Other graphical effects may be achieved by treating th e glyph outline as a path instead of filling it. The  text  rendering mode  parameter in the graphics stat e specifies whether glyph outlines  shall be filled, stroked, used  as a clipping boundary, or some combination of these ef fects. Only a subset of the possible rendering modes  apply to Type 3 fonts.  EXAMPLE 2 This example treats glyph outlines as a path to  be stroked. The Tr operator  sets the text rendering mode  to 1 (stroke). The w operator sets the line width to 2 units in user space. Given those graphics state  parameters, the Tj operator strokes the gl yph outlines with a line 2 points thick (see  Figure 37 ).  BT/F13  48 Tf20 38 Td  1 Tr2 w( ABC  ) TjETFigure  37   Glyph outlines treated as a stroked path EXAMPLE 3 This example illustrates how the glyphs  outlines may be used as a clipping boundary. The  Tr operator  sets the text rendering mode to 7 (clip), causing the subsequent  Tj operator to impose the glyph outlines  as the current clipping path. All subsequent painting  operations mark the page  only within this path, as  illustrated in  Figure 38 . This state persists until an earlier c lipping path is reinstated by the  Q operator.  BT/F13  48 Tf20 38 Td  7 Tr( ABC  ) TjET Graphics operators to draw a starburst  Figure  38   Graphics clipped by a glyph path","ABC","ABC",""],"249":["' Adobe Systems Incorporated 2008  All rights reserved 241PDF 32000-1:2008 9.2.4 Glyph Positioning and Metrics A glyphs  widthformally, its  horizontal displacement is the amount of space it oc cupies along the baseline of  a line of text that is written horizonta lly. In other words, it is  the distance the current te xt position shall move (by  translating text space) when the glyph is painted.  NOTE 1 The width is distinct from t he dimensions of the glyph outline.  In some fonts, the width is constant; it does no t vary from glyph to glyph. Such fonts are called  fixed-pitch  or  monospaced . They are used mainly for typewriter-style prin ting. However, most fonts used for high-quality  typography associate a different width wit h each glyph. Such fonts are called  proportional  or  variable-pitch fonts. In either case, the  Tj operator shall position the consecutive glyphs of a string according to their widths.  The width information for each glyph shall be stored both  in the font dictionary and  in the font program itself.  The two sets of widths shall be identical. NOTE 2 Storing this information in the font dictionary, al though redundant, enables a conforming reader to determine  glyph positioning without having to look inside the font program. NOTE 3 The operators for showing text ar e designed on the assumption that glyphs are ordinarily positioned according  to their standard widths. However, means are provided to vary the positioning in certain limited ways. For  example, the TJ operator enables the text position to  be adjusted between any co nsecutive pair of glyphs  corresponding to characters in a text string. There ar e graphics state parameters to adjust character and word  spacing systematically.  In addition to width, a glyph has several other metrics  that influence glyph positioning and painting. For most  font types, this information is  largely internal to the font program and is not specified explicitly in the PDF font  dictionary. However, in a Type 3 font, a ll metrics are specif ied explicitly (see  9.6.5, \"Type 3 Fonts\" ).  The  gly ph coordinate system  is the space in which an individual  characters glyph is defined. All path  coordinates and metrics shall be interpreted in glyph space. For all font types except Type 3, the units of glyph  space are one-thousandth of a unit of text space; for a  Type 3 font, the transformation from glyph space to text  space shall be defined by a  font matrix specified in an explicit  FontMatrix  entry in the font.  Figure 39  shows a  typical glyph outline and its metrics.  Figure  39   Glyph metrics The  gly ph  origin is the point (0,  0) in the glyph coordinate system.  Tj and other text-showing operators shall  position the origin of the first glyph to  be painted at the origin of text space.  EXAMPLE 1 This code adjusts the origin of text space to (40,  50) in the user coordinate  system and then places the  origin of the A glyph at that point:  BT40 50 Td( ABC  ) TjET","Glyphboundingbox Next glyphorigin Glyphorigin","Glyph width",""],"250":["PDF 32000-1:2008 242 ' Adobe Systems Incorporated 2008  All rights reserved The  glyph displacement  is the distance from the glyphs origin to the point at which the origin of the  next  glyph should normally be placed when painti ng the consecutive glyphs  of a line of text. This distance is a vector  (called the  displacement vector ) in the glyph coordinate system; it has horizontal and vertical components.  NOTE 4 Most Western writing systems,  including those based  on the Latin alphabet, ha ve a positive horizontal  displacement and a zero vertical  displacement. Some As ian writing systems have  a nonzero vertical displacement. In all cases, the text-showing operators  transform the displacement vector into text space and  then translate text space by that amount.  The  glyph bounding box  shall be the smallest rectangle (oriented wit h the axes of the glyph coordinate system)  that just encloses the entire glyph shape. The bounding  box shall be expressed in terms of its left, bottom, right,  and top coordinates relative to the glyph origin in the glyph coordinate system.  In some writing systems, text is frequen tly aligned in two different directions.  NOTE 5 It is common to write Japanese and Chinese glyphs either horizontally or vertically.  To handle this, a font may contain a second set of metric s for each glyph. Which set of metrics to use shall be  selected according to a  writing mode, where 0 shall specify horizontal writing and 1 shall specify vertical writing.  This feature is available only fo r composite fonts, discussed in  9.7, \"Composite Fonts\" . When a glyph has two sets of metrics, each set shall sp ecify a glyph origin and a displacement vector for that  writing mode. In vertical writing, the glyph position shall be described by a  position vector  from the origin used  for horizontal writing (origin  0) to the origin used for vertical writing (origin 1).  Figure 40  illustrates the metrics for  the two writing modes:   The left diagram illustrates the gl yph metrics associated  with writing mode 0, horizontal writing. The  coordinates  ll and  ur specify the bounding box of the glyph relative to origin 0.  w0 is the displacement  vector that specifies how the text po sition shall be changed after the glyph is painted in writing mode 0; its  vertical component shall be 0.   The center diagram illustrates writ ing mode 1, vertical writing.  w1 shall be the displa cement vector for  writing mode 1; its horizontal component shall be 0.   In the right diagram,  v is a position vector defining the position of origin 1 relative to origin 0.  Figure  40   Metrics for horizontal and vertical writing modes","New text positionurw0Origin 0ll","New text position Writing mode 0 (horizontal) Writing mode 1 (vertical) Mode 1 relative to mode 0 w1","Origin 0v","Origin 1","Origin 1",""],"251":["' Adobe Systems Incorporated 2008  All rights reserved 243PDF 32000-1:2008 9.3 Text State Parameters and Operators 9.3.1 General The  te xt state  comprises those graphics state parameters that onl y affect text. There are nine parameters in the  text state (see  Table  104 ). Except for the previously described  Tf and  Tfs , these parameters are discussed further in subsequent sub- clauses. (As described in  9.4, \"Text Objects\" , three additional text-related parameters may occur only within a  text object: Tm , the text matrix;  Tlm , the text line matrix; and  Trm , the text rendering matrix.) The values of the  text state parameters shall be consulted when text is  positioned and shown (using the operators described in  9.4.2, \"Text-Positioning Operators\"  and  9.4.3, \"Text-Sh owing Operators\" ). In particular, the spacing and scaling  parameters shall be used in a computation described in  9.4.4, \"Text Space Details\" . The text state parameters  may be set using the operators listed in  Ta b l e  105 . The text knockout parameter, T k , shall be set through the  TK entry in a graphics state parameter dictionary by  using the  gs operator (see  8.4.5, \"Graphics State  Parameter Dictionaries\" ). There is no specific operator for  setting this parameter.  The text state operators may appear outside text objects, and the values they set are retained across text  objects in a single content stream. Like other graphics state parameters, these parameters shall be initialized to  their default values at the beginning of each page.  Table  104    Text state parameters   Parameter Description TcCharacter spacing Tw Word spacing Th Horizontal scaling Tl Leading Tf  Te x t  f o n t TfsText font size Tmode Text rendering mode Trise Te x t  r i s e TkText knockout Table  105   Text state operators   Operands Operator Description charSpace TcSet the character spacing,  Tc , to  charSpace, which shall be a number  expressed in unscaled text space units. Character spacing shall be used  by the  Tj, TJ, and  ’ operators. Initial value: 0.  wordSpace TwSet the word spacing,  Tw , to  wordSpace , which shall be a number  expressed in unscaled text space units. Word spacing shall be used by  the Tj, TJ, and  ’ operators. Initial value:  0. scaleTzSet the horizontal scaling,  Th , to ( scale y 100).  sc ale  shall be a number  specifying the percentage of the norma l width. Initial value: 100 (normal  width).",""],"252":["PDF 32000-1:2008 244 ' Adobe Systems Incorporated 2008  All rights reserved Some of these parameters are expressed in  unscaled  text space units. This means  that they shall be specified  in a coordinate system that sha ll be defined by the text matrix,  Tm  but shall not be scaled by the font size  parameter,  Tfs . 9.3.2 Character Spacing The character-spacing parameter,  Tc , shall be a number specified in unscal ed text space units (although it shall  be subject to scaling by the  Th parameter if the writing mo de is horizontal). When the glyph for each character  in the string is rendered,  Tc  shall be added  to the horizontal or vertical component of the glyphs displacement,  depending on the writing mode. See  9.2.4, \"Glyph Positioning and Metrics\" , for a discussion of glyph  displacements. In the default coordinate system, horizont al coordinates increase from left to right and vertical  coordinates from bottom to top. Therefore,  for horizontal writing, a positive value of  Tc has the effect of  expanding the distance between glyphs (see  Figure 41 ), whereas for vertical writing, a  negative  value of Tc has  this effect.  Figure  41   Character spacing  in horizontal writing 9.3.3 Word Spacing Word spacing works the same way as character spacin g but shall apply only to the ASCII SPACE character (20h). The word-spacing parameter,  Tw , shall be added to the glyphs horizontal or vertical displacement  (depending on the writing mode). For ho rizontal writing, a positive value for  Tw has the effect of increasing the  spacing between words. For vertical writing, a positive value for  Tw decreases the spacing between words (and  a negative value increases it), since vertical coordinates increase from bottom to top.  Figure 42  illustrates the  effect of word spacing in horizontal writing.  leading TLSet the text leading,  Tl , to leading , which shall be a number expressed in  unscaled text space units. Text leading shall be used only by the  T*, ’, and  \" operators. Initial value: 0.  font sizeTfSet the text font,  Tf , to  fo nt  and the text font size,  Tfs , to  siz e . font shall be  the name of a font resource in the  Font  subdictionary of the current  resource dictionary;  size shall be a number representing a scale factor.  There is no initial value for either  font or size; they shall be specified  explicitly by using  Tf before any text is shown.  render TrSet the text rendering mode,  Tmode  , to  ren der , which shall be an integer.  Initial value: 0.  riseTsSet the text rise,  Trise  , to  rise, which shall be a number expressed in  unscaled text space units. Initial value: 0.  Table 105   Text state operators  (continued) Operands Operator Description","Character Character Tc = 0 (default)Tc = 0.25",""],"253":["' Adobe Systems Incorporated 2008  All rights reserved 245PDF 32000-1:2008 Figure  42   Word spacing in horizontal writing Word spacing shall be applied to every occurrence of the  single-byte character code 32 in a string when using  a simple font or a composite font that defines code 32 as a single-byte code. It shall  not apply to occurrences of  the byte value 32 in multiple-byte codes.  9.3.4 Horizontal Scaling The horizontal scaling parameter,  Th , adjusts the width of glyphs by stretching or compressing them in the  horizontal direction. Its value shall be specified as a  percentage of the normal width of the glyphs, with 100  being the normal width. The scaling shall  apply to the horizontal coordinate in  text space, ind ependently of the  writing mode. It shall affect both the glyphs shape and its horizontal displacement (that is, its displacement  vector). If the writing mode is horizontal, it shall al so effect the spacing parameters  Tc and  Tw , as well as any  positioning adjustments performed by the  TJ operator.  Figure 43  shows the effect of horizontal scaling.  Figure  43   Horizontal scaling 9.3.5 Leading The leading parameter,  Tl , shall be specified in  unscaled text space units  . It specifies the vertical distance  between the baselines of adjacent lines of text, as shown in  Figure 44 . Figure  44   Leading The leading parameter shall be used by the  TD, T*, ’, and \" operators; see  Ta b l e  108  for a precise description  of its effects. This parameter shall apply to the vertical coordinate in text space, independently of the writing  mode.","Tw = 0 (default)Tw = 2.5","Word Space Word Space","Word WordWord Th = 100 (default)Th = 50","This is 12-point text with  14.5-point leading","Leading",""],"254":["PDF 32000-1:2008 246 ' Adobe Systems Incorporated 2008  All rights reserved 9.3.6 Text Rendering Mode The text rendering mode,  Tmode  , determines whether showing text shall  cause glyph outlines  to be stroked,  filled, used as a clipping  boundary, or some combination of the three. Stroking, f illing, and clipping shall have  the same effects for a te xt object as they do for a path object (see  8.5.3, \"Path-Painting Operators\"  and  8.5.4, \"Clipping Path Operators\" ), although they are specified in an en tirely different way. The graphics state  parameters affecting those operations, su ch as line width, shall be interpreted in user space rather than in text  space.  NOTE The text rendering modes are shown in  Ta b l e  106. In the examples, a stroke colour of black and a fill colour of  light gray are used. For the clipping modes (4 to 7), a  series of lines has been drawn through the glyphs to  show where the clipping occurs.  Only a value of 3 for text rendering mode shall have  any effect on text displayed in a Type 3 font (see  9.6.5, \"Type 3 Fonts\" ).  If the text rendering mode calls  for filling, the current nonstroking colour in  the graphics state shall be used; if it  calls for stroking, the curren t stroking colour shall be  used. In modes that perform both fillin g and stroking, the  effect shall be as if each glyph outli ne were filled and then stroked in separa te operations. If any of the glyphs  overlap, the result shall be equivalent  to filling and stroking them one at  a time, producing the appearance of stacked opaque glyphs, rather than fi rst filling and then stroking them all  at once. In the transparent imaging  model, these combined filling and stroking modes shall be subject  to further considerations; see  11.7.4.4,  \"Special Path-Painting Considerations\" . The behaviour of the clipping modes requires further expl anation. Glyph outlines shall begin accumulating if a  BT operator is executed while the text rendering mode is se t to a clipping mode or if it is set to a clipping mode  within a text object. Glyphs shall accumulate until the text object is ended by an  ET operator; the text rendering  mode shall not be changed back to a nonclipping mode before that point.  Table  106    Text rendering modes   ModeExampleDescription 0Fill text. 1Stroke text.  2Fill, then stroke text.  3Neither fill nor stroke text (invisible).  4Fill text and add to path for clipping (see  9.3.6,  \"Text Rendering Mode,\" ). 5Stroke text and add to path for clipping.","R","R","R",""],"255":["' Adobe Systems Incorporated 2008  All rights reserved 247PDF 32000-1:2008 At the end of the text object, the accumulated glyph out lines, if any, shall be comb ined into a single path,  treating the individual outlines as  subpaths of that path and applyi ng the nonzero winding number rule (see  8.5.3.3.2, \"Nonzero Winding Number Rule\" ). The current clipping path in the graphics state shall be set to the  intersection of this path with the previo us clipping path. As is the case for path objects, this clipping shall occur  after  all filling and stroking operations for the text objec t have occurred. It remains in effect until a previous  clipping path is restored by an invocation of the  Q operator.  If no glyphs are shown or if the only glyphs shown have no outlines (for example, if they are ASCII SPACE  characters (20h)), no clipping shall occur.  9.3.7 Text Rise Te x t  r i s e ,   Trise , shall specify the distance, in unscaled text space units, to move the baseline up or down from its  default location. Positive values of text rise shall move the baseline up.  Figure 45  illustrates the effect of the text  rise. Text rise shall apply to the  vertical coordinate in text space, regardless of the writing mode.  NOTE Adjustments to the baseline are us eful for drawing superscripts or sub scripts. The default location of the  baseline can be restored by setting the text rise to 0.  Figure  45   Text rise 9.3.8 Text Knockout The text knockout parameter,  Tk (PDF 1.4), sh all be a boolean value that determines what text elements shall  be considered elementary objects for purposes of colo ur compositing in the transparent imaging model. Unlike  other text state parameters, there is  no specific operator for setting this parameter; it may be set only through  the TK entry in a graphics state parameter dictionary by using the  gs operator (see  8.4.5, \"Graphics State  Parameter Dictionaries\" ). The text knockout parameter shall apply only to entire text objects; it shall not be set  between the  BT and ET operators delimiting a text obje ct. Its initial value shall be  true . 6Fill, then stroke text and add to path for clipping.  7Add text to path for clipping.  Table 106   Text rendering modes  (continued) Mode Example Description","R","(This text is ) Tj  5 Ts  (superscripted) Tj (This ) Tj  5 Ts  (text ) Tj  5 Ts  (moves ) Tj   0 Ts  (around) Tj (This text is ) Tj  5 Ts (subscripted) Tj  This text is  superscripted This  text  moves  around This text is  subscripted",""],"256":["PDF 32000-1:2008 248 ' Adobe Systems Incorporated 2008  All rights reserved If the parameter is  false , each glyph in a text object shall be treated as a separate elementary object; when  glyphs overlap, they shall composite with one another.  If the parameter is  true, all glyphs in the text object shall be treated together as a single elementary object;  when glyphs overlap, later glyphs sh all overwrite (knock out) earlier ones in the area of overlap. This  behaviour is equivalent to treating the entire text object  as if it were a non-isolated knockout transparency  group; see  11.4.6, \"Knockout Group s\" . Transparency parameters shall be applied to the glyphs individually  rather than to the implicit transparency group as a whole:  Graphics state parameters, including  transparency parameters, shall be inherited from the context in which  the text object appears. They shall not be saved and restored. The transparency parameters shall not be  reset at the beginning of the transparency group (as they are when a transparency group XObject is  explicitly invoked). Changes made to graphics state pa rameters within the text object shall persist beyond  the end of the text object.  After the implicit transparency group for the text ob ject has been completely evaluated, the group results  shall be composited with the backdrop, using the  Normal blend mode and alpha and soft mask values of  1.0. 9.4 Text Objects 9.4.1 General A PDF te xt object  consists of operators that may show text stri ngs, move the text position, and set text state  and certain other parameters. In addition, three parameters may be specified only within a text object and shall  not persist from one text object to the next:  Tm , the  text  matrix  Tlm , the text line matrix Trm , the text rendering matrix , which is actually just an  intermediate result that combines the effects of text  state parameters, the text matrix  (Tm ), and  the current transformation matrix  A text object begins with the  BT operator and ends with the  ET operator, as shown in the Example, and  described in  Ta b l e  107 . EXAMPLE BT Zero or more text operators or other allowed operators  ETThese specific categories of text-related  operators may appear in a text object:  T ext state operators , described in  9.3, \"Text State Parameters and Operators\" T ext-positioning operators , described in  9.4.2, \"Text-Positioning Operators\"  T ext-showing operators , described in  9.4.3, \"Text-Showing Operators\" Table  107    Text object operators   Operands Operator Description BTBegin a text object, initia lizing the text matrix,  Tm , and the text line matrix,  Tlm , to the identity matrix. Text ob jects shall not be nested; a second  BT shall not appear before an  ET. ETEnd a text object, discar ding the text matrix.",""],"257":["' Adobe Systems Incorporated 2008  All rights reserved 249PDF 32000-1:2008 The latter two sub-clauses also provide further details about these text object parameters. The other operators  that may appear in a text object are th ose related to the general graphics state, colour, and marked content, as  shown in  Figure 9 . If a content stream does not contain any text, the  Text  procedure set may be omitted (see  14.2, \"Procedure Sets\" ). In those circumstances, no text operators (includi ng operators that merely set the text state) shall be  present in the content stream,  since those operators are defined in the same procedure set.  NOTE Although text objects cannot be statica lly nested, text might be shown using a Type  3 font whose glyph  descriptions include any graphics objects, including another  text object. Likewise, the current colour might be a  tiling pattern whose pattern cell includes a text object.  9.4.2 Text-Positioning Operators Text space  is the coordinate system in which text is s hown. It shall be defined  by the text matrix,  Tm , and the  text state parameters  Tfs , Th , and  Trise  , which together shall determine the  transformation from text space to  user space. Specifically, the origin of the first glyph  shown by a text-showing operat or shall be placed at the  origin of text space. If text space has been translated,  scaled, or rotated, then the position, size, or orientation  of the glyph in user space s hall be correspondingly altered. The text-positioning operators shall only appear within text objects. Table  108    Text-positioning operators   Operands Operator Description tx tyTdMove to the start of the next line, offset  from the start of the current line by  (tx , ty ). tx and  ty shall denote numbers expressed in unscaled text space  units. More precisely, this operator shall perform these assignments:  tx ty TDMove to the start of the next line, offset  from the start of the current line by  (tx , ty ). As a side effect, this operator shall set the leading parameter in  the text state. This operator shall  have the same effect as this code:  ty TLtx ty Td","TmTlm100 010 txty1Tlmu==",""],"258":["PDF 32000-1:2008 250 ' Adobe Systems Incorporated 2008  All rights reserved At the beginning of a text object,  Tm shall be the identity matrix; therefore, the origin of text space shall be  initially the same as that of user space. The  text-positioning operators , described in  Ta b l e  108 , alter  Tm and  thereby control the placement of glyphs t hat are subsequently painted. Also, the  text-showing operators , described in  Ta b l e  109 , update  Tm (by altering its  e and  f translation components) to  take into  account the horizontal or vertical displacement of each glyph pain ted as well as any character or word-spacing parameters  in the text state.  Additionally, within a text object, a conforming reader shall keep track of a text line matrix,  Tlm , which captures  the value of  Tm at the beginning of a line of text. The text-p ositioning and text-showing operators shall read and  set Tlm on specific occasions mentioned in Tables  108  and  109 . NOTE This can be used to compactly represent evenly spaced lines of text. 9.4.3 Text-Showing Operators The  text-showing operators  (Ta b l e  109) shall show text on the page, repositi oning text space as they do so. All  of the operators shall interpret t he text string and apply the text  state parameters as described in  Ta b l e  109.The text-showing operators shall only appear within text objects.  a b c d e f TmSet the text matrix,  Tm , and the text line matrix,  Tlm : The operands shall all be numbers, and the initial value for  Tm and  Tlmshall be the identity matrix, [  1 0 0 1 0 0 ]. Although the operands  specify a matrix, they shall be passed to  Tm as six separate numbers, not  as an array.  The matrix specified by the operands  shall not be concatenated onto the  current text matrix, but shall replace it.  T*Move to the start of the next line. Thi s operator has the same effect as the  code 0 -Tl Tdwhere T l denotes the current leading parameter in the text state. The  negative of T l is used here because T l is the text leading expressed as a  positive number. Going to the next line entails decreasing the  y coordinate. Table  109    Text-showing operators   Operands Operator Description string TjShow a text string.  string’Move to the next line and show a text  string. This operator shall have the  same effect as the code  T*string  TjTable 108   Text-positioning operators  (continued) Operands Operator Description","TmTlmab0 cd0 ef1 ==",""],"259":["' Adobe Systems Incorporated 2008  All rights reserved 251PDF 32000-1:2008 Figure 46   Operation of the TJ operator in horizontal writing A string operand of a text-showing operator shall be inte rpreted as a sequence of c haracter codes identifying  the glyphs to be painted.  With a simple font, each byte of the string shall be  treated as a separate character code. The character code  shall then be looked up in the fonts encoding to select the glyph, as described in  9.6.6, \"Character Encoding\" . With a composite font  (PDF 1.2), multiple-byte codes may be used to se lect glyphs. In this instance, one or  more consecutive bytes of the string  shall be treated as a single character code. The code lengths and the  mappings from codes to glyphs are defined in a data structure called a  CMap, described in  9.7, \"Composite  Fonts\" . The strings shall conform to the syntax for string objects. When a string is written by enclosing the data in  parentheses, bytes whose values are equal to thos e of the ASCII characters LEFT PARENTHESIS (28h),  RIGHT PARENTHESIS (29h), and REVER SE SOLIDUS (5Ch) (backslash) shall be preceded by a REVERSE  SOLIDUS) character. All other byte values between 0  and 255 may be used in a string object. These rules  apply to each individual byte in a string object, whether  the string is interpreted by the text-showing operators  as single-byte or multiple-byte character codes.  Strings presented to the text-showing operators may  be of any lengtheven a single character code per  stringand may be placed on the page  in any order. The grouping of glyphs  into strings has no significance for  the display of text. Showing multip le glyphs with one invocation of a text-showing operator such as  Tj shall  produce the same results as showing them with a separate invocation for each glyph.  aw ac string\"Move to the next line and show a text string, using  aw as the word spacing  and  ac as the character spacing (setting the corresponding parameters in  the text state).  aw and  ac shall be numbers expressed in unscaled text  space units. This operator shall ha ve the same effect as this code: aw Twac Tcstring  ’arrayTJShow one or more text strings, allowing individual glyph positioning. Each  element of array shall be either a string or  a number. If the element is a  string, this operator shall show the stri ng. If it is a number, the operator  shall adjust the text position by that am ount; that is, it  shall translate the  text matrix,  Tm . The number shall be expressed in thousandths of a unit  of text space (see  9.4.4, \"Text Space Details\" ). This amount shall be  subtracted from the current horizontal  or vertical coordinate, depending  on the writing mode. In  the default coordinate system, a positive  adjustment has the effect of moving  the next glyph painted either to the  left or down by the given amount.  Figure 46  shows an example of the  effect of passing offsets to  TJ. Table 109   Text-showing operators  (continued) Operands Operator Description","[ (AWAY again) ] TJ AWAY again [ (A) 120 (W) 120 (A) 95 (Y again) ] TJ AWAY again",""],"260":["PDF 32000-1:2008 252 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 6 The performance of text searching ( and other text extraction operations) is si gnificantly better if the text strings  are as long as possible and are shown in natural reading order.  NOTE 7 In some cases, the text that is extracted can vary  depending on the grouping of glyphs into strings. See, for  example,  14.8.2.3.3, \"Reverse-O rder Show Strings\" .9.4.4 Text Space Details As stated in  9.4.2, \"Text-Positioning Operators\" , text shall be shown in  text space, defined by the combination  of the text matrix,  Tm , and the text state parameters  Tfs , Th , and  Trise  . This determines how text coordinates  are transformed into user space. Both the glyphs shape  and its displacement (horiz ontal or vertical) shall be  interpreted in text space.  NOTE 1 Glyphs are actually defined in glyph space, whose definition varies accord ing to the font type as discussed in  9.2.4, \"Glyph Positioning and Metrics\" . Glyph coordinates are first tra nsformed from glyph space to text space  before being subjected to the transformations described in Note 2.  NOTE 2 Conceptually, the entire transformation from te xt space to device space may be represented by a  text rendering matrix , Trm : Trm is a temporary matrix; conceptually, it is recomput ed before each glyph is painted during a text-showing  operation.  After the glyph is painted, the text matrix shall be upda ted according to the glyph displacement and any spacing  parameters that apply. First, a combined  displacement shall be computed, denoted by  tx in horizontal writing  mode or  ty in vertical writing mode (the variable correspondi ng to the other writing mode shall be set to 0):  where w0 an d  w1 denote the glyphs horizontal and vertical displacements  Tj denotes a number in a  TJ array, if any, which specifies a position adjustment Tfs and  Th denote the current text font size and horizont al scaling parameters in the graphics state  Tc and  Tw denote the current character- and word-spacing pa rameters in the graphics state, if applicable  The text matrix shall then be then updated as follows:","TrmTfsThu000Tfs00Trise 1TmCTMuu =","txw0Tj1000 ----------- - '„§•TfsuTcTw++'§„•Thu=tyw1Tj1000 ----------- - '„§•TfsuTcTw++=","Tm100 010 txty1Tmu=",""],"261":["' Adobe Systems Incorporated 2008  All rights reserved 253PDF 32000-1:2008 9.5 Introduction to Font Data Structures A font shall be represented in PDF as a dictionary specifying the type of font, its PostScript name, its encoding,  and information that can be used to provide a substitute  when the font program is not available. Optionally, the  font program may be embedded as a stream object in the PDF file.  The font types are distinguished by the  Subtype entry in the font dictionary.  Ta b l e  110  lists the font types  defined in PDF. Type 0 fonts are called  composite fonts ; other types of fonts are called  simple fonts . In addition  to fonts, PDF supports two classe s of font-related objects, called  CIDFonts  and  CMaps , described in 9.7.2, \"CID-Keyed Fonts Overview\" . CIDFonts are listed in  Ta b l e  110  because, like fonts, they are collections of  glyphs; however, a CIDFont shall not be used direct ly but only as a component of a Type 0 font.  For all font types, the term  font dictionary  refers to a PDF dictionary cont aining information about the font;  likewise, a CIDFont dictionary contains information about a CIDFont. Ex cept for Type 3, this dictionary is  distinct from the  font program  that defines the fonts glyphs. That font program may be embedded in the PDF  file as a stream object or be obtained from some external source.  NOTE 1 This terminology differs from that used in the PostSc ript language. In PostScript, a font dictionary is a  PostScript data structure that is create d as a direct result of interpreting a font program. In PDF, a font program  is always treated as if it were a separate file, even when its content is embedded in the PDF file. The font  program is interpreted by a specialized font interprete r when necessary; its contents never materialize as PDF  objects.  NOTE 2 Most font programs (and related  programs, such as CIDFonts and CMaps)  conform to external specifications,  such as the  Adobe Type 1 Font Format . This standard does not include those specifications. See the  Bibliography  for more information about the specif ications mentioned in this clause.  NOTE 3 The most predictable and dependable results are produced  when all font programs used to show text are  embedded in the PDF file. The following sub-clauses describe precisely how to do so. If a PDF file refers to  font programs that are not em bedded, the results depend on the availability of fonts in the conforming readers  environment. The following sub-clause s specify some conventions for referring to external font programs.  However, some details of font naming, font substi tution, and glyph selection are implementation-dependent  and may vary among different conforming rea ders, writers and operating system environments.  Table  110    Font types   Type Subtype Value Description Type  0Type0 (PDF 1.2) A composite fonta font compos ed of glyphs from a  descendant CIDFont (see  9.7, \"Composite Fonts\" ) Type  1Type1 A font that defines glyp h shapes using Type 1 font technology (see  9.6.2, \"Type 1 Fonts\" ). MMType1 A mu ltiple master  fontan extension of the  Type 1 font that allows  the generation of a wide variety of ty peface styles from a single font (see 9.6.2.3, \"Multiple Master Fonts\" ) Type  3Type3 A font that defines glyphs with  streams of PDF graphics operators  (see 9.6.5, \"Type 3 Fonts\" ) TrueType TrueType A font based on the TrueType font format (see  9.6.3, \"TrueType  Fonts\" ) CIDFont CIDFontType0 (PDF 1.2) A CIDFont whose glyph descriptions are based on Type 1  font technology (see  9.7.4, \"CIDFonts\" ) CIDFontType2 (PDF 1.2) A CIDFont whose glyph descriptions are based on  TrueType font technology (see  9.7.4, \"CIDFonts\" )",""],"262":["PDF 32000-1:2008 254 ' Adobe Systems Incorporated 2008  All rights reserved 9.6 Simple Fonts 9.6.1 General There are several types of simple font s, all of which have these properties:   Glyphs in the font shall be selected  by single-byte character codes obtained from a string that is shown by  the text-showing operators. Logically, these codes in dex into a table of 256 glyphs; the mapping from  codes to glyphs is called the fonts  encoding . Under some circumstan ces, the encoding may  be altered by  means described in  9.6.6, \"Character Encoding\" .  Each glyph shall have a single set of  metrics, including a horizontal displacement or width, as described in  9.2.4, \"Glyph Positioning and Metrics\" ; that is, simple fonts support only horizontal writing mode.   Except for Type 0 fonts, Type 3 fonts in non-Tagged PDF documents, and certain standard Type 1 fonts,  every font dictionary shall contain a subsidiary dictionary, the  font descriptor , containing font-wide metrics  and other attributes of the font; see  9.8, \"Font Descriptors\" . Among those attributes is an optional  font filestream containing the font program.  9.6.2 Type 1 Fonts 9.6.2.1 General A Type 1 font program is a stylized PostScript pr ogram that describes glyph shapes. It uses a compact  encoding for the glyph descriptions, a nd it includes hint information that en ables high-quality rendering even at  small sizes and low resolutions.  NOTE 1 Details on this format are prov ided in a separate specification,  Adobe Type 1 Font Format . An alternative, more  compact but functionally equivalent representation of a  Type 1 font program is docum ented in Adobe Technical  Note #5176,  The Compact Font Format Specification . NOTE 2 Although a Type 1 font program  uses PostScript language syntax, using  it does not require a full PostScript  interpreter; a specialized Type  1 font interpreter suffices.  A Type 1 font dictionary may contain the entries listed in  Ta b l e  111 . Some entries are optional for the standard  14 fonts listed under  9.6.2.2, \"Standard Type 1 Fonts (Standard 14 Fonts)\" , but are required otherwise.  Table  111    Entries in a Type 1 font dictionary   Key Type Value Type name(Required)  The type of PDF object that  this dictionary describes; shall  be Font  for a font dictionary.  Subtypename(Required)  The type of font; shall be  Type1  for a Type 1 font.  Name name(Required in PDF 1.0; optional otherwise)  The name by which this font  is referenced in the Font  subdictionary of the current resource  dictionary.  This entry is obsolete and should not be used.  BaseFont name(Required)  The PostScript name of the fo nt. For Type 1 fonts, this is  always the value of the  FontName  entry in the font program; for more  information, see Section 5.2 of the  PostScript Language Reference , Third Edition. The PostScript name  of the font may be used to find the  font program in the conforming reader or its environment. It is also the  name that is used when printing to a PostScript output device.",""],"263":["' Adobe Systems Incorporated 2008  All rights reserved 255PDF 32000-1:2008 FirstChar integer (Required except for the standard 14 fonts)  The first character code  defined in the fonts  Widths  array.  Beginning with PDF 1.5, the special tr eatment given to the standard 14  fonts is deprecated. Conforming wr iters should represent all fonts  using a complete font descriptor. For backwards capability, conforming  readers shall still provide the sp ecial treatment identified for the  standard 14 fonts.  LastChar integer (Required except for the standard 14 fonts)  The last character code defined in the fonts  Widths  array.  Beginning with PDF 1.5, the special tr eatment given to the standard 14  fonts is deprecated. Conforming wr iters should represent all fonts  using a complete font descriptor. For backwards capability, conforming  readers shall still provide the sp ecial treatment identified for the  standard 14 fonts.  Widths array(Required except for the standard  14 fonts; indirect reference  preferred) An array of (LastChar   FirstChar   1) widths, each  element being the glyph width for the character code that equals  FirstChar  plus the array index. For character codes outside the range  FirstChar  to LastChar , the value of  MissingWidth  from the  FontDescriptor  entry for this font shall be used. The glyph widths  shall be measured in units in which 1000 units correspond to 1 unit in  text space. These widths shall be co nsistent with the actual widths  given in the font program. For more information on glyph widths and  other glyph me trics, see 9.2.4, \"Glyph Positioning and Metrics\" . Beginning with PDF 1.5, the special tr eatment given to the standard 14  fonts is deprecated. Conforming wr iters should represent all fonts  using a complete font descriptor. For backwards capability, conforming  readers shall still provide the sp ecial treatment identified for the  standard 14 fonts.  FontDescriptor dictionary (Required except for the standard 14 fonts;  shall be an indirect  reference)  A font descriptor describing the fonts metrics other than its  glyph widths (see  9.8, \"Font Descriptors\" \\). For the standard 14 fonts, the entries  FirstChar , LastChar , Widths , and FontDescriptor  shall either all be present or all be absent.  Ordinarily, these dictionary keys may be absent; specifying them  enables a standard font to be overridden; see  9.6.2.2, \"Standard Type  1 Fonts (Standard 14 Fonts)\" . Beginning with PDF 1.5, the special tr eatment given to the standard 14  fonts is deprecated. Conforming wr iters should represent all fonts  using a complete font descriptor. For backwards capability, conforming  readers shall still provide the sp ecial treatment identified for the  standard 14 fonts.  Encoding name  or dictionary (Optional)  A specification of the fonts  character encoding if different  from its built-in encoding. The value of  Encoding shall be either the  name of a predefined encoding ( MacRomanEncoding , MacExpertEncoding , or WinAnsiEncoding , as described in  Annex D) or an encoding dictionary that  shall specify differences from the  fonts built-in encoding or from  a specified predefined encoding (see  9.6.6, \"Character Encoding\" ). ToUnicode stream(Optional; PDF  1.2)   A stream containing a CMap file that maps  character codes to Unicode values (see  9.10, \"Extraction of Text  Content\" ). Table 111   Entries in a Type 1 font dictionary  (continued) Key Type Value",""],"264":["PDF 32000-1:2008 256 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE This example shows the font dictionary for  the Adobe Garamondﬁ Semibol d font. The font has an  encoding dictionary (object 25), although neither the  encoding dictionary nor the f ont descriptor (object 7)  is shown in the example.  14 0 obj<<  /Type  /Font  /Subtype  /Type1  /BaseFont  /AGaramond Semibold  /FirstChar 0 /LastChar  255  /Widths  21 0 R  /FontDescriptor  7 0 R /Encoding  25 0 R >>endobj 21 0 obj[ 255 255  255 255 255 255 255  255 255 255 255 255  255 255 255 255  255  255 255 255 255 255  255 255 255 255 255  255 255 255 255 255   255  280"," 438 510 510 868  834 248 320 320 420  510 255 320 255 347   510  510 510 510 510 510  510 510 510 510 255  255 510 510 510 330   781  627 627 694 784 580  533 743 812 354 354  684 560 921 780 792   588  792 656 504 682 744  650 968 648 590 638  320 329 320 510 500   380  420 510"," 400 513 409  301 464 522 268 259  484 258 798 533 492   516  503 349 346 321 520  434 684 439 448 390  320 255 320 510 255   627  627 694 580 780 792  744 420 420 420 420  420 420 402 409 409   409  409 268 268 268 268  533 492 492 492 492  492 520 520 520 520   486  400 510 510"," 506 398  520 555 800 800 1044  360 380  549 846 792  713  510 549 549 510 522  494 713 823 549 274  354 387 768 615 496   330 280 510 549 510  549 612 421 421 1000 255  627 627  792 1016 730  500  1000 438 438 248 248  510 494 448 590 100  510 256  256 539 539  486  255 248 438 1174"," 627 580  627 580 580 354 354  354 354 792 792  790  792 744 744 744 268  380 380 380 380 380  380 380 380 380 380 ]endobj 9.6.2.2 Standard Type 1 Fonts (Standard 14 Fonts) The PostScript names of 14 Type 1 fonts, known as the  standard 14 fonts , are as follows: Times-Roman,  Helvetica, Courier, Symbol, Times-Bo ld, Helvetica-Bold, Courier-Bold, Za pfDingbats, Times-Italic, Helvetica- Oblique, Courier-Oblique, Time s-BoldItalic, Helvetica-Bold Oblique, Courier-BoldObliqueThese fonts, or their font metrics and suitable substituti on fonts, shall be available to the conforming reader.  NOTE The character sets and encodings  for these fonts are listed in  Annex D. The font metrics files for the standard  14 fonts are available from  the ASN Web site (see the  Bibliography ). For more information on font metrics, see  Adobe Technical Note #5004,  Adobe Font Metrics File Format Specification . 9.6.2.3 Multiple Master Fonts The  multiple master  font format is an extension of the Type 1 font format that allows the generation of a wide  variety of typeface styles from a si ngle font program. This is accomplished through the presence of various  design dimensions in the font.  EXAMPLE 1 Examples of design dimensions are weight (light to extra-bold) and width (condensed to expanded).  Coordinates along these design dimensions (such as th e degree of boldness) are  specified by numbers. A  particular choice of numbers selects an  instance  of the multiple master font. PDFs can contain multiple master  instances. NOTE Adobe Technical Note #5015,  Type 1 Font Format Supplement , describes multiple master fonts in detail.",""],"265":["' Adobe Systems Incorporated 2008  All rights reserved 257PDF 32000-1:2008 The font dictionary for a multiple master font instance ma y contain the same entries as a Type 1 font dictionary  (see  Ta b l e  111), with these differences:   The value of  Subtype  shall be  MMType1 .  If the PostScript name of the instance contains SPACE s (20h), the SPACEs shall be replaced by LOW  LINEs (underscores) (5Fh) in the value of  BaseFont . For instance, as illustrated  in this example, the name MinionMM 366  465  11  (which ends with a SPACE character) becomes /MinionMM_366_465_11_.  EXAMPLE 2 7  0 obj <<  /Type  /Font  /Subtype  /MMType1  /BaseFont  /MinionMM_366_465_11_  /FirstChar 32 /LastChar  255  /Widths  19 0 R  /FontDescriptor  6 0 R /Encoding  5 0 R >>endobj 19 0 obj [ 187  235  317 430 427 717  607  168  326  326 421 619 219  317  219  282  427   Omitted data    569  0 569  607  607  607  239 400","400 400  400  253  400  400 400 400 400 ]endobj This example illustrates a convention for including the num eric values of the design  coordinates as part of  the instances  BaseFont  name. This convention is commonly used for accessing multiple master font  instances from an external source in the conforming  readers environment; it is documented in Adobe  Technical Note #5088,  Font Naming Issues . However, this convention is no t prescribed as part of the PDF  specification.  If the font program for a multiple mast er font instance is embedded in the PDF file, it shall be an ordinary Type  1 font program, not a multiple master font program. This font program is called a  snapshot  of the multiple master font instance that incorporates the chosen values of the design coordinates.  9.6.3 TrueType Fonts A TrueType font dictionary may contain the same entries as a Type 1 font dictionary (see  Ta b l e  111), with these  differences:   The value of  Subtype  shall be  TrueType .  The value of  Encoding is subject to limitations  that are described in  9.6.6, \"Character Encoding\" . The value of  BaseFont  is derived differently.  The PostScript name for the value of  BaseFont  may be determined in one of two ways:   If the TrueType font program’s name table contains a PostScript name, it shall be used.  In the absence of such an entry in the name table,  a PostScript name shall be derived from the name by  which the font is known in the host operating syst em. On a Windows system, the name shall be based on  the lfFaceName field in a LOGFONT structure; in the Mac OS, it shall be based on the name of the FOND  resource. If the name contains any SPACEs, the SPACEs shall be removed.",""],"266":["PDF 32000-1:2008 258 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 1 The  TrueType  font format was developed by Apple Computer , Inc., and has been adopted as a standard font  format for the Microsoft Windows ope rating system. Specifications for th e TrueType font file format are  available in Apples  TrueType Reference Manual  and Microsofts  TrueType 1.0 Font Files Technical  Specification  (see Bibliography).  NOTE 2 A TrueType font program may be embedded di rectly in a PDF file as a stream object.  NOTE 3 The Type 42 font format that is defined  for PostScript does not apply to PDF.  NOTE 4 For CJK (Chinese, Japanese, and Korean) fonts, the ho st font systems font name is often encoded in the host  operating systems script. For instance, a Japanese font may have a name that is written in Japanese using  some (unidentified) Japanese encoding. Thus, TrueTy pe font names may contai n multiple-byte character  codes, each of which requires multiple characters to  represent in a PDF name object (using the # notation to  quote special characters as needed).  9.6.4 Font Subsets PDF documents may include subsets of Type 1 and TrueType fonts. The font and font descriptor that describe  a font subset are slightly different fr om those of ordinary fonts. These diff erences allow a conforming reader to  recognize font subsets and to merge documents containi ng different subsets of the same font. (For more  information on font descriptors, see  9.8, \"Font Descriptors\" .)  For a font subset, the PostScript name  of the fontthe value of the fonts  BaseFont  entry and the font  descriptors  FontName  entry shall begin with a  tag  followed by a plus sign (+). The tag shall consist of  exactly six uppercase letters; the choice of letters is ar bitrary, but different subsets in the same PDF file shall  have different tags.  EXAMPLE EOODIA+Poetica is the na me of a subset of Poetica ﬁ, a Type  1 font. 9.6.5 Type 3 Fonts Type 3 fonts differ from the other fonts supported by  PDF. A Type 3 font dictiona ry defines the font; font  dictionaries for other fonts simply contain information  about  the font and refer to a separate font program for the  actual glyph descriptions. In Type 3 fonts, glyphs sha ll be defined by streams of PDF graphics operators. These  streams shall be associated with glyp h names. A separate encoding entr y shall map character codes to the  appropriate glyph names for the glyphs.  NOTE 1 Type 3 fonts are more flexible than Type 1 fonts  because the glyph descriptions may contain arbitrary PDF  graphics operators. However, Type 3 fonts have no hi nting mechanism for improving output at small sizes or  low resolutions.  A Type 3 font dictionary may contain the entries listed in  Table  112 . Table  112    Entries in a Type 3 font dictionary   Key Type Value Type name(Required)  The type of PDF object that this dictionary describes; shall  be Font  for a font dictionary.  Subtypename(Required)  The type of font; shall be  Type3  for a Type 3 font.  Name name(Required in PDF  1.0; optional otherwise)  See Table  111 .",""],"267":["' Adobe Systems Incorporated 2008  All rights reserved 259PDF 32000-1:2008 For each character code shown by a text-showing operator  that uses a Type 3 font, the conforming reader  shall: FontBBox rectangle (Required)  A rectangle (see  7.9.5, \"Rectangles\" ) expressed in the  glyph coordinate system, specifying the  font bounding box . This is the  smallest rectangle enclosing the shape that would result if all of the  glyphs of the font were placed with  their origins coincident and then  filled.  If all four elements of the rectangle are zero, a conforming reader shall  make no assumptions about glyph sizes based on the font bounding  box. If any element is nonzero, the font bounding box shall be  accurate. If any glyphs marks fall outside this bounding box, incorrect  behavior may result.  FontMatrix array(Required)  An array of six nu mbers specifying the  font matrix, mapping  glyph space to text space (see  9.2.4, \"Glyph Positioning and Metrics\" ). NOTE A common practice is to define glyphs in terms of a  1000-unit glyph coordinate syst em, in which case the font  matrix is [ 0.001  0 0 0.001 0 0 ].  CharProcs dictionary (Required)  A dictionary in which each key shall be a glyph name and  the value associated with that ke y shall be a content stream that  constructs and paints the glyph  for that character. The stream  shall include as its first operator either  d0 or d1, followed by operators  describing one or more graphics objects, which may include path, text,  or image objects. See below for more details about Type 3 glyph  descriptions. Encodingname or  dictionary (Required)  An encoding dictionary whose  Differences  array shall  specify the complete character encoding for this font (see  9.6.6, \"Character Encoding\" ). FirstChar integer (Required)   The first character code  defined in the fonts  Widths  array.  LastChar integer (Required)  The last character code defined in the fonts  Widths  array.  Widths array(Required; should be an indirect reference)  An array of (LastChar   FirstChar   1) widths, each element being the glyph width for the  character code that equals  FirstChar  plus the array index. For  character codes outside the range  FirstChar  to  LastChar , the width  shall be 0. These widths shall be interpreted in glyph space as  specified by  FontMatrix (unlike the widths of a Type 1 font, which are  in thousandths of a unit of text space).  If  Fo ntMatrix  specifies a rotation, only the  horizontal  component of the  transformed width shall be used. That is, the resulting displacement  shall be horizontal in text space, as  is the case for all simple fonts.  FontDescriptor dictionary (Required in Tagged PDF documents; shall be an indirect reference)  A font descriptor describing the fonts default metrics other than its glyph  widths (see  9.8, \"Font Descriptors\" ). Resources dictionary (Optional but should be used; PDF  1.2) A l ist of the named resources,  such as fonts and images, required by the glyph descriptions in this  font (see  7.8.3, \"Resource Dictionaries\" ). If any glyph descriptions  refer to named resources but this dictionary is absent, the names shall  be looked up in the resource dictionary of the page on which the font is  used. ToUnicode stream(Optional; PDF  1.2)  A stream containing a CMap file that maps  character codes to Unicode values (see  9.10, \"Extraction of Text  Content\" ). Table 112   Entries in a Type 3 font dictionary  (continued) Key Type Value",""],"268":["PDF 32000-1:2008 260 ' Adobe Systems Incorporated 2008  All rights reserved a) Look up the character code in the fonts  Encoding  entry, as described in  9.6.6, \"Character Encoding,\"  to obtain a glyph name.  b) Look up the glyph name in the fonts  CharProcs dictionary to obtain a stream object containing a glyph  description. If the name is not present as a key in  CharProcs, no glyph shall be painted.  c) Invoke the glyph description. The graphics state shall be saved before this invocation and shall be restored  afterward; therefore, any  changes the glyph description makes to th e graphics state do not persist after it  finishes.  When the glyph description begins execution, the  current transformation matrix (CTM) shall be the  concatenation of the font matrix ( FontMatrix  in the current font dictionary) and  the text space that was in effect  at the time the text-showing  operator was invoked (see  9.4.4, \"Text Space Details\" ). This means that shapes  described in the glyph coordinate syst em are transformed into the user  coordinate system and appear in the  appropriate size and orientation on the page. The glyph description shall describe the glyph in terms of  absolute coordinates in the glyph coordinate system, placing the glyph origin at (0,  0) in this space. It shall  make no assumptions about the initial text position.  Aside from the CTM, the graphics state shall be inheri ted from the environment of the text-showing operator  that caused the glyph description to be invoked. To ensure predictable results, the glyph description shall  initialize any graphics state parame ters on which it depends. In  particular, if it invokes the  S (stroke) operator, it  shall explicitly set the line width, line join, lin e cap, and dash pattern to appropriate values.  NOTE 2 Normally, it is unnecessary and undesirable to initialize the current co lour parameter because the text-showing  operators are designed to paint  glyphs with the current colour.  The glyph description shall execute one of the operators described in  Ta b l e  113  to pass width and bounding  box information to the font machinery. This shall prec ede the execution of any pa th construction or path- painting operators describing the glyph.  NOTE 3 Type 3 fonts in PDF are very similar to those in Post Script. Some of the information provided in Type 3 font  dictionaries and glyph descriptions, while seemingly  redundant or unnecessary, is nevertheless required for  correct results when a conforming reader prints to a Po stScript output device. This applies particularly to the  operands of the  d0 and  d1 operators, are the equivalent of PostScript’s  setcharwidth  and  setcachedevice . For further explanation, see Section 5.7 of th e PostScript Language Reference, Third Edition.  Table  113    Type 3 font operators   Operands Operator Description wx wyd0Set width information for the glyph and declare that the glyph  description specifies both its shape and its colour.  NOTE This operator name ends in the digit  0.wx denotes the horizontal displace ment in the glyph coordinate  system; it shall be consistent with  the corresponding width in the  fonts  Widths  array.  wy shall be 0 (see  9.2.4, \"Glyph Positioning  and Metrics\" ). This operator shall only be permitted in a content stream  appearing in a Type  3 fonts  CharProcs  dictionary. It is typically  used only if the glyph description executes operators to set the  colour explicitly.",""],"269":["' Adobe Systems Incorporated 2008  All rights reserved 261PDF 32000-1:2008 EXAMPLE This example shows the definitio n of a Type 3 font wit h only two glyphsa fill ed square and a filled triangle, selected by the character codes a and b.  Figure 47  shows the result of showing the string  ( ababab  ) using this font.  Figure 47   Output from the example in  9.6.5, \"Type 3 Fonts\" wx wy llx lly urx uryd1Set width and bounding box information for the glyph and declare  that the glyph description specifies only shape, not colour.  NOTE This operator name ends in the digit  1. wx denotes the horizontal displacement in the glyph coordinate  system; it shall be consistent with the corresponding width in the  fonts  Widths  array.  wy shall be 0 (see  9.2.4, \"Glyph Positioning  and Metrics\" ). llx and  lly denote the coordinates of the lower-left corner, and  urxand  ury denote the upper-right corner, of the glyph bounding box.  The glyph bounding box is the smallest rectangle, oriented with  the axes of the glyph  coordinate system, that  completely encloses  all marks placed on the page as a result of executing the glyphs  description. The declared bounding box shall be correctin other  words, sufficiently large to enclos e the entire glyph. If any marks  fall outside this bounding box, the result is unpredictable.  A glyph description that begins with the  d1 operator should not  execute any operators that set t he colour (or other colour-related  parameters) in the graphics state; any use of such operators shall  be ignored. The glyph description is executed solely to determine  the glyphs shape. Its colour shal l be determined by the graphics  state in effect each time this glyph is painted by a text-showing  operator. For the same reason, the glyph description shall not  include an image; however, an image mask is acceptable, since it  merely defines a region of the page to be painted with the current  colour.  This operator shall be used only in a conten t stream appearing in  a Type  3 fonts  CharProcs dictionary.  Table 113   Type 3 font operators  (continued) Operands Operator Description",""],"270":["PDF 32000-1:2008 262 ' Adobe Systems Incorporated 2008  All rights reserved 4 0 obj <<  /Type  /Font  /Subtype  /Type3  /FontBBox  [ 0 0 750 750 ] /FontMatrix  [ 0.001  0 0 0.001  0 0 ] /CharProcs  10 0 R  /Encoding  9 0 R  /FirstChar 97 /LastChar  98 /Widths  [ 1000 1000  ]>>endobj 9 0 obj <<  /Type  /Encoding  /Differences  [ 97 /square  /triangle ]>>endobj 10 0 obj<<  /square  11 0 R  /triangle  12 0 R",">>endobj 11 0 obj << /Length  39 >>stream1000  0 0 0 750  750 d10 0 750  750 refendstream endobj 12 0 obj<< /Length  48 >>stream1000  0 0 0 750  750 d10 0 m375  750  l750  0 lfendstream endobj 9.6.6 Character Encoding 9.6.6.1 General A fonts  encoding  is the association between character codes (obtained from text strings that are shown) and  glyph descriptions. This sub-clause describes the c haracter encoding scheme used with simple PDF fonts.  Composite fonts (Type 0) use a different char acter mapping algorithm, as discussed in  9.7, \"Composite Fonts\" . Except for Type 3 fonts, every font  program shall have a built-in encoding. Under certain circumstances, a PDF  font dictionary may change the encoding used with  the font program to match the requirements of the  conforming writer generating the text being shown.",""],"271":["' Adobe Systems Incorporated 2008  All rights reserved 263PDF 32000-1:2008 NOTE This flexibility in character enc oding is valuable for two reasons:  It permits showing text that is encoded according to any  of the various existing conventions. For example, the  Microsoft Windows and Apple Mac OS  operating systems use different stand ard encodings for  Latin text, and  many conforming writers use thei r own special-purpose encodings.  It permits conforming writers to specify how characters  selected from a large character set are to be encoded.  Some character sets consist of more than 256 characte rs, including ligatures, acc ented characters, and other  symbols required for high-quality typog raphy or non-Latin writing systems.  Different encodings may select  different subsets of the same character set.  One commonly used font encoding for Latin-text font programs is often referred to as  StandardEncoding  or  sometimes as the Adobe standard encoding. The name  StandardEncoding  shall have no special meaning in  PDF, but this encoding does play a role as a default encoding (as shown in  Table  114 ). The regular encodings  used for Latin-text fonts on Mac OS and Windows systems shall be named  MacRomanEncoding  and  WinAnsiEncoding , respectively. An encoding named  MacExpertEncoding  may be used with expert fonts  that contain additional characters useful for sophisti cated typography. Complete details of these encodings and  of the characters present in typical fonts are provided in  Annex D . In PDF, a font is classified as either  nonsymbolic  or  symbolic according to whether all of its characters are  members of the standard Latin character set; see  D.2, Latin Character Set and Encodings . This shall be  indicated by flags in th e font descriptor; see  9.8.2, \"Font Descriptor Flags\" . Symbolic fonts contain other  character sets, to which the encodings mentioned previous ly ordinarily do not apply. Such font programs have  built-in encodings that are usually unique to each f ont. The standard 14 fonts include two symbolic fonts,  Symbol and ZapfDingbats, whose encodings and character sets are documented in  Annex D. A font programs built-in encoding may be overridden by including an  Encoding entry in the PDF font  dictionary. The possible encoding modifications  depend on the font type. The value of the  Encoding  entry shall  be either a named encoding (the name  of one of the predefined encodings  MacRomanEncoding , MacExpertEncoding , or  WinAnsiEncoding ) or an  encoding dictionary . An encoding dictionary contains the  entries listed in Table  114 .The value of the  Differences  entry shall be an array of character codes and character names organized as  follows:  code1 name 1,1  name 1,2 Table  114    Entries in an encoding dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Encoding for an encoding dictionary.  BaseEncoding name (Optional)  The base encoding that is, the encoding from which the  Differences entry (if present) describes differences shall be the name  of one of the predefined encodings  MacRomanEncoding , MacExpertEncoding , or  WinAnsiEncoding  (see Annex D).  If this entry is absent, the  Differences entry shall describe differences  from an implicit base encoding. For  a font program that is embedded in  the PDF file, the implicit base encodi ng shall be the font programs built-in  encoding, as described in  9.6.6, \"Character Encoding\"  and further  elaborated in the sub-clauses on spec ific font types. Otherwise, for a  nonsymbolic font, it shall be  StandardEncoding , and for a symbolic font,  it shall be the fonts built-in encoding.  Differences array(Optional; should not be used with TrueType fonts)  An array describing the differences from the  encoding specified by  BaseEncoding  or, if  BaseEncoding  is absent, from an implicit base encoding. The  Differences array is described in subsequent sub-clauses.",""],"272":["PDF 32000-1:2008 264 ' Adobe Systems Incorporated 2008  All rights reserved code2 name 2,1  name 2,2 coden name n,1 name n,2 Each code shall be the first index in a sequence of ch aracter codes to be changed. The first character name  after the code becomes the name corresponding to th at code. Subsequent names replace consecutive code  indices until the next code appears in the array or th e array ends. These sequences may be specified in any  order but shall not overlap.  EXAMPLE In the encoding dictionary in this example,  the name quotesingle ( ’ ) is associated with character code 39,  Adieresis (˜) with code 128, Aring (¯)  with 129, and trademark () with 170.  25 0 obj<<  /Type  /Encoding  /Differences [ 39 /quotesingle  96 /grave128  /Adieresis  /Aring  /Ccedilla  /Eacute /Ntilde /Odieresis  /Udieresis   /aacute  /agrave  /acircumflex  /adieresis  /atilde /aring /ccedilla   /eacute  /egrave  /ecircumflex  /edieresis  /iacute  /igrave  /icircumflex   /idieresis  /ntilde /oacute  /ograve /ocircumflex  /odieresis  /otilde  /uacute  /ugrave  /ucircumflex  /udieresis  /dagger  /degree /cent","  /sterling  /section  /bullet  /paragraph  /germandbls  /registered   /copyright  /trademark /acute /dieresis174  /AE /Oslash 177  /plusminus 180  /yen /mu187  /ordfeminine /ordmasculine 190  /ae /oslash  /questiondown  /exclamdown  /logicalnot 196  /florin 199  /guillemotleft  /guillemotright  /ellipsis 203  /Agrave /Atilde  /Otilde  /OE /oe  /endash  /emdash  /quotedblleft   /quotedblright  /quoteleft  /quoteright  /divide 216  /ydieresis  /Ydieresis  /fraction /currency /guilsinglleft  /guilsinglright   /fi  /fl  /daggerdbl   /periodcentered  /quotesinglbase  /quotedblbase   /perthousand  /Acircumflex  /Ecircumflex  /Aacute","/Edieresis  /Egrave   /Iacute  /Icircumflex  /Idieresis  /Igrave /Oacute /Ocircumflex 241  /Ograve  /Uacute  /Ucircumflex  /Ugrave /dotlessi /circumflex /tilde  /macron /breve  /dotaccent   /ring /cedilla  /hungarumlaut  /ogonek   /caron] >>endobj 9.6.6.2 Encodings for Type 1 Fonts A Type 1 font programs glyph descriptions are keyed by glyph  names , not by character  codes . Glyph names  are ordinary PDF name objects. De scriptions of Latin alphabetic c haracters are normally associated with  names consisting of single letters, such as  A or  a. Other characters are associated with names composed of  words, such as three, ampersand, or parenleft. A Type 1 fonts built-in encoding shall be defined by an  Encoding  array that is part of the font  program, not to be confused with the  Encoding  entry in the PDF font  dictionary.  An Enco ding  entry may override a Type 1 fonts mapping  from character codes to character names. The  Differences  array may map a code to the name of any glyph  description that exists in the font program,  regardless of whether that glyph is referenced by the fo nts built-in encoding or by  the encoding specified in the  BaseEncoding  entry.",""],"273":["' Adobe Systems Incorporated 2008  All rights reserved 265PDF 32000-1:2008 All Type 1 font programs shall contain an actual glyph named .  notdef. The effect produced by showing the  . notdef glyph is at the discretion of the font designer.  If an encoding maps to a character name that does not  exist in the Type 1 font program, the .  notdef glyph shall be substituted.  9.6.6.3 Encodings for Type 3 Fonts A Type 3 font, like a Type 1 font, contains glyph descripti ons that are keyed by glyph names; in this case, they  appear as explicit keys in the fonts  CharProcs  dictionary. A Type 3 fonts mapping from character codes to  glyph names shall be entirely defined by its  Encoding  entry, which is requ ired in this case.  9.6.6.4 Encodings for TrueType Fonts A TrueType font programs built-in encoding maps directly  from character codes to glyph descriptions by means  of an internal data structure called a cmap ( not to be confused with the CMap described in  9.7.5, \"CMaps\" ). This sub-clause describes how th e PDF font dictionarys  Encoding  entry shall be used in conjunction with a  cmap to map from a character code in a string to a glyph description in a TrueType font program. A cmap table may contain one or more subtables that re present multiple encodings intended for use on  different platforms (such as Mac OS and Windows). Each  subtable shall be identified by the two numbers, such  as (3,  1), that represent a combination of a  platform ID  and a  platform-specific encoding ID , respectively.  Glyph names are not required in TrueType fonts, although  some font programs have  an optional post table  listing glyph names for the glyphs. If the conforming read er needs to select glyph descriptions by name, it  translates from glyph names to codes in one of the enc odings given in the font programs cmap table. When  there is no character code in the cmap that corresponds  to a glyph name, the post table shall be used to  select a glyph description directly from the glyph name. Because some aspects of TrueType glyph selection are  dependent on the conforming reader or the operating  system, PDF files that use TrueType fonts should follow certain guidelines to ensure predictable behaviour  across all conforming readers:  The font program should be embedded.   A nonsymbolic font should specify  MacRomanEncoding  or  WinAnsiEncoding  as the value of its  Encoding  entry, with no  Differences  array.   A font that is used to disp lay glyphs that do not use MacRomanEncoding  or  WinAnsiEncoding  should  not specify an  Encoding  entry. The font descriptors Symbolic flag (see  Ta b l e  123 ) should be set, and its  font programs cmap table should contain a (1,  0) subtable. It may also contain a (3,  0) subtable; if  present, this subtable should map from character code s in the range 0xF000 to 0xF0FF by prepending the  single-byte codes in the (1,  0) subtable with 0xF0 and mapping to the corresponding glyph descriptions. NOTE 1 Some popular TrueType font programs contain incorre ct encoding information. Im plementations of TrueType  font interpreters have evolved heuristics for dealing with such problems; those heuristics are not described  here. For maximum portability, only well-formed TrueT ype font programs should be used in PDF files.  Therefore, a TrueType font program in a PDF file ma y need to be modified to conform to these guidelines. The following paragraphs describe the treatment of TrueType font encodings beginning with PDF 1.3. If the font has a named  Encoding  entry of either  MacRomanEncoding  or WinAnsiEncoding , or if the font  descriptors Nonsymbolic flag (see  Ta b l e  123) is set, the conforming reader sh all create a table that maps from  character codes to glyph names:  If the  Encoding entry is one of the names  MacRomanEncoding  or  WinAnsiEncoding , the table shall be  initialized with the m appings described in  Annex D .",""],"274":["PDF 32000-1:2008 266 ' Adobe Systems Incorporated 2008  All rights reserved  If the  Encoding  entry is a dictionary, the table shall be init ialized with the entries from the dictionarys  BaseEncoding  entry (see  Ta b l e  114 ). Any entries in the  Differences  array shall be used to update the  table. Finally, any undefined entries in the table shall be filled using  StandardEncoding .If a (3,  1) cmap subtable (Microsoft Unicode) is present:  A character code shall be first mapped to a g lyph name using the table described above.   The glyph name shall then be mapped to a Unicode value by consulting the  Adobe Glyph List  (see the  Bibliography ).  Finally, the Unicode value s hall be mapped to a glyph description according to the (3,  1) subtable.  If no (3,  1) subtable is present but a (1,  0) subtable (Macintosh Roman) is present:  A character code shall be first mapped to a g lyph name using the table described above.   The glyph name shall then be mapped back to a character code according to the standard Roman  encoding used on Mac OS.   Finally, the code shall be mapped to a glyph description according to the (1,  0) subtable. In any of these cases, if the glyph name cannot be ma pped as specified, the glyph name shall be looked up in  the font programs post table (if one is present)  and the associated glyph description shall be used.  The standard Roman encoding that is used on Mac OS is the same as the  MacRomanEncoding  described in Annex D, with the addition of 15 entries and the replacemen t of the currency glyph with the Euro glyph, as  shown in  Ta b l e  115 .Table  115    Differences between MacRomanEncoding and Mac OS Roman encoding   Name Code (Octal) Code (DEcimal) notequal 255173infinity 260176lessequal 262178greaterequal 263179partialdiff 266182summation267183product 270184pi271185integral 272186Omega275189radical303195approxequal 305197Delta 306198lozenge 327215Euro333219apple 360240",""],"275":["' Adobe Systems Incorporated 2008  All rights reserved 267PDF 32000-1:2008 When the font has no  Encoding  entry, or the font descriptors Sym bolic flag is set (in which case the  Encoding entry is ignored),  this shall occur:   If the font contains a (3,  0) subtable, the range of character codes shall be one of these: 0x0000  - 0x00FF,  0xF000 - 0xF0FF, 0xF100  - 0xF1FF, or 0xF200  - 0xF2FF. Depending on the range of codes, each byte  from the string shall be prepended with the high byte of  the range, to form a two-byte character, which shall  be used to select the associated glyph description from the subtable.  Otherwise, if the font contains a (1,  0) subtable, single bytes from the string shall be used to look up the  associated glyph descriptions from the subtable. If a character cannot be mapped in any of the ways described previously, a conforming reader may supply a  mapping of its choosing.  9.7 Composite Fonts 9.7.1 General A comp osite font,  also called a Type 0 font, is one whose glyphs are obtained from a fontlike object called a  CIDFont . A composite font shall be repres ented by a font dictionary whose  Subtype  value is  Type0 . The Type  0 font is known as the  root font , and its associated CIDFont is called its  descendant.  NOTE 1 Composite fonts in PDF are analogous to composite fonts in PostScript but with some  limitations. In particular,  PDF requires that the character en coding be defined by a CMap, which is only one of several encoding  methods available in PostScript. Also, PostScript allo ws a Type 0 font to have multiple descendants, which  might also be Type 0 fonts. PDF supports only a single descendant, which shall be a CIDFont. When the current font is composite, the text-showing operators shall behave differently than with simple fonts.  For simple fonts, each byte of a string to be shown se lects one glyph, whereas for composite fonts, a sequence  of one or more bytes are decoded to select a glyph from the descendant CIDFont.  NOTE 2 This facility supports the use of very large charac ter sets, such as those for the Chinese, Japanese, and  Korean languages. It also simplifies the organization  of fonts that have complex encoding requirements.  This sub-clause first introduces the architecture of  CID-keyed  fonts , which are the only kind of composite font  supported in PDF. Then it describes the  CIDFont  and  CMap dictionaries, which are the PDF objects that  represent the correspondingly named  components of a CID-keyed font. Finally, it describes the Type 0 font  dictionary, which combines a CIDFont and a CMap to pr oduce a font whose glyphs may be accessed by means  of variable-length character codes in a string to be shown.  9.7.2 CID-Keyed Fonts Overview CID-keyed fonts provide a convenient  and efficient method for defining mu ltiple-byte character encodings and  fonts with a large number of glyphs.  These capabilities provide great flexibilit y for representing  text in writing systems for languages with large character sets, such as Chinese, Japanese, and Korean (CJK).  The  C ID-keyed font  architecture specifies the external repres entation of certain font programs, called  CMapand  CIDFont files, along with some conventi ons for combining and using those files. As mentioned earlier, PDF  does not support the entire CID-keyed font architectu re, which is independent of PDF; CID-keyed fonts may be  used in other environments.  NOTE For complete documentation on the architecture and the file formats, see Adobe Technical Notes #5092,  CID- Keyed Font Technology Overview , and #5014,  Adobe CMap and CIDFont Files Specification . This sub-clause describes only the PDF objects that represent these font programs.  The term  CID-keyed font  reflects the fact that  CID (character identifier) numbers are used to index and access  the glyph descriptions in the font. This method is more ef ficient for large fonts than the method of accessing by  character name, as is used for some simple fonts. CIDs range from 0 to  a maximum value that may be subject  to an implementation limit (see  Ta b l e  C.1).",""],"276":["PDF 32000-1:2008 268 ' Adobe Systems Incorporated 2008  All rights reserved A character collection  is an ordered set of glyphs. The order of the glyphs in the character collection shall  determine the CID number for each glyph. Each CID-ke yed font shall explicitly reference the character  collection on which its CI D numbers are based; see  9.7.3, \"CIDSystemInfo Dictionaries\" . A CMap ( character map) file shall specify the correspondence between character codes and the CID numbers  used to identify glyphs. It is equivalent to the concep t of an encoding in simple fonts. Whereas a simple font  allows a maximum of 256 glyphs to be encoded and ac cessible at one time, a CMap can describe a mapping  from multiple-byte codes to thousands of glyphs in a large CID-keyed font.  EXAMPLE A CMap can describe Shift- JIS, one of several widely us ed encodings for Japanese.  A CMap file may reference an entire character collection  or a subset of a character collection. The CMap files  mapping yields a  font number  (which in PDF shall be 0) and a  character selector  (which in PDF shall be a CID).  Furthermore, a CMap file may incorporate another CMap f ile by reference, without having to duplicate it. These  features enable character collections to be combined or supplemented and make all the constituent characters  accessible to text-showing operations through a single encoding.  A CID Font  contains the glyph descriptions  for a character collection. The glyph descriptions themselves are  typically in a format similar to those us ed in simple fonts, such as Type 1.  However, they are identified by CIDs  rather than by names, and they are organized differently.  In PDF, the data from a CMap file and CIDFont sha ll be represented by PDF objects as described in  9.7.4, \"CIDFonts\"  and  9.7.5, \"CMaps\" . The CMap file and CIDFont programs themselves may be either referenced by  name or embedded as stream objects in the PDF file.  A CID-keyed font, then, shall be the combination of a CM ap with a CIDFont containing glyph descriptions. It  shall be represented as a Type 0 font. It contains an  Encoding  entry whose value shall be a CMap dictionary,  and its  DescendantFonts  entry shall reference the CIDFont dictionary with which the CMap has been  combined. 9.7.3 CIDSystemInfo Dictionaries CIDFont and CMap dictionaries shall contain a  CIDSystemInfo  entry specifying the character collection  assumed by the CIDFont associated with the CMapthat is, the interpretation  of the CID numbers used by the  CIDFont. A character collection shall be uniquely identified by the  Registry, Ordering , and  Supplement entries in the CIDSystemInfo  dictionary, as described in  Ta b l e  116 . In order to be compatible, the Registry and  Ordering values must be the same. The  CID SystemInfo  entry in a CIDFont is a dictio nary that shall specify the CIDFonts character collection. The  CIDFont need not contain glyph descriptions for all the CIDs in a collection; it may contain a subset. The  CIDSystemInfo entry in a CMap file shall be either a single di ctionary or an array of dictionaries, depending on  whether it associates codes with a single character  collection or with  multiple characte r collections; see  9.7.5, \"CMaps\" . For proper behaviour, the  CIDSystemInfo entry of a CMap shall be compat ible with that of the CIDFont or CIDFonts with which it is used.  Table  116    Entries in a CIDSystemInfo dictionary   KeyType Value RegistryASCII string (Required)  A string identifying the issuer  of the character collection. For  information about assigning a regist ry identifier, contact the Adobe  Solutions Network or consult the ASN Web site (see the  Bibliography ).",""],"277":["' Adobe Systems Incorporated 2008  All rights reserved 269PDF 32000-1:2008 9.7.4 CIDFonts 9.7.4.1 General A CIDFont program contains glyph descriptions that are  accessed using a CID as the character selector. There  are two types of CIDFonts:  A Type 0 CIDFont contains gl yph descriptions based on CFF NOTE The term Type 0 when applied to a CIDFont  has a different meaning than for a Type 0 font.  A Type 2 CIDFont contains glyph descript ions based on the TrueType font format A CIDFont dictionary is a PDF object that contains  information about a CIDFont program. Although its  Type value is Font, a CIDFont is not actually a font. It does not have an  Encoding  entry, it may not be listed in the  Font  subdictionary of a resource dictionary, and  it may not be used as the operand of the  Tf operator. It shall be  used only as a descendant of a Type 0 font. The CMap  in the Type 0 font shall be what defines the encoding  that maps character codes  to CIDs in the CIDFont. Table  117  lists the entries in  a CIDFont dictionary.  Ordering ASCII string(Required)  A string that uniquely names  the character collection within the  specified registry. Supplementinteger (Required)  The supplement number  of the character collection.  An original  character collection has a supplement  number of 0. Whenever additional  CIDs are assigned in a character colle ction, the supplement number shall  be increased. Supplements shall not alte r the ordering of existing CIDs in  the character collection. This val ue shall not be used in determining  compatibility between character collections.  Table  117    Entries in a CIDFont dictionary   KeyType Value Type name (Required)  The type of PDF object that this dictionary describes;  shall be  Font  for a CIDFont dictionary.  Subtypename (Required)  The type of CIDFont shall be  CIDFontType0  or CIDFontType2 . BaseFont name (Required)  The PostScript name of the CIDFont. For Type 0  CIDFonts, this shall be the value of the  CIDFontName entry in the  CIDFont program. For Type 2 CIDFonts, it shall be derived the same  way as for a simple TrueType font; see  9.6.3, \"TrueType Fonts\" . In  either case, the name may have a  subset prefix if  appropriate; see  9.6.4, \"Font Subsets\" . CIDSystemInfo dictionary (Required)  A dictionary containing entries that define the character  collection of the CIDFont. See  Ta b l e  116 . FontDescriptor dictionary (Required; shall be an indirect reference)  A font descriptor describing the CIDFonts default metrics other than its glyph widths (see  9.8,  \"Font Descriptors\" ). DWinteger (Optional)  The default width for glyphs in the CIDFont (see  9.7.4.3,  \"Glyph Metrics in CIDFonts\" ). Default value: 1000 (defined in user  units).  Table 116   Entries in a CIDSystemInfo dictionary  (continued) KeyType Value",""],"278":["PDF 32000-1:2008 270 ' Adobe Systems Incorporated 2008  All rights reserved 9.7.4.2 Glyph Selection in CIDFonts Type 0 and Type 2 CIDFonts handle the mapping from CIDs to glyph descriptions in somewhat different ways.  For Type 0, the CIDFont program contains glyph descript ions that are identified by  CIDs. The CIDFont program  identifies the character collection by a  CIDSystemInfo  dictionary, which should  be copied into the PDF  CIDFont dictionary. CIDs sh all be interpreted uniformly in all CIDFont programs supporting a given character  collection, whether the program is embedded in the PDF file or obtained from an external source.  When the CIDFont contains an embedded font program th at is represented in the  Compact Font Format (CFF),  the FontFile3  entry in the font descriptor (see  Ta b l e  126) may be  CIDFontType0C or  OpenType . There are  two cases, depending on the contents of the font program:  The CFF font program has a Top DICT that uses  CIDFont operators: The CIDs shall be used to  determine the GID value for the glyph procedure using the charset table in the CFF program. The GID  value shall then be used to look up the glyph procedure using the CharStrings INDEX table.  NOTE Although in many fonts the CID value and GID value are the same, the CID and GID values may differ.   The CFF font program has a Top DICT that does  not use CIDFont operators:  The CIDs shall be used  directly as GID values, and the glyph procedure  shall be retrieved using the CharStrings INDEX. For Type 2, the CIDFont program is actually a TrueType  font program, which has no  native notion of CIDs. In a  TrueType font program, glyph descriptions are identified by  glyph index  values. Glyph indices are internal to the  font and are not defined consistently from one font to  another. Instead, a TrueType font program contains a  cmap table that provides mappings directly from char acter codes to glyph indices for one or more predefined  encodings.  Warray(Optional)  A description of the widths for the glyphs in the CIDFont.  NOTE The arrays elements have a variable format that can  specify individual widths for consecutive CIDs or one  width for a range of CIDs (see  9.7.4.3, \"Glyph Metrics in  CIDFonts\" ). Default value: none (the  DW value shall be used for all glyphs).  DW2array(Optional; applies only to CIDFonts used for vertical writing)  An array  of two numbers specifying the default  metrics for vertical writing (see  9.7.4.3, \"Glyph Me trics in CIDFonts\" ). Default value: [  880  100 0  ]. W2array(Optional; applies only to CIDFonts used for vertical writing)  A description of the metrics for vertic al writing for the glyphs in the  CIDFont (see  9.7.4.3, \"Glyph Metrics in CIDFonts\" ). Default value:  none (the  DW2 value shall be used for all glyphs).  CIDToGIDMap stream  or name(Optional; Type  2 CIDFonts only)  A specification of the mapping from  CIDs to glyph indices. If the value  is a stream, the bytes in the stream  shall contain the mapping from CIDs to glyph indices: the glyph index  for a particular CID value  c shall be a 2-byte value stored in bytes  2 u c an d 2  u c  1, where the first byte shall be the high-order byte.  If the value of  CIDToGIDMap  is a name, it shall be  Identity , indicating that the mapping between CIDs and glyph indices is the  identity mapping. Default value:  Identity. This entry may appear only in a Type 2 CIDFont whose associated  TrueType font program is  embedded in the PDF file.  Table 117   Entries in a CIDFont dictionary  (continued) KeyType Value",""],"279":["' Adobe Systems Incorporated 2008  All rights reserved 271PDF 32000-1:2008 TrueType font programs are integrated with the CID-key ed font architecture in one of two ways, depending on  whether the font program is embedded in the PDF file:  If the TrueType font program is embedded, t he Type 2 CIDFont dictionary shall contain a  CIDToGIDMap entry that maps CIDs to the glyph indices for the appropriate glyph descriptions in that font program.   If the TrueType font program is not embedded but is  referenced by name, the Type 2 CIDFont dictionary  shall not contain a  CIDToGIDMap  entry, since it is not meaningful to refer to glyph indices in an external  font program. In this case, CIDs shall not participat e in glyph selection, and only predefined CMaps may be  used with this CIDFont (see  9.7.5, \"CMaps\" ). The conforming reader shall select glyphs by translating  characters from the encoding specified by the predef ined CMap to one of the encodings in the TrueType  fonts cmap table. The means by which this  is accomplished are implementation-dependent.  Even though the CIDs are not used to  select glyphs in a Type 2 CIDFont, they shall always be used to  determine the glyph metrics, as described in the next sub-clause.  Every CIDFont shall contain a glyph descriptio n for CID 0, which is analogous to the .  notdef character name in  simple fonts (see  9.7.6.3, \"Handling Undefined Characters\" ).  9.7.4.3 Glyph Metrics in CIDFonts As discussed in  9.2.4, \"Glyph Positioning and Metrics\" , the wid th  of a glyph refers to the horizontal  displacement between the origin of the glyph and the orig in of the next glyph when  writing in horizontal mode.  In this mode, the vertical displacement between origin s shall be 0. Widths for a CIDFont are defined using the  DW and  W entries in the CIDFont dictionary . These widths shall be consistent  with the actual widths given in  the CIDFont program. The  W ar ray allows the definition of widths for individual  CIDs. The elements of the array shall be organized in  groups of two or three, where each group  shall be in one of these two formats:  c [ w1 w2  wn ]cfirst clast  wIn the first format,  c shall be an integer specifying a starting CI D value; it shall be followed by an array of  nnumbers that shall specify the widths for  n consecutive CIDs, starting with  c. The second format shall define the  same width,  w, for all CIDs in the range cfirst to  clast . EXAMPLE 1 In this example, the glyphs having CIDs 120, 1 21, and 122 are 400, 325, and 500 units wide, respectively.  CIDs in the range 7080 through 8032 all have a width of 1000 units.  W entry example:  /W [ 120  [ 400 325 500 ]   7080  8032  1000  ]Glyphs from a CIDFont may be shown in vertic al writing mode. This is selected by the WMode entry in the  associated CMap dictionary; see  9.7.5, \"CMaps\" . To be used in this way, the CI DFont shall define the vertical  displacement for each glyph and the position vector that  relates the horizontal and vertical writing origins.  The default position vector and vertical disp lacement vector shall be specified by the  DW2 entry in the CIDFont dictionary.  DW2 shall be an array of two values: the ve rtical component of the position vector  v and the vertical  component of the displacement vector  w1 (see  Figure 40 ). The horizontal component of the position vector  shall be half the glyph width, and that  of the displacement vector shall be 0.  EXAMPLE 2 If the  DW2 entry is  / DW2  [ 880 10 00  ]",""],"280":["PDF 32000-1:2008 272 ' Adobe Systems Incorporated 2008  All rights reserved then a glyphs position vector and vertical displacement vector are  where  w0 is the width (horizontal displacement) for the same glyph.  NOTE A negative value for the vertical compo nent places the origin  of the next glyph  below  the current glyph because  vertical coordinates in a standard coordinat e system increase from bottom to top.  The  W2 array shall define vertical metrics for individual CIDs. The elements of the array shall be organized in  groups of two or five, where each group  shall be in one of these two formats:  c [ w11y v1x v1y  w12y v2x v2y   ]cfirst clast   w11y v1x v1yIn the first format,  c is a starting CID and shall be followed by an array containing numbers interpreted in groups  of three. Each group shall consist of the vertical  component of the vertical displacement vector  w1 (whose  horizontal component shall be 0) followed by the hori zontal and vertical components for the position vector  v. Successive groups shall define the vertical me trics for consecutive CIDs starting with  c. The second format  defines a range of CIDs from  cfirst to  clast , that shall be followed by three  numbers that define the vertical  metrics for all CIDs in this range. EXAMPLE 3 This  W2 entry defines the vertical displacement  vector for the glyph with CID 120 as (0,  100 0) and the  position vector as (250,  772). It also defines the displacement vector for CIDs in the range 7080 through  8032 as (0, 1 000) and the position vector as (500,  900). /W2  [ 120 [ 10 00  250 772 ]7080  8032  1 000  500 900   ]9.7.5 CMaps 9.7.5.1 General A CMap shall specify the mapping from  character codes to character selector s. In PDF, the ch aracter selectors  shall be CIDs in a CIDFon t (as mentioned earlier, PostScript CMaps can use names or codes as well). A CMap  serves a function analogous to the  Encoding  dictionary for a simple font. The CMap shall not refer directly to a  specific CIDFont; instead, it shall be  combined with it as part of a CID-keyed font, represented in PDF as a  Type 0 font dictionary (see  9.7.6, \"Type 0 Font Dictionaries\" ). Within the CMap, the character mappings shall  refer to the associated CIDFont by  font number, which in PDF shall be 0.  PDF also uses a special type of CMap to map character codes to Unicode values (see  9.10.3, \"ToUnicode  CMaps\" ).A CMap shall specify the writing modehorizontal or  verticalfor any CIDFont with which the CMap is  combined. The writing mode de termines which metrics shall be used wh en glyphs are painted from that font.  NOTE Writing mode is specified as part  of the CMap because, in some cases, different shapes are used when writing  horizontally and vertically. In such cases, the horizontal  and vertical variants of a  CMap specify different CIDs  for a given character code. A CMap shall be specified in one of two ways:   As a name object identifying a predefined CMap, whose  value shall be one of the predefined CMap names  defined in  Ta b l e  118 . As a stream object whose contents shall be a CMap file.","vw02y880 (,) =w101000 (, ) =",""],"281":["' Adobe Systems Incorporated 2008  All rights reserved 273PDF 32000-1:2008 9.7.5.2 Predefined CMaps Several of the CMaps define mappings from Unicode en codings to character collections. Unicode values  appearing in a text string shall be represented in big-endian order (high-order byte first). CMap names  containing  UCS2 use UCS-2 encoding; names containing  UTF16  use UTF-16BE (big-endian) encoding. NOTE 1Ta b l e  118  lists the names of the predefined CMaps. These  CMaps map character codes to CIDs in a single  descendant CIDFont. CMaps whose names end in H specif y horizontal writing mode; those ending in V specify  vertical writing mode. Table  118    Predefined CJK CMap names   Name Description Chinese (Simplified) GB-EUC-HMicrosoft Code Page 936 (lfCharSet 0x86), GB 2312-80 character set, EUC-CN  encoding GB-EUC-VVertical version of GB-EUC-H GBpc-EUC-H Mac OS, GB 2312-80 character set, EUC-CN encoding, Script Manager code 19 GBpc-EUC-V Vertical version of GBpc-EUC-H GBK-EUC-HMicrosoft Code Page 936 (lfCharSet 0x 86), GBK character set, GBK encoding GBK-EUC-VVertical version of GBK-EUC-H GBKp-EUC-H Same as GBK-EUC-H but replaces half-width Latin characters with proportional  forms and maps character code 0x24 to a dollar sign ($) instead of a yuan symbol  (¥) GBKp-EUC-V Vertical versio n of GBKp-EUC-H GBK2K-H GB 18030-2000 character set, mixed 1-, 2-, and 4-byte encoding GBK2K-V Vertical versio n of GBK2K-HUniGB-UCS2-H Unicode (UCS-2) encoding for the Adobe-GB1 character collection UniGB-UCS2-V Vertical version of UniGB-UCS2-H UniGB-UTF16-H Unicode (UTF-16BE) encoding for the Adobe-GB1 character collection; contains  mappings for all characters in the GB18030-2000 character set UniGB-UTF16-V Vertical version of UniGB-UTF16-H Chinese (Traditional) B5pc-HMac OS, Big Five character set, Big Five encoding, Script Manager code 2 B5pc-VVertical version of B5pc-H HKscs-B5-H Hong Kong SCS, an extension to the Big Five character set and encoding HKscs-B5-V Vertical version of HKscs-B5-H ETen-B5-H Microsoft Code Page 950 (lfCharSet 0x88 ), Big Five character set with ETen  extensions ETen-B5-V Vertical version of ETen-B5-H ETenms-B5-H Same as ETen-B5-H but replaces half-width Latin characters with proportional  forms",""],"282":["PDF 32000-1:2008 274 ' Adobe Systems Incorporated 2008  All rights reserved ETenms-B5-V Vertical version of ETenms-B5-H CNS-EUC-HCNS 11643-1992 character set, EUC-TW encoding CNS-EUC-VVertical version of CNS-EUC-H UniCNS-UCS2-H Unicode (UCS-2) encoding for the Adobe-CNS1 character collection UniCNS-UCS2-V Vertical version of UniCNS-UCS2-H UniCNS-UTF16-H Unicode (UTF-16BE) encoding for the Adobe-CNS1 character collection;  contains mappings for all the characters  in the HKSCS-2001 character set and  contains both 2- and 4-byte character codes  UniCNS-UTF16-V Vertical version of UniCNS-UTF16-H  Japanese 83pv-RKSJ-H Mac OS, JIS X 0208 character set with KanjiTalk6 extensions, Shift-JIS encoding,  Script Manager code 1 90ms-RKSJ-H Microsoft Code Page 932 (lfCharSet 0x80), JIS X 0208 character set with NEC  and IBMﬁ extensions 90ms-RKSJ-V Vertical version of 90ms-RKSJ-H 90msp-RKSJ-H Same as 90ms-RKSJ-H but replaces half-wi dth Latin characters with proportional  forms90msp-RKSJ-V Vertical version of 90msp-RKSJ-H 90pv-RKSJ-H Mac OS, JIS X 0208 character set with KanjiTalk7 extensions, Shift-JIS encoding,  Script Manager code 1 Add-RKSJ-HJIS X 0208 character set with Fujitsu FMR extensio ns, Shift-JIS encoding Add-RKSJ-VVertical version of Add-RKSJ-H EUC-HJIS X 0208 character set, EUC-JP encoding EUC-VVertical version of EUC-H Ext-RKSJ-HJIS C 6226 (JIS78) character set with  NEC extensions, Shift-JIS encoding Ext-RKSJ-VVertical version of Ext-RKSJ-H HJIS X 0208 character set, ISO-2022-JP encoding VVertical version of H UniJIS-UCS2-H Unicode (UCS-2) encoding for the A dobe-Japan1 character collection UniJIS-UCS2-V Vertical version of UniJIS-UCS2-H UniJIS-UCS2-HW-H Same as UniJIS-UCS2-H but replaces pr oportional Latin characters with half- width forms UniJIS-UCS2-HW-V Vertical version of UniJIS-UCS2-HW-H UniJIS-UTF16-HUnicode (UTF-16BE) encoding for the Adobe-Japan1 character collection;  contains mappings for all characters  in the JIS X 0213:1000 character set  UniJIS-UTF16-VVertical version of  UniJIS-UTF16-H KoreanTable 118   Predefined CJK CMap names  (continued) Name Description",""],"283":["' Adobe Systems Incorporated 2008  All rights reserved 275PDF 32000-1:2008 NOTE 2 The Identity-H and Identity-V CMaps may be used to refer  to glyphs directly by their CIDs when showing a text  string. When the current font is a Type 0 font whose Encoding entr y is Identity-H or Identity-V, the string to be shown  shall contain pairs of bytes representing CIDs, high-order  byte first. When the current  font is a CIDFont, the  string to be shown shall contain pairs of bytes representi ng CIDs, high-order byte first. When the current font is  a Type 2 CIDFont in which the CIDToGIDMap entry is Iden tity and if the TrueType font is embedded in the PDF  file, the 2-byte CID values shall be  identical glyph indices for the gly ph descriptions in the TrueType font  program.  NOTE 3Ta b l e  119  lists the character collections referenced by the pr edefined CMaps for the different versions of PDF.  A dash () indicates that the CMap is  not predefined in that PDF version.  KSC-EUC-HKS X 1001:1992 character set, EUC-KR encoding KSC-EUC-VVertical version of KSC-EUC-H KSCms-UHC-H Microsoft Code Page 949 (lfCharSet 0x81), KS X 1001:1992 character set plus  8822 additional hangul, Unified Hangul Code (UHC) encoding KSCms-UHC-V Vertical version of KSCms UHC-HKSCms-UHC-HW-H Same as KSCms-UHC-H but replaces prop ortional Latin characters with half- width forms KSCms-UHC-HW-V Vertical version of KSCms-UHC-HW-H KSCpc-EUC-HMac OS, KS X 1001:1992 character set with Mac OS KH extensions, Script  Manager Code 3 UniKS-UCS2-H Unicode (UCS-2) encoding for the Adobe-Korea1 character collection UniKS-UCS2-V Vertical version of UniKS-UCS2-H UniKS-UTF16-H Unicode (UTF-16BE) encoding for the Adobe-Korea1 character collection UniKS-UTF16-V Vertical version of UniKS-UTF16-H Generic Identity-HThe horizontal identity mapping for 2-byte CIDs; may be used with CIDFonts  using any Registry , Ordering , and  Supplement values. It maps 2-byte character  codes ranging from 0 to 65,535 to the same 2-byte CID value, interpreted high- order byte first.  Identity-VVertical version of Identity-H. The m apping is the same as for Identity-H.  Table  119    Character collections for predefined CMaps, by PDF version   CMAPPDF 1.2PDF 1.3 PDF 1.4 PDF 1.5Chinese (Simplified) GB-EUC-H/VAdobe-GB1-0 Adobe-GB1-0 Adobe-GB1-0 Adobe-GB1-0 GBpc-EUC-H Adobe-GB1-0 Adobe-GB1-0 Adobe-GB1-0 Adobe-GB1-0 GBpc-EUC-V Adobe-GB1-0 Adobe-GB1-0 Adobe-GB1-0 GBK-EUC-H/VAdobe-GB1-2 Adobe-GB1-2 Adobe-GB1-2 GBKp-EUC-H/V Adobe-GB1-2 Adobe-GB1-2 Table 118   Predefined CJK CMap names  (continued) Name Description",""],"284":["PDF 32000-1:2008 276 ' Adobe Systems Incorporated 2008  All rights reserved GBK2K-H/V Adobe-GB1-4 Adobe-GB1-4 UniGB-UCS2-H/V Adobe-GB1-2 Adobe-GB1-4 Adobe-GB1-4 UniGB-UTF16-H/V Adobe-GB1-4 Chinese (Traditional) B5pc-H/VAdobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 HKscs-B5-H/VAdobe-CNS1-3 Adobe-CNS1-3 ETen-B5-H/V Adobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 ETenms-B5-H/V Adobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 CNS-EUC-H/VAdobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 Adobe-CNS1-0 UniCNS-UCS2-H/V Adobe-CNS1-0 Adobe-CNS1-3 Adobe-CNS1-3 UniCNS-UTF16-H/V Adobe-CNS1-4 Japanese 83pv-RKSJ-H Adobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 90ms-RKSJ-H/V Adobe-Japan1-2 Adobe-Japan1-2 Adobe-Japan1-2 Adobe-Japan1-2 90msp-RKSJ-H/V Adobe-Japan1-2 Adobe-Japan1-2 Adobe-Japan1-2 90pv-RKSJ-H Adobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 Add-RKSJ-H/VAdobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 EUC-H/VAdobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 Ext-RKSJ-H/VAdobe-Japan1-2 Adobe-Japan1-2 Adobe-Japan1-2 Adobe-Japan1-2 H/VAdobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 Adobe-Japan1-1 UniJIS-UCS2-H/V Adobe-Japan1-2 Adobe-Japan1-4 Adobe-Japan1-4 UniJIS-UCS2-HW-H/V Adobe-Japan1-2 Adobe-Japan1-4 Adobe-Japan1-4 UniJIS-UTF16-H/VAdobe-Japan1-5 KoreanKSC-EUC-H/VAdobe-Korea1-0Adobe-Korea1-0 Adobe-Korea1-0 Adobe-Korea1-0 KSCms-UHC-H/V Adobe-Korea1-1Adobe-Korea1-1 Adobe-Korea1-1 Adobe-Korea1-1 KSCms-UHC-HW-H/V Adobe-Korea1-1 Adobe-Korea1-1 Adobe-Korea1-1 KSCpc-EUC-HAdobe-Korea1-0Adobe-Korea1-0 Adobe-Korea1-0 Adobe-Korea1-0 UniKS-UCS2-H/V Adobe-Korea1-1 Adobe-Korea1-1 Adobe-Korea1-1","UniKS-UTF16-H/V Adobe-Korea1-2 Generic Identity-H/VAdobe-Identity-0 Adobe-Identity-0 Adobe-Identity-0 Adobe-Identity-0 Table 119   Character collections for predefined CMaps, by PDF version  (continued) CMAPPDF 1.2 PDF 1.3PDF 1.4 PDF 1.5",""],"285":["' Adobe Systems Incorporated 2008  All rights reserved 277PDF 32000-1:2008 A conforming reader shall support all of the character collections listed in  Ta b l e  119 . As noted in 9.7.3, \"CIDSystemInfo Dictionaries\" , a character collection is identified by registry, ordering, and supplement number,  and supplements are cumulative; that is, a higher-numbe red supplement includes the CIDs contained in lower- numbered supplements, as well as some additional  CIDs. Consequently, text encoded according to the  predefined CMaps for a given PDF version shall be va lid when interpreted by a conforming reader supporting  the same or a later PDF version. When interpreted by a conforming reader supporting an earlier PDF version,  such text causes an error if a CMap is encountered that  is not predefined for that  PDF version. If character  codes are encountered that were added in a higher-num bered supplement than the one corresponding to the  supported PDF version, no characters  are displayed for those codes; see  9.7.6.3, \"Handling Undefined  Characters\" . The Identity-H and Identity-V CMaps  shall not be used with a non-embedded font. Only standardized character  sets may be used. NOTE 4 If a conforming writer producing a PDF file encount ers text to be included that uses CIDs from a higher- numbered supplement than the one corresponding to t he PDF version being generate d, the application should  embed the CMap for the higher-numbered supplement  rather than refer to the predefined CMap.  The CMap programs that define the predefined CMaps are available through the ASN Web site.  9.7.5.3 Embedded CMap Files For character encodings that are not predefined, the PDF  file shall contain a stream  that defines the CMap. In  addition to the standard entries for streams (listed in  Ta b l e  5), the CMap stream dictionary contains the entries  listed in Ta b l e  120 . The data in the stream defines the mapping  from character codes to a font number and a  character selector. The data shall follow the syntax defined in Adobe Technical Note #5014, Adobe CMap and  CIDFont Files Specification (see bibliography).  9.7.5.4 CMap Example and Operator Summary Embedded CMap files shall conform to the format documented in Adobe Technical Note #5014, subject to  these additional constraints: Table  120   Additional entries in a CMap stream dictionary   Key Type Value Type name(Required)  The type of PDF object that th is dictionary describes; shall  be CMap for a CMap dictionary.  CMapName name(Required)  The name of the CMap. It sha ll be the same as the value of  CMapName  in the CMap file.  CIDSystemInfo dictionary (Required)  A dictionary (see  9.7.3, \"CIDSystemInfo Dictionaries\" ) containing entries that  define the character collection for the CIDFont  or CIDFonts associated with the CMap.  The value of this entry shall be the same as the value of  CIDSystemInfo  in the CMap file. (However, it does not need to match  the values of  CIDSystemInfo  for the Identit y-H or Identity-V CMaps.)  WMode integer (Optional)   A code that specifies the writing mode for any CIDFont with  which this CMap is combined. The value shall be 0 for horizontal or 1  for vertical. Default value: 0.  The value of this entry shall be the same as the value of  WMode  in the  CMap file.  UseCMap name or  stream(Optional)  The name of a predefined CM ap, or a stream containing a  CMap. If this entry is  present, the referencing CMap shall specify only  the character mappings that diff er from the referenced CMap.",""],"286":["PDF 32000-1:2008 278 ' Adobe Systems Incorporated 2008  All rights reserved a) If the embedded CMap file contains a usecmap reference, the CMap indicated there shall also be identified  by the UseCMap entry in the CMap stream dictionary. b) The usefont operator, if present,  shall specify a font number of 0. c) The beginbfchar and endbfchar shall not appear in a CM ap that is used as the Encoding entry of a Type 0  font; however, they may appear in th e definition of a ToUnicode CMap. d) A notdef mapping, defined using beginnotdefchar, endnotdefchar, beginnotdefrange, and endnotdefrange  shall be used if the normal mapping produces a CID  for which no glyph is present in the associated  CIDFont. e) The beginrearrangedfont, endrearrangedfont, beginusematrix, and endusematrix operators shall not be  used. EXAMPLE This example shows a sample CMap for a Japanese Shift-JIS encoding. Character codes in this encoding  can be either 1 or 2 bytes in length. This CMap could be used with a CIDFont  that uses the same CID  ordering as specified in the  CIDSystemInfo  entry. Note that several of the entries in the stream dictionary  are also replicated in the stream data.  22 0 obj<<  /Type  /CMap  /CMapName  /90ms-RKSJ-H  /CIDSystemInfo  <<  /Registry  ( Adobe  )   /Ordering  ( Japan1  )   /Supplement  2 >> /WMode  0 /Length  23 0 R>>stream%!PS-Adobe-3  . 0 Resource-CMap%%DocumentNeededResources  : ProcSet ( CIDInit  )%%IncludeResource  : ProcSet ( CIDInit  )%%BeginResource  : CMap ( 90ms-RKSJ-H  )%%Title  : ( 90ms-RKSJ-H Adobe Japan1 2  )%%Version  : 10 . 001 %%Copyright  : Copyright 1990-2001 Adobe Systems Inc"," .%%Copyright  : All Rights Reserved  .%%EndComments /CIDInit  /ProcSet  findresource  begin 12 dict begin begincmap /CIDSystemInfo 3 dict dup  begin /Registry  ( Adobe ) def /Ordering  ( Japan1  ) def/Supplement  2 defend  def /CMapName  /90ms-RKSJ-H def /CMapVersion  10 . 001  def /CMapType  1 def/UIDOffset  950  def /XUID  [ 1 10 25343  ] def /WMode  0 def4 begincodespacerange < 00 >< 80 >","< 8140  >< 9FFC  >< A0 >< DF >",""],"287":["' Adobe Systems Incorporated 2008  All rights reserved 279PDF 32000-1:2008 < E040 >< FCFC  >endcodespacerange 1 beginnotdefrange < 00 >< 1F >231 endnotdefrange 100  begincidrange < 20 >< 7D >231 < 7E >< 7E >631 < 8140  >< 817E  >633 < 8180  >< 81AC >696 < 81B8  >< 81BF >741 < 81C8  >< 81CE >749  Additional ranges  < FB40  >< FB7E > 8518 < FB80  >< FBFC  > 8581 < FC40  >< FC4B  > 8706 endcidrange endcmap","CMapName  currentdict  /CMap  defineresource  pop end end %%EndResource %%EOFendstream endobj 9.7.6 Type 0 Font Dictionaries 9.7.6.1 General A Type 0 font dictionary contains the entries listed in  Ta b l e  121 . Table  121   Entries in a Type 0 font dictionary   KeyType Value Type name (Required)  The type of PDF object that  this dictionary describes; shall  be  Font  for a font dictionary.  Subtype name (Required)   The type of font; shall be  Type0  for a Type 0 font.  BaseFont name (Required)  The name of the font. If the descendant is a Type 0  CIDFont, this name should be the  concatenation of the CIDFonts  BaseFont  name, a hyphen, and the CMap name given in the  Encoding  entry (or the  CMapName entry in the CMap). If the  descendant is a Type 2 CIDFont, this name should be the same as the  CIDFonts  BaseFont  name.  NOTE In principle, this is an ar bitrary name, since there is no  font program associated directly with a Type 0 font  dictionary. The conventions described here ensure  maximum compatibility with existing readers.  Encoding name  or stream(Required)  The name of a predefined CMap , or a stream containing a  CMap that maps character codes to  font numbers an d CIDs. If the descendant is a Type 2 CIDFont whose associated TrueType font  program is not embedded in the PDF file, the  Encoding  entry shall be  a predefined CMap name (see  9.7.4.2, \"Glyph Selection in CIDFonts\" ).",""],"288":["PDF 32000-1:2008 280 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE This code sample shows a Type 0 font. 14 0 obj<<  /Type  /Font  /Subtype  /Type0  /BaseFont  /HeiseiMin-W 5-90ms-RKSJ-H  /Encoding  /90ms-RKSJ-H /DescendantFonts  [ 15 0 R ]>>endobj 9.7.6.2 CMap Mapping The  Encoding entry of a Type 0 font dictionary specifies a CMap that specifies how text-showing operators  (such as  Tj) shall interpret the bytes in the string to be shown  when the current font is the Type 0 font. This sub- clause describes how the characters in the string shall be decoded and mapped into character selectors, which  in PDF are always CIDs.  The codespace ranges in the CMap (delimited by  begincodespacerange  and  endcodespacerange ) specify  how many bytes are extracted from the string for each  successive character code. A codespace range shall be  specified by a pair of codes of some particular length  giving the lower and upper bounds of that range. A code  shall be considered to match the range if it is the sa me length as the bounding codes and the value of each of  its bytes lies between the corresponding bytes of the lower and upper bounds. The code length shall not be  greater than 4.  A sequence of one or more bytes shall be extracted fr om the string and matched against the codespace ranges  in the CMap. That is, the first byte  shall be matched against 1-byte codespace ranges; if no match is found, a  second byte shall be extracted, and the 2-byte code  shall be matched against 2-byte codespace ranges. This  process continues for successively longer codes until a  match is found or all codespace ranges have been  tested. There will be at most one match becau se codespace ranges  shall not overlap. The code extracted from the string shall be looked up in the character code mappings for codes of that length.  (These are the mappings defined by  beginbfchar , endbfchar , begincidchar , endcidchar , and corresponding  operators for ranges .) Failing that, it shall be looked up in the  notdef mappings, as described in the next sub- clause.  The results of the CMap mapping algorithm are a font number and a character selector. The font number shall  be used as an index into the Type 0 fonts  DescendantFonts  array to select a CIDFont. In PDF, the font  number shall be 0 and the character selector shall be a CID; this is the only case described here. The CID shall  then be used to select a glyph in the CIDFont.  If the CIDFont contains no glyph for that CID, the  notdef  mappings  shall be consulted, as described in  9.7.6.3, \"Handling Undefined Characters\" . 9.7.6.3 Handling Undefined Characters A CMap mapping operation can fail to select a glyph for  a variety of reasons. This  sub-clause describes those  reasons and what happens when they occur.  If a code maps to a CID for which no such glyph exists in the descendant CIDFont, the  notdef mappings  in the  CMap shall be consulted to obtain a substitute ch aracter selector. These mappings are delimited by the  DescendantFonts array (Required)  A one-element array specifying  the CIDFont dictionary that  is the descendant of this Type 0 font.  ToUnicode stream(Optional)  A stream containing a CMap f ile that maps character codes  to Unicode values (see  9.10, \"Extraction  of Text Content\" ). Table 121   Entries in a Type 0 font dictionary  (continued) KeyType Value",""],"289":["' Adobe Systems Incorporated 2008  All rights reserved 281PDF 32000-1:2008 operators  beginnotdefchar , endnotdefchar , beginnotdefrange , and  endnotdefrange  within an embedded  CMap file. They shall always map to a  CID. If a matching notdef mapping is  found, the CID selects a glyph in  the associated descendant, which shall be a CIDFont. If  no glyph exists for that CID, the glyph for CID 0 (which  shall be present) shall be substituted.  NOTE 5 The  notdef mappings are similar to  the . notdef character mechanism in simple fonts. If the CMap does not contain either a character mapping or a notdef mapping for the code, descendant 0 shall  be selected and the glyph for CID 0 shall be  substituted from the associated CIDFont.  If the code is invalidthat is, the bytes extracted fr om the string to be shown do not match any codespace  range in the CMapa substitute glyp h is chosen as just described. The character mapping algorithm shall be  reset to its original position in the string, and a modi fied mapping algorithm chooses  the best partially matching  codespace range:  a) If the first byte extracted from the string to be show n does not match the first by te of any codespace range,  the range having the shortest codes shall be chosen.  b) Otherwise (that is, if there is a pa rtial match), for each additional byte  extracted, the code accumulated so  far shall be matched against the beginnings of all longer codespace ranges until the longest such partial  match has been found. If multiple codespace ranges  have partial matches of the same length, the one  having the shortest co des shall be chosen.  The length of the codes in the chosen codespace range determines the total number of bytes to consume from  the string for the current mapping operation.  9.8 Font Descriptors 9.8.1 General A fo nt descriptor  specifies metrics and other attributes of a simple font or a CIDFont as a whole, as distinct from  the metrics of individual glyphs. These font metrics provide information that enables  a conforming reader to  synthesize a substitute font or select a similar font when  the font program is unavai lable. The font descriptor  may also be used to embed the font program in the PDF file.  Font descriptors shall not be used with Type 0 fonts. Be ginning with PDF 1.5, font descriptors may be used with  Type 3 fonts.  A font descriptor is a dictionary whose entries specify various font attributes. The entries common to all font  descriptorsfor both simple fonts and CIDFontsare listed in  Table  122 . Additional entries in the font  descriptor for a CIDFont are described in  9.8.3, \"Font Descriptors for CIDFonts\" . All integer values shall be  units in glyph space. The conversion from gl yph space to text space is described in  9.2.4, \"Glyph Positioning  and Metrics\" . Table  122    Entries common to all font descriptors   KeyType Value Type name (Required)  The type of PDF object that this dictionary describes; shall  be  FontDescriptor  for a font descriptor.  FontName name (Required)  The PostScript name of the f ont. This name shall be the  same as the value of  BaseFont  in the font or CIDFont dictionary that  refers to this font descriptor.  FontFamily byte string (Optional; PDF 1.5; should be used for Type 3 fonts in Tagged PDF  documents)  A byte string specifying the  preferred font family name.  EXAMPLE 1 For the font Times Bold Italic, the  FontFamily  is Times.",""],"290":["PDF 32000-1:2008 282 ' Adobe Systems Incorporated 2008  All rights reserved FontStretch name (Optional; PDF 1.5; should be used for Type 3 fonts in Tagged PDF  documents)  The font stretch value. It shall be one of these names  (ordered from narrowest to widest): UltraCondensed,  ExtraCondensed, Condensed, SemiCondensed, Normal,  SemiExpanded, Expanded, ExtraExpanded or UltraExpanded.  The specific interpretation of these  values varies from font to font.  EXAMPLE 2 Condensed  in one font may appear most similar to  Normal  in another. FontWeight number (Optional; PDF 1.5; should be used for Type 3 fonts in Tagged PDF  documents)  The weight (thickness) component of the fully-qualified  font name or font spec ifier. The possible values shall be 100, 200, 300,  400, 500, 600, 700, 800, or  900, where each number indicates a  weight that is at least as dark as its predecessor. A value of 400 shall  indicate a normal weight; 700 shall indicate bold. The specific interpretation of these  values varies from font to font.  EXAMPLE 3 300 in one font may appear most similar to 500 in  another. Flags integer (Required)  A collection of flags defining various characteristics of the  font (see  9.8.2, \"Font Descriptor Flags\" ). FontBBox rectangle (Required, except for Type 3 fonts)  A rectangle (see  7.9.5,  \"Rectangles\" ), expressed in the glyph  coordinate system, that shall specify the  font bounding box . This should be the smallest rectangle  enclosing the shape that would result  if all of the glyphs of the font  were placed with their origins coincident and then filled.  ItalicAngle number (Required)  The angle, expressed in deg rees counterclockwise from  the vertical, of the dominant ve rtical strokes of the font.  EXAMPLE 4 The 9-oclock position is 90 degrees, and the 3- oclock position is 90 degrees.  The value shall be negative for fonts that slo pe to the right, as almost  all italic fonts do. Ascent number (Required, except for Type 3 fonts)  The maximum height above the  baseline reached by glyphs in this font. The height of glyphs for  accented characters shall be excluded.  Descent number (Required, except for Type 3 fonts)  The maximum depth below the  baseline reached by glyphs in this font. The value shall be a negative  number.  Leading number (Optional)  The spacing between baselines of consecutive lines of text.  Default value: 0.  CapHeight number (Required for fonts that have Latin characters, except for Type 3 fonts) The vertical coordinate of the top of flat capital letters, measured from  the baseline.  XHeightnumber (Optional)  The fonts  x height: the vertical coordinate of the top of flat  nonascending lowercase letters (like the letter  x), measured from the  baseline, in fonts that have Latin  characters. Default value: 0.  StemV number (Required, except for Type 3 fonts)  The thickness, measured  horizontally, of the dominant vertic al stems of glyphs in the font.  StemH number (Optional)  The thickness, measured  vertically, of the dominant  horizontal stems of glyphs in the font. Default value: 0.  Table 122   Entries common to all font descriptors  (continued) KeyType Value",""],"291":["' Adobe Systems Incorporated 2008  All rights reserved 283PDF 32000-1:2008 At most, only one of the FontFile, FontF ile2, and FontFile3 entries shall be present. 9.8.2 Font Descriptor Flags The value of the  Flags  entry in a font descriptor shall be an unsig ned 32-bit integer containing flags specifying  various characteristics of th e font. Bit positions within the flag word are numbered from 1 (low-order) to 32  (high-order).  Ta b l e  123  shows the meanings of the flags; all undefined  flag bits are reserved and shall be set to  0 by conforming writers.  Figure 48  shows examples of fonts with these characteristics.  AvgWidth number (Optional)   The average width of glyphs in the font. Default value: 0.  MaxWidth number (Optional)   The maximum width of glyphs in the font. Default value: 0.  MissingWidth number (Optional)  The width to use for character codes whose widths are not  specified in a font dictionarys  Widths  array. This shall have a  predictable effect only if all such codes map to glyphs whose actual  widths are the same as the value of the  MissingWidth  entry. Default  value: 0. FontFile stream(Optional)  A stream containing a Ty pe 1 font program (see  9.9,  \"Embedded Font Programs\" ). FontFile2 stream(Optional; PDF 1.1)  A stream containing a TrueType font program (see  9.9, \"Embedded Font Programs\" ).  FontFile3 stream(Optional; PDF 1.2)  A stream containing a f ont program whose format  is specified by the  Subtype entry in the stream dictionary (see  Table  126).  CharSetASCII string or byte string(Optional; meaningful only in Type  1 fonts; PDF 1.1)  A string listing the  character names defined in a font subset. The names in this string  shall be in PDF syntaxthat is, each name preceded by a slash (/).  The names may appear in any order. The name .  notdef shall be  omitted; it shall exist in the font s ubset. If this entry is absent, the only  indication of a font subset shall be the subset tag in the  FontName entry (see  9.6.4, \"Font Subsets\" ). Table  123    Font flags   Bit positionName Meaning 1FixedPitch All glyphs have the same width (as opposed to proportional or  variable-pitch fonts, which have different widths).  2SerifGlyphs have serifs, which are short strokes drawn at an angle on the  top and bottom of glyph stems. ( Sans serif fonts do not have serifs.)  3Symbolic Font contains glyphs outside the Adobe standard Latin character set.  This flag and the Nonsymbolic flag shall not both be set or both be  clear.  4ScriptGlyphs resemble cursive handwriting.  6Nonsymbolic Font uses the Adobe standard Latin character set or a subset of it.  7Italic Glyphs have dominant vertical strokes that are slanted.  17AllCap Font contains no lowercase letters;  typically used for display purposes,  such as for titles or headlines.  Table 122   Entries common to all font descriptors  (continued) KeyType Value",""],"292":["PDF 32000-1:2008 284 ' Adobe Systems Incorporated 2008  All rights reserved The Nonsymbolic flag (bit 6 in the  Flags entry) indicates that the fonts character set is the Adobe standard  Latin character set (or a subset of it) and that it uses  the standard names for those gl yphs. This character set is  shown in  D.2, \"Latin Character Set and Encodings\" . If the font contains any glyphs outside this set, the  Symbolic flag shall be set and the Nonsymbolic flag shall  be clear. In other words, any font whose character set  is not a subset of the Adobe standard character set shall be considered to be symbolic. This influences the  fonts implicit base encoding and may affect a co nforming readers font substitution strategies.  Figure  48   Characteristics represented in the Flags entry of a font descriptor NOTE 1 This classification of nonsymbol ic and symbolic fonts is peculiar to PDF. A font may contain additional  characters that are used in Latin writing systems but  are outside the Adobe standard Latin character set; PDF  considers such a font to be symbolic. The use of two flag s to represent a single binary choice is a historical  accident.  The ForceBold flag (bit 19) shall determine whether bold gl yphs shall be painted with extra pixels even at very  small text sizes by a conforming reader. If the ForceBold flag  is set, features of bold  glyphs may be thickened at  small text sizes.  NOTE 2 Typically, when glyphs are painted at small sizes  on very low-resolution devices  such as display screens,  features of bold glyphs may appear only 1 pixel wide.  Because this is the minimum feature width on a pixel- based device, ordinary (nonbold) glyphs also appear  with 1-pixel-wide features  and therefore cannot be  distinguished from bold glyphs.  18SmallCap Font contains both uppercase and  lowercase letters. The uppercase  letters are similar to those in the  regular version of the same typeface  family. The glyphs for the lowercase letters have the same shapes as  the corresponding uppercase letters,  but they are sized and their  proportions adjusted so that they  have the same size and stroke weight as lowercase glyphs in the same typeface family.  19ForceBold See description after Note 1 in this sub-clause.  Table 123   Font flags  (continued) Bit position Name Meaning","The quick brown fox jumped.The quick brown fox jumped.The quick brown fox jumped.    The quick brown fox jumped.The quick brown fox jumped.The quick brown fox jumpedThe quick brown fox jumped.","Fixed-pitch fontSerif fontSans serif fontSymbolic fontScript fontItalic fontAll-cap fontSmall-cap font",""],"293":["' Adobe Systems Incorporated 2008  All rights reserved 285PDF 32000-1:2008 EXAMPLE This code sample illu strates a font descriptor whose Flags en try has the Serif, Nonsymbolic, and  ForceBold flags (bits 2, 6, and 19) set.  7 0 obj <<  /Type  /FontDescriptor  /FontName  /AGaramond-Semibold  /Flags  262178 % Bits 2, 6, and 19  /FontBBox  [ 177 26 9  1123  866 ] /MissingWidth  255  /StemV  105  /StemH  45 /CapHeight  660  /XHeight  394 /Ascent 720 /Descent  27 0  /Leading  83 /MaxWidth  1212  /AvgWidth  478 /ItalicAngle  0>>endobj 9.8.3 Font Descriptors for CIDFonts 9.8.3.1 General In addition to the entries in  Ta b l e  122, the Font Descriptor  dictionaries of CIDFonts may contain the entries  listed in Ta b l e  124. 9.8.3.2 Style The  St yle  dictionary contains entries that define style a ttributes and values for the CIDFont. Only the  Panose entry is defined. The value of  Panose shall be a 12-byte string consisting of these elements:  Table  124   Additional font descriptor entries for CIDFonts   Key Type Value Style dictionary (Optional)   A dictionary containing entries that  describe the style of the glyphs in  the font (see  9.8.3.2, \"Style\" ). Lang name(Optional; PDF 1.5)  A name specifying the language of the font, which may be  used for encodings where the language is  not implied by the encoding itself.  The value shall be one of the codes defined by Internet RFC 3066,  Tags for the  Identification of Languages  or (PDF 1.0) 2-character language codes defined  by ISO 639 (see the  Bibliography ). If this entry is absent, the language shall be  considered to be unknown. FD","dictionary (Optional)   A dictionary whose keys identify a class of glyphs in a CIDFont.  Each value shall be a dictionary containing entries that shall override the  corresponding values in the main font descriptor dictionary for that class of  glyphs (see  9.8.3.3, \"FD\" ). CIDSetstream(Optional)  A stream identifying which CIDs ar e present in the CIDFont file. If  this entry is present, the CIDFont shall co ntain only a subset of the glyphs in  the character collection defined by the  CIDSystemInfo  dictionary. If it is  absent, the only indication of a CIDFont  subset shall be the subset tag in the  FontName  entry (see  9.6.4, \"Font Subsets\" ). The streams data shall be organized as a t able of bits indexed by CID. The bits  shall be stored in bytes with the high-order bit first. Each bit shall correspond to  a CID. The most significant  bit of the first byte shall correspond to CID 0, the  next bit to CID 1, and so on.",""],"294":["PDF 32000-1:2008 286 ' Adobe Systems Incorporated 2008  All rights reserved  The font family class and subclass ID bytes, giv en in the sFamilyClass field of the OS/2 table in a  TrueType font. This field is documented in Microsofts  TrueType 1.0 Font Files Technical Specification .  Ten bytes for the PANOSE classification number fo r the font. The PANOSE classification system is  documented in Hewlett-Packard Companys  PANOSE Classification Metrics Guide . See the  Bibliography  for more information about these documents.  EXAMPLE This is an example of a  Style  entry in the font descriptor:  /Style  << /Panose  < 01 05 02 02 03 00 00 00 00 00 00 00 > >>9.8.3.3 FD A CIDFont may be made up of different classes of glyphs , each class requiring different sets of the font-wide  attributes that appear in font descriptors. EXAMPLE 1 Latin glyphs, for example, may requ ire different attributes than kanji glyphs.  The font descriptor shall define a set of default attr ibutes that apply to all glyphs in the CIDFont. The  FD entry in the font descriptor shall contain exceptions to these defaults.  The key for each entry in an  FD dictionary shall be the name of a class  of glyphsthat is, a particular subset of  the CIDFonts character collection. Th e entrys value shall be a font descriptor whose contents shall override  the font-wide attributes for that class only. This font desc riptor shall contain entries for metric information only; it  shall not include FontFile , FontFile2 , FontFile3 , or any of the entries listed in  Ta b l e  122. The  FD  dictionary should contain at least  the metrics for the proportional Latin glyphs. With the information for  these glyphs, a more accurate substitution font can be created.  The names of the glyph classes depend on the  character collection, as identified by the  Registry , Ordering , and  Supplement  entries in the  CIDSystemInfo dictionary.  Table  125 lists the valid keys for the Adobe-GB1,  Adobe-CNS1, Adobe-Japan1, Adobe-Japan2, and Adobe-Korea1 character collections.",""],"295":["' Adobe Systems Incorporated 2008  All rights reserved 287PDF 32000-1:2008 Table  125   Glyph classes in CJK fonts   Character Collection ClassGlyphs in Class Adobe-GB1 Alphabetic Dingbats Generic HanziHRomanHRomanRotKanaProportional ProportionalRot Full-width Latin, Greek, and Cyrillic glyphs Special symbols Typeface-independent glyphs, such as line-drawing  Full-width hanzi (Chinese) glyphs  Half-width Latin glyphs  Same as HRoman but rotated for use in vertical writing  Japanese kana (katakana and hiragana) glyphs  Proportional Latin glyphs  Same as Proportional  but rotated for use in vertical  writing  Adobe-CNS1 Alphabetic Dingbats Generic HanziHRomanHRomanRotKanaProportional ProportionalRot Full-width Latin, Greek, and Cyrillic glyphs  Special symbols  Typeface-independent glyphs, such as line-drawing  Full-width hanzi (Chinese) glyphs  Half-width Latin glyphs  Same as HRoman but rotated for use in vertical writing  Japanese kana (katakana and hiragana) glyphs  Proportional Latin glyphs  Same as Proportional  but rotated for use in vertical  writing  Adobe-Japan1 Alphabetic AlphaNumDingbats DingbatsRot Generic GenericRot HKanaHKanaRotHRomanHRomanRotKanaKanjiProportional ProportionalRot RubyFull-width Latin, Greek, and Cyrillic glyphs  Numeric glyphs  Special symbols  Same as Dingbats  but rotated for use in vertical writing  Typeface-independent glyphs, such as line-drawing  Same as Generic  but rotated for use in vertical writing  Half-width kana (katakana and hiragana) glyphs  Same as HKana but rotated for use in vertical writing  Half-width Latin glyphs  Same as HRoman but rotated for use in vertical writing  Full-width kana (katakana and hiragana) glyphs  Full-width kanji (Chinese) glyphs  Proportional Latin glyphs  Same as Proportional  but rotated for use in vertical  writing  Glyphs used for setting ruby (small glyphs that serve to  annotate other glyphs with meanings or readings)  Adobe-Japan2 Alphabetic Dingbats HojoKanjiFull-width Latin, Greek, and Cyrillic glyphs  Special symbols  Full-width kanji glyphs",""],"296":["PDF 32000-1:2008 288 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 2 This example illustrates an  FD dictionary containing two entries.  /FD   <<  /Proportional  25 0 R    /HKana  26 0 R   >>25 0 obj<<  /Type  /FontDescriptor  /FontName  /HeiseiMin-W3-Proportional  /Flags  2 /AvgWidth  478  /MaxWidth  1212 /MissingWidth  250  /StemV  105  /StemH  45 /CapHeight  660  /XHeight  394 /Ascent 720 /Descent  27 0  /Leading  83>>endobj 26 0 obj<<  /Type  /FontDescriptor  /FontName  /HeiseiMin-W3-HKana  /Flags  3 /AvgWidth  500  /MaxWidth  500 /MissingWidth  500"," /StemV  50 /StemH  75 /Ascent 720 /Descent  0 /Leading  83>>endobj 9.9 Embedded Font Programs A font program may be embedded in a PDF file  as data contained in a PDF stream object.  NOTE 1 Such a stream object is also called a  font file  by analogy with font programs  that are available from sources  external to the conforming writer.   Adobe-Korea1  Alpha betic Dingbats Generic Hangul HanjaHRomanHRomanRotKanaProportional ProportionalRot Full-width Latin, Greek, and Cyrillic glyphs  Special symbols  Typeface-independent glyphs, such as line-drawing  Hangul and jamo glyphs  Full-width hanja (Chinese) glyphs  Half-width Latin glyphs  Same as HRoman but rotated for use in vertical writing  Japanese kana (katakana and hiragana) glyphs  Proportional Latin glyphs  Same as Proportional  but rotated for use in vertical  writing  Table 125   Glyph classes in CJK fonts  (continued) Character Collection Class Glyphs in Class",""],"297":["' Adobe Systems Incorporated 2008  All rights reserved 289PDF 32000-1:2008 Font programs are subject to copyright, and the copyright owner may impose conditions under which a font  program may be used. These permissions are recorded either  in the font program or as part of a separate  license. One of the conditions may be that the font prog ram cannot be embedded, in which case it should not  be incorporated into a PDF file. A font program may allow embedding for the sole purpose of viewing and  printing the document but not for creating new or modified  text that uses the font (in either the same document  or other documents). The latter operation would require  the user performing the operation to have a licensed  copy of the font program, not a copy extracted from the  PDF file. In the absence of explicit information to the  contrary, embedded font programs shall be used only to  view and print the document and not for any other  purposes.  Ta b l e  126 summarizes the ways in which font programs shall be embedded in a PDF file, depending on the  representation of the font program. The key shall be the nam e used in the font descriptor to refer to the font file  stream; the subtype shall be the value of the  Subtype  key, if present, in the font file stream dictionary. Further  details of specific font program  representations are given below.  Table  126    Embedded font organization for various font types   KeySubtype Description FontFile Type 1 font program, in the original (noncompact) format described  in Adobe Type 1 Font Format . This entry may appear in the font  descriptor for a  Type1  or MMType1  font dictionary.  FontFile2 (PDF 1.1)   TrueType font program, as described in the  TrueType  Reference Manual . This entry may appear in the font descriptor for  a TrueType  font dictionary or ( PDF 1.3) for a CIDFontType2CIDFont dictionary.  FontFile3 Type1C (PDF 1.2)  T ype 1equivalent font program represented in the  Compact Font Format (CFF), as described in Adobe Technical Note  #5176,  The Compact Font Format Specification . This entry may  appear in the font descriptor for a  Type1  or MMType1  font  dictionary.  FontFile3 CIDFontType0C (PDF 1.3)  T ype 0 CIDFont program represented in the Compact  Font Format (CFF), as described in Adobe Technical Note #5176,  The Compact Font Format Specification . This entry may appear in  the font descriptor for a  CIDFontType0  CIDFont dictionary.",""],"298":["PDF 32000-1:2008 290 ' Adobe Systems Incorporated 2008  All rights reserved The stream dictionary for a font  file shall contain the normal entries for a stream, such as  Length  and  Filter(listed in  Ta b l e  5), plus the additional entries listed in  Ta b l e  127 . NOTE 2 A standard Type 1 font program, as described in the  Adobe Type 1 Font Format  specification, c onsists of three  parts: a clear-text portion (written using PostScript sy ntax), an encrypted portion,  and a fixed-content portion.  The fixed-content portion contains 512 ASCII zeros followed by a  cleartomark  operator, and perhaps followed  FontFile3 OpenType (PDF 1.6) OpenTypeﬁ font program, as described in the  OpenType  Specification v.1.4  (see the Bibliography). OpenType is an  extension of TrueType that allows  inclusion of font programs that  use the Compact Font Format (CFF).  A Fo ntFile3  entry with an OpenType  subtype may appear in the  font descriptor for these types of font dictionaries: A  Tr ueType  font dictionary or a  CIDFontType2  CIDFont  dictionary, if the embedded font pr ogram contains a glyf table.  In addition to the glyf table,  the font program must include  these tables: head, hhea, h mtx, loca, and maxp. The  cvt  (notice the trailing SPACE), f pgm, and prep tables must  also be included if they are requ ired by the font instructions. A  C IDFontType0  CIDFont dictionary, if the embedded font  program contains a CFF   table (notice the trailing SPACE) with  a Top DICT that uses CIDFont ope rators (this is equivalent to  subtype  CIDFontType0C ). In addition to the CFF   table, the  font program must include the cmap table. A  Ty pe1  font dictionary or  CIDFontType0  CIDFont dictionary, if  the embedded font program contains a CFF   table without  CIDFont operators. In addition to the CFF   table, the font  program must include the cmap table. The  O penType Specification  describes a set of required tables;  however, not all tables are required in the font file, as described for  each type of font dictionary  that can include this entry.  NOTE The absence of some optional tables (such as those  used for advanced line layout) may prevent editing of  text containing the font. Table  127   Additional entries in an embedded font stream dictionary   KeyType Value Length1 integer (Required for Type 1 and TrueType fonts)  The length in bytes of the clear-text  portion of the Type 1 font program, or the  entire TrueType font program, after it has  been decoded using the filters  specified by the streams  Filter  entry, if any.  Length2 integer (Required for Type 1 fonts)  The length in bytes of the en crypted portion of the Type  1 font program after it has been decoded usi ng the filters specifi ed by the streams  Filter  entry.  Length3 integer (Required for Type 1 fonts)  The length in bytes of the fixed-content portion of the  Type 1 font program after it has been dec oded using the filters specified by the  streams  Filter  entry. If  Length3  is 0, it indicates that the 512 zeros and  cleartomark  have not been included in the  FontFile  font program and shall be  added by the conforming reader.  Subtypename (Required if referenced from  FontFile3 ; PDF 1.2)  A name specifying the format of  the embedded font program. The name shall be  Type1C  for Type 1 compact fonts,  CIDFontType0C  for Type 0 compact CIDFonts, or  OpenType  for OpenType fonts.  Metadata stream(Optional; PDF  1.4)  A met adata stream  containing metadata for the embedded font  program (see  14.3.2, \"Metadata Streams\" ). Table 126   Embedded font organization for various font types  (continued) KeySubtype Description",""],"299":["' Adobe Systems Incorporated 2008  All rights reserved 291PDF 32000-1:2008 by additional data. Although the encrypted portion of a standard Type 1 font may be in binary or ASCII  hexadecimal format, PDF supports only the binary format. However, the entire font program may be encoded  using any filters.  EXAMPLE This code shows the structure of an embedded standard Type 1 font.  12 0 obj <<  /Filter  /ASCII85Decode  /Length  41116  /Length1  2526  /Length2  32393  /Length3  570 >>stream ,p>‘rDKJj’E+LaU0eP.@+AH9dBOu$hFD55nC  Omitted data  JJQ&Nt’)<=^p&mGf(%:%h1%9c//K(/*o=.C>UXkbVGTrr~> endstream endobj As noted in  Ta b l e  126 , a Type 1equivalent font program or a Type 0 CIDFont program may be represented in  the Compact Font Format (CFF). The  Length1 , Length2 , and  Length3  entries are not needed in that case and  shall not be present. Although CFF enables multiple font  or CIDFont programs to be bundled together in a  single file, an embedded CFF font file in PDF shall consis t of exactly one font or CIDFont (as appropriate for the  associated font dictionary).  According to the Adobe Type 1 Font Format spec ification, a Type 1 font program may contain a  PaintType entry specifying whether the glyphs outlines are to be  filled or stroked. For fonts embedded in a PDF file, this  entry shall be ignored; the decision whethe r to fill or stroke glyph outlines is  entirely determined  by the PDF text  rendering mode parameter (see  9.3.6, \"Text Rendering Mode\" ). This shall also applies to Type 1 compact fonts  and Type 0 compact CIDFonts.  A TrueType font program may be used as part of either a  font or a CIDFont. Although the basic font file format  is the same in both cases, there are  different requirements for what information shall be present in the font  program. These TrueType tables shall always be present  if present in the original TrueType font program:  head, hhea, loca, maxp, cvt, prep, glyf, hmt x, and fpgm. If used with a simple font dictionary, the  font program shall additionally contain a cmap table defining one or more encodings, as discussed in  9.6.6.4, \"Encodings for TrueType Fonts\" . If used with a CIDFont dictionary, the cmap table is not needed and shall not  be present, since the mapping from character code s to glyph descriptions is provided separately.  The vhea and vmtx tables that specify vertical metr ics shall never be used by a conforming reader. The only  way to specify vertical metrics  in PDF shall be by means of the  DW2 and  W2 entries in a CIDFont dictionary.  NOTE 3 Beginning with PDF 1.6, font  programs may be embedded using the OpenType format, which is an extension  of the TrueType format that allows inclusion of font  programs using the Compact Font Format (CFF). It also  allows inclusion of data to describe glyph substitution s, kerning, and baseline adjustments. In addition to  rendering glyphs, conforming readers may use the dat a in OpenType fonts to do advanced line layout,  automatically substitute ligatures, provide selections of  alternate glyphs to users, and handle complex writing  scripts. The process of finding glyph descriptions in OpenType fonts by a conforming reader shall be the following:   For Type 1 fonts using CFF tables, the process shall be as described in  9.6.6.2, \"Encodings for Type 1  Fonts\" . For TrueType fonts using glyf tables, the process shall be as described in  9.6.6.4, \"Encodings for  TrueType Fonts\" . Since this process sometimes produces ambi guous results, conformi ng writers, instead  of using a simple font, shall use a  Type 0 font with an I dentity-H encoding and us e the glyph indices as  character codes, as described following  Ta b l e  118 .",""],"300":["PDF 32000-1:2008 292 ' Adobe Systems Incorporated 2008  All rights reserved For  CIDFontType0  fonts using CFF tables, the process shall be as described in the discussion of  embedded Type 0 CIDFonts in  9.7.4.2, \"Glyph Selection in CIDFonts\" .For  CIDFontType2  fonts using glyf tables, the process shall be as described in the discussion of  embedded Type 2 CIDFonts in  9.7.4.2, \"Glyph Selection in CIDFonts\" . As discussed in  9.6.4, \"Font Subsets\" , an embedded font program may contai n only the subset of glyphs that  are used in the PDF document. This may be indicated by the presence of a  CharSet or CIDSet entry in the font  descriptor that refers to the font file.  9.10 Extraction of Text Content 9.10.1 General The preceding sub-clauses describe all the facilities for showing text  and causing glyphs to be painted on the  page. In addition to displaying text, conforming reader s sometimes need to determine the information content  of textthat is, its meaning accordin g to some standard character identification as opposed to its rendered  appearance. This need arises during operations such as se arching, indexing, and exporting of text to other file  formats.  The Unicode standard defines a system for numbering all of the common characters used in a large number of  languages. It is a suitable scheme for representing the  information content of text, but not its appearance, since  Unicode values identify characters, not glyp hs. For information about Unicode, see the  Unicode Standard  by the Unicode Consortium (see the  Bibliography ). When extracting character content, a conforming reader can easily convert text to Unicode values if a fonts  characters are identified according to a standard character set that is known to the conforming reader. This  character identification can occur if ei ther the font uses a standard named encoding or the characters in the  font are identified by standard character  names or CIDs in a well-known collection.  9.10.2, \"Mapping Character  Codes to Unicode Values\" , describes in detail the overall algorithm for mapping character codes to Unicode  values.  If a font is not defined in one of  these ways, the glyphs can still be  shown, but the char acters cannot be  converted to Unicode values without additional information:  This information can be provided as an optional  ToUnicode  entry  in the font dictionary  (PDF 1.2; see 9.10.3, \"ToUnicode CMaps\" ), who se value shall be a stream object containing a special kind of CMap file  that maps character codes to Unicode values.  An  Ac tualText  entry for a structure element or  marked-content sequence (see  14.9.4, \"Replacement  Text\" ) may be used to specify the text content directly. 9.10.2 Mapping Character Codes to Unicode Values A conforming reader can use these methods, in the priori ty given, to map a character code to a Unicode value.  Tagged PDF documents, in particular, shall provide at least one of these methods (see  14.8.2.4.2, \"Unicode  Mapping in Tagged PDF\" ): If the font dictionary contains a  ToUnicode  CMap (see  9.10.3, \"ToUnicode CMaps\" ), use that CMap to  convert the character code to Unicode.   If the font is a simple font that  uses one of the predefined encodings  MacRomanEncoding , MacExpertEncoding , or  WinAnsiEncoding , or that has an encoding whose  Differences  array includes  only character names taken from the Adobe standard Latin character set and the set of named characters  in the Symbol font (see  Annex D):  a) Map the character code to a character name according to  Table  D.1 and the fonts  Differences array.",""],"301":["' Adobe Systems Incorporated 2008  All rights reserved 293PDF 32000-1:2008 b) Look up the character name in the  Adobe Glyph List  (see the  Bibliography ) to obtain the  corresponding Unicode value.   If the font is a composite font that us es one of the predefined CMaps listed in  Ta b l e  118  (except IdentityH  and IdentityV) or whose descend ant CIDFont uses the Adobe-GB1, Adobe-CNS1, Adobe-Japan1, or  Adobe-Korea1 character collection:  a) Map the character code to a character identifier (CID) according to the fonts CMap.  b) Obtain the registry and ordering of the characte r collection used by the fonts CMap (for example,  Adobe and Japan1) from its  CIDSystemInfo  dictionary.  c) Construct a second CMap name by concatenat ing the registry and ordering obtained in  step (b)  in the format registryordering UCS2 (for example, AdobeJapan1UCS2).  d) Obtain the CMap with the name constructed in  step (c)  (available from the ASN Web site; see the  Bibliography ). e) Map the CID obtained in  step (a)  according to the CMap obtained in  step (d), producing a  Unicode value.  NOTE Type 0 fonts whose descendant CIDFonts use t he Adobe-GB1, Adobe-CNS1,  Adobe-Japan1, or Adobe- Korea1 character collection (as specified in the  CIDSystemInfo  dictionary) shall have a supplement number  corresponding to the version of PDF supported by the conforming reader. See  Table  3 for a list of the character  collections corresponding to a given PDF version. (Oth er supplements of these ch aracter collections can be  used, but if the supplement is higher-numbered than  the one corresponding to the supported PDF version,  only the CIDs in the latter supplement  are considered to be standard CIDs.)  If these methods fail to produce a Unicode value, th ere is no way to determine what the character code  represents in which case a conforming reader  may choose a character code of their choosing. 9.10.3 ToUnicode CMaps The CMap defined in the  ToUnicode  entry of the font dictionary shall fo llow the syntax for CM aps introduced in  9.7.5, \"CMaps\"  and fully documented in Adobe Technical Note #5014,  Adobe CMap and CIDFont Files  Specification . Additional guidance regarding the CMap defined in  this entry is provided in Adobe Technical Note  #5411,  ToUnicode Mapping File Tutorial . This CMap differs from an ordinary one in these ways:   The only pertinent entry in the CMap stream dictionary (see  Table  120 ) is Us eCMap , which may be used if  the CMap is based on another  ToUnicode  CMap.   The CMap file shall contain  begincodespacerange  and  endcodespacerange  operators that are  consistent with the encoding that the font uses. In  particular, for a simple font, the codespace shall be one  byte long.  It shall use the  beginbfchar , endbfchar , beginbfrange , and  endbfrange  operators to define the mapping  from character codes to Unicode character sequences expressed in UTF-16BE encoding. EXAMPLE 1 This example illustrates a Type 0  font that uses t he Identity-H CMap to map from  character codes to CIDs  and whose descendant CIDFont uses the Identity mapp ing from CIDs to TrueType glyph indices. Text  strings shown using this font simply use a 2-byte glyph index for each glyph. In the absence of a  ToUnicode entry, no information would be available about what the glyphs mean.  14 0 obj <<  /Type  /Font  /Subtype  /Type0   /BaseFont  /RyuminLi ght   /Encoding  /IdentityH /DescendantFonts  [ 15 0 R ]  /ToUnicode  16 0 R",""],"302":["PDF 32000-1:2008 294 ' Adobe Systems Incorporated 2008  All rights reserved >>endobj 15 0 obj<<  /Type  /Font  /Subtype  /CIDFontType2  /BaseFont  /RyuminLi ght  /CIDSystemInfo  17 0 R  /FontDescriptor  18 0 R  /CIDToGIDMap  /Identity >>endobj EXAMPLE 2 In this example, the value of  the ToUnicode entry is a st ream object that contains the definition of the  CMap. The  beg incodespacerange  and endcodespacerange  operators define the source character code range  to be the 2-byte character codes from <  00 00 > to <  FF FF >. The specific mappings for several of the  character codes are shown.  16 0 obj<< /Length  433 >>stream/CIDInit  /ProcSet  findresource  begin 12 dict begin begincmap /CIDSystemInfo << /Registry  ( Adobe  )/Ordering  ( UCS )/Supplement  0>> def /CMapName  /AdobeIdentityUCS def/CMapType  2 def","1 begincodespacerange < 0000  >< FFFF  >endcodespacerange 2 beginbfrange < 0000  >< 005E  >< 0020 >< 005F  >< 0061  >[ < 00660066  > < 00660069  > < 00660066006C  > ]endbfrange 1 beginbfchar <3A51> <D840DC3E> endbfchar endcmap CMapName  currentdict  /CMap  defineresource  pop end end endstream endobj < 00 00 > to <  00 5E > are mapped to the Unicode values U+0020 to U+007E This is followed by the  definition of a mapping where each character c ode represents more than one Unicode value:  < 005F  > < 0061  > [ < 00660066  > < 00660069  >","< 00660066006C  > ]In this case, the original character codes are the glyph indices for the ligatures ff, fi, and ffl. The entry  defines the mapping from the character codes <  00 5F >, <  00 60 >, and <  00 61 > to the strings of Unicode  values with a Unicode scalar value for each charac ter in the ligature: U+0066 U+0066 are the Unicode  values for the character sequence f  f, U+0066 U+0069 for f  i, and U+0066 U+0066 U+006c for f  f l. Finally, the character code <  3A 51> is mapped to the Unicode value U+2003E, which is expressed by the  byte sequence <D840DC3E> in UTF-16BE encoding.",""],"303":["' Adobe Systems Incorporated 2008  All rights reserved 295PDF 32000-1:2008 EXAMPLE 2 in this sub-clause illustrates se veral extensions to th e way destination values may be defined. To  support mappings from a source code to a string of destina tion codes, this extension has been made to the  ranges defined after a  beginbfchar  operator: n beginbfchar srcCode dstString endbfchar where dstString may be a string of up to 512 by tes. Likewise, mappings after the  beginbfrange  operator may  be defined as: n beginbfrange srcCode1 srcCode2 dstString endbfrange In this case, the last byte of the  string shall be incremented for each  consecutive code in the source code  range.  When defining ranges of this type, the value of the last  byte in the string shall be less than or equal to 255   (src Code 2  srcCode 1 ). This ensures that the last byte of the string shall not be incremented past 255;  otherwise, the result of  mapping is undefined.  To support more compact representations of mappings from a range of source character codes to a  discontiguous range of destination codes, the CMaps used for the  ToUnicode  entry may use this syntax for the  mappings following a  beginbfrange  definition. n beginbfrange srcCode1 srcCode2 [ dstString 1 dstString 2  dstString m ] endbfrange Consecutive codes starting with  srcCode1 and ending with  srcCode 2 shall be mapped to the destination strings  in the array starting with  dstString 1 and ending with  dstString m . The value of dstString can be a string of up to  512 bytes. The value of m represents the number of  continuous character codes in  the source character code  range. m = srcCode 2 - srcCode 1 + 1",""],"304":["PDF 32000-1:2008 296 ' Adobe Systems Incorporated 2008  All rights reserved 10 Rendering 10.1 General Nearly all of the rendering fa cilities that are under  the control of a PDF file pertai n to the reproduction of colour.  Colours shall be rendered by a conforming reader  using the following multip le-step process outlined.  NOTE 1 The PDF imaging model separates  graphics  (the specification of shapes  and colours) from rendering  (controlling a raster output device). Figures  20 and  21 in 8.6.3, \"Colour Space Families\"  illustrate this division.  8, \"Graphics\"  describes the facilities for spec ifying the appearance of pages in a device-independent way. This  clause describes the facilities for controlling how shapes  and colours are rendered on  the raster output device.  All of the facilities discussed here depend on the specific  characteristics of the output device. PDF files that are  intended to be device-independent should limit themselv es to the general graphics facilities described in  8,  \"Graphics\".Depending on the current colour space and on the characte ristics of the device, it is not always necessary to  perform every step. a) If a colour has been specified in a CIE-based colour space (see  8.6.5, \"CIE-Based Colour Spaces\" ), it shall first be transformed to the  native colour space  of the raster output device (also called its  process colour  model ). b) If a colour has been specified in a device colour space tha t is inappropriate for the output device (for  example,  RGB colour with a  CMYK or grayscale device), a  colour conversion function  shall be invoked.  c) The device colour values shall now be mapped through  transfer functions , one for each colour component.  NOTE 2 The transfer functions compensate for peculiarities  of the output device, such as nonlinear gray-level  response. This step is sometimes called  gamma correction. d) If the device cannot reproduce cont inuous tones, but only certain discrete colours such as black and white  pixels, a  halftone function  shall be invoked, which approximates the desired colours by means of patterns  of pixels. e) Finally,  scan conversion shall be performed to mark the appropriat e pixels of the raster  output device with  the requested colours.  Once these operations have been performed for all graphi cs objects on the page, the re sulting raster data shall  be used to mark the physical output  medium, such as pixels on a display or ink on a printed page. A PDF file  may specify very little about the pro perties of the physical medium on wh ich the output will be  produced; that information may be obtained from the following sources by a conforming reader:   The media box and a few other entries in the page dictionary (see  14.11.2, \"Page Boundaries\" ).  An interactive dialogue conducted when the user requests viewing or printing.  A  job t icket , either embedded in the PDF file or provided se parately, that may specif y detailed instructions  for imposing PDF pages onto media and for controlling  special features of the output device. Various  standards exist for the format of j ob tickets. Two of them, JDF (Job De finition Format) and PJTF (Portable  Job Ticket Format), are described in the CIP4 document  JDF Specification  and in Adobe Technical Note  #5620,  Portable Job Ticket Format  (see the  Bibliography ), respectively.  Table 58  in 8.4.5, \"Graphics State Parameter Dictionaries\"  lists the various device-dependent graphics state  parameters that may be used to control certain as pects of rendering. To invoke these parameters, the  gsoperator shall be used.",""],"305":["' Adobe Systems Incorporated 2008  All rights reserved 297PDF 32000-1:2008 10.2 CIE-Based Colour to Device Colour To render CIE-based colours on an output device, the conforming reader shall convert from the specified CIE- based colour space to the devices native colour space (typically  DeviceGray , DeviceRGB , or  DeviceCMYK ), taking into account the known properties of the device.  NOTE 1 As discussed in  8.6.5, \"CIE-Based Colour Spaces\"  CIE-based colour is based on a model of human colour  perception. The goal of CIE-based colour rendering is  to produce output in the devices native colour space  that accurately reproduces the requested CIE-based co lour values as perceived by a human observer. CIE- based colour specificat ion and rendering are a feature of PDF 1.1 ( CalGray , CalRGB, and  Lab ) and PDF 1.3  (ICCBased). NOTE 2 The conversion from CIE-based colour to device col our is complex, and the theo ry on which it is based is  beyond the scope of this specification. The algorithm has many parameters, including an optional, full three- dimensional colour lookup table. The colour fidelity of  the output depends on having these parameters properly  set, usually by a method that includes some form of  calibration. The colours that a device can produce are  characterized by a  device profile, which is usually specified by an ICC pr ofile associated with  the device (and  entirely separate from the profile that is specified in an  ICCBased  colour space).  NOTE 3 PDF has no equivalent of the Post Script colour rendering dictionary. T he means by which a device profile is  associated with a conforming readers  output device are implem entation-dependent and not specified in a PDF  file. Typically, this is d one through a colour managem ent system (CMS) that is  provided by  the operating  system. Beginning with PDF 1.4, a PDF file can also  specify one or more output  intents providing possible  profiles that may be used to process the file (see  14.11.5, \"Output Intents\" ). Conversion from a CIE-based colour value to a device colour value requires two main operations:  a) The CIE-based colour value shall be adjusted according to a  CIE-based gamut mapping function.  NOTE 4 A  gamut  is a subset of all possible colours in some colour space. A page description has a  source gamut consisting of all the colours it  uses. An output device has a  device gamut  consisting of all the colours it can  reproduce. This step transforms colours  from the source gamut to the device gamut in a way that attempts to  preserve colour appearance, visual contra st, or some other explicitly specified  rendering intent  (see  8.6.5.8,  \"Rendering Intents\" ). b) A corresponding device colour value shall be generated according to a  CIE-based colour mapping  function.  For a given CIE-based colour value, this functi on shall compute a colour value in the devices  native colour space.  The CIE-based gamut and colour mapping functions shall  be applied only to colour values presented in a CIE- based colour space. Colour values in device colour  spaces directly control  the device colour components  though this may be altered by the  DefaultGray , DefaultRGB , and  DefaultCMYK  colour space resources (see  8.6.5.6, \"Default Colour Spaces\" ). The source gamut shall be specified by the information contained in the definition of the CIE-based colour  space when selected. This specificat ion shall be device-independent. The corresponding properties of the  output device shall be given in the device profile  associated with the device. T he gamut mapping and colour  mapping functions are part of the implementation of the conforming reader.  10.3 Conversions among Device Colour Spaces 10.3.1 General Each raster output device has a  native colour space , which typically is one of the standard device colour  spaces ( DeviceGray , DeviceRGB , or  DeviceCMYK ). In other words, most devi ces support reproduction of  colours according to a grayscale (monochrome),  RGB (red-green-blue), or  CMYK (cyan-magenta-yellow-black)  model. If the device supports contin uous-tone output, reproduction shall oc cur directly. Otherwise, it shall be  accomplished by means of halftoning.",""],"306":["PDF 32000-1:2008 298 ' Adobe Systems Incorporated 2008  All rights reserved A devices native colour space is also called its  process colour model . Process colours are ones that are  produced by combinations of one or more standard  process colorants . Colours specified in  any device or CIE- based colour space shall be rendered as process colours. A device may also support additional  spot colorants , which shall be painted only by means of  Separation  or  DeviceN  colour spaces. They shall not be involved in  the rendering of device or CIE-based colour spaces, nor shall they be subject to the conversions described in  the Note. NOTE Some devices provide a native colour space that is  not one of the three named prev iously but consists of a  different combination of colorants. In that case, conv ersion from the standard device colour spaces to the  devices native colour space may be performed by the conforming reader in a manner of its own choosing.  Knowing the native colour space and  other output capabilities of the de vice, the conformi ng reader shall  automatically convert the colour values specified in a f ile to those appropriate for the devices native colour  space. If the file specifies colours directly in the  devices native colour space, no conversions shall be  performed.  EXAMPLE If a file specif ies colours in the  DeviceRGB  colour space but the device supports grayscale (such as a  monochrome display) or  CMYK (such as a colour printer), the conforming reader shall perform the  necessary conversions.The algorithms used to convert among device colour spac es are very simple. As perceived by a human viewer,  these conversions produce only crude  approximations of the original colour s. More sophisticated control over  colour conversion may be achieved by means of CIE-ba sed colour specification and  rendering. Additionally,  device colour spaces may be remapped into CIE-based colour spaces (see  8.6.5.6, \"Default Colour Spaces\" ). 10.3.2 Conversion between DeviceGray and DeviceRGB Black, white, and intermediate shades of gray can be considered special cases of  RGB colour. A grayscale  value shall be described by a single number: 0.0 corresponds to black, 1.0 to white, and intermediate values to  different gray levels.  A gray level shall be equivalent to an  RGB value with all three components the same. In other words, the  RGB colour value equivalent to a specific gray value shall be The gray value for a given  RGB value shall be computed according to the NTSC video standard, which  determines how a colour television signal is  rendered on a black-and-white television set:  10.3.3 Conversion between DeviceGray and DeviceCMYK Nominally, a gray level is the complement of the black component of  CMYK. Therefore, the  CMYK colour value  equivalent to a specific gray level shall be  To obtain the equivalent gray level for a given  CMYK value, the contributions of all components shall be taken  into account:","red gray =green gray =blue gray =","gray 0.3redu0.59 green u0.11 blu u++=","cyan 0.0=magenta 0.0=yellow 0.0=black 1.0gray =","gray 1.0 min(1.0 •0.3cyanu0.59magenta u0.11 yellow ublack +++ =",""],"307":["' Adobe Systems Incorporated 2008  All rights reserved 299PDF 32000-1:2008 The interactions between the black component and the other three are elaborated in  10.3.4. 10.3.4 Conversion from De viceRGB to DeviceCMYK Conversion of a colour value from  RGB to CMYK is a two-step process. The first step shall be to convert the  red-green-blue value to equivalent cyan, magenta, and yellow components. The second step shall be to  generate a black component and alter the other components to produce a better approximation of the original  colour.  NOTE 1 The subtractive colour primaries  cyan, magenta, and yellow are the complements of the additive primaries red,  green, and blue.  EXAMPLE A cyan ink subtracts the red co mponent of white light. In theory, the conv ersion is very simple: A colour that is 0.2 red,  0.7 green, and 0.4 blue can also be expressed as 1.0   0.2   0.8 cyan, 1.0  0.7   0.3 magenta, and 1.0   0.4   0.6 yellow.  NOTE 2 Logically, only cyan, magenta, and yellow are needed to generate a printing colour. An equal level of cyan,  magenta, and yellow should create the equivalent level of  black. In practice, however, coloured printing inks do  not mix perfectly; such combinations often form dark brow n shades instead of true black. To obtain a truer  colour rendition on a printer, true black ink is often su bstituted for the mixed-black portion of a colour. Most  colour printers support a black component (the  K component of  CMYK). Computing the quantity of this  component requires some additional steps:  Black generation  calculates the amount of black to be used when trying to reproduce a particular colour.  Undercolor removal  reduces the amounts of the cyan, magenta,  and yellow components to compensate for the  amount of black that was added by black generation.  The complete conversion from  RGB to  CMYK shall be as follows, where  BG (k) an d  UCR  (k)  are invocations of  the black-generation and undercolor -removal functions, respectively:  The black-generation and undercolor-removal functions  shall be defined as PDF  function dictionaries (see  7.10, \"Functions\" ) that are parameters in the graphics state. They shall be specified as the values of the  BGand  UCR (or BG2 and  UCR2 ) entries in a graphics state parameter dictionary (see  Table 58 ). Each function  shall be called with a single numeric operand and shall return a single numeric result.  The input of both the black-generation and  undercolor-removal functions shall be  k, the minimum of the  intermediate  c, m, and  y values that have been computed by subtracting the original  red , green , and  bluecomponents from 1.0.  NOTE 3 Nominally,  k is the amount of black that can be removed  from the cyan, magenta, and yellow components and  substituted as a separate black component.","cyan 1.0red= magenta 1.0green = yellow 1.0blue =","c1.0red= m1.0green = y1.0blue = kmin cmy=","cyan min 1.0 max 0.0 cUCRk (), ,=magenta min 1.0 max 0.0 mUCRk (), ,=yellow min 1.0 max 0.0 yUCRk (), ,=black min 1.0 max 0.0 BG k (),,=",""],"308":["PDF 32000-1:2008 300 ' Adobe Systems Incorporated 2008  All rights reserved The black-generation function shall compute the  black component as a function of the nominal  k value. It may  simply return its  k operand unchanged, or it may return a larger value for extra black, a smaller value for less  black, or 0.0 for no black at all.  The undercolor-removal function sha ll compute the amount to subtract from each of the intermediate  c, m, and  y values to produce the final cyan, magenta, an d yellow components. It may simply return its  k operand  unchanged, or it may return 0.0 (so that no colour is  removed), some fraction of the black amount, or even a  negative amount, thereby adding to the total amount of colorant.  The final component values that result after applying  black generation and undercolor removal should be in the  range 0.0 to 1.0. If a value falls outside this range, th e nearest valid value shall be substituted automatically  without error indication.  NOTE 4 This substitution is indicated explicitly by the  min and  max operations in the preceding formulas.  The correct choice of black-generation and undercolor- removal functions depends on the characteristics of the  output device. Each device shall be  configured with default values that  are appropriate for that device.  NOTE 5 See  11.7.5, \"Rendering Parameters and Transparency\"  and, in particular,  11.7.5.3, \"Rendering Intent and  Colour Conversions\"  for further discussion of the role of black-generation and undercolor-removal functions in the transparent imaging model.  10.3.5 Conversion from DeviceCMYK to DeviceRGB Conversion of a colour value from  CMYK to RGB is a simple operation that does not involve black generation  or undercolour removal:  The black component shall be added to each of the other components, which shall then be converted to their  complementary colours by subtra cting them each from 1.0.  10.4 Transfer Functions In the sequence of steps for proce ssing colours, the conforming reader  shall apply the transfer function  after performing any needed conversions between colour spaces, but  before  applying a halftone function, if  necessary. Each colour component shall have its own separate transfer function; there shall not be interaction  between components.  NOTE 1 Starting with PDF 1.2, a  transfer function  may be used to adjust the values of colour components to  compensate for nonlinear response in an output device  and in the human eye. Each component of a device  colour spacefor example,  the red component of the  DeviceRGB  spaceis intended to represent the  perceived lightness or intensity of  that colour component in proportion  to the components numeric value.  NOTE 2 Many devices do not actually behave this way, however ; the purpose of a transfer function is to compensate for  the devices actual behaviour. This operation is sometimes called  gamma correction (not to be confused with  the CIE-based gamut mapping function  performed as part of CIE-based colour rendering).  Transfer functions shall always operate in the native col our space of the output device, regardless of the colour  space in which colours were origina lly specified. (For example, for a  CMYK device, the transfer functions apply  to the devices cyan, magenta, yellow, and black colo ur components, even if th e colours were originally  specified in, for example, a  DeviceRGB  or  CalRGB colour space.) The transfer function shall be called with a  numeric operand in the range 0.0 to 1.0 and shall return a number in the same range. The input shall be the  value of a colour component in the devices native colour  space, either specified directly or produced by  conversion from some other colour space. The output shall be the transformed component value to be  transmitted to the device (after halftoning, if necessary).","red1.0 min 1.0 cyan black += green 1.0 min 1.0 magenta black += blue 1.0 min 1.0 yellow black +=",""],"309":["' Adobe Systems Incorporated 2008  All rights reserved 301PDF 32000-1:2008 Both the input and the output of a tran sfer function shall always be interp reted as if the corresponding colour  component were additive (red, green, blue, or gray): the gr eater the numeric value, the lighter the colour. If the  component is subtractive (cyan, magenta, yellow, black, or a spot colour), it shall be converted to additive form  by subtracting it from 1.0  before it is passed to the transfer function.  The output of the function shall always be  in additive form and shall be passed on  to the halftone function in that form.  Starting with PDF 1.2, transfer functions sha ll be defined as PDF function objects (see  7.10, \"Functions\" ). There are two ways to specify transfer functions:  The  current transfer function  parameter in the graphics state sha ll consist of either a single transfer  function or an array of four separate transfer func tions, one each for red, green, blue, and gray or their  complements cyan, magenta, yellow, and black. If only  a single function is specified, it shall apply to all  components. An  RGB device shall use the first three, a monoc hrome device shall use the gray transfer  function only, and a  CMYK device shall use all four. The current transfer function may be specified as the  value of the  TR or  TR2 entry in a graphics state parameter dictionary; see  Table 58 . The  current halftone  parameter in the graphics state may specify  transfer functions as optional entries in  halftone dictionaries  (see  10.5.5, \"Halftone Dictionaries\" ). This is the only way to set transfer functions for  nonprimary colour components or for any compon ent in devices whose native colour space uses  components other than the ones listed previously. A transfer  function specified in a halftone dictionary shall  override the corresponding one specified by the current transfer function parameter in the graphics state.  In addition to their intended use for gamma correction,  transfer functions may be us ed to produce a variety of  special, device-dependent effects. Because transfer  functions produce device-d ependent effects, a page  description that is intended to be  device-independent shall not alter them.  When the current colour space is DeviceGray and the  output devices native colour space is DeviceCMYK, a  conforming reader shall use only the gray transfer  function. The normal conversion from DeviceGray to  DeviceCMYK produces 0.0 for the cyan, magenta, and yellow components. These components shall not be  passed through their respective transfer functions bu t are rendered directly, producing output containing no  coloured inks. This special case ex ists for compatibility with existing co nforming readers that use a transfer function to obtain special effects on monochrome device s, and shall apply only to colours specified in the  DeviceGray colour space.  NOTE 3 See  11.7.5, \"Rendering Parameters and Transparency\"  and, in particular,  11.7.5.2, \"Halftone and Transfer  Function\"  for further discussion of the role of transf er functions in the transparent imaging model.  10.5 Halftones 10.5.1 General Halftoning  is a process by which continuous-tone colours ar e approximated on an output device that can  achieve only a limited number of discrete colours. Colours that the device ca nnot produce directly are  simulated by using patterns of pixels in the colours available.  NOTE 1 Perhaps the most familiar example is the renderin g of gray tones with black and white pixels, as in a  newspaper photograph.  Some output devices can reproduce continuous-tone colo urs directly. Halftoning is  not required for such  devices; after gamma correction by the transfer functions, the colour components shall be transmitted directly  to the device. On devices that do require halftoning, it shall occur after all colour components have been  transformed by the applicable transfer functions. The i nput to the halftone function  shall consist of continuous- tone, gamma-corrected colour components in the devices na tive colour space. Its output shall consist of pixels  in colours the device can reproduce.  PDF provides a high degree of control ov er details of the halftoning process.  NOTE 2 When rendering on low-resolution displays, fine cont rol over halftone patterns is needed to achieve the best  approximations of gray levels or colours and to minimize visual artifacts.",""],"310":["PDF 32000-1:2008 302 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 3 In colour printing, independent halftone screens can be specified for each of several colorants. NOTE 4 Remember that everything pertaining to halftones is,  by definition, device-dependent. In general, when a PDF  file provides its own halftone specifications, it sacrif ices portability. Associated with every output device is a  default halftone definition that is appropriate for most  purposes. Only relatively sophisticated files need to  define their own halftones to achieve special effects. For  correct results, a PDF file that defines a new halftone  depends on certain assumptions about the resolution and orientation of device space. The best choice of  halftone parameters often depends on specific physical pr operties of the out put device, such as pixel shape,  overlap between pixels, and the effects  of electronic or mechanical noise.  All halftones are defined in device space, and shall  be unaffected by the current transformation matrix.  10.5.2 Halftone Screens In general, halftoning methods are based on the notion of a  halftone screen , which divides the array of device  pixels into  cells that may be modified to produce the desire d halftone effects. A screen is defined by  conceptually laying a uniform rectangular grid over the device pixel array. Each pixel belongs to one cell of the  grid; a single cell typically contains many pixels. The sc reen grid shall be defined entirely in device space and  shall be unaffected by modifications  to the current transformation matrix.  NOTE This property is essential to ensure that adjacent  areas coloured by halftones ar e properly stit ched together  without visible seams.  On a bilevel (black-and-white) device, each cell of a screen may be made to approximate a shade of gray by  painting some of the cells pixels bl ack and some white. Numerically, the gray level produced within a cell shall  be the ratio of white pixels to the total number of pixels in the cell. A cell containing  n pixels can render  n  1 different gray levels, ranging from all pixels  black to all pixels white. A gray value  g in the range 0.0 to 1.0 shall  be produced by making  i pixels white, where  i   floor  (g u n). The foregoing description also applies to colour output device s whose pixels consist of  primary colours that are  either completely on or completely off. Most colour prin ters, but not colour displays, work this way. Halftoning  shall be applied to each colour component independently, producing shades of that colour.  Colour components shall be presented to the halftoning machinery in additive form, regardless of whether they  were originally specified additively ( RGB or gray) or subtractively ( CMYK or tint). Larger values of a colour  component represent lighter coloursgreater intensity in an  additive device such as  a display or less ink in a  subtractive device such as a printer. Transfer func tions produce colour values in additive form; see  10.4,  \"Transfer Functions\" . 10.5.3 Spot Functions A common way of defining a halftone screen is by specifying a  frequency , angle , and  spot function . The  frequency indicates the number of halftone cells per inch ; the angle indicates the orientation of the grid lines  relative to the device coordinate syst em. As a cells desired gray level varies from black to white, individual  pixels within the cell change from bla ck to white in a well-defined sequence: if a particular gray level includes  certain white pixels, lighter grays will  include the same white pi xels along with some addi tional ones. The order in which pixels change from black to white for  increasing gray levels shall be determined by a  spot function , which specifies that order in an indi rect way that minimizes interactions  with the screen frequency and angle.  Consider a halftone cell to have its own coordinate system : the centre of the cell is  the origin and the corners  are at coordinates  r1.0 horizontally and vertically. Each pixel in  the cell is centred at horizontal and vertical  coordinates that both lie in the range  1.0 to  1.0. For each pixel, the spot function shall be invoked with the  pixels coordinates as input and shall return a single number in the range  1.0 to  1.0, defining the pixels  position in the whitening order.  The specific values the spot function return s are not significant; all that matters are the  relative  values returned  for different pixels. As a cells gray level varies from blac k to white, the first pixel wh itened shall be the one for  which the spot function returns the lowest value, the  next pixel shall be the one with the next higher spot",""],"311":["' Adobe Systems Incorporated 2008  All rights reserved 303PDF 32000-1:2008 function value, and so on. If two pixels have the same  spot function value, their  relative order shall be chosen  arbitrarily.  PDF provides built-in definitions for many of the most  commonly used spot functions  that a conforming reader  shall implement. A halftone may simply specify any of  these predefined spot functi ons by name instead of  giving an explicit function definition.  EXAMPLE The name  SimpleDot  designates a spot function whose value is inversely related to a pixels distance  from the center of the halftone cell.  This produces a dot screen in which the black pixels are clustered  within a circle whose area is inversely pr oportional to the gray level. The name  Line  designates a spot  function whose value is the distance from a given pixe l to a line through the center of the cell, producing a  line screen in which the white pi xels grow away from that line.  Table 128 show s the predefined spot functions. The table gives  the mathematical definition of each function  along with the corresponding PostScript language code  as it would be defined in a PostScript calculator  function (see  7.10.5, \"Type 4 (PostScrip t Calculator) Functions\" ). The image accompanying each function  shows how the relative values of the function are distri buted over the halftone cell, indicating the approximate  order in which pixels are whitened. Pixels corresponding to darker points in the image are whitened later than  those corresponding to lighter points.  Table  128   Predefined spot functions   Name Appearance DefinitionSimpleDot1  (x 2  y 2 ){ dup mul exch dup mul  add 1 exch sub }InvertedSimpleDot x 2   y 2  1{ dup mul exch dup mul  add 1 sub }DoubleDot{ 360 mul sin 2 div exch 360 mul sin  2 div add  }InvertedDoubleDot { 360 mul sin 2 div exch 360 mul sin  2 div add  neg  }","360xusin2------------------------------ 360yusin2------------------------------ +","360xusin2------------------------------ 360 yusin2------------------------------ +'§„•",""],"312":["PDF 32000-1:2008 304 ' Adobe Systems Incorporated 2008  All rights reserved CosineDot { 180 mul cos  exch 180 mul cos  add  2 div  }Double{ 360 mul sin  2 div exch 2 div  360 mul sin  2 div  add  }InvertedDouble { 360 mul sin  2 div  exch 2 div  360 mul sin  2 div add  neg  }Line  _ y _{ exch pop abs neg }LineX x{ pop }LineY y{ exch pop }Table 128   Predefined spot functions  (continued) Name Appearance Definition","180xucos2------------------------------- 180 yucos2------------------------------- +","360 x2---u'„§•sin2------------------------------- 360yusin2------------------------------ +","360x2---u'„§•sin2------------------------------- 360yusin2------------------------------ +„‚‚‚•'¤¤¤§",""],"313":["' Adobe Systems Incorporated 2008  All rights reserved 305PDF 32000-1:2008 Roundif _ x _  _ y _  d 1 th en  1  (x 2  y 2)else  ( _ x _  1) 2  ( _ y _   1) 2  1{ abs exch abs   2 copy add  1 le { dup mul  exch dup mul  add  1 exch sub  }{ 1 sub dup mul  exch 1 sub dup mul  add 1sub }ifelse  }Ellipse let w    (3 u _ x _ )  (4 u _ y","_)  3if w   0 then else if w  ! 1 th en  else  0.5  w{ abs exch abs  2 copy 3 mul  exch 4 mul add  3 sub dup 0 lt { pop dup mul  exch 0.75 div  dup mul  add   4 div  1 exch sub }{ dup 1 gt { pop 1 exch sub dup mul    exch 1 exch sub  0.75 div  dup mul  add   4 div  1 sub }{ 0.5 exch sub exch pop exch pop }ifelse  }ifelse  }EllipseA 1  (x 2  0.9 u y 2 ){ dup mul 0.9 mul  exch dup mul","add  1 exch sub  }InvertedEllipseA x 2  0.9 u y 2  1{ dup mul 0.9 mul  exch dup mul  add  1 sub }Table 128   Predefined spot functions  (continued) Name Appearance Definition","1x2y0.75--------- -'„§•2+4------------------------------","1x21y0.75--------------- '„§•2+4----------------------------------------------------- -1",""],"314":["PDF 32000-1:2008 306 ' Adobe Systems Incorporated 2008  All rights reserved EllipseB { dup 5 mul  8 div mul exch dup mul  exch add sqrt  1 exch sub }EllipseC 1  (0.9 u x2  y2 ){ dup mul  exch dup mul  0.9 mul add  1 exch sub }InvertedEllipseC 0.9  u x 2  y 2  1{ dup mul  exch dup mul  0.9 mul add  1 sub }Squarema x  ( _ x _ , _ y _ ){ abs exch abs  2 copy lt { exch }if  pop neg  }Crossmi n  ("," _ x _ , _ y _ ){ abs exch abs  2 copy gt { exch }if  pop neg  }Rhomboid { abs exch abs  0.9 mul add 2 div }Table 128   Predefined spot functions  (continued) Name Appearance Definition","1x258---y2u+","0.9xuy+2---------------------------------",""],"315":["' Adobe Systems Incorporated 2008  All rights reserved 307PDF 32000-1:2008 Figure 49  illustrates the effects of some of  the predefined spot functions. Figure 49   Various halftoning effects 10.5.4 Threshold Arrays Another way to define a halftone screen is with a  threshold array  that directly controls i ndividual device pixels in  a halftone cell. This technique provides a high degree of  control over halftone rendering. It also permits halftone  cells to be arbitrary rectangles, whereas those  controlled by a spot function are always square.  A threshold array is much like a sampled imagea rectangular array of pixel valuesbut shall be defined  entirely in device space. Depending on the halftone ty pe, the threshold values occupy 8 or 16 bits each.  Threshold values nominally represent gray levels in the usual way, from 0 for black up to the maximum (255 or  65,535) for white. The threshold array shall be replicated  to tile the entire device space: each pixel in device  space shall be mapped to a particular sample in the threshold array. On a bilevel device, where each pixel is  either black or white, halftoning with a threshold array shall proceed as follows:  a) For each device pixel that is to be painted with some  gray level, consult the corresponding threshold value  from the threshold array.  b) If the requested gray level is less than the threshold  value, paint the device pixel  black; otherwise, paint it  white. Gray levels in the range 0.0 to 1.0 correspond  to threshold values from 0 to the maximum available  (255 or 65,535).  Diamond if _ x _  _ y _ d 0.75  then 1  (x 2  y 2)else if  _ x _  _ y _ d 1.23 th en  1  (0.85 u | x | + | y | )else  ( | x |  1) 2  ( | y |  1) 2  1{ abs exch abs  2 copy add  0.75 le { dup mul  exch dup mul  add"," 1 exch sub }{ 2 copy add  1.23 le { 0.85 mul  add  1 exch sub }{ 1 sub dup mul  exch 1 sub dumul add 1 sub }ifelse }ifelse }Table 128   Predefined spot functions  (continued) Name Appearance Definition","150 per inch at 45  Round dot screen 100 per inch at 45  Round dot screen 50 per inch at 45  Round dot screen 75 per inch at 45  Line screen",""],"316":["PDF 32000-1:2008 308 ' Adobe Systems Incorporated 2008  All rights reserved A threshold value of 0 shall be treated as if it were 1;  therefore, a gray level of 0. 0 paints all pixels black,  regardless of the values in the threshold array.  This scheme easily generalizes to  monochrome devices with multiple bi ts per pixel, where each pixel can  directly represent intermediate gray levels in addition  to black and white. For any dev ice pixel that is specified  with some in-between gray level, the halftoning algorith m shall consult the corresponding value in the threshold  array to determine whether to use the ne xt-lower or next-higher representable  gray level. In th is situation, the  threshold values do not represent absolute gray leve ls, but rather gradations between any two adjacent  representable gray levels.  EXAMPLE If there are 2 bits per pixel, each  pixel can directly represent one of fo ur different gray levels: black, dark  gray, light gray, or white, encoded  as 0, 1, 2, and 3, respectively. NOTE A halftone defined in this way can  also be used with colour displays that  have a limited number of values for  each colour component. The red,  green, and blue components are simp ly treated independently as gray  levels, applying the appropriate threshold array to each. (This technique also works for a screen defined as a  spot function, since the spot function is used to compute a threshold array internally.)  10.5.5 Halftone Dictionaries 10.5.5.1 General In PDF 1.2, the graphics state includes a  current halftone  parameter, which determines the halftoning process  that a conforming reader shall use to perform painting  operations. The current halftone may be specified as the  value of the  HT entry in a graphics state parameter dictionary; see  Table 58 . It may be defined by either a  dictionary or a stream, depending on the type of halftone; the term  halftone dictionary  is used generically  throughout this clause to refer to either a dictionary  object or the dictionary portion of a stream object. (The  halftones that are defined by streams ar e specifically identified as such in the descriptions of particular halftone  types; unless otherwise stated, they are understood to be defined by simple dictionaries instead.)  Every halftone dictionary shall have a  HalftoneType  entry whose value shall be an integer specifying the  overall type of halftone definition. The remaining entries in  the dictionary are interpreted according to this type.  PDF supports the halftone types listed in  Table 129 . NOTE 1 The dictionaries represent ing these halftone types contain the same  entries as the corresponding PostScript  language halftone dictionaries (as described in Secti on 7.4 of the PostScript  Language Reference, Third  Edition), with the following exceptions:  Table  129    PDF halftone types   Type Meaning 1Defines a single halftone screen by a  frequency, angle , and spot function. 5Defines an arbitrary number of halftone screens, one for each colorant or colour component (including bot h primary and spot colorants). The  keys in this dictionary are names of colorants; the values are halftone  dictionaries of other types, each defining the halftone screen for a single  colorant.  6Defines a single halftone screen by a threshold array containing 8-bit  sample values. 10Defines a single halftone screen by a threshold array containing 8-bit  sample values, representing a halftone cell that may have a nonzero  screen angle.  16(PDF 1.3)  Defines a single halftone screen by a threshold array  containing 16-bit sample values, r epresenting a halftone cell that may  have a nonzero screen angle.",""],"317":["' Adobe Systems Incorporated 2008  All rights reserved 309PDF 32000-1:2008 The PDF dictionaries may contain a  Type  entry with the value  Halftone , identifying the type of PDF object that  the dictionary describes.  Spot functions and transfer function s are represented by function object s instead of PostScript procedures.  Threshold arrays are specified as  streams instead of files.  In type 5 halftone dictionaries, the keys for colorants sh all be name objects; they may not be strings as they  may in PostScript. Halftone dictionaries have an optional entry,  HalftoneName , that identifies the halftone by name. In PDF 1.3, if  this entry is present, all other entries, including  HalftoneType , are optional. At rendering time, if the output  device has a halftone with the specified name, that halftone shall be used, overriding any other halftone  parameters specified in the dictionary.  NOTE 2 This provides a way for PDF files to select the proprietary halftones supplied by some device manufacturers,  which would not otherwise be accessible because  they are not explicitly defined in PDF.  If there is no HalftoneName entry, or if the requested  halftone name does not exist on the device, the halftones  parameters shall be defined by the other entries in the dictionary, if any. If no other entries are present, the  default halftone shall be used.  NOTE 3 See  11.7.5, \"Rendering Parameters and Transparency\"  and, in particular,  Halftone and Transfer Function in  11.7.5.2  for further discussion of the role of hal ftones in the transparent imaging model.  10.5.5.2 Type 1 Halftones Table 130  describes the contents of a halfto ne dictionary of type 1, which defi nes a halftone screen in terms of  its frequency, angle, and spot function.  Table  130    Entries in a type 1 halftone dictionary   KeyType Value Type name(Optional)   The type of PDF object that this dictionary describes;  if present, shall be  Halftone  for a halftone dictionary.  HalftoneType integer (Required)  A code identifying the  halftone type that this  dictionary describes; shall be 1 for this type of halftone.  HalftoneName byte string(Optional)   The name of the halftone dictionary.  Frequency number (Required)   The screen frequency, measured in halftone cells per  inch in device space.  Anglenumber (Required)  The screen angle, in degrees of rotation  counterclockwise with respect to  the device coordinate system.  NOTE Most output device s have left-handed device  spaces. On such devices, a counterclockwise angle  in device space corresponds to a clockwise angle  in default user space and on the physical medium.  SpotFunction function  or name(Required)  A function object defining the order in which device  pixels within a screen cell shall be adjusted for different gray  levels, or the name of one of t he predefined spot functions (see  Table 128 ). AccurateScreens boolean (Optional)  A flag specifying whether to invoke a special halftone  algorithm that is extremely  precise but computationally  expensive; see Note  1 for further discussi on. Default value:  false.",""],"318":["PDF 32000-1:2008 310 ' Adobe Systems Incorporated 2008  All rights reserved If the  AccurateScreens entry has a value of  true , a highly precise halftoning al gorithm shall be substituted in  place of the standard one. If  AccurateScreens  is  false  or not present, ordinary halftoning shall be used.  NOTE 1 Accurate halftoning achieves the requested screen frequency and angle with very high accuracy, whereas  ordinary halftoning adjusts them so that a single scr een cell is quantized to device pixels. High accuracy is  important mainly for making colour separations on high-resolution devices. However, it may be computationally  expensive and therefore is  ordinarily disabled.  NOTE 2 In principle, PDF permits the use of halftone screens wi th arbitrarily large cellsin other words, arbitrarily low  frequencies. However, cells that are very large relative  to the device resolution or that are oriented at  unfavorable angles may exceed the capacity of available memory. If this happens, an error occurs. The  AccurateScreens  feature often requires very large amounts of memory to achieve the highest accuracy.  EXAMPLE The following shows a halftone dictionary for a type 1 halftone.  28 0 obj<< /Type  /Halftone  /HalftoneType  1 /Frequency  120 /Angle  30 /SpotFunction  /CosineDot  /TransferFunction  /Identity >>endobj 10.5.5.3 Type 6 Halftones A type 6 halftone defines a halftone screen with a thre shold array. The halftone shall be represented as a  stream containing the threshold values; the parameters defining the halftone shall be specified by entries in the  stream dictionary. This dictionary may contain the entries shown in  Table 131  in addition to the usual entries  common to all streams (see  Ta b l e  5 ). The  Width  and  Height entries shall specify the dimensions of the  threshold array in device pixels; the stream shall contain  Width  u Height  bytes, each representing a single  threshold value. Threshold values are defined in device space in the same order as image samples in image  space (see  Figure 34 ), with the first value at device coordinates (0,  0) and horizontal coordinates changing  faster than vertical coordinates.  TransferFunction function  or name(Optional)  A transfer function, which overrides the current  transfer function in the graphics state for the same component.  This entry shall be present if the dictionary is a component of a  type 5 halftone (see  Type 5 Halftones in 10.5.5.6 ) and  represents either a nonprimary or nonstandard primary colour  component (see  10.4, \"Transfer Functions\" ). The name  Identitymay be used to specify the identity function.  Table  131    Additional entries specific to  a type 6 halftone dictionary   KeyType Value Type name(Optional)  The type of PDF object that this dictionary describes;  if present, shall be  Halftone  for a halftone dictionary.  HalftoneType integer (Required)  A code identifying the halftone type that this  dictionary describes; shall be 6 for this type of halftone.  HalftoneName byte string (Optional)  The name of the halftone dictionary.  Width integer (Required)   The width of the threshold array, in device pixels.  Heightinteger (Required)  The height of the threshold array, in device pixels.  Table 130   Entries in a type 1 halftone dictionary  (continued) KeyType Value",""],"319":["' Adobe Systems Incorporated 2008  All rights reserved 311PDF 32000-1:2008 10.5.5.4 Type 10 Halftones Type 6 halftones specify a threshold array with a zero  screen angle; they make no provision for other angles.  The type 10 halftone removes this restriction and allows  the use of threshold arrays for halftones with nonzero  screen angles as well.  Halftone cells at nonzero angles can be difficult to spe cify because they may not line up well with scan lines  and because it may be difficult to determine where a given sampled point goes. The type 10 halftone addresses  these difficulties by dividing the halftone cell into a pa ir of squares that line up at zero angles with the output  devices pixel grid. The squares contain the same information as the original cell but are much easier to store  and manipulate. In addition, they can be mapped easily into the internal representation used for all rendering.  NOTE 1Figure 50  shows a halftone cell with a frequency of 38.4  cells per inch and an angle of 50.2 degrees,  represented graphically in device space at a resolution  of 300 dots per inch. Each asterisk in the figure  represents a location in device space that is mapped  to a specific location in the threshold array.  Figure 50   Halftone cell with a nonzero angle NOTE 2Figure 51  shows how the halftone cell can be divided into two  squares. If the squares and the original cell are  tiled across device space, the area to the right of the  upper square maps exactly into the empty area of the  lower square, and vice versa (see  Figure 52 ). The last row in the first square is immediately adjacent to the first  row in the second square and starts in the same column.  TransferFunction function  or name(Optional)  A transfer function, which shall override the current  transfer function in the graphics state for the same component.  This entry shall be present if th e dictionary is a component of a  type 5 halftone (see  Type 5 Halftones in 10.5.5.6 ) and represents either a nonprimary or  nonstandard primary colour  component (see  10.4, \"Transfer Functions\" ). The name  Identitymay be used to specify the identity function.  Table 131   Additional entries specific to  a type 6 halftone dictionary  (continued) KeyType Value","*************************************************************",""],"320":["PDF 32000-1:2008 312 ' Adobe Systems Incorporated 2008  All rights reserved Figure 51   Angled halftone cell divided into two squares Figure 52   Halftone cell and two squares tiled across device space NOTE 3 Any halftone cell can be divided in this way. The  side of the upper square (X) is equal to the horizontal  displacement from a point in one halftone cell to the  corresponding point in the adjacent cell, such as those  marked by asterisks in  Figure 52 . The side of the lower square ( Y) is the vertical displacement between the  same two points. The frequency of a halftone  screen constructed fr om squares with sides  X and  Y is thus  given by  and the angle by","*************************************************************","XY","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbb*bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccc*ccccccccccccccccccccccccccccccccccccccccccccccccccccccc","X","X","XY","Y","Y","Y","frequency resolutionX2Y2+----------------------- -=","angle YX--- '„§•atan =",""],"321":["' Adobe Systems Incorporated 2008  All rights reserved 313PDF 32000-1:2008 Like a type 6 halftone, a type 10 halftone shall be represented as a stream containing the threshold values, with  the parameters defining the halftone specified by entries  in the stream dictionary. Th is dictionary may contain  the entries shown in  Table 132  in addition to the usual entries common to all streams (see  Ta b l e  5 ). The  Xsquare and Ysquare  entries replace the type 6 halftones  Width  and  Height entries.  The  Xs quare  and  Ysquare  entries shall specify the dime nsions of the two squares in  device pixels. The stream  shall contain  Xsquare  2  Ysquare 2 bytes, each representing a single threshold value. The contents of square  X shall be specified first, followed by those of square  Y. Threshold values within each square shall be defined in  device space in the same order as image samples in image space (see  Figure 34 ), with the first value at device  coordinates (0, 0) and horizontal coordinates changing faster than vertical coordinates.  10.5.5.5 Type 16 Halftones Like type 10, a type 16 halftone  (PDF 1.3) defines a halftone screen with a threshold array and allows nonzero  screen angles. In type 16, however, each element of the th reshold array shall be 16 bits wide instead of 8. This  allows the threshold array to distinguish 65,536 levels of  colour rather than only 256 levels. The threshold array  may consist of either one rectangle or two rectangles. If  two rectangles are specified,  they shall tile the device  space as shown in  Figure 53 . The last row in the first rectangle shall be immediately adjacent to the first row in  the second and shall start in the same column.  Figure  53   Tiling of device space in a type 16 halftone A type 16 halftone, like type 6 and type 10, shall be re presented as a stream containing the threshold values,  with the parameters defining the half tone specified by entries in the str eam dictionary. This dictionary may  contain the entries shown in  Table 133  in addition to the usual entries common to all streams (see  Table 5 ). The  Table  132    Additional entries specific to  a type 10 halftone dictionary   KeyType Value Type name(Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Halftone  for a halftone dictionary.  HalftoneType integer (Required)  A code identifying the halftone type that this dictionary  describes; shall be 10 for this type of halftone.  HalftoneName byte string (Optional)  The name of the halftone dictionary.  Xsquareinteger (Required)  The side of square  X, in device pixels; see below.  Ysquareinteger (Required)  The side of square  Y, in device pixels; see below.  TransferFunction function or name(Optional)  A transfer function, which shall override the current  transfer function in the graphics  state for the same component.  This entry shall be present if the  dictionary is a component of a type  5 halftone (see  Type 5 Halftones in 10.5.5.6 ) and represents  either a nonprimary or nonstandard primary colour component (see  10.4, \"Transfer Functions\" ). The name  Identity may be used to  specify the identity function.","Width  · HeightHeightHeight2Width Width2  ·Height2Width2",""],"322":["PDF 32000-1:2008 314 ' Adobe Systems Incorporated 2008  All rights reserved dictionarys  Width  and  Height entries define the dimensions of the fi rst (or only) rectangle. The dimensions of  the second, optional rectangle are  defined by the optional entries  Width2  and  Height2 . Each threshold value  shall be represented as 2 bytes, with the high-o rder byte first. The stream shall contain 2  u Width  u Heightbytes if there is only one rectangle or 2  u (Wid th  u Height   Width2  u Height2 ) bytes if there are two  rectangles. The contents of the first rectangle are specif ied first, followed by those of the second rectangle.  Threshold values within each rectangle shall be defined in  device space in the same  order as image samples in  image space (see  Figure 34 ), with the first value at device coordinates (0,  0) and horizontal coordinates  changing faster than vertical coordinates.  10.5.5.6 Type 5 Halftones Some devices, particularly colour prin ters, require separate halftones for each individual colorant. Also, devices  that can produce named separations may require individual halftones for each separation. Halftone dictionaries  of type 5 allow individual halftones to be specified fo r an arbitrary number of colorants or colour components.  A type 5 halftone dictionary ( Table 134 ) is a composite dictionary contai ning independent halftone definitions  for multiple colorants. Its keys shall  be name objects representing the names of individual colorants or colour  components. The values associated with these keys shall  be other halftone dictionaries, each defining the  halftone screen and transfer functi on for a single colorant or colour component. The component halftone  dictionaries shall not be of halftone type 5. Table  133    Additional entries specific to  a type 16 halftone dictionary   Key Type Value Type name(Optional)  The type of PDF object that  this dictionary describes;  if present, shall be  Halftone  for a halftone dictionary.  HalftoneType integer (Required)  A code identifying the halftone type that this  dictionary describes; shall be 16 for this type of halftone.  HalftoneName byte string (Optional)  The name of the halftone dictionary.  Width integer (Required)  The width of the first (or only) rectangle in the  threshold array, in device pixels.  Height integer (Required)  The height of the first (or only) rectangle in the  threshold array, in device pixels.  Width2 integer (Optional)  The width of the optional second rectangle in the  threshold array, in device pixels. If this entry is present, the  Height2 entry shall be present as well. If this entry is absent, the  Height2 entry shall also be absent, and the threshold array has  only one rectangle.  Height2 integer (Optional)  The height of the optional second rectangle in the  threshold array, in device pixels.  TransferFunction function  or name(Optional)  A transfer function, which shall override the current  transfer function in the graphi cs state for the sa me component.  This entry shall be present if th e dictionary is a component of a  type 5 halftone (see  10.5.5.6, \"Type 5 Halftones\" ) and  represents either a nonprimary or nonstandard primary colour  component (see  10.4, \"Transfer Functions\" ). The name  Identitymay be used to specify the identity function.",""],"323":["' Adobe Systems Incorporated 2008  All rights reserved 315PDF 32000-1:2008 The colorants or colour components represented in a type 5 halftone dictionary (aside from the Default entry)  fall into two categories:   Primary colour components for the standard native device colour spaces (Gray for  DeviceGray; Red, Green , and  Blue for  DeviceRGB ; Cyan, Magenta , Yellow , and  Black for  DeviceCMYK ;).   Nonstandard colour components for use as spot colorants in  Separation  and  DeviceN  colour spaces.  Some of these may also be used as process colorants if the native colour space is nonstandard.  When a halftone dictionary of some other type appears as  the value of an entry in a type 5 halftone dictionary,  it shall apply only to the single colorant or colour com ponent named by that entrys key. This is in contrast to  such a dictionarys being used as the current halftone pa rameter in the graphics state, which shall apply to all  colour components. If nonprimary colorants are requested when the current halftone is defined by any means  other than a type 5 halftone dictionary, the gray halfton e screen and transfer function shall be used for all such  colorants.  EXAMPLE In this example, the halftone dictionaries for the  colour components and for the default all use the same  spot function. In this example, the halftone dictiona ries for the colour components and for the default all  use the same spot function. 27 0 obj << /Type  /Halftone  /HalftoneType  5 /Cyan 31 0 R /Magenta  32 0 R /Yellow  33 0 R  /Black 34 0 R  /Default  35 0 R>>endobj 31 0 obj << /Type  /Halftone  /HalftoneType  1 /Frequency  89.827  /Angle  15 /SpotFunction  /Round  /AccurateScreens true>>endobj 32 0 obj Table  134    Entries in a type 5 halftone dictionary   KeyType Value Type name(Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Halftone  for a halftone dictionary.  HalftoneType number (Required)  A code identifying the halftone type that this dictionary  describes; shall be 5 for this type of halftone.  HalftoneName byte string (Optional)   The name of the halftone dictionary.  any  colorant namedictionary  or stream(Required, one per colorant)  The halftone corresponding to the  colorant or colour component named  by the key. The halftone may be  of any type other than 5.  Default dictionary  or stream(Required)  A halftone to be used for any colorant or colour component  that does not have an entry of its own.  The value shall not be 5. If there  are any nonprimary colorants, the default halftone shall have a transfer  function.",""],"324":["PDF 32000-1:2008 316 ' Adobe Systems Incorporated 2008  All rights reserved << /Type  /Halftone  /HalftoneType  1 /Frequency  89.827  /Angle  75 /SpotFunction  /Round  /AccurateScreens true>>endobj 33 0 obj<< /Type  /Halftone  /HalftoneType  1 /Frequency  90.714  /Angle  0 /SpotFunction  /Round  /AccurateScreens true>>endobj 34 0 obj<< /Type  /Halftone  /HalftoneType  1 /Frequency  89.803  /Angle  45 /SpotFunction  /Round  /AccurateScreens true>>endobj 35 0 obj<< /Type  /Halftone  /HalftoneType  1 /Frequency  90.000  /Angle  45 /SpotFunction  /Round"," /AccurateScreens true>>endobj 10.6 Scan Conversion Details 10.6.1 General The final step of rendering shall be  scan conversion . The conforming reader executes a scan conversion  algorithm to paint graphics, text, and images in the raster memory of the output device.  NOTE The specifics of the scan conversion  algorithm are not defined as part of PDF. Different implementations may  perform scan conversion in different ways; techni ques that are appropriate for one device may be  inappropriate for another. Still, it is useful to have  a general understanding of how scan conversion works,  particularly when creating PDF files intended for viewing on a display. At the low resolutions typical of displays,  variations of even one pixels width can have a noti ceable effect on the appearance of painted shapes.  Most scan conversion details are not  under program co ntrol, but a few are; the parameters for controlling them  are described here.  10.6.2 Flatness Tolerance The  flat ness tolerance  controls the maximum permitted distance in  device pixels between the mathematically  correct path and an approximation constructe d from straight line segments, as shown in  Figure 54 . Flatness  may be specified as the operand of the  i operator (see  Table 57 ) or as the value of the  FL entry in a graphics  state parameter dictionary (see  Table 58 ). It shall be a positive number.",""],"325":["' Adobe Systems Incorporated 2008  All rights reserved 317PDF 32000-1:2008 NOTE 1 Smaller values yield greater precis ion at the cost of more computation.  NOTE 2 Although the figure exaggerates the difference between  the curved and flattened paths for the sake of clarity,  the purpose of the flatness tolerance is to control th e precision of curve rendering, not to draw inscribed  polygons. If the parameters value is large enough to cause visible straight line segments to appear, the result  is unpredictable.  Figure  54   Flatness tolerance 10.6.3 Smoothness Tolerance The  smoo thness tolerance  (PDF 1.3)  controls the quality of smooth shading (type  2 patterns and the  shoperator) and thus indirectly controls the rendering performance. Smoothness is the allowable colour error  between a shading approximated by piecewise linear inte rpolation and the true value of a (possibly nonlinear)  shading function. The error shall be measured for each colour component, and the maximum independent error  shall be used. The allowable error (or tolerance) shall be  expressed as a fraction of the range of the colour  component, from 0.0 to 1.0. Thus, a smoothness tolerance  of 0.1 represents a tolerance of 10 percent in each  colour component. Smoothness may be specified as the value of the  SM entry in a graphics state parameter  dictionary (see  Table 58 ).  EXAMPLE Each output device may have internal limits on t he maximum and minimum tolera nces attainable. setting  smoothness to 1.0 may result in an internal smoot hness of 0.5 on a high-quality colour device, while  setting it to 0.0 on the same device  may result in an internal smoothness of 0.01 if an error of that  magnitude is imperceptible on the device.  NOTE 1 The smoothness tolerance may also interact with the  accuracy of colour conversion. In the case of a colour  conversion defined by a sampled function, the conversi on function is unknown. Thus the error may be sampled  at too low a frequency, in which case the accuracy defined by the smoothness tolerance cannot be  guaranteed. In most cases, however, where the conver sion function is smooth and continuous, the accuracy  should be within the specified tolerance.  NOTE 2 The effect of the smoothness tolerance is similar to  that of the flatness tolerance.  However, that flatness is  measured in device-dependent units of pixel width, wherea s smoothness is measured as a fraction of colour  component range.  10.6.4 Scan Conversion Rules The following rules determ ine which device pixels a painting operatio n affects. All references to coordinates  and pixels are in device space. A  shape  is a path to be painted with the current colour or with an image. Its  coordinates are mapped into device space but not rounded  to device pixel boundaries. At this level, curves  have been flattened to sequences of straight lines, and  all insideness computations have been performed.  Pixel boundaries always fall on integer coordinates in device  space. A pixel is a square  region identified by the  location of its corner with minimum horizontal  and vertical coordinates. The region is  half-open , meaning that it  includes its lower but not its upper boundaries. More  precisely, for any point whose real-number coordinates","Flatness error tolerance",""],"326":["PDF 32000-1:2008 318 ' Adobe Systems Incorporated 2008  All rights reserved are ( x, y),  let  i   floor (x) and   j   floor (y).  The pixel that contains this  point is the one identified as ( i, j) . The  region belonging to that pixel is defined to be the set of points ( x c, y c)  such that  i d x c  i  1 and  j d y c  j  1. Like pixels, shapes to be pa inted by filling and stroking operations are also trea ted as half-open regions that include the boundaries along their floor sides, but  not along their ceiling sides.  A shape shall be scan-converted by painting any pixel whose square region intersects the shape, no matter  how small the intersection is. This ensures that no  shape ever disappears as  a result of unfavourable  placement relative to the device pixel grid, as might  happen with other possible scan conversion rules. The  area covered by painted pixels shall always be at least as  large as the area of the original shape. This rule  applies both to fill operations and to strokes with nonzero width. Zero -width strokes may be done in an  implementation-defined manner that may incl ude fewer pixels than the rule implies.  NOTE 1 Normally, the intersection of two re gions is defined as the intersection of  their interiors. However, for purposes  of scan conversion, a filling region is considered to in tersect every pixel through which its boundary passes,  even if the interior of t he filling region is empty.  EXAMPLE A zero-width or zero-height re ctangle paints a line 1 pixel wide.  The region of device sp ace to be painted by a sampled image is dete rmined similarly to th at of a filled shape,  though not identically. The conforming reader transforms the images source rectangle into device space and  defines a half-open region, just as for fill operations. Howeve r, only those pixels whose  centres  lie within the  region shall be painted. The position of the centre of  such a pixelin other words, the point whose coordinate  values have fractional parts of one-halfshall be mapped  back into source space to  determine how to colour  the pixel. There shall not be averaging over the pixel area;  NOTE 2 If the resolution of the source image is higher th an that of device space, some source samples may not be  used.  For clipping, the clipping region consists of the set of pixels that would be includ ed by a fill operation.  Subsequent painting operations shall affect a region that is  the intersection of the se t of pixels defined by the  clipping region with the set of pixels for the region to be painted.  Scan conversion of character glyphs may be performe d by a different algorithm from the preceding one.  NOTE 3 That font rendering  algorithm uses hints in the glyph descriptions  and techniques that ar e specialized to glyph  rasterization.  10.6.5 Automatic Stroke Adjustment When a stroke is drawn along a path, the scan conv ersion algorithm may produce lines of nonuniform  thickness because of rasterization effects. In general , the line width and the coordinates of the endpoints,  transformed into device space, are arbitrary real numb ers not quantized to device pixels. A line of a given width  can intersect with different numbers of device  pixels, depending on where it is positioned.  Figure 55  illustrates  this effect.  For best results, it is important to compensate for the rasterization effects to produce strokes of uniform  thickness. This is especially import ant in low-resolution di splay applications. To meet this need, PDF 1.2  provides an optional  automatic stroke adjustment  feature. When stroke adjustment is enabled, the line width  and the coordinates of a stroke shall automatically be adjusted as necessary to produce lines of uniform  thickness. The thickness shall be as near as possible  to the requested line widthno more than half a pixel  different.",""],"327":["' Adobe Systems Incorporated 2008  All rights reserved 319PDF 32000-1:2008 Figure 55   Rasterization without stroke adjustment If stroke adjustment is enabled and the requested line width , transformed into device space, is less than half a  pixel, the stroke shall be rendered as a single-pixel line.  NOTE This is the thinnest line  that can be rendered at device resolution.  It is equivalent to the effect produced by  setting the line width to 0 (see  10.6.4, \"Scan Conversion Rules\" ). Because automatic stroke adjustment can have a substantial effect on the appearance of lines, PDF provides  means to control whether the adjustment shall be perfor med. This may be specified with the stroke adjustment  parameter in the graphics state, set by means of the  SA entry in a graphics state parameter dictionary (see  8.4.5, \"Graphics State Parameter Dictionaries\" ).","Path","Resulting line","Line width","Resulting line","Line width","Path","1pixel",""],"328":["PDF 32000-1:2008 320 ' Adobe Systems Incorporated 2008  All rights reserved 11 Transparency 11.1 General The PDF imaging model includes the notion of  transparency . Transparent objects do not necessarily obey a  strict opaque painting model but may blend  (composite)  in interesting ways with other overlapping objects. This  clause describes the general transparency model but does no t cover how it is implemente d. At various points it  uses implementation-like descriptions to describe how thin gs work, for the purpose of elucidating the behaviour  of the model. The actual implementati on will almost certainly be different  from what these descriptions might  imply.  NOTE Transparency was added to PDF in version 1.4 The clause is organized as follows:  11.2, \"Overview of Transparency,\"  introduces the basic concepts of the transparency model and its  associated terminology.  11.3, \"Basic Compositing Computations,\"  describes the mathematics involved in compositing a single  object with its backdrop.  11.4, \"Transparency Groups,\"  introduces the concept of  transparency groups  and describes their  properties and behaviour.  11.5, \"Soft Masks,\"  covers the creation and use of masks to sp ecify position-dependent shape and opacity.  11.6, \"Specifying Transparency in PDF,\"  describes how transparency properties are represented in a PDF  document.  11.7, \"Colour Space and Rendering Issues,\"  deals with some specific interactions between transparency  and other aspects of colour  specification and rendering.  11.2 Overview of Transparency The original PDF imaging model paints  objects (fills, strokes, text, and images), possibly c lipped by a path,  opaquely onto a page. The colour of the page at any  point shall be that of the topmost enclosing object,  disregarding any previous objects it may overlap. Th is effect may beand often isrealized simply by  rendering objects directly to the page in the order in  which they are specified, wit h each object completely  overwriting any others that it overlaps.  Under the transparent imaging model, all of the objects on a page may potentially contribute to the result.  Objects at a given point may be thought of as forming a  transparency stack  (or  stack  for short). The objects  shall be arranged from bottom to top in the order in which they are specified. The colour of the page at each  point shall be determined by combining the colours of  all enclosing objects in the stack according to  compositing rules defined by the transparency model.  NOTE 1 The order in which objects are s pecified determines the stacking order  but not necessarily the order in which  the objects are actually painted ont o the page. In particular, the transparency model does not require a conforming reader to rasterize objects immediately or to  commit to a raster representation at any time before  rendering the entire stack onto the page. This is importan t, since rasterization often causes significant loss of  information and precision that is best avoided during in termediate stages of the transparency computation.  A given object shall be composited with a  backdrop. Ordinarily, the backdrop consists of the stack of all objects  that have been specified previously. T he result of compositing shall then  be treated as the backdrop for the  next object. However, within certain kinds of transparency groups (see  Transparency Groups ), a different  backdrop may be chosen.",""],"329":["' Adobe Systems Incorporated 2008  All rights reserved 321PDF 32000-1:2008 During the compositing of an object with its backdrop, the colour at each point shall be computed using a  specified  blend mode , which is a function of both the objects colour and the backdrop colour. The blend mode  shall determine how colours interact; different blend modes  may be used to achieve a va riety of useful effects.  A single blend mode shall be in effect for compositing  all of a given object, but different blend modes may be  applied to different objects.  Two scalar quantities called  shape and opacity  mediate compositing of an object with its backdrop.  Conceptually, for each object, these quantities shall be defined at every point in the plane, just as if they were  additional colour com ponents. (In actual practice,  they may be obtained from au xiliary sources rather than  being intrinsic to the object.)  Both shape and opacity vary from 0.0 (no contribution) to  1.0 (maximum contribution). At any point where either  the shape or the opacity of an object is equal to 0.0, it s colour shall be undefined. At points where the shape is  equal to 0.0, the opacity shall also  be undefined. The shape and opacity shall be subject to compositing rules;  therefore, the stack as a whole also ha s a shape and opacity at each point.  An objects opacity, in combination with the backdrops op acity, shall determine the relative contributions of the  backdrop colour, the objects colour, and the blended colour to the resulting composite colour. The objects  shape shall then determine the degree to which the composite colour replaces the backdrop colour. Shape  values of 0.0 and 1.0 identify points that lie outside  and inside a conventional sharp-edged object; intermediate  values are useful in defining soft-edged objects.  Shape and opacity are conceptually very similar. In fa ct, they can usually be combined into a single value,  called alpha , which controls both the colour compositing comp utation and the fading between an object and its  backdrop. However, there are a few situations in which they shall be treated separately; see  11.4.6, \"Knockout  Groups.\"  NOTE 2 Raster-based implementations may need to maintain  a separate shape parameter to do anti-aliasing properly;  it is therefore convenient to have shap e as an explicit part of the model.  One or more consecutive objects in a  stack may be collected together into a  transparency group  (often referred  to hereafter simply as a  group ). The group as a whole may have various  properties that modify the compositing  behaviour of objects within the group and their interacti ons with its backdrop. An additional blend mode, shape,  and opacity may also be associated wi th the group as a whole and used when  compositing it with its backdrop.  Groups may be nested within other groups, forming a tree-structured hierarchy.  EXAMPLE Figure L.16  in Annex L  illustrates the effects of transparency gro uping. In the upper two figures, three  coloured circles are painted as independent objects wit h no grouping. At the upper left, the three objects  are painted opaquely (opacity  = 1.0); each object completely replaces its backdrop (including previously  painted objects) with its own colour. At the upper right, the same three independent objects are painted  with an opacity of 0.5, causing t hem to composite with each other  and with the gray and white backdrop.  In the lower two figures, the three objects are combi ned as a transparency group. At the lower left, the  individual objects have an opacity of 1.0 within t he group, but the group as a whole is painted in the  Normal blend mode with an opacity of 0.5. The objects th us completely overwrite each other within the  group, but the resulting group then  composites transparently with the  gray and white backdrop. At the  lower right, the objects have an op acity of 0.5 within the  group and thus composite with each other. The  group as a whole is painted against the backdrop wit h an opacity of 1.0 but in a different blend mode  (HardLight ), producing a different visual effect.  The colour result of compositing a group may be conver ted to a single-component luminosity value and treated  as a  soft mask . Such a mask may then be used as an additi onal source of shape or opacity values for  subsequent compositing operations. When the mask is  used as a shape, this technique is known as  soft  clipping; it is a generalization of the current clip ping path in the opaque imaging model (see  Clipping Path  Operators ).  The notion of  current page  is generalized to refer to a transparency group consisting of the entire stack of  objects placed on the page, composited with a backdrop that is pure white and fully opaque. Logically, this  entire stack shall then be rasterized to determine the actual pixel values to be transmitted to the output device.",""],"330":["PDF 32000-1:2008 322 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 3 In contexts where a PDF page is tr eated as a piece of artwork to be plac ed on some other page it is treated not  as a page but as a group, whose backdrop may  be defined differently from that of a page.  11.3 Basic Compositing Computations 11.3.1 General This sub-clause describes the basic computations for  compositing a single object with its backdrop. These  computations are extended in  11.4, \"Transparency Groups,\"  to cover groups consisting  of multiple objects.  11.3.2 Basic Notation for Compositing Computations In general, variable names in this clause consisting of  a lowercase letter denote a scalar quantity, such as an  opacity. Uppercase letters denote a valu e with multiple scalar components, such as a colour. In the descriptions  of the basic colour compositing computations, co lour values are generally denoted by the letter  C, with a  mnemonic subscript indicating whic h of several colour values is being referred to; for instance,  Cs stands for  source colour. Shape and opacity values  are denoted respectively by the letters  f (for  form factor) and  q (for opa queness)again with a mnemonic subscript, such as  qs for source opacity. The symbol  D (alpha) stands  for a product of shape and opacity values.  In certain computations, one or more variables may have undefined values; for instance, when opacity is equal  to zero, the corresponding colour is undefined. A quantit y can also be undefined if it results from division by  zero. In any formula that uses such an undefined quanti ty, the quantity has no effect on the ultimate result  because it is subsequently mu ltiplied by zero or otherwise cancelled out.  It is significant that  while any arbitrary  value may be chosen for such an undefined quantity, the computation shall not malfunction because of  exceptions caused by overflow or division by zero. The further convention that 0  y 0   0 should also be  adopted.  11.3.3 Basic Compositing Formula The primary change in the imaging model to accommodate  transparency is in how colours are painted. In the  transparent model, the result of painting (the  result colour) is a function of both the colour being painted (the  source colour) and the colour it is painted over (the  backdrop colour ). Both of these colours may vary as a  function of position on the page; however, this su b-clause focuses on some fixed point on the page and  assumes a fixed backdrop and source colour.  This computation uses two other parameters:  alpha , which controls the relative  contributions of the backdrop  and source colours, and the  blend function , which specifies how they sha ll be combined in the painting  operation. The resulting  basic colour compositing formula (or just  basic compositing formula  for short) shall  determine the result colour produced by the painting operation:  where the variables have the meanings shown in  Ta b l e  135. Table  135    Variables used in the basic compositing formula   Variable Meaning Backdrop colourSource colour Result colour","Cr1DsDr----- - '„¤‚§•CbuDsDr----- -1DbCsuDbBCbCs()u+>@u+=","Cb","Cs","Cr",""],"331":["' Adobe Systems Incorporated 2008  All rights reserved 323PDF 32000-1:2008 This formula represents a simplified form of the compositing formula in which the shape and opacity values are  combined and represented as a single alpha value; the mo re general form is presented later. This function is  based on the  over  operation  defined in the article Compositing Digi tal Images, by Porter and Duff (see  the  Bibliography ), e xtended to include a blend mode in the re gion of overlapping coverage. The following sub- clauses elaborate on the meaning and implications of this formula.  11.3.4 Blending Colour Space The compositing formula shown in  11.3.3, \"Basic Compositing Formula,\"  represents a vector function: the  colours it operates on are represented in the form of  n-element vectors, where  n denotes the number of  components required by the colour space in used in the compositing process. The  ith component of the result  colour Cr shall be obtained by applying the compositing formula to the  ith components of the constituent  colours Cb , Cs , and  B (Cb, Cs ). The result of the computation thus de pends on the colour space in which the  colours are represented. For this reason, the co lour space used for compositing, called the  blending colour  space , is explicitly made part of the transparent imaging  model. When necessary, backdrop and source colours  shall be converted to the blending colour  space before the compositing computation.  Of the PDF colour spaces described in  Section 8.6, the following shall be supported as blending colour spaces: De viceGray De viceRGB De viceCMYK CalGray CalRGBICCBased colour spaces equivalent to the preceding (including calibrated  CMYK) The  La b  space and  ICCBased  spaces that represent lightness a nd chromaticity separately (such as  L*a*b* , L*u*v* , and  HSV) shall not be used as blending colour spaces  because the compositing computations in such  spaces do not give meaningful results when applied separately to each component. In addition, an  ICCBased space used as a blending colour space shall be bidire ctional; that is, the ICC  profile shall contain both  AToB and  BToA  transformations.  The blending colour space shall be consulted only for process colours. Although blending may also be done on  individual spot colours specified in a  Separation  or  DeviceN  colour space, such colours shall not be converted  to a blending colour space (except in the case where they first revert to their alternate colour space, as  described under  Section 8.6.6.4  and  DeviceN Colour Spaces ). Instead, the  specified colour components shall  be blended individually with the corresponding components of the backdrop.  The blend functions for the various blend modes are defi ned such that the range for each colour component  shall be 0.0 to 1.0 and that the colour space shall be additive. When performing blending operations in  Backdrop alpha Source alpha Result alpha Blend function Table 135   Variables used in the basic compositing formula  (continued) Variable Meaning","Db","Ds","Dr","BCbCs()",""],"332":["PDF 32000-1:2008 324 ' Adobe Systems Incorporated 2008  All rights reserved subtractive colour spaces ( DeviceCMYK , Separation , and  DeviceN ), the colour component values shall be  complemented (subtracted from 1.0) before the blend func tion is applied and the results of the function shall  then be complemented back before being used.  NOTE This adjustment makes the effects of the various blend modes numeri cally consistent across all colour spaces.  However, the actual visual effect produced by a give n blend mode still depends on the colour space. Blending  in a device colour space produces device-dependent re sults, whereas in a CIE- based space it produces  results that are consistent  across all devices. See  11.7, \"Colour Space and Rendering Issues,\"  for additional  details concerning colour spaces.  11.3.5 Blend Mode In principle, any function of the backdrop an d source colours that yields another colour,  Cr, for the result may be  used as a blend function  B (Cb , Cs), in the compositing formula to cu stomize the blending operation. PDF  defines a standard set of named blend functions, or  blend modes , listed in Tables  136  and  137 . Figures  L.18and  L.19 in Annex L illustrate the resulting vis ual effects for  RGB and  CMYK colours, respectively.  A blend mode is termed  separable  if each component of the result col our is completely determined by the  corresponding components of the constituent backdrop an d source coloursthat is, if the blend mode function  B is applied separately to each set of corresponding components:  where the lowercase variables  cr , cb , and  cs denote corresponding components of the colours  Cr , Cb , and  Cs ,expressed in additive form. A separable blend mode ma y be used with any colour space, since it applies  independently to any number of components. Only se parable blend modes shall be used for blending spot  colours.NOTE 1 Theoretically, a blend mode could have a different function for each colour component and still be separable;  however, none of the standard PDF blend modes have this property. Ta b l e  136 lists the standard separable blend modes available  in PDF and the algorithms/formulas that shall be  used in the calculation of blended colours.  Table  136    Standard separable blend modes   Name Result NormalNOTE Selects the source colour, ignoring the backdrop. Compatible Same as Normal. This mode exists only  for compatibility and should not be used. Multiply NOTE 1 Multiplies the backdrop and source colour values. NOTE 2 The result colour is always at  least as dark as either of the two  constituent colours. Multiplying any  colour with black produces black;  multiplying with white leaves the original colour unchanged. Painting  successive overlapping objects with a  colour other than black or white  produces progressively darker colours.","crBcbcs()=","Bcbcs()cs=","Bcbcs()cbcsu=",""],"333":["' Adobe Systems Incorporated 2008  All rights reserved 325PDF 32000-1:2008 ScreenNOTE 3 Multiplies the complements of the backdrop and source colour values,  then complements the result. NOTE 4 The result colour is always at  least as light as either of the two  constituent colours. Screening any co lour with white produces white;  screening with black leaves the orig inal colour unchanged. The effect  is similar to projecting multiple  photographic slides simultaneously  onto a single screen.  Overlay NOTE 5 Multiplies or screens the colours, depending on the backdrop colour  value. Source colours overlay the backdrop while preserving its  highlights and shadows. The backdrop colour is not replaced but is  mixed with the source colour to reflect the lightness or darkness of the  backdrop. Darken NOTE 6 Selects the darker of  the backdrop and source colours. NOTE 7 The backdrop is replaced with t he source where the source is darker;  otherwise, it is left unchanged.  Lighten NOTE 8 Selects the lighter of t he backdrop and source colours. NOTE 9 The backdrop is replaced with the source where the source is lighter;  otherwise, it is left unchanged.  ColorDodge NOTE 10 Brightens the backdrop colour to reflect the source colour. Painting  with black produces no changes.  ColorBurnNOTE 11 Darkens the backdrop colour to reflect the source colour. Painting  with white produces no change. HardLight NOTE 12 Multiplies or screens the colours, depending on the source colour  value. The effect is similar to shining a harsh spotlight on the  backdrop. Table 136   Standard separable blend modes  (continued) Name Result","Bcbcs()11c b1csu>@= cbcscbcsu+=","Bcbcs()HardLight c scb()=","Bcbcs()min c bcs()=","Bcbcs()max c bcs()=","Bcbcsmin 1 c b1cse ()if c s11                                if c s=ﬂﬁ›=","Bcbcs1min11c bcse ()if cs0!0                                     if c s=ﬂﬁ›=","BcbcsMultiply c b2csu ()if cs0.5 dScreen c b2cs1u ()if cs0.5!ﬂﬁ›=",""],"334":["PDF 32000-1:2008 326 ' Adobe Systems Incorporated 2008  All rights reserved Ta b l e  137 lists the standard nonseparable blend modes. Since the nonseparable blend modes consider all  colour components in combination, their computation depends on the blending colour space in which the  components are interpreted. They may be applied to all multiple-component colour spaces that are allowed as  blending colour spaces (see  Blending Colour Space ). NOTE 2 All of these blend modes co nceptually entail the following steps: a) Convert the backdrop and source colours from  the blending colour space to an intermediate  HSL (hue- saturation-luminosity) representation.  b) Create a new colour from some combination of hue,  saturation, and luminosity components selected from  the backdrop and source colours. c) Convert the result back to the original (blending) colour space. However, the following formulas given do not actually  perform these conversions. Instead, they start with  whichever colour (backdrop or source) is providing the hue for the result; then they adjust this colour to have  the proper saturation and luminosity. The nonseparable blend mode formulas make use of  several auxiliary functions.  These functions operate on  colours that are assumed to have red, green, and blue components. Blending of  CMYK colour spaces requires  special treatment, as described in this sub-clause.  These functions shall have  the following definitions: SoftLight where NOTE 13 Darkens or lightens the col ours, depending on the source colour  value. The effect is similar to  shining a diffused spotlight on the  backdrop. DifferenceNOTE 14 Subtracts the darker of the two co nstituent colours from the lighter  colour: NOTE 15 Painting with white inverts the backdrop colour; painting with black  produces no change.  Exclusion NOTE 16 Produces an effect similar to that of the  Difference mode but lower in  contrast. Painting with white inverts the backdrop colour; painting with  black produces no change. Table 136   Standard separable blend modes  (continued) Name Result","Bcbcs()cb12c sucb1cbuu if cs0.5 dcb2cs1uDcb()cbu+if cs0.5 !ﬂﬁ›=","Dx()16 x 12 ux4+uxuif x 0.25 dxif x0.25!ﬂﬁ›=","Bcbcs()cbcs=","Bcbcs()cbcs2cbcuu s+=","Lum C ()0.3 C redu0.59 C greenu0.11 C blueu++=",""],"335":["' Adobe Systems Incorporated 2008  All rights reserved 327PDF 32000-1:2008 The subscripts  min, mid, and  max  (in the next function) refer to the colour components having the minimum,  middle, and maximum values upon entry to the function. Table  137   Standard nonseparable blend modes   Name Result Hue NOTE 1 Creates a colour with the hue of the so urce colour and the saturation  and luminosity of the backdrop colour.  Saturation NOTE 2 Creates a colour with the saturati on of the source colour and the hue  and luminosity of the backdrop colour. Painting with this mode in an  area of the backdrop that is a pure gray (no saturation) produces no  change.","SetLum C l ()let d l Lum C ()CredCred dCgreen+CgreendCblue+CbluedreturnClipColor C ()+====","ClipColor C ()let l Lum C ()let n min C redCgreenCblue()let x max C redCgreenCblue()if n 0.0       C redlCredllulne      C green+lCgreenllulne      C blue+lCbluellulneif x 1.0       C red!+lCredl1luxle      C green+lCgreenl1luxle      C blue+lCbluel1luxlereturn C+=========","Sat C ()max C redCgreenCblue ()min C redCgreenCblue()=","SetSat C s ()if C max Cmin       C mid !Cmid CminsuCmax Cmin e      C max selse       C mid Cmax 0.0Cmin 0.0return C=====","BCbCsSetLum SetSat C sSat C b()()Lum C b()()=","BCbCsSetLum SetSat C bSat C s()()Lum C b()()=",""],"336":["PDF 32000-1:2008 328 ' Adobe Systems Incorporated 2008  All rights reserved The formulas in this sub-clause apply to  RGB spaces. Blending in  CMYK spaces (including both  DeviceCMYK and  ICCBased  calibrated CMYK spaces) shall be handled in the following way: The  C, M, and Y components shall be converted to their complementary  R, G, and  B components in the  usual way. The preceding formulas shall be applied to the  RGB colour values. The results shall be  converted back to  C, M, and  Y. For the  K component, the result shall be the  K component of  Cb for the Hue , Saturation , and  Color blend  modes; it shall be the  K component of  Cs for the  Luminosity  blend mode. 11.3.6 Interpretation of Alpha The colour compositing formula  produces a result colour that is  a weighted average of the backdrop colour, the source colour, and the blended  B (Cb , Cs ) term, with the weighting determined by  the backdrop and source alphas  DE and  Ds . For the simplest  blend mode,  Normal, defined by  the compositing formula collapses to a  simple weighted average of the backdrop and source colours, controlled  by the backdrop and source alpha values. For more  interesting blend functions, the backdrop and source  alphas control whether the effect of the blend mode is fu lly realized or is toned do wn by mixing the result with  the backdrop and source colours.  The result alpha,  DU , actually represents a computed result, described in  11.3.7, \"Shape and Opacity  Computations.\"  The result colour shall be normalized by the result alpha, ensuring that when this colour and  alpha are subsequently used together in another composit ing operation, the colours contribution is correctly  represented.  NOTE 1 If  DU  is zero, the result  colour is undefined.  NOTE 2 The preceding formula represents a simplification  of the following formula, which presents the relative  contributions of backdrop, source, and blen ded colours in a more straightforward way:  Color NOTE 3 Creates a colour with the hue a nd saturation of the source colour and  the luminosity of the backdrop colour. This preserves the gray levels  of the backdrop and is useful fo r colouring monochrome images or  tinting colour images.  Luminosity NOTE 4 Creates a colour with the luminosity of the  source colour and the hue  and saturation of the backdrop colour. This produces an inverse effect  to that of the  Color  mode.  Table 137   Standard nonseparable blend modes  (continued) Name Result","BCbCsSetLum C sLum C b()()=","BCbCsSetLum C bLum C s()()=","Cr1DsDr----- - '„¤‚§•CbuDsDr----- -1DbCsuDbBCbCs()u+>@u+=","Bcb•cs()cs=","DrCru1DsD bCbuu >@1DbD sCsuu >@DbDsBCbCs()uu> ++=",""],"337":["' Adobe Systems Incorporated 2008  All rights reserved 329PDF 32000-1:2008 (The simplification requires a substitution based on the  alpha compositing formula, which is presented in the  next sub-clause.) Thus, mathematically, the backdrop and  source alphas control the influence of the backdrop  and source colours, respectively, while their product co ntrols the influence of t he blend function. An alpha  value of  Ds   0.0 or  DE   0.0 results in no blend mode effect; setting  Ds   1.0 and  DE   1.0 results in maximum  blend mode effect.  11.3.7 Shape and Opacity Computations 11.3.7.1 General As stated earlier, the alpha values that control the  compositing process shall be defined as the product of  shape and opacity:  This sub-clause examines the variou s shape and opacity values individua lly. Once again, keep in mind that  conceptually these values are computed for every point on the page.  11.3.7.2 Source Shape and Opacity Shape and opacity values may come from several sources. The transparency model provides for three  independent sources for each. However, the PDF representation  imposes some limitatio ns on the ability to  specify all of these sources independently (see  Specifying Shape and Opacity ).  O bject shape . Elementary objects such as strokes, fills, and text have an intrinsic shape, whose value shall  be 1.0 for points inside the object and 0.0 outside.  Similarly, an image with an explicit mask (see  Explicit Masking ) has a shape that shall be 1.0 in the unmasked  portions and 0.0 in the masked portions. The  shape of a group object shall be the union of the shapes of the objects it contains.  NOTE 1 Mathematically, elementary objects have hard edges, with a shape value of either  0.0 or 1.0 at every point.  However, when such objects are rasterized to device pixels, the shape values along the boundaries may be  anti-aliased, taking on fractional values representing  fractional coverage of those pixels. When such anti- aliasing is performed, it is important  to treat the fractional coverage as shape rather than opacity.  Mask shape . Shape values for compositing an object may be taken from an additional source, or  soft  mask , independent of the object itself, as described in  11.5, \"Soft Masks.\" NOTE 2 The use of a soft mask to modify the shape of an object or group, called  soft clipping , can produce effects such  as a gradual transition between an object and its backdrop, as in a vignette.  Constant shape . The source shape may be modified at every point by a scalar  shape constant . NOTE 3 This is merely a convenience, since the same effe ct could be achieved with a shape mask whose value is the  same everywhere.  Object opacity . Elementary objects have an opacity of 1.0 everywhere. The opacity of a group object shall  be the result of the opacity computations for all of the objects it contains.  Ma sk opacity . Opacity values, like shape values, may be provided  by a soft mask independent of the object  being composited.  Co nstant opacity . The source opacity may be modified at every point by a scalar  opacity constant . NOTE 4 It is useful to think of this value as the current  opacity, analogous to the current colour used when painting  elementary objects.","Dbfbqbu=Drfrqru=Dsfsqsu=",""],"338":["PDF 32000-1:2008 330 ' Adobe Systems Incorporated 2008  All rights reserved All of the shape and opacity inputs shall have values in th e range 0.0 to 1.0 (inclusive), with a default value of  1.0.  The three shape inputs shall be multiplied together, producing an intermediate value called the source shape. The three opacity inputs shall be multiplied together, pr oducing an intermediate value called the source opacity. Where the variables have the meanings shown in  Ta b l e  138. NOTE 5 The effect of each of these input s is that the painting operation becomes more transparent as the input values  decreases. When an object is painted wit h a tiling pattern, the object shape and obje ct opacity for points in the objects  interior are determined by those of corresponding points  in the pattern, rather t han being 1.0 everywhere (see  Patterns and Transparency ). 11.3.7.3 Result Shape and Opacity In addition to a result colour, the painting  operation also shall compute an associated  result shape  and  result  opacity . These computations shall be based on the  union function  where b a nd  s shall be the backdrop and source values to be composited.  NOTE 1 This is a generalization of the co nventional concept of union for opaque sh apes, and it can be  thought of as an  inverted multiplicationa multiplication with the input s and outputs complemented.  The result tends toward  1.0: if either input is  1.0, the result is 1.0.  The result shape and opacity shall be given by  Table  138    Variables used in the source shape and opacity formulas   Variable Meaning Source shape Object shape Mask shape Constant shape Source opacity Object opacity Mask opacity Constant opacity","fsfjfmfkuu =","qsqjqmqkuu =","fs","fj","fm","fk","qs","qj","qm","qk","Union b s ()11b 1su>@= bs bs u+=",""],"339":["' Adobe Systems Incorporated 2008  All rights reserved 331PDF 32000-1:2008 where the variables have the meanings shown in  Ta b l e  139. These formulas shall be interpreted as follows:   The result shape shall be the union of the backdrop and source shapes.   The result opacity shall be the union of the backdrop  and source opacities, weighted by their respective  shapes. The result shall then be divide d by (normalized by) the result shape.  NOTE 2 Since alpha is just the product of s hape and opacity, it can easily be shown that  This formula can be used whenever the independent shape and opacity are not needed.  11.3.8 Summary of Basic Compositing Computations This sub-clause is a summary of all the computations presented in this sub-clause. They are given in an order  such that no variable is used before  it is computed; also, some of the formulas have been rearranged to  simplify them. See Tables  135 , 138 , and  139  for the meanings of the variables used in these formulas.  Table  139    Variables used in the result shape and opacity formulas   Variable Meaning Result shapeBackdrop shapeSource shapeResult opacity Backdrop opacity Source opacity","frUnion f bfs()=qrUnion f bqbufsqsu ()fr--------------------------------------------------------- -=","fr","fb","fs","qr","qb","qs","DrUnion DbDs()=","Union b s ()11b 1su>@= bs bs u+=","fsfjfmfkuu =qsqjqmqkuu =frUnion f b•fs()=",""],"340":["PDF 32000-1:2008 332 ' Adobe Systems Incorporated 2008  All rights reserved 11.4 Transparency Groups 11.4.1 General A tr ansparency group  is a sequence of consecutive objects in a  transparency stack that shall be collected  together and composited to produce a single colour, shap e, and opacity at each point. The result shall then be  treated as if it were a single object for subsequent  compositing operations. Groups may be nested within other  groups to form a tree-structured group hierarchy.  NOTE This facilitates creating independent pieces of artwork, each composed of multiple objects, and then combining  them, possibly with additional transparency effects applied during the combination. The objects contained within a group shall be treated as a separate transparency stack called the  group stack . The objects in the stack shall be composited against an initial backdrop (discussed later), producing a  composite colour, shape, and opacity  for the group as a whole. The result  is an object whose shape is the  union of the shapes of its constituent objects and whos e colour and opacity are the  result of the compositing  operations. This object shall then be composited  with the groups backdrop in the usual way.  In addition to its computed colour, shape, and opacity,  the group as a whole may have several further attributes:   All of the input variables that affect the compositing computation for individual objects may also be applied  when compositing the group with its backdrop. Thes e variables include mask and constant shape, mask  and constant opacity, and blend mode.   The group may be  isolated  or  non-isolated , which shall determine the initial backdrop  against which its  stack is composited.   The group may be  knockout or non-knockout , which shall determine whether the objects within its stack  are composited with one another or only with the groups backdrop.   An isolated group may specify its own blending colour  space, independent of that of the groups backdrop.   Instead of being composited onto the current page, a  groups results may be used as a source of shape or  opacity values for creating a  soft mask  (see  Soft Masks ). 11.4.2 Notation for Group Compositing Computations This sub-clause introduces some notation for dea ling with group compositing. Subsequent sub-clauses  describe the group compositing formulas for a non-isolat ed, non-knockout group and the special properties of  isolated and knockout groups.","Dbfbqbu=Dsfsqsu=DrUnion DbDs()=","qrDrfr----- -=","Cr1DsDr----- - '„¤‚§•CbuDsDr----- -1DbCsuDbBCbCs()u+>@u+=",""],"341":["' Adobe Systems Incorporated 2008  All rights reserved 333PDF 32000-1:2008 Since we are now dealing with multiple  objects at a time, it is useful to  have some notation for distinguishing  among them. Accordingly, the variables introduced earlier are altered to include a second-level subscript  denoting an objects position  in the transparency stack.   stands for the source colour of the  ith object in the stack. The subscript 0 represents the initial backdrop;  subscripts 1 to  n denote the bottommost to topmost objects in an  n-element stack. In addition, the subscripts  band  r are dropped from the variables  CbfEqED ECr , fU , qU , and  DU ; other variables retain their mnemonic  subscripts.  These conventions permit the compositing formulas to be  restated as recurrence relations among the elements  of a stack. For instance, the result of th e colour compositing computation for object  i is denoted by  Ci (formerly  Cr ). This computation takes as one of its inputs the immedi ate backdrop colour, which is the result of the colour  compositing computation for object  i  1; this is denoted by  Ci  1 (formerly  Cb ). The revised formulas for a simple  n-element stack (not including any groups) shall be, for  i   1,  , n: where the variables have the meanings shown in  Ta b l e  140. NOTE Compare these formulas with those shown in  11.3.8, \"Summary of Basic Compositing Computations.\" Table  140    Revised variables for the basic compositing formulas   Variable Meaning Source shape for object  iObject shape for object  iMask shape for object  iConstant shape for object  iResult shape after compositing object  i","Csi","fsifjifmifkiuu =qsiqjiqmiqkiuu =","Dsifsiqsiu=DiUnion Di1Dsi()=","fiUnion f i1fsi()=qiDifi-----=","Ci1DsiDi------ - '„¤‚§•Ci1uDsiDi------ -1Di1CsiuDi1BiCi1Csi()u+>@u+=","fsi","fji","fmi","fki","fi",""],"342":["PDF 32000-1:2008 334 ' Adobe Systems Incorporated 2008  All rights reserved 11.4.3 Group Structure and Nomenclature As stated earlier, the elements of a group shall be treated as a separate transparency stack, referred to as the  group stack. These objects shall be composited against  a selected initial backdrop  and the resulting colour,  shape, and opacity shall then be treated as if they belonged  to a single object. The re sulting object is in turn composited with the groups backdrop in the usual way.  NOTE This computation entails interp reting the stack as a tree. For an  n-element group that begins at position  i in the stack, it treats the next  n objects as an  n-element substack, whose elem ents are given an independent  numbering of 1 to  n. These objects are then removed from the  object numbering in the parent (containing)  stack and replaced by the group object, numbered  i, followed by the remaining objects to be painted on top of  the group, renumbered starting at  i + 1. This operation applies recurs ively to any nested subgroups.  The term  element  (denoted  Ei ) refers to a member of some group; it can be either an individual object or a  contained subgroup.  From the perspective of a particular element in a nested group, there are three different backdrops of interest:  Th e group backdrop  is the result of compositing all elements up to but not including the first element in the  group. (This definition is altered if the  parent group is a knockout group; see  11.4.6, \"Knockout Groups\" ) The initial backdrop is a backdrop that is selected  for compositing the groups first element. This is either  the same as the group backdrop (for a non-isolated gr oup) or a fully transparent backdrop (for an isolated  group).  Th e immediate backdrop  is the result of compositing all elements  in the group up to but not including the  current element.  When all elements in a group have been composited, the  result shall be treated as if the group were a single  object, which shall then be composited with the group ba ckdrop. This operation shall occur whether the initial  Source opacity for object  iObject opacity for object  iMask opacity for object  iConstant opacity for object  iResult opacity after compositing object  iSource alpha for object  iResult alpha after compositing object  iSource colour for object  iResult colour after compositing object  iBlend function for object  iTable 140   Revised variables for the  basic compositing formulas  (continued) Variable Meaning","qsi","qji","qmi","qki","qi","Dsi","Di","Csi","Ci","BiCi1Csi()",""],"343":["' Adobe Systems Incorporated 2008  All rights reserved 335PDF 32000-1:2008 backdrop chosen for compositing the elements of the group was the group backdrop or a transparent backdrop.  A conforming reader shall ensure that the backdrops co ntribution to the overall result is applied only once.  11.4.4 Group Compositing Computations The colour and opacity of a group shall be defined by the  group compositing function : where the variables have the meanings shown in  Ta b l e  141. NOTE 1 The opacity is not given explicitly as an argument or result of  this function. Almost a ll of the computations use  the product of shape and opacity (alpha) rather than opac ity alone; therefore, it is usually convenient to work  directly with shape and alpha rather than shape and op acity. When needed, the opacity can be computed by  dividing the alpha by the associated shape.  The result of applying the group compositing function shall  then be treated as if it were a single object, which in  turn is composited with the groups backdrop according to the formulas defined in this sub-clause. In those  formulas, the colour, shape, and alpha  (C, f, and  D) calculated by the group compos iting function shall be used,  respectively, as th e source colour  Cs , the object shape  fj , and the object alpha  Dj . The group compositing formulas for a non-isolated,  non-knockout group are defined as follows:   Initialization:   For each group element  Ei  G (i   1,  , n): Table  141   Arguments and results of the group compositing function   Variable Meaning The transparency group: a comp ound object consisting of all  elements  E1,  , En of the groupthe  n constituent objects  colours, shapes, opacities, and blend modes  Colour of the groups backdrop  Computed colour of the group, which shall be used as the  source colour when the group is treated as an object  Computed shape of the group, which shall be used as the  object shape when the group is treated as an object  Alpha of the groups backdrop  Computed alpha of the group,  which shall be used as the  object alpha when the group  is treated as an object","CfD¢†Composite C 0D0G()=","G","C0","C","f","D0","D","fg0Dg00.0==","CsifjiDji¢†Composite C i1Di1Ei()intrinsic color, shape, and  shape opacity u of E iﬂﬁ›=if Ei is a group otherwise","fsifjifmifkiuu =DsiDjifmiqmiufkiqkiuuu=",""],"344":["PDF 32000-1:2008 336 ' Adobe Systems Incorporated 2008  All rights reserved  Result:  where the variables have the meanings shown in  Ta b l e  142 (in addition to those in  Ta b l e  141 ).  For an element  Ei that is an elementary object,  the colour, shape, and alpha values  , , and   are intrinsic  attributes of the object. For an element that is a gr oup, the group compositing function shall be applied  recursively to the subgroup and the resulting  C, f, and  D values shall be used for its  , , and   in the  calculations for the parent group.  Table  142    Variables used in the group compositing formulas   Variable Meaning Element i of the group: a compound variable representing the  elements colour, shape, opacity, and blend mode  Source shape for element  Ei Object shape for element  Ei Mask shape for element  Ei Constant shape for element  Ei Group shape: the accumulated source shapes of group  elements  E1 to  Ei  , excluding the initial backdrop  Mask opacity for element  Ei   Constant opacity for element  Ei Source alpha for element  Ei Object alpha for element  Ei  : the product of its object shape  and object opacity","fgiUnion f gi1fsi()=DgiUnion Dgi1Dsi()=DiUnion D0Dgi()=","Ci1DsiDi------ - '„¤‚§•Ci1uDsiDi------ -1Di1CsiuDi1BiCi1Csi()u+u+=","CCnCnC0D0Dgn-------- D0'„¤‚§•u+= ffgn=DDgn=","Csi","fji","Dji","Csi","fji","Dji","Ei","fsi","fji","fmi","fki","fgi","qmi","qki","Dsi","Dji",""],"345":["' Adobe Systems Incorporated 2008  All rights reserved 337PDF 32000-1:2008 NOTE 2 The elements of a group are composited onto a backdro p that includes the groups  initial backdrop. This is  done to achieve the correct effects of the blend modes,  most of which are dependent  on both the backdrop and  source colours being blended. This feature is what di stinguishes non-isolated groups from isolated groups,  discussed in the next sub-clause. NOTE 3 Special attention should be directed to the fo rmulas at the end that compute the final results  C, f, and  D, of the group compositing function. Essentially, these formulas  remove the contribution of the group backdrop from  the computed results. This ensures that when the  group is subsequently comp osited with that backdrop  (possibly with additional shape or opacity inputs or a  different blend mode), the backdrops contribution is  included only once.  For colour, the backdrop removal is accomplished by an ex plicit calculation, whose  effect is essentially the  reverse of compositing with the  Normal blend mode. The formula is a simplification of the following formulas,  which present this operation more intuitively:  where   is the  backdrop fraction , the relative contribution of the ba ckdrop colour to the overall colour.  NOTE 4 For shape and alpha, backdrop removal is accomplis hed by maintaining two sets of variables to hold the  accumulated values. There is never any need to  compute the corresponding complete shape,  fi , that includes  the backdrop contribution.  The group shape and alpha,   and  , shall accumulate only the shape and alpha of the group elements,  excluding the group backdrop. Their final values shall become the group results returned by the group  compositing function.  The complete alpha,  Di , includes the backdrop contribution as well; its value is used in  the colour compositing computations.  NOTE 5 As a result of these corrections, the effect of compositing objects as a group is the same as that of compositing  them separately (without grouping)  if the following conditions hold:  The group is non-isolated and has the same k nockout attribute as its parent group (see  11.4.5, \"Isolated  Groups,\"  and  Knockout Groups ). When compositing the groups results with the group backdrop, the  Normal blend mode is used, and the  shape and opacity inputs are always 1.0.  Group alpha: the accumulated source alphas of group  elements  E1 to Ei, excluding the initial backdrop  Accumulated alpha after compositing element  Ei , including  the initial backdrop  Source colour for element  Ei Accumulated colour after compositing element  Ei , including  the initial backdrop  Blend function for element  Ei Table 142   Variables used in the group compositing formulas  (continued) Variable Meaning","Dgi","Di","Csi","Ci","BiCi1Csi()","Ib1DgnD0uUnion D0Dgn()-------------------------------------- =CCnIbC0u1Ib------------------------------- =","Ib","fgi","Dgi",""],"346":["PDF 32000-1:2008 338 ' Adobe Systems Incorporated 2008  All rights reserved 11.4.5 Isolated Groups An iso lated group  is one whose elements shall be composited on to a fully transparent  initial backdrop rather than onto the groups backdrop. The resulting source colour, object shape, and object alpha for the group shall  be therefore independent of the group backdrop. The on ly interaction with the group backdrop shall occur when  the groups computed colour, shape, and alpha are composited with it.  In particular, the special effects produced by the blend mod es of objects within the group take into account only  the intrinsic colours and opacities of those objects; th ey shall not be influenced by the groups backdrop.  EXAMPLE Applying the  Multiply  blend mode to an object in the group produces a darkening effect on other objects  lower in the groups stack but not on the groups backdrop.  Figure L.17  in  Annex L  illustrates this effect for a group consisting  of four overlapping circles in a light gray  colour ( C = M = Y = 0.0; K = 0.15). The circles are painted withi n the group with opacity 1.0 in the  Multiply  blend mode; the group itself is painted against its backdrop in  Normal blend mode. In the top  row, the group is isolated and thus does not interact  with the rainbow backdrop.  In the bottom row, the  group is non-isolated and composites with the backdrop. The figure also illustrates the difference between  knockout and non-knockout groups (see  Knockout Groups ). NOTE 1 Conceptually, the effect of an isol ated group could be represented by a simp le object that directly specifies a  colour, shape, and opacity at each point. This  flattening  of an isolated group is sometimes useful for importing  and exporting fully composited artwork  in applications. Furthermore, a group  that specifies an explicit blending  colour space shall be an isolated group.  For an isolated group, the group compositing formulas  shall be altered by adding one statement to the  initialization:  That is, the initial backdrop on whic h the elements of the group are composited shall be transparent rather than  inherited from the groups backdrop.  NOTE 2 This substitution also makes  C0 undefined, but the normal compositing formulas take care of that. Also, the  result computation for  C automatically simplifies to  C = Cn , since there is no backdrop contribution to be  factored out.  11.4.6 Knockout Groups In a knockout group, each individual element shall be comp osited with the groups initial backdrop rather than  with the stack of preceding elements in the group. When objects have binary shapes (1.0 for inside, 0.0 for  outside), each object shall overwrite (knocks out) the ef fects of any earlier elements it overlaps within the same  group. At any given point, only the  topmost object enclosing the point shall contribute to the result colour and  opacity of the group as a whole.  EXAMPLE Figure L.17  in Annex L  about  11.4.5, \"Isolated Groups,\"  illustrates the difference between knockout and  non-knockout groups. In the left column, the four ov erlapping circles are defined as a knockout group and  therefore do not composite with eac h other within the group. In the right column, the circles form a non- knockout group and thus do composite with each ot her. In each column, the upper and lower figures  depict an isolated and a non-isolated group, respectively.  NOTE 1 This model is similar to the opaque imaging model, e xcept that the topmost object wins rule applies to both  the colour and the opacity. Knockout groups are useful  in composing a piece of ar twork from a collection of  overlapping objects, where the topmost object in any ov erlap completely obscures those beneath. At the same  time, the topmost object interacts with the groups initial  backdrop in the usual way, with its opacity and blend  mode applied as appropriate.  The concept of knockout is generalized to accommodate  fractional shape values. In that case, the immediate  backdrop shall be only partially knocked out and shall be r eplaced by only a fraction of  the result of compositing  the object with the  initial backdrop.","D00.0 =if the group is isolated",""],"347":["' Adobe Systems Incorporated 2008  All rights reserved 339PDF 32000-1:2008 The restated group compositing formulas deal with  knockout groups by introducing a new variable,  b, which is  a subscript that specifies which previous result to use  as the backdrop in the compositing computations: 0 in a  knockout group or  i  1 in a non-knockout group. When  b   i  1, the formulas simplify to the ones given in  11.4.4, \"Group Compositing Computations.\"  In the general case, the computation shall proceed in two stages:  a) Composite the source object with the groups initial  backdrop, disregarding the objects shape and using a  source shape value of 1.0 everywhere. This produces  unnormalized temporary alpha and colour results,  Dtand  Ct . NOTE 2 For colour, this computation is essentially the same  as the unsimplified colour compositing formula given in  11.3.6, \"Interpretation of Alpha,\"  but using a source shape of 1.0.  b) Compute a weighted average of this result with th e objects immediate backdrop, using the source shape  as the weighting factor. Then normalize th e result colour by the result alpha:  This averaging computation shall be performed for both colour and alpha.  NOTE 3 The preceding formulas show this averaging directly. The formulas in  11.4.8, \"Summary of Group Compositing  Computations,\"  are slightly altered to use source shape and  alpha rather than source shape and opacity,  avoiding the need to compute a source opacity value explicitly.  NOTE 4Ct in Group Compositing Computations is  slightly different from the preceding  Ct: it is premultiplied by .NOTE 5 The extreme values of the source shape produce the st raightforward knockout effect. That is, a shape value of  1.0 (inside) yields the colour and opacity that result  from compositing the object  with the initial backdrop. A  shape value of 0.0 (outside) leaves t he previous group results unchanged.  The existence of the knockout feature is the main reason for maintaining a separate shape value rather than  only a single alpha that combines  shape and opacity. The separate shape value shall be computed in any  group that is subsequently used as an element of a knockout group.  A knockout group may be isolated or non-isolated; that is,  isolated  and  knockout  are independent attributes. A  non-isolated knockout group composites its topmost enc losing element with the groups backdrop. An isolated  knockout group composites the element with a transparent backdrop.  NOTE 6 When a non-isolated group is nested  within a knockout group, the initia l backdrop of the inner group is the  same as that of the outer group; it  is not the immediate backdrop of t he inner group. This behaviour, although  perhaps unexpected, is a consequence of  the group compositing formulas when b    0.","DtUnion Dgbqsi()=Ct1qsiDbCbuu qsi1DbCsiuDbBiCbCsi()u+u+=","Dgi1fsiDgi1ufsiDtu+=DiUnion D0Dgi()=Ci1fsiDi1Ci1uu fsiCtu+Di------------------------------------------------------------------------------------ =","fsi",""],"348":["PDF 32000-1:2008 340 ' Adobe Systems Incorporated 2008  All rights reserved 11.4.7 Page Group All of the elements painted directly onto a pageboth top-level groups and top-level objects that are not part of  any groupshall be treated as if they were contained in a transparency group  P, which in turn is composited  with a context-dependent backdrop. This group is called the  page group . The page group shall be treated in on e of two distinctly different ways:   Ordinarily, the page shall be imposed directly on an output medium, such as paper or a display screen. The  page group shall be treated as an isolated group, whose results shall then be composited with a backdrop  colour appropriate for the medium. The backdrop is  nominally white, although varying according to the  actual properties of the medium. However, some co nforming readers may choose to provide a different  backdrop, such as a checker board or grid to aid in vi sualizing the effects of transparency in the artwork.   A page of a PDF file may be treated as a graphics  object to be used as an element of a page of some  other document.  EXAMPLE This case arises, for example, when placing a PDF file containi ng a piece of artwork produced by a  drawing program into a page layout produced by a layout  program. In this situation, the PDF page is not  composited with the media colour; instead, it is trea ted as an ordinary transparency group, which can be  either isolated or non-isolated and is composited with its backdrop in the normal way.  The remainder of this sub-clause pertains only to the  first use of the page group,  where it is to be imposed  directly on the medium.  The colour  C of the page at a given point shall be defined by a simplification of the general group compositing  formula:  where the variables have the meanings shown in  Ta b l e  143. The first formula computes the colour and alpha  for the group given a transparent backdropin effect, treating  P as an isolated group. The second formula  composites the results with the context-depen dent backdrop (using the equivalent of the  Normal blend mode).  Table  143    Variables used in the page group compositing formulas   Variable Meaning The page group, consisting of all elements  E1,  , En in the  pages top-level stack  Computed colour of the page group  Computed shape of the page group  Computed alpha of the page group  Computed colour of the page  Initial colour of the page (nominally white but may vary  depending on the properties of  the medium or the needs of  the application)  An undefined colour (which is not used, since the  D0argument of Composite is 0)","CgfgDg¢†Composite U •0P()=C1DgWuDgCgu+=","P","Cg","fg","Dg","C","W","U",""],"349":["' Adobe Systems Incorporated 2008  All rights reserved 341PDF 32000-1:2008 If not otherwise specified, the page groups colour spac e shall be inherited from the native colour space of the  output devicethat is, a devi ce colour space, such as  DeviceRGB  or  DeviceCMYK . An explicit colour space  should be specified, particularly a  CIE-based space, to ensure more predictable results of the compositing  computations within the page group. In this case, all page-level compositing shall be done in the specified  colour space, and the entire result shall then be conver ted to the native colour space of the output device  before being composited with the context-dependent backdrop.  NOTE This case also arises when the page is not ac tually being rendered but is converted to a flattened  representation in an opaque imagi ng model, such as PostScript.  11.4.8 Summary of Group Compositing Computations This sub-clause is a restatement of the group compos iting formulas that also  takes isolated groups and  knockout groups into account. See Tables  141  and  142  in 11.4.4, \"Group Compositing Computations,\"  for the meanings of the variables.  Initialization: For each group element  Ei  G (i   1,  , n):","CfD¢†Composite C 0D0G()=","fg0Dg00==D00 if the group is isolated =","b0i1ﬂﬁ›=if the group is knockout otherwise","CsifjiDji¢†Composite C bDbEi()intrinsic color, shape, and  shape opacity u of E iﬂﬁ›=if Ei is a group otherwise","fsifjifmifkiuu =DsiDjifmiqmiufkiqkiuuu=","fgiUnion f gi1fsi()=Dgi1fsiDgi1ufsiDsiDgbuDs++=DiUnion D0Dgi()=","CtfsiDsiDbCbuu Dsi1DbCsiuDbBiCbCsi()u+u +=","Ci1fsiDi1Ci1uu Ct+Di------------------------------------------------------------------------- =",""],"350":["PDF 32000-1:2008 342 ' Adobe Systems Incorporated 2008  All rights reserved Result:  NOTE Once again, keep in mind that these formulas are  in their most general form.  They can be significantly  simplified when some sources of shape and opacity ar e not present or when shape and opacity need not be  maintained separate ly. Furthermore, in each specific type of gr oup (isolated or not, knockout or not), some  terms of these formulas cancel or drop out. An effi cient implementation should use the simplified derived  formulas. 11.5 Soft Masks 11.5.1 General As stated in earlier sub-clauses, the shape and opacit y values used in compositing an object may include  components called the mask shape  (fm) and mask opacity  (qm), which may be supplied in a PDF file from a  source independent of the object. Such an independent source, called a  soft mask , defines values that may  vary across different points on the page.  NOTE 1 The word  soft  emphasizes that the mask value at a given point is  not limited to just 0.0 or 1.0 but can take on  intermediate fractional values as well. Such a mask is  typically the only means of providing position-dependent  opacity values, since elementary objects do  not have intrinsic opacity of their own.  NOTE 2 A mask used as a source of shape values is also called a  soft clip , by analogy with the hard clipping path of  the opaque imaging model (see  Section 8.5.4). The soft clip is a generalization of the hard clip: a hard clip can  be represented as a soft clip having shape values of 1.0 inside and 0.0 outside the clipping path. Everywhere  inside a hard clipping path, the source objects co lour replaces the backdrop;  everywhere outside, the  backdrop shows through unchanged. With a soft clip, by contrast, a gradual transition can be created between  an object and its backdrop, as in a vignette.  A mask may be defined by creating a transparency group  and painting objects into it, thereby defining colour,  shape, and opacity in the usual way. The resulting group may then be used to derive the mask in either of two  ways, as described in th e following sub-clauses.  11.5.2 Deriving a Soft Mask from Group Alpha In the first method of defining a soft mask, the  colour, shape, and opacity of a transparency group  G shall be  first computed by the usual formula  where C0 and  D0 represent an arbitrary backdrop whose value does  not contribute to the eventual result. The  C, f, and  D results shall be the groups colour, shape, and alpha, respectively, with the backdrop factored out.  The mask value at each point shall then be derived from the alpha of the group. The alpha value shall be  passed through a separately specified transfer functi on, allowing the masking effect to be customized.  NOTE Since the groups colour is not used in this case, there is no need to compute it.","CCnCnC0D0Dgn-------- D0'„¤‚§•u+= ffgn=DDgn=","CfD¢†Composite C 0D0G()=",""],"351":["' Adobe Systems Incorporated 2008  All rights reserved 343PDF 32000-1:2008 11.5.3 Deriving a Soft Mask from Group Luminosity The second method of deriving a soft mask from a transparency group shall begin by compositing the group  with a fully opaque backdrop of a specified colour. The mask  value at any given point shall then be defined to  be the luminosity of the resulting colour.  NOTE 1 This allows the mask to be deri ved from the shape and colour of an  arbitrary piece of artwork drawn with  ordinary painting operators.  The colour  C used to create the mask from a group  G shall be defined by  where C0 is the selected backdrop colour.  G may be  any kind of groupisolated or not, kno ckout or notproducing various effects on the  C result in  each case. The colour  C shall then be converted to luminosity in one of the following ways, depending on the  groups colour space:   For CIE-based spaces, convert to the CIE 1931  XYZ space and use the  Y component as the luminosity.  This produces a colourimetrically correct luminosity.  NOTE 2 In the case of a PDF  CalRGB space, the formula is  using components of the  Gamma and  Matrix entries of the colour  space dictionary (see  Table  64 in  CIE-Based Colour Spaces ). An analogous computation applies to  other CIE-based colour spaces.   For device colour spaces, convert the colour to  DeviceGray  by implementation-defined means and use  the resulting gray value as the luminosity, with no compensation for gamma or other colour calibration.  NOTE 3 This method makes no pret ence of colourimetric correctness; it mere ly provides a numerically simple means to  produce continuous-tone mask values. The fo llowing are formulas for converting from  DeviceRGB  and  DeviceCMYK , respectively:  Following this conversion, the result  shall be passed through a separately specified transfer function, allowing  the masking effect to be customized.  NOTE 4 The backdrop colour most likely to be useful is bl ack, which causes any areas outside the groups shape to  have zero luminosity values in the  resulting mask. If the contents of the  group are viewed as a positive mask,  this produces the results that would be expected with respect to points outside the shape.","CgfgDg¢†Composite C 0•1G()=C1DgC0uDgCgu+=","YYAAGRuYBBGGuYCCGu++=","Y0.30R u0.59 G u0.11 B u++=Y0.301C u1Ku= 0.59 1 M u1Ku+ 0.11 1 Y u1Ku+",""],"352":["PDF 32000-1:2008 344 ' Adobe Systems Incorporated 2008  All rights reserved 11.6 Specifying Transparency in PDF 11.6.1 General The preceding sub-clauses have presented the transpar ent imaging model at an ab stract level, with little  mention of its representatio n in PDF. This sub-clause describes  the facilities available for specifying transparency in PDF.  11.6.2 Specifying Source and Backdrop Colours Single graphics objects, as defined in  Graphics Objects , shall be treated as elementary objects for  transparency compositing purposes (subject to spec ial treatment for text objects, as described in  Text  Knockout ). That is, all of a given object shall be considered to be one element of a transparency stack.  Portions of an object shall not be composited with one anot her, even if they are desc ribed in a way that would  seem to cause overlaps (such as a self-intersecting pa th, combined fill and stroke of a path, or a shading  pattern containing an overlap or fold-over). An objects source colour  Cs , used in the colour compositing  formula, shall be specified in the same way as in the opaque imaging model: by means of the current colour in  the graphics state or the source samples in an image. The backdrop colour  Cb shall be the result of previous  painting operations.  11.6.3 Specifying Blending Colour Space and Blend Mode The blending colour space shall be an attribute of the tr ansparency group within which an  object is painted; its  specification is  described in  11.6.6, \"Transparency Group XObjects.\"  The page as a whole shall also be treated  as a group, the  page group  (see  Page Group ), with a colour space attribute of its own. If not otherwise  specified, the page groups colour space shall be inheri ted from the native colour  space of the output device.  The blend mode  B (Cb , Cs ) shall be determined by the  current blend mode  parameter in the graphics state (see  Graphics State ), which is specified by the  BM entry in a graphics state parameter dictionary ( Graphics State  Parameter Dictionaries ). Its value shall be either a name object, designating one of the standard blend modes  listed in Tables  136  and  137  in 11.3.5, \"Blend Mode,\"  or an array of such names. In the latter case, the  application shall use the first blend mode in the array that it recognizes (or  Normal if it recognizes none of  them).  NOTE New blend modes may be introduced in the future, and  conforming readers that do not recognize them should  have reasonable fallback behavior.  The current blend mode shall always apply to process colour  components; but only sometimes ma y apply to spot colorants,  see 11.7.4.2, \"Blend Modes and Overprinting,\"  for details.  11.6.4 Specifying Shape and Opacity 11.6.4.1 General As discussed under  11.3.7.2, \"Source Shape and Opacity,\"  the shape  (f) and opacity  (q)  values used in the  compositing computation shall come from one or more of the following sources:   The intrinsic shape  (fj ) an d opacity  (qj ) of th e object being composited   A separate shape  (fm ) or  opacity  (qm )  mask independent of the object itself   A scalar shape  (fk ) o r opacity  (qk )  constant to be added at every point  The following sub-clauses describe how each of these sh ape and opacity sources shall be specified in PDF.",""],"353":["' Adobe Systems Incorporated 2008  All rights reserved 345PDF 32000-1:2008 11.6.4.2 Object Shape and Opacity The shape value  fj of an object painted with PDF painti ng operators shall be defined as follows:   For objects defined by a path or a glyph and paint ed in a uniform colour with a path-painting or text- showing operator ( Path-Painting Operators , and  Text-Showing Operators ), the shape shall always be  1.0 inside and 0.0 outside the path.   For images ( Images ), the shape shall be 1.0 inside the image rectangle and 0.0 outside it. This may be  further modified by an explicit or colour key mask ( Explicit Masking and  Colour Key Masking ).   For image masks ( Stencil Masking ), the shape shall be 1.0 for painted areas and 0.0 for masked areas.   For objects painted  with a tiling pattern ( Tiling Patterns ) or a shading pattern ( Shading Patterns ), the  shape shall be further constrained by the objects that define the pattern (see  Patterns and  Transparency ).  For objects painted with the  sh operator ( Shading Operator ), the shape shall be 1.0 inside and 0.0  outside the bounds of the shadings painting geometry, disregarding the  Background  entry in the shading  dictionary (see  Shading Dictionaries ).  All elementary objects shall have an intrinsic opacity  qj of 1.0 everywhere. Any desired opacity less than 1.0  shall be applied by means of an opacity mask or constant, as described in the following sub-clauses.  11.6.4.3 Mask Shape and Opacity At most one mask inputcalled a  soft mask , or alpha mask shall be provided to any PDF compositing  operation. The mask may serve as a source of either shape  (fm ) or  opacity  (qm ) value s, depending on the  setting of the alpha source  parameter in the graphics state (see  Graphics State ). This is a boolean flag, set  with the AIS (alpha is shape) entry in a graphics state parameter dictionary ( Graphics State Parameter  Dictionaries): tru e  if the soft mask contains shape values,  false  for opacity.  The soft mask shall be specified in one of the following ways:  The  current soft mask  parameter in the graphics state, set with the  SMask  entry in a graphics state  parameter dictionary, contains a  soft-mask dictionary  (see  Soft-Mask Dictionaries ) defining the contents  of the mask. The name  None may be specified in place of a soft-m ask dictionary, denoting the absence of  a soft mask. In this case, the mask shape or  opacity shall be implicitly 1.0 everywhere.   An image XObject may contain its own  soft-mask image  in the form of a subsidiary image XObject in the  SMask entry of the image dictionary (see  Image Dictionaries ). This mask, if present, shall override any  explicit or colour key mask spec ified by the image dictionarys  Mask  entry. Either form of mask in the  image dictionary shall override the current soft mask in the graphics state.    An image XObject that has a  JPXDecode filter as its data source may specify an  SMaskInData  entry,  indicating that the soft mask is embedded in the data stream (see  JPXDecode Filter ). NOTE The current soft mask in the graphics state is intended to  be used to clip only a single object at a time (either  an elementary object or a transparency group). If a so ft mask is applied when painting two or more overlapping  objects, the effect of the mask multiplies with itself in the area of overlap (except in a knockout group),  producing a result shape or opacity that is probably not  what is intended. To apply a soft mask to multiple  objects, it is usually best to define the objects as a  transparency group and apply t he mask to the group as a  whole. These considerations also apply to the curr ent alpha constant (see the next sub-clause).",""],"354":["PDF 32000-1:2008 346 ' Adobe Systems Incorporated 2008  All rights reserved 11.6.4.4 Constant  Shape and Opacity The  curr ent alpha constant  parameter in the graphics state (see  Graphics State ) shall be two scalar  valuesone for strokes and one for all other painti ng operationsto be used for the constant shape  (fk) or constant opacity  (qk) component in the colour compositing formulas.  NOTE 1 This parameter is analogous to the current colour used when painting elementary objects.  The nonstroking alpha constant shall also be applied  when painting a transparency groups results onto its  backdrop.  The stroking and nonstroking alpha constants shall be set, respectively, by the  CA and ca entries in a graphics  state parameter dictionary (see  Graphics State Parameter Dictionaries ). As described previously for the soft  mask, the alpha source flag in the graphics state sha ll determine whether the alpha constants are interpreted  as shape values  (true) or opacity values ( false ).  NOTE 2 The note at the end of  11.6.4.3, \"Mask Shape and Opacity,\"  applies to the current alpha constant parameter as  well as the current soft mask.  11.6.5 Specifying Soft Masks 11.6.5.1 General As noted under  11.6.4.3, \"Mask Shape and Opacity,\"  soft masks for use in compositing computations may be  specified in one of  the following ways:   As a soft-mask dictionary in the current soft  mask parameter of the graphics state; see  11.6.5.2, \"Soft- Mask Dictionaries,\"  for more details.  As a soft-mask image associated with a sampled image; see  11.6.5.3, \"Soft-Mask Images,\"  for more  details. (PD F 1.5 ) as a mask channel embedded in  JPEG2000 encoded data; see  JPXDecode Filter , and the  SMaskInData  entry of  Ta b l e  89 for more details. 11.6.5.2 Soft-Mask Dictionaries The most common way of defining a soft mask is with a  soft-mask dictionary  specified as the current soft mask  in the graphics state (see  Graphics State ). Ta b l e  144  shows the contents of  this type of dictionary.  The mask values shall be derived from those of a tran sparency group, using one of the two methods described  in 11.5.2, \"Deriving a Soft Mask from Group Alpha,\"  and  11.5.3, \"Deriving a Soft Mask from Group Luminosity.\" The group shall be defined by a transparency group XObject (see  Transparency Group XObjects ) designated  by the  G entry in the soft-mask dictionary. The  S (subtype) entry shall specify which of the two derivation  methods to use:   If the subtype is  Alpha , the transparency group XObject  G shall be evaluated to compute a group alpha  only. The colours of the constituent objects shall be ignored and the colour compositing computations shall  not be performed. The transfer function  TR shall then be applied to the computed group alpha to produce  the mask values. Outside the bounding box of the transpa rency group, the mask value shall be the result of  applying the transfer function to the input value 0.0.   If the subtype is  Luminosity , the transparency group XObject  G shall be composited with a fully opaque  backdrop whose colour is everywhere defined by the soft-mask dictionarys  BC entry. The computed result  colour shall then be converted to a single-compone nt luminosity value, and the transfer function  TR shall  be applied to this luminosity to produce the mask va lues. Outside the transparency groups bounding box,  the mask value shall be derived by transforming the  BC colour to luminosity and applying the transfer  function to the result.",""],"355":["' Adobe Systems Incorporated 2008  All rights reserved 347PDF 32000-1:2008 The masks coordinate system shall be defined by conc atenating the transformation  matrix specified by the  Matrix  entry in the transparency groups form dictionary (see  Form Dictionaries ) with the current  transformation matrix at the moment the soft ma sk is established in the graphics state with the  gs operator.  In a transparency group XObject that defines a soft mask, spot colour components shall never be available,  even if they are available in the group or page on wh ich the soft mask is used. If the group XObjects content  stream specifies a Separation or  DeviceN  colour space that uses spot col our components, the alternate colour  space shall be substituted (see  Separation Colour Spaces  and  DeviceN Colour Spaces ). 11.6.5.3 Soft-Mask Images The second way to define a soft  mask is by associating a  soft-mask image  with an image XObject. This is a  subsidiary image XObject specified in the  SMask entry of the parent XObjects image dictionary (see  Image  Dictionaries). Entries in the subsidiary ima ge dictionary for such a soft-mask image shall have the same format  and meaning as in that of an ordinary image XObject (as described in  Ta b l e  89 in Image Dictionaries), subject  to the restrictions listed in  Ta b l e  145 . This type of image dictionary may contain an additional entry,  Matte. When an image is accompanied by a soft-mask image, it  is sometimes advantageous for the image data to be  preblended  with some background colour, called the  matte colour . Each image sample represents a weighted  average of the original source colour and the matt e colour, using the corresponding mask sample as the  weighting factor. (This is a generalization of a technique commonly called  premultiplied alpha .) Table  144   Entries in a soft-mask dictionary   KeyType Value Type name (Optional)   The type of PDF object that this dictionary describes; if  present, shall be  Mask  for a soft-mask dictionary.  Sname (Required)  A subtype specifying the met hod to be used in deriving the  mask values from the transparency group specified by the  G entry: AlphaThe groups computed alpha shall be used,  disregarding its colour (see  Deriving a Soft Mask from  Group Alpha ). Luminosity The groups computed colour shall be converted to a  single-component luminosity value (see  Deriving a  Soft Mask from Group Luminosity ). Gstream(Required)  A transparency group XObject (see  Transparency Group  XObjects ) to be used as the source of alpha or colour values for  deriving the mask. If the subtype  S is Luminosity , the group attributes  dictionary shall contain a  CS entry defining the colour space in which  the compositing computation is to be performed.  BCarray(Optional)   An array of component values specifying the colour to be  used as the backdrop against whic h to composite the transparency  group XObject  G. This entry shall be consul ted only if the subtype  S is Luminosity . The array shall consist of  n numbers, where  n is the  number of components in the colour space specified by the  CS entry in  the group attributes dictionary (see  Transparency Group XObjects ). Default value: the colour spaces initial value, representing black.  TRfunction or name (Optional)  A function object (see  Functions ) specifying the transfer  function to be used in deriving the mask values. The function shall  accept one input, the computed group alpha or luminosity (depending  on the value of the subtype  S), and shall return one output, the  resulting mask value. The input shall be in the range 0.0 to 1.0. The  computed output shall be in the range  0.0 to 1.0; if it  falls outside this  range, it shall be forced to the nearest valid value. The name  Identitymay be specified in place of a function object to designate the identity  function. Default value:  Identity.",""],"356":["PDF 32000-1:2008 348 ' Adobe Systems Incorporated 2008  All rights reserved If the image data is preblended, the  matte colour shall be specified by a  Matte  entry in the soft-mask image  dictionary (see  Ta b l e  145 ). The preblending computation, performed  independently for each component, shall  bewhere cc  is the value to be provided in the image source data  c  is the original image component value  m is  the matte col our component value  D is  the corresponding mask sample  This computation shall use actual colour  component values, with the effects of the  Filter and  Decode transformations already performed. The computation shall  be the same whether the colour space is additive or  subtractive.  Table  145   Restrictions on the entries in a soft-mask image dictionary   KeyRestriction Type If present, shall be  XObject. SubtypeShall be  Image. Width If a  Matte entry (see  Ta b l e  146 ) is present, shall be the  same as the Width  value of the parent image; otherwise  independent of it. Both images shall be mapped to the  unit square in user space (as are all images), regardless  of whether the samples coincide individually.  HeightSame considerations as for  Width . ColorSpace Required; shall be  DeviceGray . BitsPerComponent Required.  Intent Ignored.  ImageMask Shall be  false or absent.  MaskShall be absent.  SMaskShall be absent.  Decode Default value: [  0 1 ]. Interpolate Optional. Alternates Ignored.  Name Ignored.  StructParent Ignored.  IDIgnored.  OPI Ignored.","c’mDcmu+=",""],"357":["' Adobe Systems Incorporated 2008  All rights reserved 349PDF 32000-1:2008 When preblended image data is used in transparency blending and compositing computations, the results shall  be the same as if the original, unblended image data were used and no matte colour were specified. In  particular, the inputs to the blend function shall be the original colour values. To derive  c from cc, the conforming  reader may sometimes need to invert the formula shown previously. The resulting  c value shall lie within the  range of colour component values for the image colour space.  The preblending computation shall be done in the colour space specified by the parent images  ColorSpace entry. This is independent of the group colour space into which the image may be painted. If a colour  conversion is required, inversion of the preblending sha ll precede the colour conversion. If the image colour  space is an  Indexed  space (see  Indexed Colour Spaces ), the colour values in the colour table (not the index  values themselves) shall be preblended.  11.6.6 Transparency Group XObjects A transparency group is represented in PD F as a special type of group XObject (see  Group XObjects ) called a tr ansparency group XObject . A group XObject is in turn a type of fo rm XObject, distinguished by the presence  of a Group entry in its form dictionary (see  Form Dictionaries ). The value of this entry is a subsidiary  group  attributes dictionary  defining the properties of the group. The fo rmat and meaning of the dictionarys contents  shall be determined by its  group subtype , which is specified by the dictionarys  S entry. The entries for a  transparency group (subtype  Transparency ) are shown in  Table  147 . A page object (see  Page Objects ) may also have a Group entry, whose value is a group attributes dictionary  specifying the attributes of the page group (see  Page Group ). Some of the dictionary entries are interpreted  slightly differently for a page group than for a transparen cy group XObject; see their descriptions in the table for  details.  Table  146    Additional entry in a soft-mask image dictionary   KeyType Value Mattearray(Optional; PDF  1.4) An a rray of component values  specifying the matte colour  with which the image data in the parent  image shall have been preblended. The  array shall consist of  n numbers, where  n is the number of components in the  colour space specified by the  ColorSpace  entry in the parent images image  dictionary; the numbers shall be valid colo ur components in that colour space. If  this entry is absent, the imag e data shall not be preblended.  Table  147    Additional entries specific to a transparency group attributes dictionary   KeyType Value Sname (Required)  The group subtype , which identifies the type of group whose  attributes this dictionary describes; shall be  Transparency  for a transparency group.",""],"358":["PDF 32000-1:2008 350 ' Adobe Systems Incorporated 2008  All rights reserved CSname  or array(Sometimes required)  The group colour space, which is used for the  following purposes:   As the colour space into which colours shall be converted when  painted into the group   As the blending colour space in which objects shall be composited  within the group (see  Blending Colour Space )  As the colour space of the group as a whole when it in turn is painted  as an object onto its backdrop  The group colour space shall be any device or CIE-based colour space  that treats its components as indep endent additive or subtractive values  in the range 0.0 to 1.0, subject to the restrictions described in  11.3.4,  \"Blending Colour Space.\"  These restrictions exclude  Lab and lightness- chromaticity ICCBased  colour spaces, as well as the special colour  spaces  Pattern, Indexed , Separation , and  DeviceN . Device colour  spaces shall be subject to remapping according to the  DefaultGray, DefaultRGB, and  DefaultCMYK  entries in the  ColorSpace  subdictionary  of the current resource dictionary (see  Default Colour Spaces ). Ordinarily, the  CS entry may be present only for isolated transparency  groups (those for which  I is true ), and even then it is optional. However,  this entry shall be present in the  group attributes dictionary for any  transparency group XObject that has no  parent group or page from which  to inheritin particular, one that is the value of the  G entry in a soft-mask  dictionary of subtype  Luminosity  (see Soft-Mask Dictionaries ). Additionally, the  CS entry may be present in the group attributes  dictionary associated with a page object, even if  I is false or absent. In  the normal case in which the page is imposed directly on the output  medium, the page group is effectiv ely isolated regardless of the  I value,  and the specified  CS value shall therefore be honoured. But if the page is  in turn used as an element of some other page and if the group is non- isolated,  CS shall be ignored and the colour space shall be inherited from  the actual backdrop with which  the page is composited (see  Page  Group ). Default value: the colour space of the parent group or page into which this  transparency group is painted. (The par ents colour space in turn may be  either explicitly spec ified or inherited.)  For a transparency group XObject  used as an annotation appearance  (see Appearance Streams ), the default colour space shall be inherited  from the page on which the annotation appears.  Iboolean (Optional)   A flag specifying whether the transparency group is isolated  (see Isolated Groups ). If this flag is  true, objects within the group shall  be composited against a fully transparent initial backdrop; if  false, they shall be composited against the groups backdrop. Default value:  false. In the group attributes dictionary for a  page, the interpretation of this entry  shall be slightly altered. In the normal case in which the page is imposed  directly on the output  medium, the page group is effectively isolated and  the specified  I value shall be ignored. But if the page is in turn used as an  element of some other page, it sh all be treated as if it were a  transparency group XObject; the  I value shall be interpreted in the normal  way to determine whether the page group is isolated.  Table 147   Additional entries specific to a tr ansparency group attributes dictionary  (continued) Key Type Value",""],"359":["' Adobe Systems Incorporated 2008  All rights reserved 351PDF 32000-1:2008 The transparency group XObjects content stream shall define the graphics objects belonging to the group.  When applied to a transparency group XObject, the  Do operator shall execute its content stream and shall  composite the resulting group colour, shape, and opacity into the groups parent group or page as if they had  come from an elementary graphics object.  Do shall perform the following actions in addition to the normal ones  for a form XObject (as described in  Form XObjects ):  If the transparency group is non-isolated (the value of the  I entry in its group attributes dictionary is  false ), its initial backdrop, within the bound ing box specified by the XObjects  BBox entry, shall be defined to be  the accumulated colour and alpha of the parent group  or pagethat is, the result of everything that has  been painted in the parent up to that point. However,  if the parent is a knockout  group, the initial backdrop  shall be the same as that of the parent. If the group is isolated ( I is true ), its initial backdrop shall be  defined to be transparent.   Before execution of the transparency group XObjec ts content stream, the current blend mode in the  graphics state shall be initialized to  Normal, the current stroking and nonstr oking alpha constants to 1.0,  and the current soft mask to  None. NOTE 1 The purpose of initializing these graphics state parame ters at the beginning of execut ion is to ensure that they  are not applied twice: once when member objects are pa inted into the group and again when the group is  painted into the parent group or page.   Objects painted by operators in the transparency group  XObjects content stream shall be composited into  the group according to the rules described in  11.3.3, \"Basic Compositing Formula.\"  The knockout flag ( K) in the group attributes dictionary and the transpar ency-related parameters of the graphics state shall be  honoured during this computation.   If a group colour space ( CS) is specified in the group attributes  dictionary, all painting operators shall  convert source colours to that colour space before compositing objects into the group, and the resulting  colour at each point shall be interpreted in that colo ur space. If no group col our space is specified, the  prevailing colour space shall be dynamically inherit ed from the parent group or page. (If not otherwise  specified, the page groups colour space shall be inherited from the native colour space of the output  device.)   After execution of the transparency group XObjects content stream, the graphics state shall revert to its  former state before the invocation of the  Do operator (as it does for any form XObject). The groups  shapethe union of all objects painted into the gr oup, clipped by the group XObjects bounding box  shall then be painted into the parent group or page, using the groups accumulated colour and opacity at  each point.  If the  Do operator is invoked more than once for a given  transparency group XObject, each invocation shall be  treated as a separate transparency group. That is, the result shall be as if the group were independently  composited with the backdrop on each invocation.  NOTE 2 Applications that perform caching of rendered fo rm XObjects shall take this requirement into account.  The actions described previously shall occur only for  a transparency group XObjecta form XObject having a  Group entry that designates a group attributes subdictionary whose group subtype ( S) is Transparency . An  ordinary form XObjectone having no  Group entryshall not be subject to any grouping behaviour for  Kboolean (Optional)   A flag specifying whether the transparency group is a knockout  group (see  Knockout Groups ). If this flag is  false , later objects within the  group shall be composited with earlier  ones with which they overlap; if  true, they shall be composited with t he groups initial backdrop and shall  overwrite (knock out) any earlier ov erlapping objects. Default value:  false. Table 147   Additional entries specific to a tr ansparency group attributes dictionary  (continued) Key Type Value",""],"360":["PDF 32000-1:2008 352 ' Adobe Systems Incorporated 2008  All rights reserved transparency purposes. That is, the graphics objects it contains shall be composited individually, just as if they  were painted directly into the parent group or page.  11.6.7 Patterns and Transparency In the transparent imaging model, the graphics objects making up the pattern cell of a tiling pattern (see  Tiling  Patterns ) may include transparent objects and transparency groups. Transparent compositing may occur both  within the pattern cell and between it and the backdrop wh erever the pattern is painted. Similarly, a shading  pattern ( Shading Patterns ) composites with its backdrop as if t he shading dictionary were applied with the  shoperator.  In both cases, the pattern definition  shall be treated as if it were implicitly enclosed in a non-isolated  transparency group: a non-knockout gr oup for tiling patterns, a knockout  group for shading  patterns. The  definition shall not inherit the current values of the graphi cs state parameters at the time it is evaluated; those  parameters shall take effect only when the resulting pa ttern is later used to paint an object. Instead, the  graphics state parameters shall be initialized as follows:   As always for transparency groups, those parameters  related to transparency (blend mode, soft mask, and  alpha constant) shall be initialized to their standard default values.   All other parameters shall be  initialized to their values  at the beginning of the content stream (such as a  page or a form XObject) in which the pattern shall be  defined as a resource. (This is the normal behaviour  for all patterns, in both the opaque and transparent imaging models.)   In the case of a shading pattern, the parameter  values may be augmented by the contents of the  ExtGState  entry in the pattern dictionary (see  Shading Patterns ). Only those parameters that affect the  sh ope rator, such as the current transformation matrix  and rendering intent, shall be used. Parameters that  affect path-painting operators shall  not be used, since the execution of  sh does not entail painting a path.   If the shading dictionary has a  Background  entry, the patterns implicit transparency group shall be filled  with the specified background colour before the  sh operator is invoked.  When the pattern is later used to paint a graphics obje ct, the colour, shape, and opacity values resulting from  the evaluation of the pattern definition shall be used as the objects source colour  (Cs ), obje ct shape  (fj ), and   object opacity  (qj ) in the transparency compositing  formulas. This painting operation  is subject to the values of  the graphics state parameters in effect  at the time, just as in painting  an object with a constant colour.  NOTE 1 Unlike the opaque imaging model, in which the patt ern cell of a tiling pattern may be evaluated once and then  replicated indefinitely to fill the painted area, the effect in the general transparent  case is as if the pattern  definition were reexecuted independently for each tile, taki ng into account the colour of the backdrop at each  point. However, in the common case in which the patt ern consists entirely of objects painted with the  Normal blend mode, this behaviour can be optimi zed by treating the pattern cell as if  it were an isolated group. Since in  this case the results depend only on the colour, shape, and  opacity of the pattern cell  and not on those of the  backdrop, the pattern cell can be evaluated once and  then replicated, just as in opaque painting.  NOTE 2 In a raster-based implementation of tili ng, all tiles should be treated  as a single transparency group. This  avoids artifacts due to multiple marking of pi xels along the boundaries between adjacent tiles.  The foregoing discussion applies to both coloured ( PaintType  1) and uncoloured ( PaintType  2) tiling patterns.  In the latter case, the restriction that an uncoloured patterns definition shall not specify colours extends as well  to any transparency group that the definition may inclu de. There are no corresponding restrictions, however, on  specifying transparency-related parameters in the graphics state.",""],"361":["' Adobe Systems Incorporated 2008  All rights reserved 353PDF 32000-1:2008 11.7 Colour Space and Rendering Issues 11.7.1 General This sub-clause describes the interact ions between transparency and other  aspects of colour specification and  rendering in the PDF imaging model.  11.7.2 Colour Spaces for Transparency Groups As discussed in  11.6.6, \"Transparency Group XObjects,\"  a transparency group shall either have an explicitly  declared colour space of its own or inherit that of its pa rent group. In either case, the colours of source objects  within the group shall be converted to the groups colour  space, if necessary, and all blending and compositing  computations shall be done in that space (see  Blending Colour Space ). The resulting colours shall then be  interpreted in that colour space when the group  is subsequently composited with its backdrop.  NOTE 1 Under this arrangement, it is envisioned that all or  most of a given piece of artwork will be created in a single  colour spacemost likely, the working colour space of th e application generating it. Th e use of multiple colour  spaces typically will arise only when assembling indepe ndently produced artwork onto a page. After all the  artwork has been placed on the page, the conversion from  the groups colour space to the pages device colour  space will be done as the last step, without any furthe r transparency compositi ng. The transparent imaging  model does not require that this conv ention be followed, however; the reason  for adopting it is to avoid the loss  of colour information and the introduction of errors  resulting from unnecessary colour space conversions.  Only an isolated group may have an explicitly declared colour space of its own. Non-isolated groups shall  inherit their colour space from the parent group (subjec t to special treatment for the page group, as described  in Page Group ).  NOTE 2 This is because the use of an ex plicit colour space in a non-isolated  group would require converting colours  from the backdrops colour space to that of the group in order to perform the compositing computations. Such  conversion may not be possible (since some colour conversions can be performed only in one direction), and  even if possible, it would entail an excessive number of colour conversions.  NOTE 3 The choice of a group colour space has signi ficant effects on the re sults that are produced:  As noted in  11.3.4, \"Blending Colour Space,\"  the results of compositing in  a device colour space is device- dependent. For the compositing computations to work in  a device-independent way, the groups colour space  should be CIE-based.  A consequence of choosing a CIE-based group colour sp ace is that only CIE-bas ed spaces can be used to  specify the colours of objects within the group. This is  because conversion from devic e to CIE-based colours is  not possible in general; the defined conversions work onl y in the opposite direction. See further discussion  subsequently.  The compositing computations and blend functions  generally compute linear combinations of colour  component values, on the assumption that the component values themselves are linear. For this reason, it is  usually best to choose a group colour space that has a  linear gamma function. If a nonlinear colour space is  chosen, the results are still well- defined, but the appearance may not  match the users expectations.  NOTE 4 The  CIE-based  sRGB colour space (see  CIE-Based Colour Spaces ) is nonlinear and hence may be  unsuitable for use as a group colour space.  NOTE 5 Implementations of the transparent imaging model s hould use as much precision as possible in representing  colours during compositing computations and in the accumulated group results. To minimize the accumulation  of roundoff errors and avoid additional errors arising fr om the use of linear group co lour spaces, more precision  is needed for intermediate results than is typically used to r epresent either the original  source data or the final  rasterized results.  If a groups colour spacewhether spec ified explicitly or inherited from the parent groupis CIE-based, any  use of device colour spaces for painting objects shall  be subject to special treatment. Device colours cannot be  painted directly into such a group, since there is no generally defined method for converting them to the CIE- based colour space. This problem arises in the following cases:",""],"362":["PDF 32000-1:2008 354 ' Adobe Systems Incorporated 2008  All rights reserved DeviceGray , DeviceRGB , and  DeviceCMYK  colour spaces, unless remapped to default CIE-based  colour spaces (see  Default Colour Spaces )  Operators (such as  rg) that specify a device colour space im plicitly, unless that space is remapped   Special colour spaces whose base or underlying spac e is a device colour space, unless that space is  remapped  The default colour space remapping mechanism should  always be employed when defining a transparency  group whose colour space is CIE-based. If a device co lour is specified and is  not remapped, it shall be  converted to the CIE-based colour space in an implementation-dependent fashion, producing unpredictable  results. NOTE 6 The foregoing restrictions do not apply if th e groups colour space is implicitly converted to  DeviceCMYK , as  discussed in Implicit Conversion of CIE-Based Colour Spaces . 11.7.3 Spot Colours and Transparency The foregoing discussion of colour  spaces has been concerned with  process colours those produced by  combinations of an output devices process colorants. Pr ocess colours may be specified directly in the devices  native colour space (such as  DeviceCMYK ), or they may be produced by conversion from some other colour  space, such as a CIE-based ( CalRGB or  ICCBased ) space. Whatever means is used to specify them, process  colours shall be subject to conversion to and from the groups colour space.  A spot colo ur  is an additional colour component, independent of those used to produce  process colours. It may  represent either an additional separation to be prod uced or an additional colorant to be applied to the  composite page (see  Separation Colour Spaces  and  DeviceN Colour Spaces ). The colour component value,  or  tint, for  a spot colour specifies the concentration of the  corresponding spot colorant. Tints are conventionally  represented as subtra ctive, rather than additive, values.  Spot colours are inherently device-dependent and are not always available. In the opaque imaging model, each  use of a spot colour component in a  Separation  or  DeviceN  colour space is accompanied by an  alternate  colour space  and a  tint transformation function  for mapping tint values into that  space. This enables the colour  to be approximated with process colorants when the corr esponding spot colorant is not available on the device.  Spot colours can be accommodated straightforwardly in  the transparent imaging model (except for issues  relating to overprinting, discussed in  Overprinting and Transparency ). When an object is painted transparently  with a spot colour component that is  available in the output device, that colour shall be composited with the  corresponding spot colour component of the backdrop, in dependently of the composit ing that is performed for  process colours. A spot colour retains its own identity; it  shall not be subject to conversion to or from the colour  space of the enclosing transparency group or page. If the  object is an element of a transparency group, one of  two things shall happen:   The group shall maintain a separate colour value for each spot colour component, independently of the  groups colour space. In effect, the spot colour pass es directly through the group hierarchy to the device,  with no colour conversions performed. However, it shall still be  subject to blending and compositing with  other objects that use the same spot colour.   The spot colour shall be converted to its alternate colour space. The resulting colour shall then be subject  to the usual compositing rules for process colours. In  particular, spot colours shall not be available in a  transparency group XObject that is used to define a soft mask; the alternate colour space shall always be  substituted in that case.  Only a single shape value and opacity value shall be maintained at each point in the computed group results;  they shall apply to both process and spot colour comp onents. In effect, every object shall be considered to  paint every existing colour component, both process and  spot. Where no value has been explicitly specified for  a given component in a given object, an additive value  of 1.0 (or a subtractive tint value of 0.0) shall be  assumed. For instance , when painting an object wi th a colour specified in a  DeviceCMYK  or  ICCBased  colour space, the process colour components shall be painted as specified and the spot colour components shall be",""],"363":["' Adobe Systems Incorporated 2008  All rights reserved 355PDF 32000-1:2008 painted with an additive value of 1.0. Likewise, when  painting an object with  a colour specified in a  Separation colour space, the named spot colour shall be painted  as specified and all other components (both process  colours and other spot colours) shall be painted with an  additive value of 1.0. The consequences of this are  discussed in  11.7.4, \"Overprinting and Transparency.\" Under the opaque imaging model, a  Separation  or DeviceN colour space may specify the individual process  colour components of the output device, as if they were spot colours. However, within a transparency group,  this should be done only if the group inherits the native  colour space of the output  device (or is implicitly  converted to  DeviceCMYK , as discussed in  8.6.5.7, \"Implicit Co nversion of CIE-Based Colour Spaces\" ). If any  other colour space has been specified for the group, the Separation or  DeviceN  colour space shall be  converted to its alternate colour space. NOTE In general, within a transparency gr oup containing an explicitly-specified  colour space, the group’s process  colour components are different from  the device’s process colour components. Conversion to the device’s  process colour components occurs only after all colour compositing computations for the group have been  completed. Consequently, the device’s process colo ur components are not accessible within the group. For instance, outside of any transparency gr oup, a device whose native colour space is  DeviceCMYK  has a  Cyan  component that may be specified in a  Separation  or DeviceN  colour space. On the other hand, within a  transparency group whose colour space is  ICCBased , the group has no  Cyan  component available to be  painted. 11.7.4 Overprinting and Transparency 11.7.4.1 General In the opaque imaging model, overprinting is contro lled by two parameters of the graphics state: the  overprint  parameter  and the  overprint mode  (see  Overprint Control ). Painting an object causes  some specific set of  device colorants to be marked, as determined by the cu rrent colour space and current colour in the graphics  state. The remaining colorants shall be either erased  or left unchanged, depending on whether the overprint  parameter is  false  or  true . When the current colour space is  DeviceCMYK , the overprint mode parameter  additionally enables this sele ctive marking of colorants to be applied to individual colour components according  to whether the component va lue is zero or nonzero.  NOTE 1 Because this model of overprinting deals directly  with the painting of device co lorants, independently of the  colour space in which source colours have been specif ied, it is highly device-dependent and primarily  addresses production needs rather than  design intent. Overprinti ng is usually reserved for opaque colorants or  for very dark colours, such as black. It is also invo ked during late-stage production operations such as trapping  (see Trapping Support ), when the actual set of device colorants has already been determined.  NOTE 2 Consequently, it is best to th ink of transparency as taking place in  appearance space, but overprinting of  device colorants in device space. This means that colo rant overprint decisions should be made at output time,  based on the actual resultant colorants of any transp arency compositing operation.  On the other hand, effects  similar to overprinting can be achieved in a device-independent manner by taking advantage of blend modes,  as described in the next sub-clause.  11.7.4.2 Blend Modes and Overprinting As stated in  11.7.3, \"Spot Colours and Transparency,\"  each graphics object that  is painted shall affect all  existing colour components: all process colorants in the transparency groups colour space as well as any  available spot colorants. For colour components whose va lue has not been specified, a source colour value of  1.0 shall be assumed; when objects are fully opaque and the  Normal blend mode is used, this shall have the  effect of erasing those components. This treatment is  consistent with the behaviour of the opaque imaging  model with the overprint parameter set to  false . The transparent imaging model defines some blend modes, such as  Darken, that can be used to achieve  effects similar to overprinting. The blend function for  Darken  is","Bcbcs()min c bcs()=",""],"364":["PDF 32000-1:2008 356 ' Adobe Systems Incorporated 2008  All rights reserved In this blend mode, the result of co mpositing shall always be the same as the backdrop colour when the source  colour is 1.0, as it is for all unsp ecified colour components. When the backdrop is fully opaque, this shall leave  the result colour unchanged from that of the backdrop.  This is consistent with the behaviour of the opaque  imaging model with the overprint parameter set to  true . If the object or backdrop is not fully opaque, the action s described previously are altered accordingly. That is,  the erasing effect shall be reduced, and overprinting an  object with a colour value of 1.0 may affect the result  colour. While these results may or may not be useful, they  lie outside the realm of the overprinting and erasing  behaviour defined in the opaque imaging model.  When process colours are overprinted or erased (because a spot colour is being painted), the blending  computations described previously shall be done independently for each component in the groups colour  space. If that space is different from the native col our space of the output device, its components are not the  devices actual process colorants; the blending computat ions shall affect the process colorants only after the  groups results have been converted to the device colour  space. Thus the effect is different from that of  overprinting or erasing the devices process colorants directly. On the other hand, this is a fully general  operation that works uniformly, regardless of the type of object or of the computations that produced the source  colour.  NOTE 1 The discussion so far has focused on those colour co mponents whose values are not specified and that are to  be either erased or left unchanged. However, the  Normal  or  Darken  blend modes used for these purposes  may not be suitable for use on those components whose colour values are specified. In particular, using the  Darken  blend mode for such components would preclude overprinting a dark colour with a lighter one.  Moreover, some other blend mode may be specifically desired for those components.  The PDF graphics state specifies only one current blend  mode parameter, which shall always apply to process  colorants and sometimes to spot colo rants as well. Specifically, only se parable, white-preserving blend modes  shall be used for spot colours. If the specified blend mo de is not separable and white-preserving, it shall apply  only to process colour components, and the  Normal blend mode shall be substituted for spot colours.  A blend mode is  white-preserving  if its blend function  B has the property that  B (1.0,  1.0)  = 1.0.  NOTE 2 Of the standard separable blend modes listed in  Table  136  in 11.3.5, \"Blend Mode,\"  all except  Difference and Exclusion are white-preserving. This ensures that when  objects accumulate in an isolated transparency  group, the accumulated values for unspecified components  remain 1.0 as long as only white-preserving blend  modes are used. The groups results can then be overprinted using  Darken  (or other useful modes) while  avoiding unwanted interactions with components whose va lues were never specified within the group.  11.7.4.3 Compatibility with Opaque Overprinting Because the use of blend modes to achieve effects sim ilar to overprinting does not make direct use of the  overprint control parameters in the graphics state,  such methods are usable only by transparency-aware  applications. For compatibility with th e methods of overprint control used  in the opaque imaging model, a  special blend mode, CompatibleOverprint, is provided  that consults the overprint-related graphics state  parameters to compute its result. This mode shall apply only when painti ng elementary graphics objects (fills,  strokes, text, images, and shadings). It shall not be in voked explicitly and shall not be identified by any PDF  name object; rather, it shall be imp licitly invoked whenever an elementary  graphics object is painted while  overprinting is enabled (that is, when the ov erprint parameter in the graphics state is  true ). NOTE 1 Earlier designs of the  transparent imaging model included an additional blend mode named  Compatible , which explicitly invoked the CompatibleOverprint blen d mode described here. Because CompatibleOverprint is  now invoked implicitly whenever appropriate , it is never necessary to specify the  Compatible  blend mode for  use in compositing.  The Compatible blend mode shall be treated as equivalent to  Normal . The value of   the blend function  B (cb , cs ) in the CompatibleOverprin t mode shall be either  cb or cs , depending  on the setting of the overprint mode parameter, the current and group colour spaces, and the source colour  value cs :",""],"365":["' Adobe Systems Incorporated 2008  All rights reserved 357PDF 32000-1:2008  If the overprint mode is 1 (nonzero overprint mode) and the current colour space and group colour space  are both  DeviceCMYK , then process colour components with nonzero values shall replace the  corresponding component values of the backdrop;  components with zero values leave the existing  backdrop value unchanged. That is, the value of the blend function  B (cb , cs ) shall be the source  component  cs for any process ( DeviceCMYK ) colour component whose (sub tractive) colour value is  nonzero; otherwise it shall be the backdrop component  cb . For spot colour comp onents, the value shall  always be  cb .  In all other cases, the value of  B (cb , cs ) shall be cs for all colour components specified in the current colour  space, otherwise  cb . EXAMPLE 1 If the current colour space is  DeviceCMYK  or CalRGB , the value of the blend function is  cs for process  colour components and  cb for spot components. On the other ha nd, if the current colour space is a  Separation  space representing a spot colour component, the value is  cs for that spot component and  cbfor all process components and all other spot components.  NOTE 2 In the previous descriptions, the term  current colour space  refers to the colour space used for a painting  operation. This may be specified  by the current colour space para meter in the graphics state (see  Colour  Values ), implicitly by colour operators such as  rg (Colour Operators ), or by the  ColorSpace  entry of an  image XObject ( Image Dictionaries ). In the case of an  Indexed  space, it refers to the base colour space (see  Indexed Colour Spaces ); likewise for  Separation  and  DeviceN  spaces that revert to their alternate colour  space, as described under  Separation Colour Spaces  and  DeviceN Colour Spaces . If the current blend mode when CompatibleOverprint is invoked is any mode other than  Normal, the object  being painted shall be implicitly trea ted as if it were defined in a non- isolated, non-knockout transparency group  and painted using the CompatibleOverprint blend mode.  The groups results shall then be painted using the  current blend mode in the graphics state.  NOTE 3 It is not necessary to create  such an implicit transparency gr oup if the current blend mode is  Normal; simply  substituting the CompatibleOverprint blend mode while  painting the object produces equivalent results. There  are some additional cases in which the implicit transparency group can be optimized out.  EXAMPLE 2 Figure L.20  in Annex L shows the effects of all four possible combinations of blending and overprinting,  using the  Screen blend mode in the  DeviceCMYK  colour space. The label overprint enabled means  that the overprint parameter in the graphics state is  true and the overprint mode is 1. In the upper half of  the figure, a light green oval is painted opaquely (opacity  = 1.0) over a backdrop shading from pure yellow  to pure magenta. In the lower half, the same object is painted with transparency (opacity  = 0.5). 11.7.4.4 Special Path-Painting Considerations The overprinting considerations discussed in  11.7.4.3, \"Compatibility  with Opaque Overprinting,\"  also affect  those path-painting operations  that combine filling and stroking a path in a single operation.  These include the B, B*, b, and  b* operators (see  Path-Painting Operators ) and the painting of glyphs with text rendering mode  2 or 6 ( Text Rendering Mode ). For transparency compositing purposes , the combined fill and stroke shall be  treated as a single graphics object, as if they were enc losed in a transparency group. This implicit group is  established and used as follows:   If overprinting is enabled (the overprin t parameter in the graphics state is  true ) and the current stroking  and nonstroking alpha constants are equal, a non-i solated, non-knockout transparency group shall be  established. Within the group, the f ill and stroke shall be performed with an alpha va lue of 1.0 but with the  CompatibleOverprint blend mode. The group results sha ll then be composited with the backdrop, using the  originally specified alpha and blend mode.   In all other cases, a non-isolated  knockout group shall be established. Wi thin the group, th e fill and stroke  shall be performed with their resp ective prevailing alpha constants  and the prevailing blend mode. The group results shall then be composited with the backdrop, using an alpha value of 1.0 and the  Normalblend mode.",""],"366":["PDF 32000-1:2008 358 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 1 In the case of showing text with the combined fil ling and stroking text rendering modes, this behaviour is  independent of the text knockout parameter in the graphics state (see  Text Knockout ). NOTE 2 The purpose of these rules is to avoid having a non-opa que stroke composite with the result of the fill in the  region of overlap, which would produce a double border ef fect that is usually undesirable. The special case  that applies when the overprint parameter is  true is for backward compatibility  with the overprinting behavior of  the opaque imaging model. If a desired effect cannot  be achieved with a combined filling and stroking operator  or text rendering mode, it can be achieved by specifying  the fill and stroke with separate path objects and an  explicit transparency group.  NOTE 3 Overprinting of the stroke over the fill does not work  in the second case described previously (although either  the fill or the stroke can still overprint the backdrop).  Furthermore, if the overprint graphics state parameter is  true, the results are discontinuous at the transition betw een equal and unequal values of the stroking and  nonstroking alpha constants. For this r eason, it is best not to use overprin ting for combined filling and stroking  operations if the stroking and nonstroking al pha constants are being varied independently.  11.7.4.5 Summary of Ov erprinting Behaviour Ta b l e s   148  and  149  summarize the overprinting and erasing behavio ur in the opaque and transparent imaging  models, respectively.  Ta b l e  148  shows the overprinting rules used  in the opaque model, as described in  Overprint Control . Table  149 shows the equivalent rules as implemented by the CompatibleOverprint blend  mode in the transparent model. The names  OP and OPM in the tables refer to the overprint and overprint mode  parameters of the graphics state.  Table  148    Overprinting behavior in the opaque imaging model   Source colour  spaceAffected colour  component Effect on colour component OP false OP true, OPM 0OP true,  OPM 1DeviceCMYK ,specified directly, not in a sampled  imageC, M, Y, or KPaint source Paint source Paint source if z 0.0 Do not paint if    0.0Process colorant other than  CMYKPaint source Paint source Paint source Spot colorant Paint 0.0Do not paint Do not paint Any process colour space (including  other cases of DeviceCMYK )Process colorantPaint source Paint source Paint source Spot colorant Paint 0.0Do not paint Do not paint Separation  orDeviceN Process colorantPaint 0.0Do not paint Do not paint Spot colorant  named in source  space Paint source Paint source Paint source Spot colorant not  named in source  space Paint 0.0Do not paint Do not paint",""],"367":["' Adobe Systems Incorporated 2008  All rights reserved 359PDF 32000-1:2008 Colour component values are represented in these tables  as subtractive tint values because overprinting is  typically applied to subtractive colora nts such as inks rather than to additive ones such as phosphors on a  display screen. The CompatibleOverprint blend mode is ther efore described as if it took subtractive arguments  and returned subtractive results. In reality, however,  CompatibleOverprint (like all blend modes) shall treat  colour components as additive values; subtractiv e components shall be complemented before and after  application of the blend function.  NOTE 1 This note describes an important difference between  Ta b l e  148  and  Table  149. In Ta b l e  148, the process  colour components being discussed are the actual devi ce colorantsthe colour components of the output  devices native colour space ( DeviceGray , DeviceRGB , or DeviceCMYK ). In Ta b l e  149, the process colour  components are those of the groups colour space, whic h is not necessarily the same as that of the output  device (and can even  be something like  CalRGB or ICCBased ). For this reason, the process colour  components of the group colour space cannot be  treated as if they were spot colours in a  Separation  or DeviceN  colour space (see  Spot Colours and Transparency ). This difference between opaque and  transparent overprinting and erasing rules arises only wit hin a transparency group (including the page group, if  its colour space is different from the native colour spac e of the output device). Th ere is no difference in the  treatment of spot  colour components.  NOTE 2Ta b l e  149  has one additional row at the bottom. It applies  when painting an object that is a transparency group  rather than an elementary object (fill, stro ke, text, image, or shading). As stated in  11.7.3, \"Spot Colours and  Transparency,\"  a group is considered to paint all colour components, both process and spot. Colour  components that were not explicitly painted by any obj ect in the group have an additive colour value of 1.0  (subtractive tint 0.0). Since no information is retained  about which components were actually painted within the  group, compatible overprinting is not possible in this case; the CompatibleOverprint blend mode reverts to  Normal , with no consideration of the overprint and overprint mode parameters. A transparency-aware  conforming writer can choose a more suitable blend mode, such as  Darken , to produce an effect similar to  overprinting.  Table  149    Overprinting behavior in the transparent imaging model   Source color space Affected colour  component of  group colour  space Value of blend function  B (cb , cs ) expressed as tint OP false OP true,  OPM 0OP true,  OPM 1DeviceCMYK ,specified directly, not in a sampled  imageC, M, Y, or Kcscscs if cs z 0.0cb if  cs   0.0Process colour component other than CMYKcscscsSpot colorant cs (  0.0)cbcbAny process colour space (including  other cases of DeviceCMYK )Process colour componentcscscsSpot colorant cs (  0.0)cbcbSeparation  orDeviceN Process colour componentcs (  0.0)cbcbSpot colorant  named in source  space csc","scsSpot colorant not  named in source  space cs (  0.0)cbcbA group (not an  elementary object) All colour  components cscscs",""],"368":["PDF 32000-1:2008 360 ' Adobe Systems Incorporated 2008  All rights reserved 11.7.5 Rendering Parameters and Transparency 11.7.5.1 General The opaque imaging model has several graphics state parameters dealing with the rendering of colour: the  current halftone (see  Halftone Dictionaries ), transfer functions ( Transfer Functions ), rendering intent  (Rendering Intents ), and black-generation and undercolor-removal functions ( Conversion from DeviceRGB  to DeviceCMYK). All of these rendering parameters may be specified on a per-object basis; they control how a  particular object is rendered. When all objects are opaque, it is e asy to define what this means. But when they  are transparent, more than one object  may contribute to the colour at a given point; it is unclear which  rendering parameters to apply in an area where transpar ent objects overlap. At the same time, the transparent  imaging model should be consistent with the opaque  model when only opaque objects are painted.  There are two categories of rendering parameters that  are treated somewhat differently in the presence of  transparency. In the first category  are halftone and transfer functions, wh ich are applied only when the final  colour at a given point on the page is known. In the se cond category are rendering intent, black generation, and  undercolor removal, which are applied whenever colour s are converted from one colour space to another. 11.7.5.2 Halftone and Transfer Function When objects are transparent, rendering of an object  does not occur when the object is specified but at some  later time. Hence, the implementation shall keep track of the halftone and transfer function parameters at each  point on the page from the time they are specified unt il the time rendering actually occurs. This means that  these rendering parameters shall be associated with regions of the page rather than with individual objects. The halftone and transfer function to be used at any give n point on the page shall be t hose in effect at the time  of painting the last (topmost) elementary graphics objec t enclosing that point, but only if the object is fully  opaque. Only elementary objects shall be relevant; the rendering parameters associated with a group object  are ignored. The  topmost object at any point shall be defined to be the topmost elementary object in the entire  page stack that has a nonzero object shape value  (fj ) at  that point (that is, for which the point is inside the  object). An object shall be considered to be  fully opaque  if all of the following condit ions hold at the time the  object is painted:   The current alpha constant in the graphics state  (stroking or nonstroking, depending on the painting  operation) is 1.0.   The current blend mode in the graphics state is  Normal (or Compatible , which is treated as equivalent to  Normal).   The current soft mask in  the graphics state is  None. If the object is an image XObject, there is not an  SMask entry in its image dictionary.   The foregoing three conditions were also true at the time the  Do operator was invoked for the group  containing the object, as well as for any direct ancestor groups.   If the current colour is a tiling pattern , all objects in the definition of its  pattern cell also satisfy the foregoing  conditions. Together, these conditions ensure that only the object it self shall contribute to the colour at the given point,  completely obscuring the backdrop. For portions of the  page whose topmost object is not fully opaque or that  are never painted at all, the default halftone and transfer function for the page shall be used.  If a graphics object is painted with overprinting enable dthat is, if the applicable (stroking or nonstroking)  overprint parameter in the graphics state is  true the halftone and transfer functi on to use at a given point shall  be determined independently for each colour co mponent. Overprinting implicitly invokes the  CompatibleOverprint blend mode (see  Compatibility with Opaque Overprinting ). An object shall be considered  opaque for a given component only if CompatibleOverprin t yields the source colour (not the backdrop colour)  for that component.",""],"369":["' Adobe Systems Incorporated 2008  All rights reserved 361PDF 32000-1:2008 11.7.5.3 Rendering Intent and Colour Conversions The rendering intent, black-generation, and undercolor-r emoval parameters control certain colour conversions.  In the presence of transparency, they may need to be applied earlier than the actual rendering of colour onto  the page.  The rendering intent influences the conversion from a CI E-based colour space to a target colour space, taking  into account the target spaces colour gamut (the range of colours it can reproduce). Whereas in the opaque  imaging model the target space shall always be the native colour space of the output device, in the transparent  model it may instead be the group colour space of a transparency group into which an object is being painted.  The rendering intent is needed at the moment such  a conversion is performedthat is, when painting an  elementary or group object specified in a CIE-based colour space into a parent group having a different colour  space.  NOTE 1 This differs from the current  halftone and transfer function, whose va lues are used only when all colour  compositing has been completed and ra sterization is being performed.  In all cases, the rendering intent to use for converting an  objects colour (whether that of an elementary object  or of a transparency group) shall be determined by the  rendering intent parameter associated with the object. In  particular:   When painting an elementary object with a CIE-based colour into a transparency group having a different  colour space, the rendering intent used shall be the current rendering intent in effect in the graphics state  at the time of the painting operation.   When painting a transparency group whose colour  space is CIE-based into a parent group having a  different colour space, the rendering intent used shall  be the current rendering intent in effect at the time  the Do operator is applied to the group.   When the colour space of the page group is CIE-based,  the rendering intent used to convert colours to the  native colour space of the output device shall  be the default rendering intent for the page.  NOTE 2 Since there may be one or more nested transparency groups having different CIE-based colour spaces, the  colour of an elementary source object may be convert ed to the device colour space in multiple stages,  controlled by the rendering intent in effect at each stag e. The proper choice of rendering intent at each stage  depends on the relative gamuts of the source and target  colour spaces. It is sp ecified explicitly by the  document producer, not prescribed by the PDF specif ication, since no single policy for managing rendering  intents is appropriate for all situations.  A similar approach works for the black-generation and un dercolor-removal functions, which shall be applied  only during conversion from  DeviceRGB  to DeviceCMYK  colour spaces:   When painting an elementary object with a  DeviceRGB colour directly into a transparency group whose  colour space is  DeviceCMYK , the functions used shall be the cu rrent black-generation and undercolor- removal functions in effect in the graphics  state at the time of the painting operation.   When painting a transparency group whose colour space is  DeviceRGB  into a parent group whose colour  space is  DeviceCMYK , the functions used shall be the ones in effect at the time the  Do operator is applied  to the group.   When the colour space of the page group is  DeviceRGB  and the native colour space of the output device  is DeviceCMYK , the functions used to convert colours to the devices colour space shall be the default  functions for the page.",""],"370":["PDF 32000-1:2008 362 ' Adobe Systems Incorporated 2008  All rights reserved 12 Interactive Features 12.1 General For purposes of the trigger events  E (enter),  X (exit), D (down), and  U (up), the term  mouse  denotes a generic  pointing device with the following characteristics:   A selection button that can be  pressed , held down , and  released . If there is more than one mouse button,  the selection button is typically the left button.   A notion of  locationthat is, an indication of where on the  screen the device is pointing. Location is  typically denoted by a screen cursor.   A notion of  focusthat is, which element in the document is cu rrently interacting with  the with the user. In  many systems, this element is denoted by a blinking  caret, a focus rectangl e, or a colour change.  This clause describes the PDF  features that allow a user to interact  with a document on the screen, using the  mouse and keyboard (with the exception of multimedia features, which are described in  13, Multimedia  Features ):  Pr eference settings  to control the way the document  is presented on the screen ( 12.2, Viewer  Preferences ) Navigation facilities for moving through the document in a variety of ways (Sections  12.3, Document-Level  Navigation  and  12.4, Page-Level Navigation ) An notations  for adding text  notes, sounds, movies, and other ancillary information to the document ( 12.5,  Annotations ) Actions that can be triggered by specified events ( 12.6, Actions ) Interactive forms  for gathering information from the user ( 12.7, Interactive Forms ) Dig ital signatures  that authenticate the identity of a user  and the validity of the  documents contents ( 12.8,  Digital Signatures )Me asurement properties  that enable the display of real-world units corresponding to objects on a page  (12.9, Measurement Properties )12.2 Viewer Preferences The  ViewerPreferences  entry in a documents catalogue (see  7.7.2, Document Catalog ) d esignates a  viewer preferences dictionary  (PDF 1.2)  controlling the way the document shall be  presented on the scr een or in print. If no such dictionary is specified,  conforming readers should behave in accordance with their own current user  preference settings.  Table  150  shows the contents of the vi ewer preferences dictionary.  Table  150    Entries in a viewer preferences dictionary   KeyType Value HideToolbar boolean (Optional)  A flag specifying whether to hide the conforming  readers tool bars when the docum ent is active. Default value:  false. HideMenubar boolean (Optional)  A flag specifying whether to hide the conforming  readers menu bar when the document is active. Default value:  false.",""],"371":["' Adobe Systems Incorporated 2008  All rights reserved 363PDF 32000-1:2008 HideWindowUI boolean (Optional)  A flag specifying whethe r to hide user interface  elements in the documents window (such as scroll bars and  navigation controls), leaving only the documents contents  displayed. Default value:  false. FitWindow boolean (Optional)  A flag specifying whether to resize the documents  window to fit the size of the first displayed page. Default value:  false. CenterWindow boolean (Optional)   A flag specifying whether  to position the documents  window in the center of  the screen. Default value:  false. DisplayDocTitle boolean (Optional; PDF  1.4)   A flag specifying whether the windows title  bar should display the document title taken from the  Title  entry of the document information dictionary (see  14.3.3, Document  Information Dictionary). If  false, the title bar should instead  display the name of the PDF file containing the document. Default  value: false. NonFullScreenPageMode name(Optional)  The documents  page mode , specifying how to display  the document on exiting full-screen mode:  UseNone Neither document outline nor thumbnail images  visible  UseOutlines Document outline visible  UseThumbs Thumbnail images visible  UseOC Optional content group panel visible  This entry is meaningful only if the value of the  PageMode entry in the  Catalog  dictionary (see  7.7.2, Document Catalog ) is FullScreen; it shall be ignored othe rwise. Default value: UseNone.  Direction name(Optional; PDF  1.3)  The predominant reading order for text:  L2R Left to right  R2L Right to left (including vertical writing systems, such as  Chinese, Japanese, and Korean)  This entry has no direct effect on the documents contents or page  numbering but may be used to determine the relative positioning  of pages when displayed side by side or printed  n-up. Default value: L2R.  ViewArea name(Optional; PDF  1.4)  Th e name of the page boundary representing  the area of a page that shall be displayed when viewing the  document on the screen. The value is the key designating the  relevant page boundary in the page object (see  7.7.3, Page Tree and  14.11.2, Page Boundaries ). If the specified page boundary  is not defined in the page object, its default value shall be used,  as specified in  Ta b l e  30. Default value: CropBox.  This entry is intended primarily for use  by prepress applications  that interpret or manipulate the page boundaries as described in  14.11.2, Page Boundaries.  NOTE 1 Most conforming readers disregard it.  Table 150   Entries in a viewer preferences dictionary  (continued) KeyType Value",""],"372":["PDF 32000-1:2008 364 ' Adobe Systems Incorporated 2008  All rights reserved ViewClip name(Optional; PDF  1.4)  Th e name of the page boundary to which the  contents of a page shall be clipped when viewing the document  on the screen. The value is the  key designating the relevant page  boundary in the page object (see  7.7.3, Page Tree  and  14.11.2,  Page Boundaries ). If the specified page boundary is not defined  in the page object, its default val ue shall be used, as specified in  Ta b l e  30. Default value: CropBox.  This entry is intended primarily  for use by prepress applications  that interpret or manipulate the page boundaries as described in  14.11.2, Page Boundaries.  NOTE 2 Most conforming readers disregard it.  PrintAreaname(Optional; PDF  1.4)   The name of the page  boundary representing  the area of a page that shall be rendered when printing the  document. The value is the key designating the relevant page  boundary in the page object (see  7.7.3, Page Tree  and  14.11.2,  Page Boundaries ). If the specified page boundary is not defined  in the page object, its default val ue shall be used, as specified in  Ta b l e  30. Default value: CropBox.  This entry is intended primarily  for use by prepress applications  that interpret or manipulate the page boundaries as described in  14.11.2, Page Boundaries.  NOTE 3 Most conforming readers disregard it.  PrintClipname(Optional; PDF  1.4)  Th e name of the page boundary to which the  contents of a page shall be clip ped when printing the document.  The value is the key designating the relevant page boundary in  the page object (see  7.7.3, Page Tree  and  14.11.2, Page  Boundaries ). If the specified page boundary is not defined in the  page object, its default value shall be used, as specified in  Ta b l e  30. Default value: CropBox.  This entry is intended primarily  for use by prepress applications  that interpret or manipulate the page boundaries as described in  14.11.2, Page Boundaries.  NOTE 4 Most conforming readers disregard it.  PrintScaling name(Optional; PDF  1.6)  T he page scaling option that shall be selected  when a print dialog is displayed for this document. Valid values  are None, which indicates no page scaling, and AppDefault, which  indicates the conforming readers default print scaling. If this entry  has an unrecognized value, AppDefault shall be used. Default  value: AppDefault.  If the print dialog is suppressed and its parameters are provided  from some other source, this ent ry nevertheless shall be honored. Duplex name(Optional; PDF 1.7 ) The paper handling option that shall be used  when printing the file from the print dialog. The following values  are valid: Simplex Print single-sided DuplexFlipShortEdge  Duplex and flip on the short edge of the  sheet DuplexFlipLongEdge  Duplex and flip on the long edge of the  sheet Default value: none Table 150   Entries in a viewer preferences dictionary  (continued) KeyType Value",""],"373":["' Adobe Systems Incorporated 2008  All rights reserved 365PDF 32000-1:2008 12.3 Document-Level Navigation 12.3.1 General The features described in this sub-clause allow a conforming reader to present the user with an interactive,  global overview of a document in either of two forms:   As a hierarchical  outline showing the documents internal structure   As a collection of  thumbnail images representing the pages of the document in miniature form  Each item in the outline or each thumbnail  image may be associated with a corresponding  destination  in the document, so that the user can jump directly to the destination by clicking with the mouse.  12.3.2 Destinations 12.3.2.1 General A destina tion  defines a particular view of a docume nt, consisting of the following items:   The page of the document that shall be displayed   The location of the document window on that page   The magnification (zoom) factor  Destinations may be associat ed with outline items (see  12.3.3, Document Outline), annotations ( 12.5.6.5,  Link Annotations ), or actions ( 12.6.4.2, Go-To Actions  and  12.6.4.3, Remote Go-To Actions ). In each case,  the destination specifies the view of the document that shall be presented when the outline item or annotation  is opened or the action is perfo rmed. In addition, the optional  OpenAction entry in a documents catalogue  (7.7.2, Document Catalog ) may specify a destination that shall be  displayed when the document is opened. A  destination may be specified either explicitly by an arra y of parameters defining its properties or indirectly by  name.  PickTrayByPDFSize boolean (Optional; PDF 1.7 ) A flag specifying whether the PDF page size  shall be used to select the input paper tray. This setting influences  only the preset values used to  populate the print dialog presented  by a conforming reader. If  PickTrayByPDFSize  is true, the check  box in the print dialog associated with input paper tray shall be checked. This setting has no effect on  operating systems that do not  provide the ability to pick  the input tray by size. Default value: as defined by the conforming reader PrintPageRange array(Optional; PDF 1.7) The page numbers used to initialize the print  dialog box when the file is printed. The array shall contain an even  number of integers to be interpre ted in pairs, with each pair  specifying the first and last pages in a sub-range of pages to be  printed.The first page of the PDF file shall be denoted by 1.  Default value: as defined by the conforming reader  NumCopies integer (Optional; PDF 1.7) The number of copies that shall be printed  when the print dialog is opened for this file. Values outside this  range shall be ignored.  Default value: as defined by the  conforming reader, but typically 1 Table 150   Entries in a viewer preferences dictionary  (continued) KeyType Value",""],"374":["PDF 32000-1:2008 366 ' Adobe Systems Incorporated 2008  All rights reserved 12.3.2.2 Explicit  Destinations Ta b l e  151 shows the allowed syntactic forms for specifying a de stination explicitly in a  PDF file. In each case,  page  is a n indirect reference to a page obje ct (except in a remote go-to action; see  12.6.4.3, Remote Go-To  Actions). All coordinate values ( left, right , top, and  bottom ) shall be expressed in the default user space  coordinate system. The pages  bounding box  is the smallest rectangle enclosing all of its contents. (If any side  of the bounding box lies outside the pages crop box , the corresponding side of the crop box shall be used  instead; see  14.11.2, Page Boundaries,  for further discussion of the crop box.)  No page object can be specified for a destinatio n associated with a remote go-to action (see  12.6.4.3, Remote  Go-To Actions ) because the destination page is in a different PDF document. In this case, the  page  parameter  specifies an integer page number within the remote do cument instead of a page object in the current  document.  Table  151    Destination syntax   Syntax Meaning[ page  /XYZ left  to p  zoom  ]Display the page designated by  page , with the coordinates ( left , top) positioned at the upper-left corner of  the window and the contents of  the page magnified by the factor  zoom. A null value for any of the  parameters  left , top, or zoom  specifies that the current value of that  parameter shall be retained unchanged. A  zoom value of 0 has the  same meaning as a null value.  [ page  /Fit  ]Display the page designated by  page , with its contents magnified just  enough to fit the entire page withi n the window both horizontally and  vertically. If the required horizonta l and vertical magnification factors  are different, use the smaller of th e two, centering the page within the  window in the other dimension.  [ page  /FitH  top  ]Display the page designated by  page, with the vertical coordinate  toppositioned at the top edge of the  window and the contents of the page  magnified just enough to fit the entire width of the page within the  window. A null value for  top  specifies that the current value of that  parameter shall be retained unchanged.  [ page  /FitV  left  ]Display the page designated by  page, with the horizontal coordinate  left  positioned at the left edge of the window and the contents of the  page magnified just enough to fit the entire height of the page within  the window. A null value for  left  specifies that the current value of that  parameter shall be retained unchanged.  [ page  /FitR  left  bottom right top ]Display the page designated by  page , with its contents magnified just  enough to fit the rectangle sp ecified by the coordinates  left , bottom, right, and  top entirely within the window bot h horizontally and vertically.  If the required horizontal and vert ical magnification factors are  different, use the smaller of the two,  centering the rectangle within the  window in the other dimension. [ page  /FitB  ](PDF 1.1)  D isplay the page designated by  page , with its contents  magnified just enough to fit its bounding box entirely within the window  both horizontally and vertically. If the required horizontal and vertical  magnification factors are different, use the smaller of the two,  centering the bounding box within the window in the other dimension.  [ page  /FitBH  top  ](PDF 1.1)  Displ ay the page designated by  page , with the vertical  coordinate  top positioned at the top edge of the window and the  contents of the page magnified just enough to fit the entire width of its  bounding box within the window. A null value for  top specifies that the  current value of that parameter shall be retained unchanged.",""],"375":["' Adobe Systems Incorporated 2008  All rights reserved 367PDF 32000-1:2008 12.3.2.3 Named Destinations Instead of being defined directly  with the explicit syntax shown in  Ta b l e  151 , a destination may be referred to  indirectly by means of a name object  (PDF 1.1)  or a byte string  (PDF 1.2) . This capability is especially useful  when the destination is located in another PDF document.  NOTE 1 A link to the beginning of Chapter 6 in another document might refer to the destination by a name, such as  Chap6  . begin, instead of by an explicit page number in the  other document. Then, the lo cation of the chapter in  the other document could change without invalidating the li nk. If an annotation or outline item that refers to a  named destination has an associated action, such as a remote go-to action (see  12.6.4.3, Remote Go-To  Actions ) or a thread action ( 12.6.4.6, Thread Actions ), the destination is in the file specified by the actions  Fentry, if any; if there is no  F entry, the destination is in the current file.  In PDF 1.1, the correspondence between name obje cts and destinations shall be defined by the  Dests  entry in  the document catalogue (see  7.7.2, Document Catalog ). The value of this entry shall be a dictionary in which  each key is a destination name and the corresponding val ue is either an array defining the destination, using  the syntax shown in  Ta b l e  151 , or a dictionary with a  D entry whose value is such an array.  NOTE 2 The latter form allows additional attributes to be a ssociated with the destination,  as well as enabling a go-to  action (see  12.6.4.2, Go-To Actions ) that shall be used as the target of a named destination.  In PDF 1.2 and later, the correspond ence between strings and destinations  may alternatively be defined by the  Dests  entry in the documents name dictionary (see  7.7.4, Name Dictionary ). The value of this entry shall be  a name tree ( 7.9.6, Name Trees ) mapping name strings to destinations. (The keys in the name tree may be  treated as text strings for display purposes.) The destin ation value associated with a key in the name tree may  be either an array or a dictionary, as described in the preceding paragraph.  NOTE 3 The use of strings as destinatio n names is a PDF 1.2 feature. If compat ibility with earlier versions of PDF is  required, only name objects may be used to refer to named destinations. A document that supports PDF 1.2  can contain both types. However, if backward compatibility  is not a consideration,  applications should use the  string form of representation in the  Dests  name tree.  12.3.3 Document Outline A PDF document may contain a  document outline  that the conforming reader may display on the screen,  allowing the user to navigate interactively from one part  of the document to another. The outline consists of a  tree-structured hierarchy of  outline items  (sometimes called  bookmarks ), which serve as a visual table of  contents to display the documents structure to the us er. The user may interactively open and close individual  items by clicking them with the mouse. When an item  is open, its immediate children in the hierarchy shall  become visible on the screen;  each child may in turn be open or closed, selectively revealing or hiding further  parts of the hierarchy. When an item is closed, all of  its descendants in the hier archy shall be hidden. Clicking  the text of any visible item  activates  the item, causing the conforming reader to jump to a destination or trigger  an action associated with the item.  The root of a documents outline hierarchy is an  outline dictionary  specified by the  Outlines  entry in the  document catalogue (see  7.7.2, Document Catalog ). Ta b l e  152  shows the contents of this dictionary. Each  individual outline item within the hierarchy shall be defined by an  outline item dictionary  (Ta b l e  153 ). The items  at each level of the hierarchy form a linked list, chained together through their  Prev and Next entries and  accessed through the  First  and  Last  entries in the parent item (or in the outline dictionary in the case of top- [ page  /FitBV  left  ](PDF 1.1)  D isplay the page designated by  page , with the horizontal  coordinate  left  positioned at the left edge of the window and the  contents of the page magnified just  enough to fit the entire height of its  bounding box within the window. A null value for  left  specifies that the  current value of that parameter shall be retained unchanged.  Table 151   Destination syntax  (continued) Syntax Meaning",""],"376":["PDF 32000-1:2008 368 ' Adobe Systems Incorporated 2008  All rights reserved level items). When displayed on the screen, the items at  a given level shall appear in the order in which they  occur in the linked list.  Table  152    Entries in the outline dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Outlines  for an outline dictionary.  First dictionary (Required if there are any open or closed outline entries;  shall be an  indirect reference) An outline item dictionary  representing the first top- level item in the outline.  Last dictionary (Required if there are any open or closed outline entries;  shall be an  indirect reference) An outline item dictionary  representing the last top- level item in the outline.  Countinteger (Req uired if the document has any open outline entries ) Total number  of visible outline items at all levels  of the outline. The value cannot be  negative. This entry shall be omitted if  there are no open outline items.  Table  153    Entries in an out line item dictionary  KeyType Value Title text string (Required)   The text that shall be displayed on the screen for this item.  Parentdictionary (Required; shall be an indirect reference)  The parent of this item in the  outline hierarchy. The parent of a top-level item shall be the outline  dictionary itself.  Prevdictionary (Required for all but the first item  at each level; shall be an indirect  reference) The previous item at this outline level.  Next dictionary (Required for all but the last item at  each level; shall be an indirect  reference) The next item at this outline level.  First dictionary (Required if the item has any de scendants; shall be an indirect  reference) The first of this items immediate children in the outline  hierarchy.  Last dictionary (Required if the item has any de scendants; shall be an indirect  reference) The last of this items immediate children in the outline  hierarchy.  Countinteger (Required if the item has any descendants)  If the outline item is open,  Count is the sum of the number of  visible descendent outline items at  all levels. The number of visible descendent outline items shall be determined by the following recursive process: Step 1. Initialize  Count to zero.Step 2. Add to  Count the number of immediate children. During  repetitions of this step, update only the  Count of the original  outline item. Step 3. For each of those immediate children whose  Count is positive and non-zero, repeat steps 2 and 3.  If the outline item is closed,  Count is negative and its absolute value is  the number of descendants that woul d be visible if the outline item  were opened.",""],"377":["' Adobe Systems Incorporated 2008  All rights reserved 369PDF 32000-1:2008 The value of the outline item dictionarys  F entry  (PDF 1.4) shall be an integer interpreted as one-bit flags  specifying style characteristics for disp laying the item. Bit positions within the flag word are numbered from low- order to high-order bits, with the lowest-order bit numbered 1.  Table  154  shows the meanings of the flags; all  other bits of the integer shall be 0.  EXAMPLE The following exampl e shows a typical outline dictionary  and outline item dictionary. See  H.6, Outline  Hierarchy Example  for an example of a complete outline hierarchy.  21 0 obj <<  /Count  6 /First  22 0 R /Last  29 0 R>>endobj 22 0 obj <<  /Title  ( Chapter 1  ) /Parent  21 0 R /Next  26 0 R  /First  23 0 R /Last  25 0 R /Count  3 /Dest  [ 3 0 R /XYZ 0 792 0  ]>>endobj Dest name,  byte string, or  array(Optional; shall not be present if an  A entry is present)  The destination  that shall be displayed when this item is activated (see  12.3.2,  Destinations ). Adictionary (Optional; PDF  1.1; shall not be present if a  Dest entry is present)  The  action that shall be performed when this item is activated (see  12.6,  Actions ). SEdictionary (Optional; PDF  1.3; shall be an indirect reference)  The structure  element to which the item refers (see  14.7.2, Structure Hierarchy ). (PDF 1.0) An item may also specify a destination ( Dest) corresponding to an area of a page where the contents of the  designated structure element are displayed.  Carray(Optional; PDF  1.4)  An array of three numbers in the range 0.0 to 1.0,  representing the components in the  DeviceRGB  colour space of the  colour that shall be used for the ou tline entrys text. Default value:  [ 0.0 0.0 0.0"," ].  Finteger (Optional; PDF  1.4)  A set of flags specifying  style characteristics for  displaying the outline items text (see  Table  154 ). Default value: 0.  Table  154    Outline item flags   Bit positionName Meaning 1Italic If set to 1, display  the item in italic.  2BoldIf set to 1, displa y the item in bold.  Table 153   Entries in an outline item dictionary  (continued) Key Type Value",""],"378":["PDF 32000-1:2008 370 ' Adobe Systems Incorporated 2008  All rights reserved 12.3.4 Thumbnail Images A PDF document may contain  thumbnail images  representing the contents of its pages in miniature form. A  conforming reader may display these images on the screen,  allowing the user to navigate to a page by clicking  its thumbnail image: NOTE Thumbnail images are not required, and may be included for some pages and not for others.  The thumbnail image for a page shall be an image XObject specified by the  Thumb entry in the page object  (see  7.7.3, Page Tree ). It has the usual structure for an image dictionary ( 8.9.5, Image Dictionaries ), but  only the  Width , Height, ColorSpace , BitsPerComponent , and  Decode  entries are significant; all of the other  entries listed in Ta b l e  89 shall be ignored if present. (If a  Subtype  entry is specified,  its value shall be  Image.)  The images colour space shall be either  DeviceGray  or  DeviceRGB , or an  Indexed  space based on one of  these. EXAMPLE This example shows a typi cal thumbnail image definition.12 0 obj<<  /Width  76 /Height  99 /ColorSpace  /DeviceRGB  /BitsPerComponent  8 /Length  13 0 R /Filter [ /ASCII85Decode /DCTDecode  ]>>streams4IA>!\"M;*Ddm8XA,lT0!!3,S!/ (=R!<E3%!<N<(!WrK*!WrN,  Omitted data  endstream endobj 13 0 obj% Length of stream endobj  12.3.5 Collections Beginning with PDF 1.7, PDF documents may specify how  a conforming readers user interface presents  collections of file attachments, where the attachments are  related in structure or content. Such a presentation is  called a portable collection.  NOTE 1 The intent of portable collections is to present, so rt, and search collections of related documents embedded in  the containing PDF document, such as email archives,  photo collections, and engineering bid sets. There is no  requirement that documents in a collection have an imp licit relationship or even a similarity; however, showing  differentiating characteristics of related docum ents can be helpful for document navigation.  A collection dictionary  specifies the viewing and organizational char acteristics of portable  collections. If this  dictionary is present in a PDF docu ment, the conforming reader shall present the document as a portable  collection. The  EmbeddedFiles  name tree specifies file attachments (see  7.11.4, Embedded File Streams ).  When a conforming reader first opens a PDF document cont aining a collection, it shall display the contents of  the initial document, along with a list of the documents present in the  EmbeddedFiles  name tree. The  document list shall include the additional document info rmation specified by the co llection schema.  The initial  document may be the container PDF or one of the embedded documents.  NOTE 2 The page content in the initial  document should contain information th at helps the user understand what is  contained in the collection, such as a title and an introductory paragraph.  The file attachments comprising a collection shall be located in the  EmbeddedFiles  name tree. All attachments  in that tree are in the collection; any attachments not in that tree are not.",""],"379":["' Adobe Systems Incorporated 2008  All rights reserved 371PDF 32000-1:2008 Ta b l e  155 describes the entries in a collection dictionary. A c ollection schema dictionary  consists of a variable number of indi vidual collection field dictionaries. Each  collection field dictionary has a key chosen by the conforming writer, which shall be used to associate a field  with data in a file  specification. Ta b l e  156  describes the entries in a collection schema dictionary. Table  155    Entries in a collection dictionary   KeyType Value Type name (Op tional ) The type of PDF object that this dictionary  describes; if present, shall be Collection for a collection  dictionary. Schemadictionary (Op tional ) A collection schema dictionary (see  Ta b l e  156 ). If absent, the conforming reader  may choose useful defaults  that are known to exist in a file  specification dictionary, such  as the file name, file size, and modified date.  Dbyte string (Op tional ) A string that identifies an entry in the  EmbeddedFiles  name tree, determining the document that  shall be initially presented in the user interface. If the  D entry  is missing or in error, the in itial document shall be the one  that contains the collection dictionary. View name (Op tional ) The initial view. The following values are valid: D  The collection view shall be presented in details mode,  with all information in the Schema dictionary presented  in a multi-column format. This mode provides the most  information to the user. T  The collection view shall be presented in tile mode, with  each file in the collection denoted by a small icon and a  subset of information from the  Schema dictionary. This  mode provides top-level information about the file  attachments to the user. H  The collection view shall be initially hidden, The  conforming reader shall provide means for the user to  view the collection by some explicit action. Default value: D Sortdictionary (Op tional ) A collection sort dictionary, which specifies the  order in which items in the collection shall be sorted in the  user interface (see  Ta b l e  158).Table  156   Entries in a collection schema dictionary   KeyType Value Type name (Op tional ) The type of PDF object that this dictionary  describes; if present, shall be CollectionSchema for a  collection schema dictionary. Other keys dictionary (Op tional ) A collection field dictionary. Each key name is  chosen at the discretion of t he conforming writer. The key  name shall be used to identify a corresponding collection  item dictionary referenced  from the file specification  dictionary’s CI entry (see CI key in  Ta b l e  44).",""],"380":["PDF 32000-1:2008 372 ' Adobe Systems Incorporated 2008  All rights reserved A collection field dictionary  describes the attributes of a particular  field in a portable collection, including the  type of data stored in the field and the lookup key used to  locate the field data in the  file specification dictionary.  Ta b l e  157 describes the entries in a collection field dictionary. A colle ction sort dictionary  identifies the fields that shall be used  to sort items in the collection. The type of  sorting depends on the type of data:  Text strings shall be ordered lexically from smalle r to larger, if ascending order is specified.  NOTE 3 Lexical ordering is an implementation dependency for conforming readers. Table  157   Entries in a collect ion field dictionary   KeyType Value Type name(Optio nal ) The type of PDF object that  this dictionary describes; if  present, shall be CollectionField  for a collection field dictionary. Subtypename(Requ ired ) The subtype of collection field or file-related field that this  dictionary describes. This entry identifies the type of data that shall  be stored in the field.  The following values identify the types of fields in the collection item  or collection subitem dictionary: SA  text field. The field data sh all be stored as a PDF text string. D  A date field. The field data shall be stored as a PDF date  string.N  A number field. The field data shall be stored as a PDF  number. The following values identify the types of file-related fields: F The field data shall be the file name of the  embedded file stream, as identified by the  UF entry  of the file specification,  if present; otherwise by the  Fentry of the file specification (see  Table  44). Desc The field data shall be the description of the  embedded file stream, as identified by the  Desc entry in the file specif ication dictionary (see  Table  44).ModDate  The field data shall be the modification date of the  embedded file stream, as  identified by the  ModDateentry in the embedded file parameter dictionary (see  Table  46).CreationDate The field data shall be the creation date of the  embedded file stream, as identified by the  CreationDate  entry in the embedded file parameter  dictionary (see Ta b l e  46).Size The field data shall be the size of the embedded file,  as identified by the  Size entry in the embedded file  parameter dictionary (see  Ta b l e  46).Ntext string (Requ ired ) The textual field name that shall be presented to the user  by the conforming reader.  Ointeger (Optio nal ) The relative order of the field name in the user interface.  Fields shall be sorted by the conforming reader in ascending order. Vboolean (Optio nal ) The initial visibility of the field in the user interface.  Default value:  true. Eboolean (Optio nal ) A flag indicating whether the conforming reader should  provide support for editing the  field value. Default value:  false.",""],"381":["' Adobe Systems Incorporated 2008  All rights reserved 373PDF 32000-1:2008  Numbers shall be ordered numerically from sma ller to larger, if ascending order is specified.  Dates shall be ordered from oldest to  newest, if ascending order is specified. Ta b l e  158 describes the entries in a collection sort dictionary.  EXAMPLE 1 This example shows a collection dictionary representing an email in-box, where each item in the  collection is an email message. The actual email messa ges are contained in file  specification dictionaries.  The organizational data associated with each email  is described in a collection schema dictionary. Most  actual organizational data (fro m, to, date, and subject) is provided  in a collection item dictionary, but the  size data comes from the embedded file parameter dictionary. /Collection << /Type /Collection  /Schema << /Type /CollectionSchema  /from << /Subtype /S /N (From) /O 1 /V true /E false>>  /to << /Subtype /S /N (To) /O 2 /V true /E false >>  /date << /Subtype /D /N (Date rece ived) /O 3 /V true /E false >>  /subject << /Subtype /S /N (Subject) /O 4 /V true /E false >>  /size << /Subtype /Size /N (Size)  /O 5 /V true /E false >>  >>/D (Doc1) /View /D  /Sort << /S /date /A false >>  >>  Table  158    Entries in a collection sort dictionary   KeyType Value Type name(Op tional ) The type of PDF object that this dictionary describes; if  present, shall be CollectionSort  for a collection sort dictionary. Sname or  array(Req uired ) The name or names of fields that the conforming reader  shall use to sort the items in the co llection. If the value is a name, it  identifies a field described in the parent collection dictionary.  If the value is an array, each element of the array shall be a name that  identifies a field described in the parent collection dictionary. The  array form shall be used to allow additional fields to contribute to the  sort, where each additional field shall be used to break ties. More  specifically, if multiple collection  item dictionaries have the same  value for the first field named in the array, the values for successive  fields named in the array shall be us ed for sorting, until a unique order  is determined or until the  named fields are exhausted.  Aboolean  or array(Op tional ) If the value is a boolean,  it specifies whether the  conforming reader shall sort the it ems in the collection in ascending  order ( true) or descending order ( false). If the value is an array, each  element of the array shall be a b oolean value that specifies whether  the entry at the same index in the  S array shall be sorted in ascending  or descending order. If the number of entries in the  A array is larger than the number of  entries in the  S array the extra entries in the  A array shall be ignored.  If the number of entries in the  A array is less than the number of  entries in the  S array the missing entries in the  A array shall be  assumed to be  true.Default value:  true.",""],"382":["PDF 32000-1:2008 374 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 2 This example shows a collection item dictionary  and a collection subitem dictionary. These dictionaries  contain entries that correspond to the sch ema entries specified in the Example in  12.4.2, Page Labels. . 7.11.6, Collection Items  specifies the collection item a nd collection subitem dictionaries. /CI <<  /Type /CollectionItem  /from (Rob McAfee) /to (Patty McAfee)  /subject <<  /Type /CollectionSubitem  /P (Re:) /D (Let’s have lunch on Friday!)  >>  /date (D:20050621094703-0700)  >>12.4 Page-Level Navigation 12.4.1 General This sub-clause describes PD F facilities that enable the user to navigate  from page to page within a document:  Pa ge labels  for numbering or otherwise identifying individual pages (see  12.4.2, Page Labels ).Article threads, which chain together items of  content within the document that  are logically connected but  not physically sequential (see  12.4.3, Articles ).Pre sentations  that display the document in the form of a slide show, advancing from one page to the next  either automatically or under user control (see  12.4.4, Presentations ).For another important form of page-level navigation, see  12.5.6.5, Link Annotations. 12.4.2 Page Labels Each page in a PDF document shall be identified by an integer  page index  that expresses the pages relative  position within the document. In additio n, a document may optionally define  page labels (PDF 1.3)  to identify  each page visually on the screen or in print. Page labels and page indices need not coincide: the indices shall  be fixed, running consecutively through the document st arting from 0 for the first page, but the labels may be  specified in any way that is appropriate for the particular document.  NOTE 1 If the document begins with 12 pages of front matter  numbered in roman numerals and the remainder of the  document is numbered in arabic, the first page would hav e a page index of 0 and a page label of i, the twelfth  page would have index 11 and label xii, and the  thirteenth page would have index 12 and label 1.  For purposes of page labelling, a  document shall be divided into  labelling ranges, each of which is a series of  consecutive pages using the same numbering system. Pages within a range shall be numbered sequentially in  ascending order. A pages label consists of a numeric  portion based on its position within its labelling range,  optionally preceded by a  label prefix denoting the range itself . NOTE 2 The pages in an appendix might be labeled with de cimal numeric portions prefixed with the string A-; the  resulting page labels woul d be A-1, A-2, and so on.  A documents labelling ranges  shall be defined by the PageLabels  entry in the document catalogue (see  7.7.2, Document Catalog ). The value of this entry shall be a number tree ( 7.9.7, Number Trees ), each of whose  keys is the page index of the first page in a l abelling range. The corresponding value shall be a  page label  dictionary  defining the labelling characteristics for the pages  in that range. The tree shall include a value for  page index 0.  Table  159  shows the contents of a page label dictionary.",""],"383":["' Adobe Systems Incorporated 2008  All rights reserved 375PDF 32000-1:2008 EXAMPLE The following example shows a document with pages labeled  i, ii, iii, iv, 1,  2, 3, A-8, A-9,  1 0 obj << /Type  /Catalog  /PageLabels  << /Nums [  0 << /S /r   >> % A number tree containing   4 << /S /D >> % three page label dictionaries   7 << /S /D  /P ( A- )   /St  8       >>  ]  >> >>endobj 12.4.3 Articles Some types of documents may contain sequences of  content items that are logically connected but not  physically sequential.  EXAMPLE 1 A news story may begin on the  first page of a newslette r and run over onto one or  more nonconsecutive interior pages.  To represent such sequences of physically disconti guous but logically related  items, a PDF document may  define one or more  articles (PDF 1.1) . The sequential flow of an article shall be defined by an  article thread ; the  individual content items that make up the article are called  beads  on the thread. Conforming readers may  provide navigation facilities to allow the user to follow a thre ad from one bead to the next.  The optional  Threads  entry in the document catalogue (see  7.7.2, Document Catalog ) holds an array of  thread dictionaries  (Table  160 ) defining the documents articles. Each individual bead within a thread shall be  Table  159   Entries in a page label dictionary   KeyType Value Type name(Optional)  The type of PDF object that this dicti onary describes; if present, shall be  PageLabel  for a page label dictionary.  Sname(Optional)   The numbering style that shall be used for the numeric portion of each  page label:  D Decimal arabic numerals  R Uppercase roman numerals  r Lowercase roman numerals  A Uppercase letters (A to Z for the first  26 pages, AA to ZZ for the next 26, and  so on)  a Lowercase letters (a to z for the first 26 pages, aa to zz for the next 26, and so  on) There is no default numbering style; if no  S entry is present, page labels shall  consist solely of a label pr efix with no numeric portion.  NOTE If the  P entry (next) specifies the label  prefix Contents, each page is  simply labeled Contents with no page number. (If the  P entry is also missing or  empty, the page label  is an empty string.)  Ptext  string(Optional)  The label prefix for page labels in this range.  Stinteger (Optional)  The value of the numeric portion for the first page label in the range.  Subsequent pages shall be numbered sequentia lly from this value, which shall be  greater than or equal to 1. Default value: 1.",""],"384":["PDF 32000-1:2008 376 ' Adobe Systems Incorporated 2008  All rights reserved represented by a  bead dictionary  (Table  161 ). The thread dictionarys  F entry shall refer to the first bead in the  thread; the beads shall be chained together sequentially in a doubly linked list through their  N (next) and  V(previous) entries. In addition, for each page on  which article beads appear, the page object (see  7.7.3, Page  Tree ) shall contain a  B entry whose value is an array of indirect references to the beads on the page, in  drawing order.  EXAMPLE 2 The following example shows a thread with three beads.  22 0 obj<<  /F 23 0 R /I  << /Title  ( Man Bites Dog  ) >>>>endobj 23 0 obj<<  /T 22 0 R /N 24 0 R /V 25 0 R  /P 8 0 R /R [ 158 247 318 905  ]>>endobj 24 0 obj<<  /T 22 0 RTable  160    Entries in a thread dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if present,  shall be  Thread  for a thread  dictionary.  Fdictionary (Required;  shall be an indirect reference)  The first bead in the thread.  Idictionary (Optional)   A thread information dictionary containing information about the  thread, such as its title, author, and  creation date. The contents of this  dictionary shall conform to the syntax for the document information dictionary  (see 14.3.3, Document Information Dictionary ).  Table  161    Entries in a bead dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if present,  shall be  Bead  for a bead dictionary.  Tdictionary (Required for the first bead of a thread; optional for all others ; shall be an  indirect reference)  The thread to which this bead belongs.","(PDF 1.1) This entry shall be permitted only for the first bead of a thread. (PDF 1.2)  It shall be permitted for any bead but required only for the first.  Ndictionary (Required; shall be an indirect reference)  The next bead in the thread. In the  last bead, this entry shall refer to the first bead.  Vdictionary (Required; shall be an indirect reference)  The previous bead in the thread. In  the first bead, this entry shall refer to the last bead.  Pdictionary (Required; shall be an indirect reference)  The page object representing the  page on which this bead appears.  Rrectangle (Required)   A rectangle specifying the location of this bead on the page.",""],"385":["' Adobe Systems Incorporated 2008  All rights reserved 377PDF 32000-1:2008  /N 25 0 R /V 23 0 R  /P 8 0 R /R [ 322 246 486 904  ]>>endobj 25 0 obj <<  /T 22 0 R /N 23 0 R /V 24 0 R  /P 10 0 R  /R [ 157 254 319 903  ]>>endobj 12.4.4 Presentations 12.4.4.1 General Some conforming readers may allow a document to be displayed in the form of a  presentation  or slide show,  advancing from one page to the next either automatically  or under user control. In  addition, PDF 1.5 introduces  the ability to advance between differ ent states of the same page (see  12.4.4.2, Sub-page Navigation ).NOTE 1 PDF 1.4 introduces a different  mechanism, known as alternate presentations, for slide show displays,  described in 13.5, Alternate Presentations. A page object (see  7.7.3, Page Tree ) may contain two optional entries,  Dur and  Trans  (PDF 1.1) , to specify  how to display that page in presentation mode. The  Trans  entry shall contain a  transition dictionary  describing  the style and duration of the visual transition to use wh en moving from another page to the given page during a  presentation.  Ta b l e  162 shows the contents of the transition dictio nary. (Some of the entries shown are needed  only for certain transition styl es, as indicated in the table.)  The  Dur e ntry in the page object specifies the pages  display duration  (also called its  advance timing ): the  maximum length of time, in seconds, that the page shall be displayed before the presentation automatically  advances to the next page.  NOTE 2 The user can advance the page manually  before the specified time has expired.  If no  Dur  entry is specified in the page object, the page shall not advance automatically.",""],"386":["PDF 32000-1:2008 378 ' Adobe Systems Incorporated 2008  All rights reserved Table  162    Entries in a transition dictionary   KeyType Value Type name (Optional)  The type of PDF object that this di ctionary describes; if present, shall be  Trans  for a transition dictionary.  Sname (Optional)  The transition style that shall be used when moving to this page from  another during a presentation. Default value: R. Split Two lines sweep across the screen, revealing the new page. The lines  may be either horizontal or vertical and may move inward from the  edges of the page or outward from  the center, as specified by the  Dmand  M entries, respectively.  Blinds Multiple lines, evenly spaced across the screen, synchronously  sweep in the same direction to reveal the new page. The lines may be  either horizontal or vertical, as specified by the  Dm entry. Horizontal  lines move downward; vertical lines move to the right.  Box A rectangular box sweeps inward  from the edges of the page or  outward from the center , as specified by the  M entry, revealing the  new page.  Wipe A single line sweeps across the screen from one edge to the other in  the direction specified by the  Di entry, revealing the new page.  Dissolve The old page dissolves gradually to reveal the new one.  Glitter Similar to Dissolve, except that  the effect sweeps across the page in a  wide band moving from one side of the screen to the other in the  direction specified by the  Di entry.  R The new page simply replaces the old one with no special transition  effect; the D entry shall be ignored.  Fly(PDF 1.5) Changes are flown out or in (as specified by  M), in the  direction specified by  Di, to or from a location that is offscreen except  when  Di is None.  Push(PDF 1.5)  The old page slides off the screen while the new page  slides in, pushing the old page out in the direction specified by  Di. Cover(PDF 1.5)  The new page slides on to the screen in the direction  specified by  Di, covering the old page.  Uncover(PDF 1.5)  The old page slides off the screen in the direction  specified by  Di, uncovering the new page in the direction  specified by  Di. Fade (PDF 1.5)  The new page gradually becomes visible through the  old one. Dnumber (Optional)   The duration of the transition effect, in seconds. Default value: 1.  Dmname (Optional;  Split and Blinds transition styles only)  The dimension in which the  specified transition effect shall occur:  HHorizontal  VVertical  Default value: H.  Mname (Optional;  Split, Box and Fly transition styles only)  The direction of motion for  the specified transition effect:  I Inward from the edges of the page  O Outward from the center of the page  Default value: I.",""],"387":["' Adobe Systems Incorporated 2008  All rights reserved 379PDF 32000-1:2008 NOTE 3Figure 56  illustrates the relationship between transition duration ( D in the transition dictionary) and display  duration ( Dur in the page object). Note that the transition duration specified for a page (page 2 in the figure)  governs the transition to that page from another page ; the transition from the pa ge is governed by the next  pages transition duration.  Figure  56   Presentation timing EXAMPLE The following example shows the presentation parame ters for a page to be displayed for 5 seconds.  Before the page is displayed, there is a 3.5-second  transition in which two vertical lines sweep outward  from the center to the edges of the page.  10 0 obj <<  /Type  /Page  /Parent  4 0 R /Contents  16 0 R /Dur  5 /Trans  << /Type  /Trans /D 3.5/S /Split /Dm /V/M /O  >>>>endobj Dinumber or  name(Optional; Wipe , Glitter, Fly , Cover , Uncover  and Push transition styles only) The direction in which the specified trans ition effect shall moves, expressed in  degrees counterclockwise starti ng from a left-to-right direction. (This differs from  the page objects  Rotate  entry, which is measured clockwise from the top.)  If the value is a number, it shall be one of:    0 Left to right   90 Bottom to top (Wipe only)  180 Right to left (Wipe only)  270 Top to bottom  315 Top-left to bottom-right (Glitter only)  If the value is a name, it shall be None, which is relevant only for the Fly  transition when the value of SS is not 1.0.  Default value: 0.  SSnumber (Op tional; PDF 1.5; Fly transition style only)  The starting or ending scale at  which the changes shall be drawn. If  M specifies an inward transition, the scale  of the changes drawn shall progress from  SS to 1.0 over the course of the  transition. If  M specifies an outward transition, the scale of the changes drawn  shall progress from 1.0 to  SS over the course of the transition Default: 1.0. Bboolean (Op tional; PDF 1.5;  Fly transition style only ) If true, the area that shall be flown  in is rectangular and opaque. Default:  false.Table 162   Entries in a transition dictionary  (continued) Key Type Value","Transition from  page 1 to page 2 Page 2 displayed Transition from  page 2 to page 3 Transition duration for page 2 Display duration for  page 2 Transition duration for page 3",".  .  ..  .  .",""],"388":["PDF 32000-1:2008 380 ' Adobe Systems Incorporated 2008  All rights reserved 12.4.4.2 Sub-page Navigation Sub-page navigation (PDF 1.5)  provides the ability to navigate not  only between page s but also between different states of the same page.  NOTE 1 A single page in a PDF presentation could have a series of bullet points that could be individually turned on  and off. In such an example, the bullets  would be represented by  optional content (see  8.11.2, Optional  Content Groups ), and each state of the page would be represented as a  navigation node . NOTE 2 Conforming readers should save  the state of optional content groups  when a user enters presentation mode  and restore it when presentation mode  ends. This ensures, for example, t hat transient changes to bullets do  not affect the printing of the document. A navigation node dictionary (see  Ta b l e  163) specifies actions to execute wh en the user makes a navigation  request. EXAMPLE Pressing an arrow key.  The navigation nodes on a page form a  doubly linked list by means of their  Next  and  Prev entries. The primary  node on a page shall be determined by the optional  PresSteps  entry in a page dictionary (see  Ta b l e  30).  NOTE 3 A conforming reader should respect navi gation nodes only when in presentation mode (see  12.4.4,  Presentations ). A conforming reader shall maintain a  current navigation node. When a user navigates to a page, if the page  dictionary has a  PresSteps  entry, the node specified by that entr y shall become the current node. (Otherwise,  there is no current node.) If the user requests to navig ate forward (such as an arrow key press) and there is a  current navigation node, the following shall occur: a) The sequence of ac tions specified by  NA (if present) shall be executed.  If  NA  specifies an action that navigates to another page, the following actions for navigating to another  page take place, and  Next should not be present. b) The node specified by  Next (if present) shall become the new current navigation node. Similarly, if the user requests to navigate backward an d there is a current navigation node, the following shall  occur:a) The sequence of ac tions specified by  PA (if present) shall be executed. Table  163    Entries in a navigation node dictionary   KeyType Value Type name (Optional)   The type of PDF object that this  dictionary describes; shall be  NavNode  for a navigation node dictionary.  NAdictionary (Optional)  An action (which may be the first in a sequence of actions) that  shall be executed when a user navigates forward. PAdictionary (Optional)  An action (which may be the first in a sequence of actions) that  shall be executed when a user navigates backward. Next dictionary (Optional)   The next navigation node, if any. Prevdictionary (Optional)   The previous navigation node, if any. Durnumber (Optional)  The maximum number of seconds before the conforming reader shall automatically advance forward to th e next navigation node. If this entry  is not specified, no automatic advance shall occur.",""],"389":["' Adobe Systems Incorporated 2008  All rights reserved 381PDF 32000-1:2008 If  PA specifies an action that navigates to another pa ge, the following actions for navigating to another  page take place, and  Prev should not be present. b) The node specified by  Prev (if present) shall become the new current navigation node. Transition effects, similar to the page transitions described earlier, may be specified as transition actions that  are part of the  NA or  PA sequence; see 12.6.4.14, Transition Actions. If the user requests to navigate to another page (regardl ess of whether there is a current node) and that pages  dictionary contains a  PresSteps  entry, the following shall occur: a) The navigation node represented by  PresSteps  shall become the current node.  b) If the navigation request was forward, or if the  navigation request was for random access (such as by  clicking on a link), the actions specified by  NA shall be executed and the node specified by  Next shall  become the new current node, as described previously.  If the navigation request was backward, the actions specified by  PA shall be executed and the node  specified by  Prev shall become the new current node, as described previously. c) The conforming reader shall make the new page the current page and shall display it. Any page transitions  specified by the  Trans  entry of the page dictionary shall be performed.  12.5 Annotations 12.5.1 General An ann otation  associates an object such as a note, sound, or movie with a location on a page of a PDF  document, or provides a way to interact with the user  by means of the mouse and keyboard. PDF includes a  wide variety of standard annotation types, described in detail in  12.5.6, Annotation Types. Many of the standard annotation types may be displayed in either the  open or the  closed state. When closed,  they appear on the page in some distinctive form, such as  an icon, a box, or a rubber stamp, depending on the  specific annotation type. When the user  activates  the annotation by clicking it,  it exhibits its associated object,  such as by opening a pop-up window displaying a text note ( Figure 57 ) or by playing a sound or a movie.",""],"390":["PDF 32000-1:2008 382 ' Adobe Systems Incorporated 2008  All rights reserved Figure  57   Open annotation Conforming readers may permit the user to navigate th rough the annotations on a  page by using the keyboard  (in particular, the tab key). Beginning with PDF 1.5, PD F producers may make the navigation order explicit with  the optional  Tabs  entry in a page object (see  Ta b l e  30). The following are the possible values for this entry:  R (row order): Annotations shall be visited in rows running horizontally across the page. The direction  within a row shall be determined by the  Direction  entry in the viewer preferences dictionary (see  12.2,  Viewer Preferences ). The first annotation that shall be visited  is the first annotation in the topmost row.  When the end of a row is encountered, the first annotation in the next row shall be visited.  C (column order): Annotations shall be visited in  columns running vertically up and down the page.  Columns shall be ordered by the  Direction  entry in the viewer preferences dictionary (see  12.2, Viewer  Preferences ). The first annotation that shall be visited is  the one at the top of the first column. When the  end of a column is encountered, the first annotation in the next column shall be visited.  S (structure order): Annotations shall be visited in th e order in which they appear in the structure tree (see  14.7, Logical Structure ). The order for annotations that are not  included in the structure tree shall be  determined in a manner of the conforming reader’s choosing. These descriptions assume the page is being  viewed in the orientation specified by the  Rotate  entry.  Conceptually, the behaviour of each annotation type may be implemented by a software module called an  annotation handler . A conforming reader shall provide annotation ha ndlers for all of the conforming annotation  types. The set of annotation types is extensible. A conf orming reader shall provide certain expected behaviour  for all annotation types that it does not recognize, as documented in  12.5.2, Annotation Dictionaries. 12.5.2 Annotation Dictionaries The optional  Annots  entry in a page object (see  7.7.3, Page Tree ) holds an array of  annotation dictionaries , each representing an annotation associated with the given page.  Ta b l e  164  shows the required and optional  entries that are common to all annotation dictionaries.  The dictionary may contain additional entries specific to  a particular annotation type; see the descript ions of individual annotation types in  12.5.6, Annotation Types, for details. A given annotation dictio nary shall be referenced from the  Annots  array of only one page. This  requirement applies only to the annotation dictionary itself, not to subsidiary objects, which may be shared  among multiple annotations.","WE HAVE BEEN TRACKING GREAT EMPLOYEES SINCE  1981,  when we began research on our book  e 100 Best  Companies to Wo rk for in America. From our database of  more than 1,000 companies, we selected 238 as the most  viable candidates for this list. Of this group, 161 agreed to  participate. (To be eligible, a company must be at least ten  years old and have a minimum of 500 employees.)          We asked each candidate company to distribute to 225  randomly selected employees the Great Place to Work  Trust Index. is employee survey was designed by the  Great Place to Work Institute of San Francisco to evaluate  trust in management, pride in work/company, and  camaraderie. Responses were returned directly to us.          Each company was also required to ll out the Hewitt  People Practices Inventory, a comprehensive 29-page  questionnaire designed by our partner in this project,  Hewitt Associates of Lincolnshire, Ill., a leading  management consulting rm. Finally we asked each of our  candidates to send us additional corporate materials, such","This is the text associated with the  highlight annotation.","Comment",""],"391":["' Adobe Systems Incorporated 2008  All rights reserved 383PDF 32000-1:2008 Table  164    Entries common to all annotation dictionaries   KeyType Value Type name (Optional)  The type of PDF object that  this dictionary describes; if  present, shall be  Annot for an annotation dictionary.  Subtype name (Required)  The type of annotation that this dictionary describes; see  Table  169 for specific values.  Rectrectangle (Required)  The annotation rectangle , defining the location of the  annotation on the page in default user space units.  Contents text string(Optional)  Text that shall be displayed for the annotation or, if this type of  annotation does not display text, an alternate description of the  annotations contents in human-readable fo rm. In either case, this text is  useful when extracting the docum ents contents in support of  accessibility to users with disabilities or for other purposes (see  14.9.3,  Alternate Descriptions ). See 12.5.6, Annotation Types  for more details on the meaning of this entry for each annotation type. Pdictionary (Optional except as noted below; PDF  1.3; not used in FDF files)  An indirect reference to the page ob ject with which this annotation is  associated. This entry shall be present in screen annotations associated with  rendition actions ( PDF 1.5; see 12.5.6.18, Screen Annotations  and  12.6.4.13, Rendition Actions ).NMtext string(Optional; PDF  1.4) Th e  annotation name , a text string uniquely  identifying it among all the annotations on its page.  Mdate or  text string(Optional; PDF  1.1)  T he date and time when the annotation was most  recently modified. The format should be a date string as described in  7.9.4, Dates,  but conforming readers shall accept and display a string  in any format.  Finteger (Optional; PDF  1.1) A se t of flags specifying  various characteristics of  the annotation (see  12.5.3, Annotation Flags ). Default value: 0.  APdictionary (Optional; PDF  1.2) An appearance dictionary  specifying how the  annotation shall be presented visually on the page (see  12.5.5,  Appearance Streams ). Individual annotation handlers may ignore this  entry and provide their own appearances. ASname (Required if the appearance dictionary  AP contains one or more  subdictionaries; PDF  1.2) The  annotations  appearance state , which selects the applicable appearance  stream from an appearance  subdictionary (see  Section 12.5.5, Appearance Streams ).",""],"392":["PDF 32000-1:2008 384 ' Adobe Systems Incorporated 2008  All rights reserved 12.5.3 Annotation Flags The value of the annotation dictionarys  F entry is an integer interpreted as one-bit flags specifying various  characteristics of the annotation. Bit  positions within the flag word shall be numbered from low-order to high- order, with the lowest-order bit numbered 1.  Table  165 shows the meanings of the flags; all other bits of the  integer shall be set to 0.  Border array (Optional)  An array specifying the characteristics of the annotations  border, which shall be drawn as a rounded rectangle.  (PDF 1.0)  The array consists of three numbers defining the horizontal  corner radius, vertical corner radius, and border width, all in default user  space units. If the corner radii are 0, the border has square (not rounded)  corners; if the border width  is 0, no border is drawn. (PDF 1.1) The array may have a fourth element, an optional  dash array defining a pattern of dashes and gaps that shall be used in drawing the  border. The dash array shall be specified in the same format as in the  line dash pattern parameter of the graphics state (see  8.4.3.6, Line  Dash Pattern). EXAMPLE A  Border  value of [  0 0 1 [ 3 2 ] ] specifies a border 1  unit wide, with square co rners, drawn with 3-unit  dashes alternating with 2-unit gaps.  NOTE(PDF 1.2) The dictionaries for some annotation types (such  as free text and polygon annotations) can include the  BSentry. That entry specifies a bo rder style dictionary that has  more settings than the array specified for the  Border  entry.  If an annotation dictionary includes the  BS entry, then the  Border  entry is ignored. Default value: [  0 0 1 ].  Carray (Optional; PDF  1.1) An array of numbers in the range 0.0 to 1.0,  representing a colour used for the following purposes:  The background of the annotations icon when closed  The title bar of the annotations pop-up window  The border of a link annotation The number of array elements determines the colour space in which the  colour shall be defined:  0 No colour; transparent  1D eviceGray  3D eviceRGB  4D eviceCMYK  StructParent integer (Required if the annotation is a structural content item; PDF  1.3) Th e  integer key of the annotations entry in  the structural parent tree (see  14.7.4.4, Finding Structure Elements from Content Items ). OCdictionary (Optional; PDF  1.5) An optional content group or optional content  membership dictionary (see  8.11, Optional Content ) specifying the  optional content properties for the ann otation. Before the annotation is  drawn, its visibility shall be determined based on this entry as well as the  annotation flags specified in the  F entry (see 12.5.3, Annotation Flags ). If it is determined to be invisible, t he annotation shall be skipped, as if it  were not in the document. Table 164   Entries common to all  annotation dictionaries  (continued) KeyType Value",""],"393":["' Adobe Systems Incorporated 2008  All rights reserved 385PDF 32000-1:2008 Table  165    Annotation flags   Bit position NameMeaning1InvisibleIf set, do not display the annotation if it does not belong to one of the  standard annotation types and no annotation handler is available. If  clear, display such an unknown annotation using an appearance  stream specified by its appearan ce dictionary, if any (see  12.5.5, Appearance Streams ). 2Hidden (PDF 1.2)  If  set, do not display or print the annotation or allow it to  interact with the user, regardless of  its annotation type or whether an  annotation handler is available.  NOTE 1 In cases where screen space is limited, the ability to hide  and show annotations selectively can be used in  combination with appearance streams (see  12.5.5, Appearance Streams ) to display auxiliary pop-up  information similar in function to online help systems.  3Print(PDF 1.2)  If set, print the annotation when  the page is printed. If clear,  never print the annotation, regardless of whether it is displayed on the  screen.  NOTE 2 This can be useful for annotations representing interactive  pushbuttons, which would serve no meaningful purpose  on the printed page.  4NoZoom (PDF 1.3)  If set, do not scale the annotations appearance to match the  magnification of the page. The location of the annotation on the page  (defined by the upper-left corner of its annotation rectangle) shall  remain fixed, regardless of the  page magnification. See further  discussion following this Table.  5NoRotate (PDF 1.3)   If set, do not rotate the annotations appearance to match  the rotation of the page. The upper-left corner of the annotation  rectangle shall remain in a fixed location on the page, regardless of the  page rotation. See further discussion following this Table.  6NoView (PDF 1.3)  If set, do not display the annotation on the screen or allow it  to interact with the user. The annotation may be printed (depending on  the setting of the Print flag) but should be considered hidden for  purposes of on-screen display and user interaction.  7ReadOnly (PDF 1.3)   If set, do not allow the annotation to interact with the user.  The annotation may be displayed or printed (depending on the settings  of the NoView and Print flags) but should not respond to mouse clicks  or change its appearance in response to mouse motions.  This flag shall be ignored for widget an notations; its function is  subsumed by the ReadOnly flag of  the associated form field (see  Ta b l e  221 ). 8Locked(PDF 1.4)  If set, do not allow the annotation to be deleted or its  properties (including position and size) to be modified by the user.  However, this flag does not restrict changes to the annotations  contents, such as the value of a form field.  9ToggleNoView (PDF 1.5)  If set, invert the interpretation of the NoView flag for certain  events.  NOTE 3 A typical use is to have an annotation that appears only  when a mouse cursor is held over it. 10LockedContents (PDF 1.7)  If set, do not allow the contents of the annotation to be  modified by the user. This flag does not restrict deletion of the  annotation or changes to other annot ation properties, such as position  and size.",""],"394":["PDF 32000-1:2008 386 ' Adobe Systems Incorporated 2008  All rights reserved If the NoZoom flag is set, the annotation shall always  maintain the same fixed size on the screen and shall be  unaffected by the magnification level at which the page itself  is displayed. Similarly, if the NoRotate flag is set,  the annotation shall retain its orig inal orientation on the screen when the page is rotated (by changing the  Rotate entry in the page object; see  7.7.3, Page Tree ). In either case, the annotations positi on shall be determined by the coordinates of the upper-left corner of its  annotation rectangle, as defined by the  Rect  entry in the annotation dictionary and interpreted in the default  user space of the page. When the default user space is  scaled or rotated, the positions of the other three  corners of the annotation rectangle are different in the al tered user space than they were in the original user  space. The conforming reader shall perform this alterati on automatically. However, it shall not actually change  the annotations  Rect entry, which continues to describe the annotations relationship with the unscaled,  unrotated user space.  NOTEFigure 58  shows how an annotation whose NoRotate flag is se t remains upright when the page it is on is  rotated 90 degrees clockwise. The upper-left corner of t he annotation remains at the same point in default user  space; the annotation pivo ts around that point.  Figure  58   Coordinate adjustment with the NoRotate flag 12.5.4 Border Styles An annotation may optionally be surrounded by a border wh en displayed or printed. If present, the border shall  be drawn completely inside the annotation rectangle.  In PDF 1.1, the characteri stics of the border shall be  specified by the  Border entry in the annotation dictionary (see  Ta b l e  164 ). Beginning with PDF 1.2, the border  characteristics for some types of anno tations may instead be specified in a  border style dictionary  designated  by the annotations  BS entry. Such dictionaries may also be used to specify the width and dash pattern for the  lines drawn by line, square, circle, and ink annotations.  Ta b l e  166  summarizes the contents  of the border style  dictionary. If neither the  Border nor the  BS entry is present, the border sh all be drawn as a solid line with a  width of 1 point.  Table  166    Entries in a border style dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if present,  shall be  Border  for a border style dictionary.  Wnumber (Optional)  The border width in points. If this  value is 0, no border shall drawn.  Default value: 1.","Before page rotation","abcdefghijklm nopqrstuvwxyz","(0, 0)After page rotation","abcdefghijklm nopqrstuvwxyz (0, 0)",""],"395":["' Adobe Systems Incorporated 2008  All rights reserved 387PDF 32000-1:2008 Beginning with PDF 1.5, some annotations (s quare, circle, and polygon) may have a  BE entry, which is a  border effect dictionary  that specifies an effect that shall be app lied to the border of the annotations. Beginning  with PDF 1.6, the free text annotation may also have a  BE entry.  Table  167 describes the entries in a border  effect dictionary. 12.5.5 Appearance Streams Beginning with PDF 1.2, an annotation may specify one or more  appearance streams  as an alternative to the  simple border and colour characteristics available in earlier versions. Appearance streams enable the  annotation to be presented visually in different ways to  reflect its interactions with the user. Each appearance  stream is a form XObject (see  8.10, Form XObjects ): a self-contained content stream that shall be rendered  inside the annotation rectangle.  The algorithm outlined in this sub-clause shall be used  to map from the coordinate system of the appearance  XObject (as defined by its  Matrix  entry; see Ta b l e  97) to the annotations rectangle in default user space: Sname (Optional)   The border style:  S (Solid) A solid rectangle surrounding the annotation.  D (Dashed) A dashed rectangle surrounding the annotation. The dash  pattern may be specified by the  D entry.  B (Beveled) A simulated embossed rectangle that appears to be raised  above the surface of the page.  I (Inset) A simulated engraved rectangle that appears to be recessed  below the surface of the page.  U (Underline) A single line along the  bottom of the annotation rectangle.  A conforming reader shall tolerate ot her border styles that it does not  recognize and shall use the default value.  Darray(Optional)  A dash array  defining a pattern of dashes and gaps that shall be used in drawing a dashed bor der (border style D in the  S entry). The dash  array shall be specified in the same format as in the line dash pattern  parameter of the graphics state (see  8.4.3.6, Line Dash Pattern ). The dash  phase is not specified and shall be assumed to be 0.  EXAMPLE A  D entry of [ 3 2 ] specifies a border drawn with 3-point  dashes alternating with 2-point gaps.  Default value: [ 3 ]. Table  167   Entries in a border effect dictionary   KeyType Value Sname (Optional)   A name representing the border effect to apply. Possible values  are:S No effect: the border shall be as described by the annotation dictionarys  BS entry.C The border should appear cloudy. The width and dash array specified by  BS shall be honored. Default value: S.Inumber (Optional; valid only if the value of  S is C) A number describing the intensity of  the effect, in the range 0  to 2. Default value: 0. Table 166   Entries in a border style dictionary  (continued) Key Type Value",""],"396":["PDF 32000-1:2008 388 ' Adobe Systems Incorporated 2008  All rights reserved Algorithm: Appearance streams a) The appearances bounding box (specified by its  BBox entry) shall be transformed, using  Matrix , to  produce a quadrilateral with arbitrary orientation. The  transformed appearance box  is the smallest upright  rectangle that encompasses this quadrilateral. b) A matrix  A shall be computed that scales and translates the transformed appearance box to align with the  edges of the annotations rectangle (specified by the  Rect entry).  A maps the lower-left corner (the corner  with the smallest  x and  y coordinates) and the upper-right corner (the corner with the greatest  x and  ycoordinates) of the transformed appearance box to  the corresponding corners of the annotations  rectangle. c)Ma trix  shall be concatenated with  A to form a matrix  AA that maps from the appearances coordinate  system to the annotations rectangle in default user space: AA = Matrix  ¥ AThe annotation may be further scaled and rotated if  either the NoZoom or NoRotate flag is set (see  12.5.3,  Annotation Flags ). Any transformation applied to the annotation as a whole shall also applied to the  appearance within it. Starting with PDF 1.4, an annotation appearance may include transparency. If the appearances stream  dictionary does not contain a  Group  entry, it shall be treated as a non-isolated, non-knockout transparency  group. Otherwise, the isolated  and knockout values specified in the group dictionary (see  11.6.6,  Transparency Group XObjects ) shall be used. The transparency group shall be composited with a backd rop consisting of the page content along with any  previously painted annotations, using a blend mode of  Normal, an alpha constant of 1.0, and a soft mask of  None. NOTE 1 If a transparent annotation appearance is paint ed over an annotation that  is drawn without using an  appearance stream, the effect is implementation-dependen t. This is because such annotations are sometimes  drawn by means that do not conform to the PDF imaging  model. Also, the effect of highlighting a transparent  annotation appearance is implementation-dependent.  An annotation may define as many as three separate appearances:  The  n ormal appearance  shall be used when the annotation is not interacting with the user. This  appearance is also used for printing the annotation.  The  ro llover appearance  shall be used when the user moves the cursor into the annotations active area  without pressing the mouse button.  The  down appearance  shall be used when the mouse button is pressed or held down within the  annotations active area.  NOTE 2 As used here, the term mouse denotes a generic pointing  device that controls the location of a cursor on the  screen and has at least one button that can be pressed, held down, and released. See  12.6.3, Trigger  Events,  for further discussion.  The normal, rollover, and down appearances shall be defined in an  appearance dictionary , which in turn is the  value of the AP entry in the annotation dictionary (see  Ta b l e  164 ).  Ta b l e  168  shows the contents of the  appearance dictionary.",""],"397":["' Adobe Systems Incorporated 2008  All rights reserved 389PDF 32000-1:2008 Each entry in the appearance dictionary may cont ain either a single appearance stream or an  appearance  subdictionary . In the latter case, the subdictionary shall defi ne multiple appearance streams corresponding to  different  appearance states  of the annotation.  EXAMPLE An annotation representing an interactive check box may have two appearance states named On and Off.  Its appearance dictionary may be defined as  /AP <<  /N <<   /On  formXObject 1 /Off  formXObject2    >>   /D  <<   /On formXObject3 /Off  formXObject4   >>   >> where  formXObject1 and  formXObject 2 define the check boxs normal appearance in its checked and  unchecked states, and  formXObject 3 and  formXObject4 provide visual feedback, such as emboldening its  outline, when the user clicks it. (No  R entry is defined because no special appearance is needed when the  user moves the cursor over the check box without pressing the mouse button.) The choice between the  checked and unchecked appearance states is determined by the  AS entry in the annotation dictionary  (see Ta b l e  164).  NOTE 3 If a conforming reader does not have native supp ort for a particular annotation type conforming readers shall  display the annotation with its normal ( N) appearance. Conforming readers shall also attempt to provide  reasonable behavior (such as displaying nothing) if an annotations  AS entry designates an appearance state  for which no appearance is defined in the appearance dictionary.  For convenience in managing appearance st reams that are used repeatedly, the  AP entry in a PDF documents  name dictionary (see  7.7.4, Name Dictionary ) may contain a name tree mapping name strings to appearance  streams. The name strings have no standard meanings; no PDF objects may refer to appearance streams by  name. 12.5.6 Annotation Types 12.5.6.1 General PDF supports the standard annotation types listed in  Ta b l e  169 . The following sub-clauses describe each of  these types in detail.  The values in the first column of  Ta b l e  169  represent the value of the annotation dictionarys  Subtype entry.  The third column indicates whether the annotation is a  markup annotation , as described in  12.5.6.2, Markup Annotations.  The sub-clause also provides more  information about the value of the  Contents  entry for different annotation types. Table  168    Entries in an appearance dictionary   Key  Type  Value Nstream or dictionary (Required)  The annotations normal appearance.  Rstream or dictionary (Optional)  The annotations rollover appearance. Default value: the  value of the  N entry.  Dstream or dictionary (Optional)  The annotations down appearance. Default value: the value  of the  N entry.",""],"398":["PDF 32000-1:2008 390 ' Adobe Systems Incorporated 2008  All rights reserved Table  169    Annotation types   Annotation type Description MarkupDiscussed in sub-clause Text Text annotation  Yes 12.5.6.4, Text Annotations Link Link annotation  No12.5.6.5, Link Annotations FreeText (PDF 1.3) F ree text annotation  Yes 12.5.6.6, Free Text Annotations Line (PDF 1.3) Lin e annotation  Yes 12.5.6.7, Line Annotations Square(PDF 1.3) Square annotation  Yes 12.5.6.8, Square and Circle  Annotations Circle (PDF 1.3) Circle annotation  Yes 12.5.6.8, Square and Circle  Annotations Polygon(PDF 1.5) Polygon annotation  Yes 12.5.6.9, Polygon and Polyline  Annotations PolyLine (PDF 1.5) Polyli ne annotation  Yes 12.5.6.9, Polygon and Polyline  Annotations Highlight (PDF 1.3) High light annotation  Yes 12.5.6.10, Text Markup Annotations Underline (PDF 1.3) Unde rline  annotation  Yes 12.5.6.10, Text Markup Annotations Squiggly (PDF 1.4) Squig gly-underline  annotation  Yes 12.5.6.10, Text Markup Annotations StrikeOut (PDF 1.3) S trikeout annotation  Yes 12.5.6.10, Text Markup Annotations Stamp (PDF 1.3) Rubb er stamp  annotation  Yes 12.5.6.12, Rubber Stamp Annotations Caret (PDF 1.5) Caret annotation Yes 12.5.6.11, Caret Annotations Ink (PDF 1.3) In k annotation  Yes 12.5.6.13, Ink Annotations Popup(PDF 1.3) Pop-up annotation  No12.5.6.14, Pop-up Annotations FileAttachment (PDF 1.3) Fil e attachment  annotation  Yes 12.5.6.15, File Attachment Annotations Sound(PDF 1.2) Sound  annotation  Yes 12.5.6.16, Sound Annotations Movie(PDF 1.2) Mo vie annotation  No12.5.6.17, Movie Annotations Widget (PDF 1.2) Wid get annotation  No12.5.6.19, Widget Annotations Screen","(PDF 1.5) Screen annotation No12.5.6.18, Screen Annotations PrinterMark (PDF 1.4) Pr inters mark  annotation  No12.5.6.20, Printers Mark Annotations TrapNet (PDF 1.3) T rap network  annotation  No12.5.6.21, Trap Network Annotations Watermark (PDF 1.6) Watermark  annotation No12.5.6.22, Watermark Annotations 3D(PDF 1.6) 3D annotation No13.6.2, 3D Annotations Redact (PDF 1.7) Redact annotation Yes 12.5.6.23, Redaction Annotations",""],"399":["' Adobe Systems Incorporated 2008  All rights reserved 391PDF 32000-1:2008 12.5.6.2 Markup Annotations As mentioned in 12.5.2, Annotation Dictionaries,  the meaning of an annotations  Contents  entry varies by  annotation type. Typically, it is the text that shall be di splayed for the annotation or, if the annotation does not  display text, an alternate description of the annotations  contents in human-readable form. In either case, the  Contents  entry is useful when extracting  the documents contents in supp ort of accessibility to users with  disabilities or for ot her purposes (see  14.9.3, Alternate Descriptions ).Many annotation types are defined as  markup annotations  because they are used primarily to mark up PDF  documents (see  Table  170 ). These annotations have text that appear s as part of the annotation and may be  displayed in other ways by a conforming reader, such as in a Comments pane.  Markup annotations may be divided into the following groups:  Free text annotations display text di rectly on the page. The annotations  Contents  entry specifies the  displayed text. Most other markup annotations have an associated pop-up window that may contain text. The annotations  Contents  entry specifies the text that shall be disp layed when the pop-up window is opened. These  include text, line, square, circle, po lygon, polyline, highlight, underline, sq uiggly-underline, strikeout, rubber  stamp, caret, ink, and file attachment annotations.  Sound annotations do not have a pop-up window but  may also have associated text specified by the  Contents  entry. When separating text into paragraphs, a CARRIAGE  RETURN (0Dh) shall be used and not, for example, a  LINE FEED character (0Ah). NOTE 1 A subset of markup annotations is  called text markup annotations (see  12.5.6.10, Text Markup Annotations ).The remaining annotation types are not considered markup annotations:  The pop-up annotation type shall not appear by itself; it sh all be associated with a markup annotation that uses it to  display text. NOTE 2 If an annotation has no parent, the  Contents entry shall represent the text of  the annotation, otherwise it shall  be ignored by a conforming reader.  For all other annotation types ( Link , Movie , Widget , PrinterMark, and  TrapNet ), the  Contents  entry shall provide an alternate representation of  the annotations contents in hum an-readable form, which is useful  when extracting the documents contents in support of accessibility to  users with disabilities or for other  purposes (see  14.9.3, Alternate Descriptions ).Ta b l e  170 lists entries that apply to all markup annotations.  Table  170   Additional entries specific to markup annotations   KeyType Value Ttext string (Optional; PDF  1.1)  T he text label that shall be displayed in the title bar of  the annotations pop-up window when open and active. This entry shall  identify the user who added the annotation. Popupdictionary (Optional; PDF  1.3) An indirect reference to a pop-up annotation for  entering or editing the text associated with this annotation.",""],"400":["PDF 32000-1:2008 392 ' Adobe Systems Incorporated 2008  All rights reserved CAnumber (Optional; PDF  1.4)  The constant opacity value that shall be used in  painting the annotation (see Sections  11.2, Overview of Transparency, and  11.3.7, Shape and Opacity Computations ). This value shall apply to  all visible elements of the annotation in its closed state (including its  background and border) but not to the pop-up window that appears when  the annotation is opened.  The specified value shall not used if  the annotation has an appearance  stream (see  12.5.5, Appearance Streams ); in that case, the appearance  stream shall specify any transparency.  (However, if the compliant viewer  regenerates the annotations appearanc e stream, it may incorporate the  CA value into the streams content.) The implicit blend mode (see  11.3.5, Blend Mode ) is  Normal. Default  value: 1.0.  If no explicit appearance stream is  defined for the annotation, it may be painted by implementation-dependent  means that do not necessarily  conform to the PDF imaging model; in th is case, the effect of this entry is  implementation-dependent as well.  RCtext string or text stream (Optional; PDF 1.5)  A rich text string (see  12.7.3.4, Rich Text Strings ) that shall be displayed in the pop-up window when the annotation is  opened. CreationDate date (Optional; PDF 1.5)  The date and time ( 7.9.4, Dates ) when the  annotation was created. IRTdictionary (Required if an  RT entry is present, ot herwise optional; PDF 1.5)  A reference to the annotation that this annotation is in reply to. Both  annotations shall be on the same page  of the document. The relationship  between the two annotations shall be specified by the  RT entry. If this entry is present in an FDF file (see  12.7.7, Forms Data Format ), its  type shall not be a dictionary but a  text string containing the contents of  the NM entry of the annotation being replied to, to allow for a situation  where the annotation being replied to is not in the same FDF file.  Subjtext string(Optional; PDF 1.5)  Text representing a short description of the subject  being addressed by the annotation.  RTname (Optional; meaningful only if  IRT is present; PDF 1.6)  A name specifying  the relationship (the reply type) between this annotation and one  specified by  IRT. Valid values are: RThe annotation shall be considered a reply to the annotation  specified by  IRT. Conforming readers shall not display replies  to an annotation individually but together in the form of  threaded comments. Group The annotation shall be grouped with the annotation specified  by IRT; see the discussion following this Table. Default value: R.ITname (Optional; PDF 1.6)  A name describing the  intent of the markup  annotation. Intents allow conforming readers to distinguish between  different uses and behaviors of a si ngle markup annotation type. If this  entry is not present or its value is  the same as the annotation type, the  annotation shall have no explicit int ent and should behave in a generic  manner in a conforming reader. Free text annotations ( Ta b l e  174), line annotations ( Ta b l e  175), polygon  annotations ( Ta b l e  178 ), and (PDF 1.7) polyline annotations ( Table  178 ) have defined intents, whose values are enumerated in the corresponding  tables. Table 170   Additional entries specific to markup annotations  (continued) KeyType Value",""],"401":["' Adobe Systems Incorporated 2008  All rights reserved 393PDF 32000-1:2008 In PDF 1.6, a set of annotations may  be grouped so that they function as a single unit when a user interacts  with them. The group consists of a  primary annotation , which shall not have an  IRT  entry, and one or more  subordinate annotations , which shall have an  IRT entry that refers to the primary annotation and an  RT entry  whose value is  Group.Some entries in the primary annotation are treated as grou p attributes that shall apply to the group as a  whole; the corresponding entries in the subordinate annotations shall be ignored. These entries are  Contents (or  RC and  DS), M, C, T, Popup , CreationDate , Subj, and  Open . Operations that manipulate any annotation  in a group, such as movement, cut, and copy, shall be  treated by conforming readers as acting on the entire  group. NOTE 3 A primary annotation may have replies that are  not subordinate annotations; th at is, that do not have an  RTvalue of  Group .12.5.6.3 Annotation States Beginning with PDF 1.5, annotations may have an author-specific  state  associated with them. The state is not  specified in the annotation itself but in a separate text a nnotation that refers to the original annotation by means  of its  IRT  (in reply to) entry (see Table  173 ). States shall be grouped into a number of  state models , as shown  in Ta b l e  171 .Annotations shall be thought of as initially being in  the default state for each state model. State changes made  by a user shall be indicated in a text annotation with the following entries: The  T entry (see  Ta b l e  170 ) shall specify the user. The  IRT entry (see  Ta b l e  173) shall refer to the original annotation. St ate  and  StateModel  (see  Ta b l e  172 ) shall update the state of the original annotation for the specified  user.  ExData dictionary (Optional; PDF 1.7)  An external data dictionary  specifying data that shall  be associated with the annotation. This  dictionary contains the following  entries: Type  (optional)  If present, shall be  ExData .Subtype (required)  a name specifying the type  of data that the markup  annotation shall be associated wit h. The only defined value is  Markup3D . Ta b l e  298 lists the values that correspond to a  subtype of Markup3D. Table  171    Annotation states   State model State Description Marked Marked The annotation has been marked by the user.  UnmarkedThe annotation has not been marked by the user (the default). Review Accepted The user agrees with the change. Rejected The user disagrees with the change. Cancelled The change has been cancelled. Completed The change has been completed. None The user has indicated nothing about the change (the default).  Table 170   Additional entries specific to markup annotations  (continued) KeyType Value",""],"402":["PDF 32000-1:2008 394 ' Adobe Systems Incorporated 2008  All rights reserved Additional state changes shall be made by adding text  annotations in reply to the  previous reply for a given  user.  12.5.6.4 Text Annotations A te xt annotation  represents a sticky note attached to  a point in the PDF document. When closed, the  annotation shall appear as an icon; when open, it shall  display a pop-up window containing the text of the note  in a font and size chosen by the conforming reader. Te xt annotations shall not scale and rotate with the page;  they shall behave as if the NoZoom  and NoRotate annotation flags (see  Ta b l e  165 ) were always set.  Ta b l e  172shows the annotation dictionary entries sp ecific to this type of annotation.  EXAMPLE The following example  shows the definition of  a text annotation.  22 0 obj<<  /Type  /Annot  /Subtype  /Text  /Rect  [ 266 116  430 204 ] /Contents  ( The quick brown fox ate the lazy mouse  . )>>endobj 12.5.6.5 Link Annotations A link a nnotation  represents either a hypertext link to a de stination elsewhere in the document (see  12.3.2,  Destinations ) or an action to be performed ( 12.6, Actions ). Ta b l e  173  shows the annotation dictionary  entries specific to this type of annotation.  Table  172    Additional entries specific to a text annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Text  for a text annotation.  Open boolean (Optional)  A flag specifying whether the annotation shall initially be  displayed open. Default value:  false (closed).  Name name (Optional)   The name of an icon that shall be used in displaying the  annotation. Conforming readers  shall provide predefined icon  appearances for at least the following standard names:  Comment, Key, Note, Help, Ne wParagraph, Paragraph, Insert Additional names may be supported as well. Default value: Note.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  Name  entry; see  Table  168  and  12.5.5, Appearan ce Streams. State text string(Optional; PDF 1.5)  The state to which the original annotation shall be set;  see 12.5.6.3, Annotation States. Default: Unmarked if  StateModel  is Marked; None if  StateModel  is Review.StateModel text string(Required if  State  is present, otherwise optional; PDF 1.5)  The state  model corresponding to  State ; see 12.5.6.3, Annotation States. Table  173    Additional entries specific to a link annotation   KeyType Value Subtypename (Required)   The type of annotation that this  dictionary describes; shall be  Link  for a link annotation.  Adictionary (Optional; PDF  1.1) An action that shall be performed when the link  annotation is activated (see  12.6, Actions ).",""],"403":["' Adobe Systems Incorporated 2008  All rights reserved 395PDF 32000-1:2008 EXAMPLE The following example shows a link annotation that  jumps to a destination elsewhere in the document.  93 0 obj <<  /Type  /Annot  /Subtype  /Link /Rect  [ 71 717  190 734 ] /Border  [ 16 16 1 ] /Dest  [ 3 0 R /FitR  4 399  199  533  ]>>endobj 12.5.6.6 Free Text Annotations A fr ee text annotation (PDF 1.3)  displays text directly on the page. Un like an ordinary text annotation (see  12.5.6.4, Text Annotations ), a free text annotation has no open or closed state; instead of being displayed in a  pop-up window, the text shall be always visible.  Table  174 shows the annotation dictio nary entries specific to  Dest array, name or  byte string (Optional; not permitted if an  A entry is present)  A destination that shall  be displayed when the annotation is activated (see  12.3.2,  Destinations ). Hname (Optional; PDF  1.2)  The  annotations  highlighting mode , the visual effect  that shall be used when the mous e button is pressed or held down  inside its active area:  N (None) No highlighting.  I(Invert) Invert the contents of the annotation rectangle.  O I(Outline) Invert the annotations border.  P(Push) Display the annotation as if it were being pushed  below the surface of the page. Default value: I. PAdictionary (Optional; PDF  1.3)  A URI action (see 12.6.4.7, URI Actions ) formerly  associated with this annotation. When Web Capture ( 14.10,     Web  Capture ) changes an annotation from a URI to a go-to action ( 12.6.4.2,  Go-To Actions ), it uses this entry to save  the data from the original URI  action so that it can be changed back in  case the target page for the go- to action is subsequently deleted.  QuadPoints array(Optional; PDF  1.6)   An array of 8  u n  numbers specifying the  coordinates of  n quadrilaterals in default user space that comprise the  region in which the link should be activated. The coordinates for each  quadrilateral are given in the order  x1 y1 x2"," y2 x3 y3 x4 y4specifying the four vertices of t he quadrilateral in counterclockwise  order. For orientation purposes, such as when applying an underline  border style, the bottom of a quadrilateral is the line formed by ( x1 , y1)and ( x2 , y2).  If this entry is not present or the  conforming reader does not recognize  it, the region specified by the  Rect entry should be used.  QuadPoints shall be ignored if any coordinate in  the array lies outside the region  specified by  Rect.BSdictionary (Op tional; PDF 1.6 ) A border style dictionary (see  Table  166 ) specifying the line width and dash pattern to be used in drawing the annotations  border.  The annotation dictionarys  AP entry, if present, takes precedence over  the BS entry; see Table  164 and  12.5.5, Appearance Streams . Table 173   Additional entries specif ic to a link annotation  (continued) KeyType Value",""],"404":["PDF 32000-1:2008 396 ' Adobe Systems Incorporated 2008  All rights reserved this type of annotation.  12.7.3.3, Variable Text  describes the process of using these entries to generate the  appearance of the text in these annotations. Table  174    Additional entries specific to a free text annotation   KeyType Value Subtypename (Required)   The type of annotation that this dictionary describes; shall be  FreeText  for a free text annotation.  DAstring (Required)   The default appearance string that shall be used in formatting  the text (see 12.7.3.3, Variable Text ). The annotation dictionarys  AP entry, if present, shall take precedence  over the  DA entry; see  Ta b l e  168 and  12.5.5, Appearance Streams. Qinteger (Optional; PDF  1.4)  A co de specifying the form of  quadding  (justification)  that shall be used in displaying the annotations text:  0 Left-justified  1 Centered  2 Right-justified  Default value: 0 (left-justified).  RCtext string or text stream (Optional; PDF 1.5)  A rich text string (see  12.7.3.4, Rich Text Strings ) that shall be used to generate  the appearance of the annotation.  DStext string(Optional; PDF 1.5)  A default style string, as described in  12.7.3.4, Rich  Text Strings. CLarray(Optional; meaningful only if  IT is FreeTextCallout ; PDF 1.6)  An array of  four or six numbers specifying a callo ut line attached to the free text  annotation. Six numbers [  x1 y1 x2 y2  x3 y3 ] represent the starting,  knee point, and ending coordinates of  the line in default  user space, as  shown in Figure 8.4. Four numbers [  x1 y1 x2 y2 ] represent the starting  and ending coordinates of the line.  ITname (Op tional; PDF 1.6 ) A name describing the intent of the free text  annotation (see also the  IT entry in Ta b l e  170 ). The following values shall  be valid: FreeText The annotation is intended to function as a plain  free-text annotation. A plain free-text annotation  is also known as a text box comment. FreeTextCallout The annotation is intended to function as a  callout. The callout is associated with an area on  the page through the callout line specified in  CL. FreeTextTypeWriter The annotation is intended to function as a click- to-type or typewriter object and no callout line is  drawn.  Default value: FreeText BEdictionary (Op tional; PDF 1.6 ) A border effect dictionary (see  Ta b l e  167) used in  conjunction with the border style dictionary specified by the  BS entry.",""],"405":["' Adobe Systems Incorporated 2008  All rights reserved 397PDF 32000-1:2008 Figure  59   Free text annotation with callout 12.5.6.7 Line Annotations The purpose of a  line annotation (PDF 1.3)  is to display a single straight line on the page. When opened, it shall  display a pop-up window containing the text of the associated note.  Ta b l e  175  shows the annotation dictionary  entries specific to this type of annotation.  RDrectangle (Optional; PDF 1.6)  A set of four numbers  describing the numerical  differences between two rectangles: the  Rect  entry of the annotation and  a rectangle contained within that rectangle. The inner rectangle is where  the annotations text should be displa yed. Any border styles and/or border  effects specified by  BS and  BE entries, respectively, shall be applied to  the border of the inner rectangle. The four numbers correspond to the differences in default user space  between the left, top, right, and bottom coordinates of  Rect  and those of  the inner rectangle, respectively. Each value shall be greater than or  equal to 0. The sum of the top and bottom differences shall be less than  the height of  Rect , and the sum of the left and right differences shall be  less than the width of  Rect. BSdictionary (Op tional; PDF 1.6 ) A border style dictionary (see  Table  166 ) specifying the line width and dash pattern that shall be used in drawing the  annotations border.  The annotation dictionarys  AP entry, if present, takes precedence over  the BS entry; see Table  164 and  12.5.5, Appearance Streams . LEname (Op tional; meaningful only if  CL is present; PDF 1.6 ) A name specifying  the line ending style that shall be used in drawing the callout line specified  in  CL. The name shall specify the line ending style for the endpoint  defined by the pairs of coordinates ( x1, y1). Ta b l e  176  shows the possible line ending styles.  Default value: None.Table 174   Additional en tries specific to a free text annotation  (continued) Key Type Value","Free text with callouts","x","3,y3","x","2,y2","x","1,y1",""],"406":["PDF 32000-1:2008 398 ' Adobe Systems Incorporated 2008  All rights reserved Table  175    Additional entries specific to a line annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Line  for a line annotation.  Larray(Required)  An array of four numbers, [  x1 y1 x2 y2 ], specifying the  starting and ending coordinates of  the line in default user space.  If the  LL e ntry is present, this value shall represent the endpoints of the  leader lines rather than the endpoints of the line itself; see  Figure 60 .BSdictionary (Optional)  A border style dictionary (see  Table  166) specifying the width  and dash pattern that shall be used in drawing the line.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  L and  BS entries; see  Ta b l e  168 and  12.5.5, Appearance  Streams. LEarray(Optional; PDF  1.4) An  array of two names specifying the line ending  styles that shall be used in drawing the line. The first and second  elements of the array shall specify t he line ending styles for the endpoints  defined, respectively, by the first and second pairs of coordinates, ( x1 , y1 )and (x2 , y2 ), in the  L array.  Table  176  shows the possible values. Default  value: [ /None /None ]. ICarray(Optional; PDF  1.4)   An array of numbers in the range 0.0 to 1.0 specifying  the interior color that shall be used to fill the annotations line endings  (see Ta b l e  176 ). The number of array elements shall determine the colour  space in which the colour is defined:  0No colour; transparent  1D eviceGray  3D eviceRGB  4D eviceCMYK  LLnumber (Required if  LLE is present, otherwise optional; PDF  1.6)  The length of  leader lines  in default user space that extend from each endpoint of the  line perpendicular to the line itself, as shown in  Figure 60 . A positive value  shall mean that the leader lines appear in the direction that is clockwise  when traversing the line from its starting point to its ending point (as  specified by  L); a negative value shall indi cate the opposite direction.  Default value: 0 (no leader lines). LLE  number (Optional; PDF  1.6) A non-negative number that shall represents the  length of  leader line extensions  that extend from the line proper 180  degrees from the leader lines, as shown in  Figure 60 . Default value: 0 (no leader line extensions). Capboolean (Optional; PDF  1.6) If   true, the text specified by the  Contents  or RCentries shall be replicated as a capti on in the appearance of the line, as  shown in Figure 61  and Figure 62 . The text shall be rendered in a manner  appropriate to the content, taking in to account factors such as writing  direction.  Default value: false .ITname (Optional; PDF 1.6)  A name describing the intent of the line annotation  (see also  Ta b l e  170 ). Valid values shall be  LineArrow , which means that  the annotation is intended to function as an arrow, and  LineDimension , which means that the annotation is intended to function as a dimension  line.",""],"407":["' Adobe Systems Incorporated 2008  All rights reserved 399PDF 32000-1:2008 Figure  60   Leader lines  LLO number (Op tional; PDF 1.7 ) A non-negative number that shall represent the  length of the leader line offset, wh ich is the amount of empty space  between the endpoints of the annotation and the beginning of the leader  lines.  CPname (Op tional; meaningful only if  Cap is true; PDF 1.7 ) A name describing the  annotations caption positioning. Valid values are  Inline , meaning the  caption shall be centered inside the line, and  Top , meaning the caption  shall be on top of the line. Default value: Inline Measure dictionary (Op tional; PDF 1.7 ) A measure dictionary (see  Table  261 ) that shall  specify the scale and units that apply to the line annotation. COarray(Op tional; meaningful only if  Cap is true; PDF 1.7) An array of two numbers that shall specif y the offset of the capt ion text from its normal  position. The first value shall be the horizontal offset along the annotation  line from its midpoint, with a positive  value indicating offset to the right  and a negative value indicating offset to the left. The second value shall  be the vertical offset perpendicular to  the annotation line, with a positive  value indicating a shift up and a negative value indicating a shift down. Default value: [0, 0] (no offset from normal positioning) Table 175   Additional entries specif ic to a line annotation  (continued) Key Type Value","/LLE 10 -- 10 point leader  line extension","/LL 50 -- 50 point leader line","/LLO 10 -- 10 point leader  line oset","/","LL -50 -- 50 point inverse leader line","/LLE 10 -- 10 point leader  line extension /LLO 10 -- 10 point leader  line oset",""],"408":["PDF 32000-1:2008 400 ' Adobe Systems Incorporated 2008  All rights reserved Figure 61  illustrates the effect of includ ing a caption to a line annotation, which is specified by setting  Cap  to  true . Figure 61   Lines with captions appearing as part of the line  Figure 62  illustrates the effect of applying a caption  to a line annotation that  has a leader offset. Figure 62   Line with a caption appearing as part of the offset  Table  176    Line ending styles   Name  Appearance Description SquareA square filled with the annotations interior color, if any  Circle A circle filled with the annotations interior color, if any  Diamond A diamond shape filled with the annotations interior color, if any  OpenArrow Two short lines meeting in an acute angle to form an open  arrowhead  ClosedArrow Two short lines meeting in an acute angle as in the OpenArrow style  and connected by a third line to form a triangular closed arrowhead  filled with the annotations  interior color , if any  None No line ending","This is an inside caption","This is a caption that is longer than the line","This is a top caption","This is an oset caption","/CO [30, 15] -- 30 point horizontal oset along the annotation line and 15 point vertical oset perpendicular to the annotation line",""],"409":["' Adobe Systems Incorporated 2008  All rights reserved 401PDF 32000-1:2008 12.5.6.8 Square and Circle Annotations Square an d  circle annotations (PDF 1.3)  shall display, respectively, a rectan gle or an ellipse on the page. When  opened, they shall display a pop-up window containing the  text of the associated note . The rectangle or ellipse  shall be inscribed within the annotation rectangle defined by the annotation dictionarys  Rect  entry (see  Ta b l e  168). Figure 63  shows two annotations, each with a border width of 18 points. Despite the names  square and circle , the width and height of the annotation rectangle need not be equal.  Ta b l e  177  shows the annotation dictionary  entries specific to these types of annotations.  Figure  63   Square and circle annotations Butt (PDF 1.5)  A short line at the endpoint perpendicular to the line itself  ROpenArrow (PDF 1.5)  Two short lines in the reverse direction from OpenArrow RClosedArrow (PDF 1.5)  A triangular closed arrowhead in the reverse direction  from ClosedArrow Slash(PDF 1.6)   A short line at the endpoint approximately 30 degrees  clockwise from perpendicular to the line itself Table  177    Additional entries specific to a square or circle annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Square or Circle  for a square or circle annotation, respectively.  BSdictionary (Optional)  A border style dictionary (see  Ta b l e  166) specifying the line  width and dash pattern that shall be used in drawing the rectangle or  ellipse.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  Rect and  BS entries; see  Table  168 and 12.5.5, Appearance  Streams.  Table 176   Line ending styles  (continued) Name  Appearance Description","18 pt","18 ptRect","Square annotation Circle annotation",""],"410":["PDF 32000-1:2008 402 ' Adobe Systems Incorporated 2008  All rights reserved 12.5.6.9 Polygon and Polyline Annotations Polygon annotations (PDF 1.5)  display closed polygons on the page. Su ch polygons may have any number of  vertices connected by straight lines.  Polyline annotations (PDF 1.5)  are similar to polygons, except that the first  and last vertex are not implicitly connected. ICarray(Optional; PDF  1.4)  An array of numbers that shall be in the range 0.0 to  1.0 and shall specify the  interior color with which to fill the annotations  rectangle or ellipse. The number of array elements determines the colour  space in which the colour shall be defined:  0 No colour; transparent  1D eviceGray  3D eviceRGB  4D eviceCMYK  BEdictionary (Optional; PDF 1.5)  A border effect dictionary  describing an effect applied  to the border described by the  BS entry (see  Ta b l e  167).  RDrectangle (Optional; PDF 1.5)  A set of four numbers that shall describe the  numerical differences between two rectangles: the  Rect  entry of the  annotation and the actual boundaries  of the underlying square or circle.  Such a difference may occur in si tuations where a border effect  (described by  BE) causes the size of the  Rect  to increase beyond that of  the square or circle. The four numbers shall correspond to  the differences in default user  space between the left, top, righ t, and bottom coordinates of  Rect  and  those of the square or circle, res pectively. Each value shall be greater  than or equal to 0. The sum of th e top and bottom differences shall be  less than the height of  Rect , and the sum of the left and right differences  shall be less than the width of  Rect.Table  178    Additional entries specific to a polygon or polyline annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Polygon or PolyLine for a polygon or polyline annotation, respectively.  Vertices array(Required)  An array of numbers (see  Table  174) specifying the width and  dash pattern that shall represent the  alternating horizontal and vertical  coordinates, respectively, of each vertex, in default user space. LEarray(Optional; meaningful only for polyline annotations)  An array of two names that shall specify the line en ding styles. The first and second  elements of the array shall specify t he line ending styles for the endpoints  defined, respectively, by the first and last pairs of coordinates in the  Vertices  array.  Table  176 shows the possible values. Default value: [  /None  /None ].BSdictionary (Optional)  A border style dictionary (see  Table  166) specifying the width  and dash pattern that shall be used in drawing the line.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  Vertices  and  BS entries; see  Ta b l e  168  and  12.5.5,  Appearance Streams.  Table 177   Additional entries specific to a square or circle annotation  (continued) Key Type Value",""],"411":["' Adobe Systems Incorporated 2008  All rights reserved 403PDF 32000-1:2008 12.5.6.10 Text Markup Annotations Text markup annotations  shall appear as highlights, underlines, strikeouts  (all PDF 1.3) , or jagged (squiggly)  underlines  (PDF 1.4)  in the text of a document. When opened,  they shall display a pop-up window containing  the text of the  associated note.  Ta b l e  179  shows the annotation dictionary en tries specific to these types of  annotations.  ICarray(Optional; PDF  1.4)  An array of numbers that shall be in the range 0.0 to  1.0 and shall specify the  interior color  with which to fill the annotations  line endings (see  Ta b l e  176 ). The number of array elements determines  the colour space in which the colour shall be defined:  0 No colour; transparent  1D eviceGray  3D eviceRGB  4D eviceCMYK  BEdictionary (Optional; meaningful only for polygon annotations)  A border effect  dictionary  that shall describe an effect applied to the border described by  the BS entry (see  Ta b l e  167). ITname (Optional; PDF 1.6)  A name that shall describe the intent of the polygon  or polyline annotation (see also  Table  170 ). The following values shall be valid:PolygonCloud The annotation is intended to function as a cloud  object. PolyLineDimension (PDF 1.7)  The polyline annotation is intended to  function as a dimension. PolygonDimension (PDF 1.7) The polygon annotation is intended to  function as a dimension. Measure dictionary (Op tional; PDF 1.7 ) A measure dictionary (see  Table  261 ) that shall  specify the scale and units that apply to the annotation.  Table  179    Additional entries specific to text markup annotations   KeyType Value Subtypename (Required)  The type of annotation that th is dictionary describes; shall be  Highlight , Underline , Squiggly , or  StrikeOut  for a highlight,  underline, squiggly-underline, or st rikeout annotation, respectively.  QuadPoints array(Required)  An array of 8  u n numbe rs specifying the coordinates of  nquadrilaterals in default user space. Each quadrilateral shall  encompasses a word or group of contiguous words in the text  underlying the annotation. The coordinates for each quadrilateral shall  be given in the order  x1 y1 x2 y2 x3 y3 x4 y4specifying the quadrilaterals four  vertices in counterclockwise order  (see Figure 64 ). The text shall be oriented with respect to the edge  connecting points ( x1 , y1) and ( x2 , y2).The annotation dictionarys  AP entry, if present, shall take precedence  over QuadPoints ; see Ta b l e  168 and  12.5.5, Appearance Streams.  Table 178   Additional entries specific to a polygon or polyline annotation  (continued) Key Type Value",""],"412":["PDF 32000-1:2008 404 ' Adobe Systems Incorporated 2008  All rights reserved Figure  64   QuadPoints  specification12.5.6.11 Caret Annotations A caret annotation  (PDF 1.5)  is a visual symbol that indicates the presence of text edits.  Ta b l e  180 lists the  entries specific to caret annotations. 12.5.6.12 Rubber Stamp Annotations A ru bber stamp annotation (PDF 1.3)  displays text or graphics intended to  look as if they were stamped on the  page with a rubber stamp. When opened, it shall display a pop-up window containing the text of the associated  note. Ta b l e  181  shows the annotation dictionary entries specific to this type of annotation.  Table  180    Additional entries specific to a caret annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Caret  for a caret annotation.  RDrectangle (Optional; PDF 1.5)  A set of four numbers that shall describe the  numerical differences between two rectangles: the  Rect  entry of the  annotation and the actual boundaries of the underlying caret. Such a  difference can occur. When a paragraph symbol specified by  Sy is  displayed along with the caret. The four numbers shall correspond to  the differences in default user  space between the left, top, righ t, and bottom coordinates of  Rect  and  those of the caret, respectively. Each value shall be greater than or equal  to 0. The sum of the top and bottom  differences shall be less than the  height of  Rect , and the sum of the left and right differences shall be less  than the width of  Rect . Syname (Optional)   A name specifying a symbol that shall be associated with the  caret:P A new paragraph symbol (¶) should be associated with the  caret.None No symbol should be associated with the caret. Default value: None.","Jupiter (x3 , y3 )(x2 , y2 )(x1 , y1 )(x4 , y4 )",""],"413":["' Adobe Systems Incorporated 2008  All rights reserved 405PDF 32000-1:2008 12.5.6.13 Ink Annotations An ink a nnotation (PDF 1.3)  represents a freehand scribble composed of one or more disjoint paths. When  opened, it shall display a pop-up window co ntaining the text of the associated note.  Table  182  shows the  annotation dictionary entries specif ic to this type of annotation.  12.5.6.14 Pop-up Annotations A p op-up annotation (PDF 1.3)  displays text in a pop-up window for entry and editing. It shall not appear alone  but is associated with a markup annotation, its  parent annotation , and shall be used for editing the parents text.  It shall have no appearance stream or associated acti ons of its own and shall be identified by the  Popup  entry  in the parents annotation dictionary (see  Ta b l e  174 ).  Ta b l e  183  shows the annotation dictionary entries specific  to this type of annotation.  Table  181   Additional entries specific to a rubber stamp annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Stamp  for a rubber stamp annotation.  Name name (Optional)  The name of an icon that shall be used in displaying the  annotation. Conforming readers s hall provide predefined icon  appearances for at least the following standard names:  Approved, Experimental, NotApproved, AsIs, Expired ,  NotForPublicRelease, Confidentia l, Final, Sold, Departmental,  ForComment, TopSecret, Draft, ForPublicRelease Additional names may be supported as well. Default value: Draft.  The annotation dictionarys  AP entry, if present, shall take precedence  over the Name entry; see  Table  168  and  12.5.5, Appearance Streams.  Table  182    Additional entries specific to an ink annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Ink  for an ink annotation.  InkList array(Required)  An array of  n arrays, each representing a stroked path. Each  array shall be a series of alternating horizontal and vertical coordinates in  default user space, specifying poi nts along the path. When drawn, the  points shall be connected by st raight lines or curves in an  implementation-dependent way.  BSdictionary (Optional)  A border style dictionary (see  Ta b l e  166) specifying the line  width and dash pattern that shall  be used in drawing the paths.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  InkList  and  BS entries; see  Ta b l e  168  and  12.5.5, Appearance  Streams.",""],"414":["PDF 32000-1:2008 406 ' Adobe Systems Incorporated 2008  All rights reserved 12.5.6.15 File Attachment Annotations A file  attachment annotation (PDF 1.3)  contains a reference to a file, which typically shall be embedded in the  PDF file (see  7.11.4, Embedded File Streams ). NOTE A table of data might use a file atta chment annotation to link to a spreads heet file based on th at data; activating  the annotation extracts the embedded file and gives the user  an opportunity to view it or store it in the file  system. Ta b l e  184 shows the annotation dictionary entries specific to this type of annotation.  The  Contents  entry of the annotation dictionary may specify descriptive text relating  to the attached file.  Conforming readers shall use this entry rather than the optional  Desc entry  (PDF 1.6)  in the file specification  dictionary (see  Ta b l e  44) identified by the annotations  FS entry. 12.5.6.16 Sound Annotations A so und annotation  (PDF 1.2)  shall analogous to a text annotation except  that instead of a text note, it contains  sound recorded from the computers microphone or import ed from a file. When the annotation is activated, the  sound shall be played. The annotation shall behave like a te xt annotation in most ways, with a different icon (by  default, a speaker) to indicate that it represents a sound.  Ta b l e  185  shows the annotation dictionary entries  specific to this type of annotation. Sound objects are discussed in  13.3, Sounds.  Table  183    Additional entries specific to a pop-up annotation   KeyType Value Subtypename (Required)  The type of annotation that th is dictionary describes; shall be  Popup for a pop-up annotation.  Parentdictionary (Optional; shall be an indirect reference)  The parent annotation with  which this pop-up annotation shall be associated.  If this entry is present, the parent annotations  Contents, M, C, and Tentries (see  Ta b l e  168 ) shall override those of the pop-up annotation  itself.  Open boolean (Optional)  A flag specifying whether  the pop-up annotation shall initially be displayed open. Default value:  false  (closed).  Table  184    Additional entries specific to a file attachment annotation   KeyType Value Subtypename (Required)  The type of annotation that th is dictionary describes; shall be  FileAttachment  for a file attachment annotation.  FSfile specification (Required)   The file associated with this annotation.  Name name (Optional)   The name of an icon that shall be used in displaying the  annotation. Conforming readers shall provide predefined icon  appearances for at least the following standard names:  GraphPushPin PaperclipTag Additional names may be supported as well. Default value: PushPin.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  Name entry; see  Ta b l e  168  and  12.5.5, Appearance  Streams.",""],"415":["' Adobe Systems Incorporated 2008  All rights reserved 407PDF 32000-1:2008 12.5.6.17 Movie Annotations A m ovie annotation (PDF 1.2)  contains animated graphics and sound to be presented on the computer screen  and through the speakers. When the annotation is activated, the movie shall be played.  Ta b l e  186  shows the  annotation dictionary entries specific to this  type of annotation. Movies are discussed in  13.4, Movies. 12.5.6.18 Screen Annotations A scre en annotation (PDF 1.5)  specifies a region of a page upon which media clips may be played. It also  serves as an object from which actions can be triggered.  12.6.4.13, Ren dition Actions  discusses the  relationship between screen annot ations and rendition actions.  Ta b l e  187  shows the annotation dictionary  entries specific to this type of annotation. Table  185   Additional entries specific to a sound annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Sound for a sound annotation.  Soundstream(Required)  A sound object defining the so und that shall be played when  the annotation is activated (see  13.3, Sounds ). Name name (Optional)  The name of an icon that shall be used in displaying the  annotation. Conforming readers s hall provide predefined icon  appearances for at least the standard names Speaker and Mic. Additional  names may be supported as well. Default value: Speaker.  The annotation dictionarys  AP entry, if present, shall take precedence  over the Name entry; see  Table  168  and  12.5.5, Appearance Streams.  Table  186   Additional entries specific to a movie annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Movie for a movie annotation.  Ttext string (Op tional ) The title of the movie annotation. Movie actions ( 12.6.4.9,  Movie Actions ) may use this title to reference the movie annotation. Moviedictionary (Required)  A movie dictionary that shall describe the movies static  characteristics (see  13.4, Movies ). Aboolean  or dictionary(Optional)   A flag or dictionary specifying whether and how to play the  movie when the annotation is activated. If this value is a dictionary, it shall  be a movie activation dictionary (see  13.4, Movies ) specifying how to  play the movie. If the value is the boolean  true, the movie shall be played  using default activation parameters. If the value is  false, the movie shall  not be played. Default value:  true. Table  187    Additional entries specific to a screen annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Screen for a screen annotation.  Ttext string (Op tional ) The title of the screen annotation.  MKdictionary (Optional)  An appearance characteristics dictionary (see  Table  189). The  I en try of this dictionary provides the icon used in generating the  appearance referred to by the screen annotations  AP entry.",""],"416":["PDF 32000-1:2008 408 ' Adobe Systems Incorporated 2008  All rights reserved In addition to the entries in  Table  187 , screen annotations may use the common entries in the annotation  dictionary (see  Ta b l e  164 ) in the following ways: The  P entry shall be used for a screen annotation referenc ed by a rendition action. It shall reference a valid  page object, and the annotation shall be present in the pages  Annots  array for the action to be valid.  The  AP entry refers to an appearance dictionary (see  Ta b l e  168 ) whose normal appearance provides the  visual appearance for a screen annotation that sha ll be used for printing and default display when a media  clip is not being played. If  AP is not present, the screen annotation shall not have a default visual  appearance and shall not be printed.  12.5.6.19 Widget Annotations Interactive forms (see  12.7, Interactive Forms ) use  wid get annotations (PDF 1.2)  to represent the appearance  of fields and to manage user interactions. As a conv enience, when a field has only a single associated widget  annotation, the contents of  the field dictionary ( 12.7.3, Field Dictionaries ) and the annotation dictionary may  be merged into a single dictionary containing entries that pertain to both a field and an annotation.  NOTE This presents no ambiguity, since the contents of  the two kinds of dicti onaries do not conflict.  Ta b l e  188 shows the annotation dictionary entries specific to th is type of annotation; interactive forms and fields  are discussed at length in  12.7, Interactive Forms.  Adictionary (Optional; PDF  1.1) An  action that shall be performed when the  annotation is activated (see  12.6, Actions ). AAdictionary (Optional; PDF  1.2) An  additional-actions dictionary defining the screen  annotations behaviour in response  to various trigger events (see  12.6.3,  Trigger Events ). Table  188   Additional entries speci fic to a widget annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Widget  for a widget annotation.  Hname (Optional)  The annotations  highlighting mode , the visual effect that shall  be used when the mouse button is pressed or held down inside its active  area:  N  (None) No highlighting.  I  (Invert) Invert the content s of the annotation rectangle.  O  (Outline) Invert the annotations border.  P  (Push) Display the annotations down appearance, if any (see  12.5.5, Appearance Streams ). If no down appearance is defined,  the contents of the annotation re ctangle shall be offset to appear  as if it were being pushed below the surface of the page.  T  (Toggle) Same as P (which is preferred).  A highlighting mode other than P shall override any down appearance  defined for the annotation. Default value: I.  MKdictionary (Optional)  An appearance characteristics dictionary (see  Table  189 ) that shall be used in constructing a dynamic appe arance stre am specifying  the annotations visual presentation on the page.  The name  MK for this entry is of historic al significance only and has no  direct meaning.  Table 187   Additional entries specific to a screen annotation  (continued) Key Type Value",""],"417":["' Adobe Systems Incorporated 2008  All rights reserved 409PDF 32000-1:2008 The  MK entry may be used to provide an  appearance characteristics dictionary  containing additional  information for constructing t he annotations appearance stream.  Table  189  shows the contents of this  dictionary.  Adictionary (Optional; PDF  1.1) An  action that shall be performed when the  annotation is activated (see  12.6, Actions ). AAdictionary (Optional; PDF  1.2) An  additional-actions dictionary defining the  annotations behaviour in response  to various trigger events (see  12.6.3,  Trigger Events ). BSdictionary (Optional; PDF 1.2)  A border style dictionary (see  Table  166 ) specifying the width and dash pattern that shal l be used in drawing the annotations  border.  The annotation dictionarys  AP entry, if present, shall take precedence  over the  L and  BS entries; see  Ta b l e  168 and  12.5.5, Appearance  Streams. Parentdictionary (Req uired if this widget annotation is one of multiple children in a field;  absent otherwise ) An indirect reference to the widget annotations parent  field. A widget annotation may have at  most one parent; that is, it can be  included in the  Kids array of at most one field Table  189    Entries in an appearance characteristics dictionary   KeyType Value Rinteger (Optional)  The number of degrees by which the widget annotation shall  be rotated counterclockwise relative to the page. The value shall be a  multiple of 90. Default value: 0.  BCarray(Optional)  An array of numbers that sh all be in the range 0.0 to 1.0  specifying the colour of the widget  annotations border. The number of  array elements determines the colour space in which the colour shall be defined:  0 No colour; transparent  1De viceGray  3De viceRGB  4De viceCMYK  BGarray(Optional)  An array of numbers that shall be in the range 0.0 to 1.0  specifying the colour of the widget annotations background. The number  of array elements shall determine the colour space, as described for  BC. CAtext string (Optional; button fields only)  The widget annotations  normal caption , which shall be displayed when it is not interacting with the user.  Unlike the remaining entries listed in this Table, which apply only to  widget annotations associated with pushbutton fields (see  Pushbuttons  in 12.7.4.2, Button Fields ), the CA entry may be used with any type of  button field, including check boxes (see  Check Boxes in 12.7.4.2, Button  Fields ) and radio buttons ( Radio Buttons  in  12.7.4.2, Button Fields ). RCtext string (Optional; pushbutton fields only)  The widget annotations  rollover  caption , which shall be displayed when the user rolls the cursor into its  active area without pre ssing the mouse button.  ACtext string (Optional; pushbutton fields only)  The widget annotations  alternate  (down) caption , which shall be displayed when the mouse button is  pressed within its active area.  Table 188   Additional entries specific to a widget annotation  (continued) Key Type Value",""],"418":["PDF 32000-1:2008 410 ' Adobe Systems Incorporated 2008  All rights reserved 12.5.6.20 Printers Mark Annotations A p rinters mark annotation (PDF 1.4)  represents a graphic symbol, such as a registration target, colour bar, or  cut mark, that may be added to a page to assist production personnel in identifying components of a multiple- plate job and maintaining consist ent output during production. See  14.11.3, Printers Marks,  for further  discussion. 12.5.6.21 Trap Network Annotations A trap  network annotation (PDF 1.3)  may be used to define the trapping characteristics for a page of a PDF  document.  NOTETrapping  is the process of adding marks to a page along colour boundaries to avoid unwanted visual artifacts  resulting from misregistration of colorants when the page is printed. A page shall have no more than one trap network annotation, whose  Subtype entry has the value  TrapNet  and  which shall always be the last element in the page objects  Annots  array (see  7.7.3.3, Page Objects ). See  14.11.6, Trapping Support,  for further discussion.  12.5.6.22 Watermark Annotations A wa termark annotation (PDF 1.6)  shall be used to represent graphics that shall be printed at a fixed size and  position on a page, regardless of the dimensions of  the printed page. The FixedPrint entry of a watermark  annotation dictionary (see  Ta b l e  190 ) shall be a dictionary that contains  values for specifying the size and  position of the annotation (see  Ta b l e  191 ).Istream (Optional; pushbutton fields only; shall be an indirect reference)  A form  XObject defining the widget annotations  normal icon , which shall be  displayed when it is not interacting with the user.  RIstream (Optional; pushbutton fields only; shall be an indirect reference)  A form  XObject defining the widget annotations  rollover icon , which shall be  displayed when the user rolls the cursor into its active area without  pressing the mouse button.  IXstream (Optional; pushbutton fields only; shall be an indirect reference)  A form  XObject defining the widget annotations  alternate (down) icon , which  shall be displayed when the mouse button is pressed within its active  area.  IFdictionary (Optional; pushbutton fields only)  An icon fit dictionary (see  Table  247 ) specifying how the widget annotations icon shall be displayed within its  annotation rectangle. If present, the icon fit dictionary shall apply to all of  the annotations icons (normal,  rollover, and alternate).  TPinteger (Optional; pushbutton fields only)  A code indicating where to position the  text of the widget annotations  caption relative to its icon:  0 No icon; caption only  1 No caption; icon only  2 Caption below the icon  3 Caption above the icon  4 Caption to the right of the icon  5 Caption to the left of the icon  6 Caption overlaid directly on the icon  Default value: 0.  Table 189   Entries in an appearance  characteristics dictionary  (continued) Key Type Value",""],"419":["' Adobe Systems Incorporated 2008  All rights reserved 411PDF 32000-1:2008 Watermark annotations shall have no pop-up window or other interactive elements. When displaying a  watermark annotation on-screen, conforming readers shal l use the dimensions of  the media box as the page  size so that the scroll and zoom behaviour is the same as for other annotations. NOTE Since many printing devices have non printable margins, such margins should be taken into consideration  when positioning watermark annotations near the edge of a page. When rendering a watermark annotation with a  FixedPrint  entry, the following behaviour shall occur:  The annotations rectangle (as specified by its  Rect entry) shall be translated to the origin and transformed  by the Matrix  entry of its  FixedPrint  dictionary to produce a quadrilateral with arbitrary orientation. The  tr ansformed annotation rectangle  shall be defined as the smallest upright rectangle that encompasses  this quadrilateral; it shall be used in place of the annotation rectangle referred to in steps 2 and 3 of  \"Algorithm: Appearance streams\" .In addition, given a matrix  B that maps a scaled and rotated page into the default user space, a new matrix shall  be computed that cancels out  B and translates the origin of the printed  page to the origin of the default user  space. This transformation shall be applied to  ensure the correct scaling and alignment.  Table  190    Additional entries specific to a watermark annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  Watermark  for a watermark annotation.  FixedPrint dictionary (Optional)  A fixed print dictionary  (see Ta b l e  191 ) that specifies how this  annotation shall be drawn relative to the  dimensions of the target media. If  this entry is not present, the annotat ion shall be drawn without any special  consideration for the dimensions of the target media. If the dimensions of the target m edia are not known at the time of  drawing, drawing shall be done relative to the dimensions specified by the  pages  MediaBox  entry (see  Ta b l e  30).Table  191    Entries in a fixed print dictionary   KeyType Value Type name (Required)  Shall be FixedPrint .Matrixarray(Optional)   The matrix used to transform the annotations rectangle before  rendering. Default value: the identity matrix [  1 0 0 1 0 0 ].  When positioning content near the edge  of a page, this entry should be  used to provide a reasonable offset to allow for nonburnable margins. Hnumber (Optional)   The amount to translate the associated content horizontally, as  a percentage of the width of the target media (or if unknown, the width of  the pages  MediaBox ). 1.0 represents 100% and 0.0 represents 0%.  Negative values should not be used, since they may cause content to be  drawn off the page. Default value: 0.Vnumber (Optional)  The amount to translate the asso ciated content vertically, as a  percentage of the height of the target media (or if unknown, the height of  the pages  MediaBox ). 1.0 represents 100% and 0.0 represents 0%.  Negative values should not be used, since they may cause content to be  drawn off the page. Default value: 0.",""],"420":["PDF 32000-1:2008 412 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE The following example shows a watermark annotation t hat prints a text string one inch from the left and  one inch from the top of the printed page.  8 0 obj  % Watermark appearance <</Length ... /Subtype /Form /Resources .../BBox ...>>stream...BT/F1 1 Tf 36 0 0 36 0 -36 Tm(Do Not Build) Tx ET... endstream endobj 9 0 obj  % Watermark annotation <</Rect ... /Type /Annot /Subtype /Watermark /FixedPrint 10 0 R /AP <</N 8 0 R>> >>% in the page dictionary /Annots [9 0 R] 10 0 obj % Fixed print dictionary <</Type /FixedPrint /Matrix [1 0 0 1 72 -72]  % Translate one inch right and one inch down /H 0/V 1.0 % Translate the full height of the page vertically >>endobj In situations other than the usual case where the PDF page size equals the printed page size, watermark  annotations with a  FixedPrint  entry shall be printed in the following manner:  When page tiling is selected in a  conforming reader (that is, a single PDF page is printed on multiple  pages), the annotations shall be printed at the specified size and position on each page to ensure that any  enclosed content is present and legible on each printed page.  When  n-up printing is selected  (that is, multiple PDF pages are printed on a single page), the annotations  shall be printed at the specified size and shall be posit ioned as if the dimensions of the printed page were  limited to a single portion of the page. This ensures  that any enclosed content  does not overlap content  from other pages, thus  rendering it illegible.  12.5.6.23 Redaction Annotations A redaction annotation ( PDF 1.7) identifies content that is intended  to be removed from the document. The  intent of redaction annotations is to enable the following process: a)Con tent identification . A user applies redact annotations that spec ify the pieces or regions of content that  should be removed. Up until the next step is perf ormed, the user can see, move and redefine these  annotations.",""],"421":["' Adobe Systems Incorporated 2008  All rights reserved 413PDF 32000-1:2008 b)Content removal . The user instructs the viewer application to  apply the redact annotations, after which the  content in the area specified by the redact annotation s is removed. In the removed contents place, some  marking appears to indicate the area has been redact ed. Also, the redact annotations are removed from  the PDF document.  Redaction annotations provide a mechanism for the first ste p in the redaction process (content identification).  This allows content to be marked fo r redaction in a non-destructive way, thus enabling a review process for  evaluating potential redactions prior  to removing the specified content.  Redaction annotations shall provide enough information  to be used in the second phase of the redaction  process (content removal). This phase is application-spec ific and requires the conforming reader to remove all  content identified by the redaction annotation, as well as the annotation itself.  Conforming readers that support redaction annotations shall provide a mechanism for applying content  removal, and they shall remove all traces of the specif ied content. If a portion of an image is contained in a  redaction region, that portion of the image data shall be  destroyed; clipping or image masks shall not be used  to hide that data. Such conforming  readers shall also be diligent  in their consideration of all content that can  exist in a PDF document, including XML Forms Architectu re (XFA) content and Extensible Metadata Platform  (XMP) content. Table  192   Additional entries specific to a redaction annotation   KeyType Value Subtypename (Re quired ) The type of annotation that th is dictionary describes; shall be  Redact  for a redaction annotation. QuadPoints array (Optional) An array of 8 x n numbers specifying the coordinates of n  quadrilaterals in default us er space, as described in  Table  175  for text  markup annotations. If present,  these quadrilaterals denote the  content region that is intended to be removed. If this entry is not  present, the  Rect  entry denotes the content re gion that is intended to  be removed. ICarray (Optional) An array of three numbers in the range 0.0 to 1.0  specifying the components, in the  DeviceRGB  colour space, of the  interior colour with which to fill t he redacted region after the affected  content has been removed. If this entry is absent, the interior of the  redaction region is left transparen t. This entry is ignored if the  ROentry is present. ROstream(Optional) A form XObject specifying the overlay appearance for this  redaction annotation. After this re daction is applied and the affected  content has been removed, the overlay appearance should be drawn  such that its origin lines up with the lower-left corner of the annotation  rectangle. This form XObject is not necessarily related to other  annotation appearances, and may or may not be present in the  APdictionary. This entry takes precedence over the  IC, OverlayText , DA, and  Q entries.OverlayText text string(Optional) A text string specifying the  overlay text that should be  drawn over the redacted region after the affected content has been  removed. This entry is ignored if the  RO entry is present. Repeat boolean (Optional) If true, then the text specified by  OverlayText  should be  repeated to fill the redacted regi on after the affected content has been  removed. This entry is ignored if the  RO entry is present. Default  value:  false .DAbyte string (Re quired if  OverlayText  is present, ignored otherwise ) The appearance string to be used in formatting the overlay text when it is  drawn after the affected content has been removed (see  12.7.3.3,  Variable Text ). This entry is ignored if the  RO entry is present.",""],"422":["PDF 32000-1:2008 414 ' Adobe Systems Incorporated 2008  All rights reserved 12.6 Actions 12.6.1 General In addition to jumping to a destination in the document, an annotation or outline item may specify an  action  (PDF 1.1)  to perform, such as launching an application, pl aying a sound, changing an annotations appearance  state. The optional  A entry in the annotation or out line item dictionary (see Tables  168  and  153) specifies an  action performed when the annotation or outline item is  activated; in PDF 1.2, a va riety of other circumstances  may trigger an action as well (see  12.6.3, Trigger Events ). In addition, the optiona l OpenAction entry in a  documents catalogue ( 7.7.2, Docum ent Catalog ) may specify an action that shall be performed when the  document is opened. PDF includes  a wide variety of standard action types, described in detail in  12.6.4, Action  Types.  12.6.2 Action Dictionaries An act ion dictionary  defines the characteristics  and behaviour of an action.  Ta b l e  193 shows the required and  optional entries that are common to all  action dictionaries. The dictionary ma y contain additional entries specific  to a particular action type; see the descri ptions of individual action types in  12.6.4, Action Types,  for details.  NOTE 1 The action dictionarys  Next entry (PDF 1.2)  allows sequences of actions to be chained together. For example,  the effect of clicking a link annotation with the mouse might be to play a sound, jump to a new page, and start  up a movie. Note that the  Next  entry is not restricted to a single ac tion but may contain an array of actions,  each of which in turn may have a  Next  entry of its own. The actions may thus form a tree instead of a simple  linked list. Actions within each  Next  array are executed in order, each followed in turn by any actions specified  in  its  Next  entry, and so on recursively. Conforming reader s should attempt to provide reasonable behavior in  anomalous situations. For example, self-referential ac tions should not be executed more than once, and  actions that close the document or  otherwise render the next action impossible should terminate the execution  sequence. Applications should also provide some mechani sm for the user to interrupt and manually terminate  a sequence of actions.  PDF 1.5 introduces transition actions, which allow the control of dr awing during a sequence of actions; see  12.6.4.14, Transition Actions. Qinteger (Optional) A code specifying the form of quadding (justification) to be  used in laying out the overlay text: 0 Left-justified 1 Centered 2 Right-justified This entry is ignored if the  RO entry is present. Default value: 0 (left- justified). Table  193    Entries common to all action dictionaries   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  Action for an action dictionary.  Sname (Required)  The type of action that this dictionary describes; see  Ta b l e  194 for specific values.  Next dictionary  or array (Optional; PDF  1.2)   The next action or sequence of actions that  shall be performed after the action represented by this dictionary.  The value is either a single action dictionary or an array of action  dictionaries that shall be perform ed in order; see the Note for  further discussion. Table 192   Additional entries specific to a redaction annotation  (continued) KeyType Value",""],"423":["' Adobe Systems Incorporated 2008  All rights reserved 415PDF 32000-1:2008 NOTE 2 No action should modify its own action dictionary or any ot her in the action tree in which it resides. The effect of  such modification on subsequent execut ion of actions in the tree is undefined.  12.6.3 Trigger Events An annotation, page object, or (beginning with PDF 1.3)  interactive form field may include an entry named AA  that specifies an  additional-actions dictionary (PDF 1.2)  that extends the set of events that can trigger the  execution of an action. In PDF 1.4, the document catalogue dictionary (see  7.7.2, Document Catalog ) may  also contain an  AA entry for trigger events affecting the document as a whole. Tables  194  to 197  show the  contents of this type of dictionary.  PDF 1.5 introduces four trigger events in annotation s additional-actions dictionary to support multimedia  presentations:  The PO and  PC entries have a similar function to the  O and  C entries in the page objects additional- actions dictionary (see  Ta b l e  194). However, associating these triggers with annotations allows annotation  objects to be self-contained.  EXAMPLE Annotations containing such actions can be copied or moved between pages without requiring page  open/close actions to be changed. The  PV and  PI entries allow a distinction between pages that  are open and pages that are visible. At any  one time, while more than one page may be visible, depending on the page layout. NOTE 1 For these trigger events, the values  of the flags specified by the annotations  F entry (see  12.5.3, Annotation  Flags ) have no bearing on whether a given trigger event occurs. Table  194    Entries in an annotations additional-actions dictionary   KeyType Value Edictionary (Optional; PDF  1.2)  An action that shall be performed when the cursor enters  the annotations active area.  Xdictionary (Optional; PDF  1.2)  An  action that shall be perfor med when the cursor exits the  annotations active area.  Ddictionary (Optional; PDF  1.2) An  action that shall be performed when the mouse button is  pressed inside the annotations active area. Udictionary (Optional; PDF  1.2) An  action that shall be performed when the mouse button is  released inside the annotations active area.  For backward compatibility, the  A entry in an annotation dictionary, if present,  takes precedence over this entry (see  Ta b l e  168). Fodictionary (Optional; PDF  1.2; widget annotations only)  An action that shall be performed  when the annotation receives the input focus.  Bldictionary (Optional; PDF  1.2; widget annotations only)  (Uppercase B, lowercase L) An  action that shall be performed when the annotation loses the input focus.  POdictionary (Optional; PDF  1.5)  An action that shall be performed when the page containing  the annotation is opened.  EXAMPLE 1 When the user navigates to it  from the next or previous page  or by means of a link  annotation or outline item.  The action shall be executed after the  O action in the pages additional-actions  dictionary (see  Ta b l e  195 ) and the  OpenAction  entry in the document  Catalog (see Table  28), if such actions are present.",""],"424":["PDF 32000-1:2008 416 ' Adobe Systems Incorporated 2008  All rights reserved PCdictionary (Optional; PDF  1.5)  An action that shall be performed when the page containing  the annotation is closed. EXAMPLE 2 When the user navigates to  the next or previous page, or  follows a link annotation or outline item.  The action shall be executed before the  C action in the pages additional- actions dictionary (see  Table  195 ), if present. PVdictionary (Optional; PDF  1.5)  An action that shall be performed when the page containing  the annotation becomes visible.  PIdictionary (Optional; PDF  1.5)  An action that shall be performed when the page containing  the annotation is no longer visible in the  conforming readers user interface.  Table  195    Entries in a page objects additional-actions dictionary   KeyType Value Odictionary (Optional; PDF  1.2) An  action that shall be performed when the page is opened  (for example, when the user navigates to it  from the next or previous page or by  means of a link annotation or outline it em). This action is independent of any  that may be defined by the  OpenAction  entry in the document  Catalog  (see 7.7.2, Document Catalog ) and shall be executed after such an action.  Cdictionary (Optional; PDF  1.2)  An a ction that shall be performed when the page is closed  (for example, when the user navigates to  the next or previous page or follows a  link annotation or an outline item). This action applies to the page being closed  and shall be executed before any other page is opened.  Table  196    Entries in a form fields additional-actions dictionary   KeyType Value Kdictionary (Optional; PDF  1.3)  A Ja vaScript action  that shall be performed when the user  modifies a character in a text field or  combo box or modifies the selection in a  scrollable list box. This action may check the added text for validity and reject or  modify it.  Fdictionary (Optional; PDF  1.3) A  JavaScript action that shall be performed before the field  is formatted to display its value. This action may modify the fields value before  formatting.  Vdictionary (Optional; PDF  1.3)   A JavaScript action that shall be performed when the fields  value is changed. This action may check the new value for validity. (The name  V stands for validate.)  Cdictionary (Optional; PDF  1.3)  A Ja vaScript action that shall be performed to recalculate  the value of this field when that  of another field changes. (The name  C stands  for calculate.) The order in which the  documents fields are recalculated shall  be defined by the  CO entry in the interactive form dictionary (see  12.7.2,  Interactive Form Dictionary ). Table 194   Entries in an annotations additional-actions dictionary  (continued) Key Type Value",""],"425":["' Adobe Systems Incorporated 2008  All rights reserved 417PDF 32000-1:2008 Conforming readers shall ensure the presence of such a  device, or equivalent contro ls for simulating one, for  the corresponding actions to be execut ed correctly. Mouse-related trigger events are subject to the following  constraints:  An  E (enter) event may occur only when the mouse button is up.  An  X ( exit) event may not occur without a preceding  E event.  A  U ( up) event may not occur without a preceding  E and  D event.  In the case of overlapping or nested annotations, enter ing a second annotations active area causes an  Xevent to occur for the first annotation.  NOTE 2 The field-related trigger events  K (keystroke), F (format),  V (validate), and  C (calculate) are not defined for  button fields (see  12.7.4.2, Button Fields ). The effects of an action trigge red by one of these events are  limited only by the action itself and can occur outside  the described scope of the  event. For example, even  though the  F event is used to trigger actions that format field va lues prior to display, it is possible for an action  triggered by this event to perform a calculation or make any other modification to the document.  These field-related trigger events can occur either through user interaction or programmatically, such as in  response to the  NeedAppearances  entry in the interactive form dictionary (see  12.7.2, Interactive Form  Dictionary ), importation of FDF data ( 12.7.7, Forms Data Format ), or JavaScript actions (12.6.4.16,  JavaScript Actions ). For example, the users modifying a field va lue can trigger a cascade of calculations and  further formatting and validation fo r other fields in the document.  12.6.4 Action Types 12.6.4.1 General PDF supports the standard action types listed in  Ta b l e  198 . The following sub-clauses describe each of these  types in detail.  Table  197    Entries in the document catalogs additional-actions dictionary   KeyType Value WCdictionary (Optional; PDF  1.4) A  JavaScript action that shall be performed before closing a  document. (The name  WC stands for will close.) WSdictionary (Optional; PDF  1.4) A  JavaScript action that sh all be performed before saving a  document. (The name  WS stands for will save.)  DSdictionary (Optional; PDF  1.4)   A JavaScript action that shall be performed after saving a  document. (The name  DS stands for did save.)  WPdictionary (Optional; PDF  1.4)  A Ja vaScript action that shall be performed before printing  a document. (The name  WP stands for will print.)  DPdictionary (Optional; PDF  1.4)  A JavaScript action that shall be performed after printing a  document. (The name  DP stands for did print.)  Table  198    Action types   Action typeDescription Discussed in sub-clause GoTo Go to a destination in  the current document.  12.6.4.2, Go-To Actions GoToR (Go-to remote) Go to a destination in another  document.  12.6.4.3, Remote Go-To Actions GoToE (Go-to embedded;  PDF 1.6) Go to a destination in  an embedded file. 12.6.4.4, Embedded Go-To Actions",""],"426":["PDF 32000-1:2008 418 ' Adobe Systems Incorporated 2008  All rights reserved NOTE The set-state action is considered obsolete and should not be used. 12.6.4.2 Go-To Actions A go -to action  changes the view to a specified destinatio n (page, location, and magnification factor).  Ta b l e  199shows the action dictionary entries  specific to this type of action.  NOTE Specifying a go-to action in the  A entry of a link annotation or outline item (see  Table  173  and Table  153) has the same effect as specifying the destination directly with the  Dest entry. For example, the link annotation  shown in the Example in  12.6.4.12, Set-OCG-State Actions,  which uses a go-to action, has the same effect  as the one in the following Example,  which specifies the destin ation directly. However, the go-to action is less  compact and is not compatible with PDF 1.0; theref ore, using a direct dest ination is preferable.  Launch Launch an application, usually to open a file.  12.6.4.5, Launch Actions Thread Begin reading an article thread.  12.6.4.6, Thread Actions URIResolve a uniform resource identifier.  12.6.4.7, URI Actions Sound(PDF 1.2)  Pl ay a sound.  12.6.4.8, Sound Actions Movie (PDF 1.2)  Pl ay a movie.  12.6.4.9, Movie Actions Hide(PDF 1.2)   Set an annotations Hidden flag.  12.6.4.10, Hide Actions Named (PDF 1.2)  Execute an action predefined by the  conforming reader.  12.6.4.11, Named Actions SubmitForm (PDF 1.2)  Se nd data to a uniform resource locator.  12.7.5.2, Submit-Form Action ResetForm (PDF 1.2)   Set fields to their default values.  12.7.5.3, Reset-Form Action ImportData (PDF 1.2)  Import field values from a file.  12.7.5.4, Import-Data Action JavaScript (PDF 1.3)  Execute a JavaScript script.  12.6.4.16, JavaScript Actions SetOCGState (PDF 1.5)  Set the states of op tional content groups.  12.6.4.12, Set-OCG-State Actions Rendition(PDF 1.5)  Controls the playing of multimedia content. 12.6.4.13, Rendition Actions Trans (PDF 1.5)   Updates the display of a document, using  a transition dictionary. 12.6.4.14, Transition Actions GoTo3DView (PDF 1.6) Set the current view of a 3D annotation 12.6.4.15, Go-To-3D-View Actions, Table  199    Additional entries specific to a go-to action   KeyType Value Sname (Required)  The type of action that this  dictionary describes; shall be  GoTo for a go-to action.  Dname,  byte string,  or array(Required)   The destination to jump to (see  12.3.2, Destinations ). Table 198   Action types  (continued) Action type Description Discussed in sub-clause",""],"427":["' Adobe Systems Incorporated 2008  All rights reserved 419PDF 32000-1:2008 EXAMPLE 93  0 obj <<  /Type  /Annot  /Subtype  /Link /Rect  [ 71 717  190 734 ] /Border  [ 16 16 1 ] /A << /Type  /Action  /S /GoTo   /D [ 3 0 R /FitR  4 399 199 533  ]  >>>>endobj 12.6.4.3 Remote Go-To Actions A r emote go-to action  is similar to an ordinary go-to action but jumps to a destination in another PDF file  instead of the current file.  Ta b l e  200  shows the action dictionary entries  specific to this type of action.  NOTE Remote go-to actions cannot  be used with embedded files; see  12.6.4.4, Embedded Go-To Actions.  12.6.4.4 Embedded Go-To Actions An e mbedded go-to action (PDF 1.6)  is similar to a remote go-to action bu t allows jumping to or from a PDF file  that is embedded in another PDF file (see  7.11.4, Embedded File Streams ). Embedded files may be  associated with file attachment annotations (see  12.5.6.15, File Atta chment Annotations ) or with entries in the  EmbeddedFiles  name tree (see  7.7.4, Name Dictionary ). Embedded files may in turn contain embedded  files. Ta b l e  201  shows the action dictionary entries  specific to embedded go-to actions. Embedded go-to actions provide a complete facility for linking between a file in a hierarchy of nested  embedded files and another file in the same or different  hierarchy. The following terminology shall be used: The  source  is the document containi ng the embedded go-to action.  The  t arget  is the document in wh ich the destination lives.  The  T entry in the action dictionary is a  target dictionary that locates the target in relation to the source, in  much the same way that a relative path describes th e physical relationship bet ween two files in a file system. Target dictionaries may be nested recursively  to specify one or more intermediate targets before  reaching the final one. As the hierar chy is navigated, each intermediate target shall be referred to as the  current document . Initially, the source is the current document.  Table  200    Additional entries specific to a remote go-to action   Key Type Value Sname (Required)  The type of action that this  dictionary describes; shall be  GoToR  for a remote go-to action.  Ffile specification (Required)  The file in which the destination shall be located.  Dname, byte string, or  array(Required)  The destination to jump to (see  12.3.2, Destinations ). If the value is an array defining an  explicit destination (as described  under  12.3.2.2, Explicit Destinations ), its first element shall be a page","number within the remote  document rather than an indirect reference  to a page object in the current document. The first page shall be numbered 0.  NewWindow boolean (Optional; PDF  1.2)   A flag specifying whether to open the destination  document in a new window. If this flag is  false , the destination  document replaces the current docum ent in the same window. If this  entry is absent, the conforming reader should behave in accordance  with its preference.",""],"428":["PDF 32000-1:2008 420 ' Adobe Systems Incorporated 2008  All rights reserved NOTE It is an error for a target dictionary  to have an infinite cycle (for  example, one where a targ et dictionary refers to  itself). Conforming readers should attempt to detect such cases and refuse to execute the action if found. A  child  document shall be one that is embedded within another PDF file.  The document in which a file is embedded shall be its  parent .A  roo t document  is one that is not embedded in another PDF file. The target and source may be contained  in root documents or embedded documents. Table  201    Additional entries specific to an embedded go-to action   Key Type Value Sname (Required)  The type of action that this dictionary describes; shall be  GoToE  for an embedded go-to action.  Ffile  specification(Optional)  The root document of the target relative to the root  document of the source. If this entry is absent, the source and target  share the same root document.  Dname,  byte string,  or array(Required)  The destination in the target to jump to (see  12.3.2, Destinations ). NewWindow boolean (Optional)  If true, the destination document should be opened in a new  window; if  false, the destination document should replace the current  document in the same window. If this  entry is absent, the conforming  reader should act according to its preference. Tdictionary (Optional if  F is present; otherwise required)  A target dictionary  (see  Ta b l e  202 ) specifying path information to  the target document. Each  target dictionary specifies one element in the full path to the target and  may have nested target dictionaries specifying additional elements. Table  202    Entries specific to a target dictionary   Key Type Value Rname (Required)  Specifies the relationship  between the current document  and the target (which may be an intermediate target). Valid values are  P (the target is the parent  of the current document) and  C (the target is  a child of the current document).  Nbyte string (Required if the value of  R is C and the target is located in the  EmbeddedFiles  name tree; otherwise, it shall be absent)  The name of  the file in the  EmbeddedFiles  name tree.  Pinteger or  byte string (Required if the value of  R is C and the target is associated with a file  attachment annotation; othe rwise, it shall be absent)  If the value is an  integer, it specifies the page num ber (zero-based) in the current  document containing the file attach ment annotation. If the value is a  string, it specifies a named destina tion in the current document that  provides the page number of the file attachment annotation. Ainteger or text  string(Required if the value of  R is C and the target is associated with a file  attachment annotation; othe rwise, it shall be absent)  If the value is an  integer, it specifies the index (zer o-based) of the annotation in the  Annots  array (see Table  30) of the page specified by  P. If the value is a  text string, it specifies the value of  NM in the annotation dictionary (see  Ta b l e  164).Tdictionary (Optional)  A target dictionary specifying additional path information to  the target document. If this entry is  absent, the current document is the  target file containing the destination.",""],"429":["' Adobe Systems Incorporated 2008  All rights reserved 421PDF 32000-1:2008 EXAMPLE The following exampl e illustrates several possible relationship s between source and  target. Each object  shown is an action dictionary for an embedded go-to action. 1 0 obj% Link to a child  << /Type /Action  /S /GoToE  /D (Chapter 1) /T << /R /C  /N (Embedded document) >> >>  endobj 2 0 obj% Link to the parent << /Type /Action  /S /GoToE /D (Chapter 1) /T << /R /P >> >>endobj 3 0 obj% Link to a sibling  << /Type /Action  /S /GoToE  /D (Chapter 1)  /T <<  /R /P  /T <<  /R /C  /N (Another embedded document) >> >>>>endobj 4 0 obj% Link to an embedded file  in an external document  << /Type /Action  /S /GoToE  /D (Chapter 1)  /F (someFile.pdf)  /T <<  /R /C /N (Embedded document) >> >>  endobj 5 0 obj% Link from an embedded file to a normal file  << /Type /Action  /S /GoToE  /D (Chapter 1)  /F (someFile.pdf)  >>  endobj 6 0 obj% Link to a grandchild  << /Type /Action  /S /GoToE  /D (Chapter 1) /T <<  /R  /C /N (Embedded document)  /T << /R /C /P (A destination name) /A (annotName)  >>>>>>endobj 7 0 obj% Link to a niece/nephew  through the sources parent",""],"430":["PDF 32000-1:2008 422 ' Adobe Systems Incorporated 2008  All rights reserved << /Type /Action  /S /GoToE  /D (destination)  /T << /R /P  /T << /R /C  /N (Embedded document) /T <<  /R /C /P 3 /A (annotName) >>>>>>  >>endobj  12.6.4.5 Launch Actions A l aunch action  launches an application or opens or prints a document.  Ta b l e  203  shows the action dictionary  entries specific to this type of action.  The optional  Win, Mac, and  Unix entries allow the action dictionary to include platform-specific parameters for  launching the designated application. If no such entry is present for the given platform, the  F entry shall be used instead.  Ta b l e  203  shows the platform-s pecific launch parameters for the Windows platform. Parameters  for the Mac OS and UNIX platforms are not  yet defined at the time of publication.  Table  203    Additional entries specif ic to a launch action   Key Type Value Sname (Required)  The type of action that this  dictionary describes; shall be  Launch  for a launch action.  Ffile specification (Required if none of the entries  Win, Mac, or Unix is present)  The  application that shall be launched  or the document that shall be opened or printed. If this entry is  absent and the conforming reader does not understand any of the alternat ive entries, it shall do nothing.  Windictionary (Optional)  A dictionary containing Windows-specific launch  parameters (see  Table  204 ). Mac(undefined) (Optional)   Mac OSspecific launch parameters; not yet defined.  Unix (undefined) (Optional)  UNIX-specific launch pa rameters; not yet defined.  NewWindow boolean (Optional; PDF  1.2)  A flag specifying whether to open the destination  document in a new window. If this flag is  false, the destination  document replaces the current docum ent in the same window. If this  entry is absent, the conforming  reader should behave in accordance  with its current preference. This en try shall be ignored if the file  designated by the  F entry is not a PDF document.  Table  204    Entries in a Windows launch parameter dictionary   KeyType Value Fbyte string  (Required)  The file name of the applicat ion that shall be launched or  the document that shall be opened or  printed, in standard Windows  pathname format. If the name string  includes a backslash character (\\),  the backslash shall itself be preceded by a backslash.  This value shall be a simple string ; it is not a file specification.",""],"431":["' Adobe Systems Incorporated 2008  All rights reserved 423PDF 32000-1:2008 12.6.4.6 Thread Actions A thr ead action  jumps to a specified bead on an article thread (see  12.4.3, Articles ), in either the current  document or a different one.  Ta b l e  205  shows the action dictionary entries  specific to this type of action.  12.6.4.7 URI Actions A u niform resource identifier  (URI) is a string that identifies ( resolves  to) a resource on the Internettypically a  file that is the destination of a hypertext link, although  it may also resolve to a query or other entity. (URIs are  described in Internet RFC 2396,  Uniform Resource Identifiers (URI): Generic Syntax ; see the  Bibliography .) A URI action causes a URI to be resolved.  Ta b l e  206  shows the action dictionary entr ies specific to this type of  action.  Dbyte string  (Optional)  A bye string specifying the default directory in standard  DOS syntax.  OASCII string(Optional)   An ASCII string specifying the operation to perform:  open Open a document.  print Print a document.  If the  F entry designates an application  instead of a document, this  entry shall be ignored and the appl ication shall be launched. Default  value: open.  Pbyte string (Optional)  A parameter string that shall be passed to the application  designated by the  F entry. This entry shall be omitted if  F designates a  document.  Table  205    Additional entries specific to a thread action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  Thread  for a thread action.  Ffile specification (Optional)  The file containing the thread. If this entry is absent, the  thread is in the current file.  Ddictionary, integer, or  text string (Required)  The destination thread, specified in one of the following  forms:  An indirect reference to a thread dictionary (see  12.4.3, Articles ). In this case, the thread shal l be in the current file.  The index of the thread within the  Threads  array of its documents  Catalog  (see 7.7.2, Document Catalog ). The first thread in the array  has index 0.  The title of the thread as specified in its thread information dictionary  (see Ta b l e  160 ). If two or more threads ha ve the same title, the one  appearing first in the document  Catalogs  Threads  array shall be used.  Bdictionary or integer (Optional)  The bead in the destination thread, specified in one of the  following forms:  An indirect reference to a bead dictionary (see  12.4.3, Articles ). In this case, the thread shal l be in the current file.  The index of the bead within its thread. The first bead in a thread has  index 0. Table 204   Entries in a Windows launch parameter dictionary  (continued) Key Type Value",""],"432":["PDF 32000-1:2008 424 ' Adobe Systems Incorporated 2008  All rights reserved If the  IsMap  flag is  true  and the user has triggered the URI action by  clicking an annotation, the coordinates of  the mouse position at the time the action has been trig gered shall be transformed from device space to user  space and then offset relative to the upper-left corner  of the annotation rectangle  (that is, the value of the  Rect entry in the annotation with which the URI action is associated).  EXAMPLE 1 If the mouse coordinates in user space are ( xm , ym ) and the annotation rectangle extends from ( llx , lly ) at the lower-left to ( urx , ury ) at the upper-right, th e final coordinates ( xf , yf ) are as follows:  If the resulting coordinates ( xf , yf ) are fractional, they shall be rounded to the nearest integer values. They shall  then be appended to the URI to be resolved, separated by COMMAS (2Ch) and preceded by a QUESTION  MARK (3Fh), as shown in this example:  EXAMPLE 2 http  : / / www . adobe  . com / intro ?100 , 200 NOTE 1 To support URI actions, a PDF documents  Catalog  (see 7.7.2, Document Catalog ) may include a  URI entry  whose value is a  URI dictionary . Only one entry shall be defined for such a dictionary (see  Table  207 ). NOTE 2 The  Base entry allows the URI of the document to be reco rded in situations in which the document may be  accessed out of context. For example,  if a document has been moved to a new location but contains relative  links to other documents that  have not been moved, the  Base  entry could be used to  refer such links to the true location of the other documents, rather than that of the moved document.  Table  206    Additional entries spec ific to a URI action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  URI for a  URI action.  URIASCII string (Required)   The uniform resource identifier to resolve, encoded in 7-bit ASCII.  IsMapboolean (Optional)  A flag specifying whether to track the mouse position when the URI  is resolved (see the discussion following this Table). Default value:  false. This entry applies only to actions triggered by the users clicking an  annotation; it shall be ignored for acti ons associated with outline items or with  a documents  OpenAction  entry.  Table  207    Entry in a URI dictionary   KeyType Value Base ASCII string (Optional)  The base URI  that shall be used in resolving relative URI  references. URI actions within the docum ent may specify URIs in partial form,  to be interpreted relative to this base  address. If no base URI is specified,  such partial URIs shall be interpreted rela tive to the location of the document  itself. The use of this entry is para llel to that of the body element <BASE  >, as  described in the  HTML 4.01 Specification  (see the  Bibliography ).","xfxmllx=","yfuryym=",""],"433":["' Adobe Systems Incorporated 2008  All rights reserved 425PDF 32000-1:2008 12.6.4.8 Sound Actions A sou nd action (PDF 1.2)  plays a sound through the computers speakers.  Ta b l e  208 shows the action  dictionary entries specific to this ty pe of action. Sounds are discussed in  13.3, Sounds. 12.6.4.9 Movie Actions A mo vie action (PDF 1.2)  can be used to play a movie in a floating window or within the annotation rectangle of  a movie annotation (see  12.5.6.17, Movie Annotations  and  13.4, Movies ). The movie annotation shall be  associated with the page that is the destination of th e link annotation or outline item containing the movie  action, or with the page object wit h which the action is associated.  NOTE A movie action by itself does not guarantee that the page  the movie is on will be displayed before attempting to  play the movie; such page change actions shall be done explicitly.  The contents of a movie action dictionary are identi cal to those of a movie activation dictionary (see  Table  296 ), with the additional  entries shown in  Ta b l e  209. The contents of the activation  dictionary associated with the  movie annotation provide the default values. Any informati on specified in the movie action dictionary overrides  these values.  Table  208   Additional entries sp ecific to a sound action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  Sound for a sound action.  Soundstream(Required)  A sound object defining the sound that shall be played (see  13.3, Sounds ).  Volume number (Optional)  The volume at which to play the sound, in the range  1.0 to  1.0. Default value: 1.0.  Synchronous boolean (Optional)  A flag specifying whether to play the sound synchronously  or asynchronously. If this flag is  true, the conforming reader retains  control, allowing no further user  interaction other than canceling the  sound, until the sound has been completely played. Default value:  false. Repeat boolean (Optional)   A flag specifying whether to repeat the sound indefinitely. If  this entry is present, the  Synchronous  entry shall be ignored. Default  value: false. Mixboolean (Optional)  A flag specifying whether to mix this sound with any other  sound already playing. If this flag is  false, any previously playing  sound shall be stopped before starting this sound; this can be used to  stop a repeating sound (see  Repeat ). Default value:  false . Table  209    Additional entries specific to a movie action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  Moviefor a movie action.  Annotation dictionary (Optional)  An indirect reference to a movie annotation identifying the movie  that shall be played.  Ttext string(Optional)  The title of a movie annotation identifying the movie that shall be played.  The dictionary shall include either an  Annotation or a T entry but not both.",""],"434":["PDF 32000-1:2008 426 ' Adobe Systems Incorporated 2008  All rights reserved 12.6.4.10 Hide Actions A hide  action (PDF 1.2)  hides or shows one or more annotations on  the screen by setting or clearing their  Hidden flags (see  12.5.3, Annotation Flags ). This type of action can be us ed in combination with appearance  streams and trigger events (Sections  12.5.5, Appearance Streams,  and  12.6.3, Trigger Events ) to display  pop-up help information on the screen.  NOTE The  E (enter) and X (exit) trigger events in an annotations additional-actions dictionary can be used to show  and hide the annotation when the user rolls the cursor  in and out of its active area on the page. This can be  used to pop up a help label, or tool tip, describing t he effect of clicking at that location on the page. Ta b l e  210 shows the action dictionary entries specific to this type of action.  12.6.4.11 Named Actions Ta b l e  211  lists several  named actions (PDF 1.2)  that conforming readers shall support; further names may be  added in the future.  Operation name (Optional)   The operation that shall  be performed on the movie:  PlayStart playing the movie, usin g the play mode specified by the  dictionarys  Mode entry (see  Table  296 ). If the movie is currently paused, it  shall be repositioned to the beginning before playing (or to the starting point  specified by the dictionarys  Start  entry, if present).  Stop Stop playing the movie.  Pause  Pause a playing movie.  Resume  Resume a paused movie.  Default value: Play.  Table  210    Additional entries spec ific to a hide action   KeyType Value Sname (Required)  The type of action that this  dictionary describes; shall be  Hide  for a hide action.  Tdictionary,  text string, or array(Required)  The annotation or annotations to be hidden or shown, shall be specified in any of the following forms:  An indirect reference to an annotation dictionary  A text string giving the fully qualified field name of an interactive form field  whose associated widget annotation or annotations are to be affected (see  12.7.3.2, Field Names ) An array of such dictionaries or text strings  Hboolean (Optional)   A flag indicating whether to hide the annotation ( true) or show it  (false). Default value:  true. Table  211    Named actions   Name ActionNextPage Go to the next page of the document.  PrevPageGo to the previous page of the document.  FirstPage Go to the first page of the document.  LastPage Go to the last page of the document.  Table 209   Additional entries spec ific to a movie action  (continued) KeyType Value",""],"435":["' Adobe Systems Incorporated 2008  All rights reserved 427PDF 32000-1:2008 NOTE Conforming readers may support addit ional, nonstandard named actions, bu t any document using them is not  portable. If the viewer encounters a nam ed action that is inappropriate for a  viewing platform, or if the viewer  does not recognize the name, it shall take no action.  Ta b l e  212 shows the action dictionary entries specific to named actions.  12.6.4.12 Set-OCG-State Actions A se t-OCG-state action (PDF 1.5)  sets the state of one or more optional content groups (see  8.11, Optional  Content ).  Ta b l e  213 shows the action dictionary entries  specific to this type of action. When a set-OCG-state action is performed, the  State  array shall be processed from left to right. Each name  shall be applied to subsequent groups in the array unt il the next name is encountered, as shown in the  following example. EXAMPLE 1 << /S /SetOCGState /State [/OFF 2 0 R 3 0 R /Toggle 16 0 R 19 0 R /ON 5 0 R] >>A group may appear more than once in the  State  array; its state shall be set ea ch time it is encountered, based  on the most recent name.  ON, OFF and  Toggle  sequences have no required order. More than one sequence in  the array may contain the same name. EXAMPLE 2 If the array contained [/OFF 1 0 R /T oggle 1 0 R], the groups state would be  ON after the action was  performed.Table  212    Additional entries specific to named actions   KeyType Value Sname (Required)   The type of action that this dictionary describes; shall be  Named  for a  named action.  Nname (Required)  The name of the action that shall be performed (see  Ta b l e  211 ). Table  213    Additional entries specific to a set-OCG-state action   KeyType Value Sname(Required)  The type of action that this dictionary describes; shall be  SetOCGState  for a set-OCG-state action. State array(Required)  An array consisting of any number of sequences beginning with a  name object ( ON, OFF , or Toggle ) followed by one or more optional content  group dictionaries. The array elements shall be processed from left to right;  each name shall be applied to the subsequent groups until the next name is  encountered: ON  sets the state of subsequent groups to  ONOFF   sets the state of subsequent groups to  OFF Toggle   reverses the state of subsequent groups. PreserveRB boolean (Optional)  If true, indicates that radio-button state relationships between  optional content groups (as specified by the  RBGroups  entry in the current  configuration dictionary; see  Ta b l e  101 ) should be preserved when the  states in the  State  array are applied. That is, if a group is set to  ON (either by ON or Toggle ) during processing of the  State  array, any other groups  belonging to the same radio-button group shall be turned  OFF . If a group is  set to  OFF , there is no effect on other groups. If Pres erveRB  is  false, radio-button state relationships, if any, shall be ignored. Default value:  true.",""],"436":["PDF 32000-1:2008 428 ' Adobe Systems Incorporated 2008  All rights reserved NOTE While the specification allows a group to appear more than once in the  State  array, this is not intended to  implement animation or any other se quential drawing operations. PDF pr ocessing applications are free to  accumulate all state changes and apply only the net  changes simultaneously to  all affected groups before  redrawing. 12.6.4.13 Rendition Actions A r endition action (PDF 1.5)  controls the playing of  multimedia content (see  13.2, Multimedia ). This action  may be used in the following ways:   To begin the playing of a rendition object (see  13.2.3, Renditions ), associating it with a screen annotation  (see  12.5.6.18, Screen Annotations ). The screen annotation specifies where the rendition shall be played  unless otherwise specified.  To stop, pause, or resume a playing rendition.  To trigger the execution of a JavaScript  script that may perform custom operations. Ta b l e  214 lists the entries in a rendition action dictionary. Either the  JS entry or the  OP entry shall be present. If both are present,  OP is considered a fallback that shall  be executed if the conforming reader is unable to execut e JavaScripts. If  OP has an unrecognized value and  there is no  JS entry, the action is invalid. Table  214    Additional entries specific to a rendition action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  Renditionfor a rendition action. Rdictionary (Requ ired when  OP is present with a value of  0 or 4; otherwise optional ) A rendition object (see  13.2.3, Renditions ). ANdictionary (Requ ired if  OP is present with a value of 0,  1, 2, 3 or 4; otherwise optional ) An indirect reference to a screen annotation (see  12.5.6.18, Screen  Annotations ).OPinteger (Requ ired if  JS is not present;  otherwise optional ) The operation to perform  when the action is triggered. Valid values shall be: 0 If no rendition is associated  with the annotation specified by  AN, play the  rendition specified by  R, associating it with the annotation. If a rendition  is already associated with the annotat ion, it shall be stopped, and the  new rendition shall be associated with the annotation.  1 Stop any rendition being played in association with the annotation  specified by AN, and remove the association. If no rendition is being  played, there is no effect.  2 Pause any rendition being played in association with the annotation  specified b y  AN. If no rendition is being played, there is no effect. 3 Resume any rendition being played in association with the annotation  specified by  AN. If no rendition is being played or the rendition is not  paused, there is no effect. 4 Play the rendition specified by  R, associating it with the annotation  specified by AN. If a rendition is alre ady associated with the annotation,  resume the rendition if it is  paused; otherwise, do nothing. JStext string or stream(Requ ired if  OP is not present; otherwise optional ) A text string or stream  containing a JavaScript script that shall be executed when the action is  triggered.",""],"437":["' Adobe Systems Incorporated 2008  All rights reserved 429PDF 32000-1:2008 In some situations, a pause ( OP value of 2) or resume ( OP value of 3) operation may not make sense or the  player may not support it. In such ca ses, the user should be notified of  the failure to perform the operation. EXAMPLE A JPEG image Before a rendition action is executed, the conforming reader shall make sure that the  P entry of the screen  annotation dictionary references a valid page object and that the annotation is present in the page objects  Annots  array (see  Ta b l e  30).  A rendition may play in the rectangle occupied by a screen annotation, even if the annotation itself is not visible;  for example, if its Hidden or NoView flags (see  Ta b l e  165 ) are set. If a screen annotation is not visible because  its location on the page is not being displayed by the  viewer, the rendition is not visible. However, it may  become visible if the view ch anges, such as by scrolling. 12.6.4.14 Transition Actions A tra nsition action (PDF 1.5)  may be used to control drawing during  a sequence of action s. As discussed in  12.6.2, Action Dictionaries,  the Next entry in an action dictionary  may specify a sequence of actions.  Conforming readers shall normally suspend drawing when such a sequence begins and resume drawing when  it ends. If a transition action is present during a sequenc e, the conforming reader shall render the state of the  page viewing area as it exists after completion of the  previous action and display it using a transition specified  in the action dictionary (see  Ta b l e  215). Once this transition completes, drawing shall be suspended again. 12.6.4.15 Go-To-3D-View Actions A go- to-3D-view action (PDF 1.6)  identifies a 3D annotation and specifie s a view for the annotation to use (see  13.6, 3D Artwork ). Ta b l e  216  shows the entries in a go-to -3D-view action dictionary.  The  V e ntry selects the view to apply to the annotation specified by  TA. This view may be one of the predefined  views specified by the  VA entry of the 3D stream (see  Ta b l e  300 ) or a unique view specified here.  Table  215    Additional entries specif ic to a transition action   Key Type Value Sname(Required)  The type of action that this dictionary describes; shall be  Trans for a transition action.  Trans dictionary (Required)  The transition to use for the update of the display (see  Table  162 ).Table  216    Additional entries specific to a go-to-3D-view action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  GoTo3DView  for a transition action.  TAdictionary (Required)  The target annotation for which to set the view. V(various)(Required)  The view to use. It may be one of the following types: A 3D view dictionary (see  13.6.4, 3D Views ).An integer specifying an index into the  VA array in the 3D stream (see  Table  300).A text string matching the  IN entry in one of the views in the  VA array (see Table  304).A name that indicates the first ( F), last (L), next ( N), previous ( P), or default  (D) entries in the VA array; see discussion following this Table.",""],"438":["PDF 32000-1:2008 430 ' Adobe Systems Incorporated 2008  All rights reserved If the predefined view is specified by the names  N (next) or  P (previous), it should be  interpreted in the following way: When the last view applied was specified by means of the  VA array,  N and  P indicate the next and previous  entries, respectively, in the  VA array (wrapping around if necessary).  When the last view was not specified by means of  VA, using  N or  P should result in reverting to the default  view.  12.6.4.16 JavaScript Actions Upon invocation of a JavaScript action, a conforming pr ocessor shall execute a script  that is written in the  JavaScript programming language. Depending on the nature  of the script, various interactive form fields in the  document may upda te their values or change th eir visual appearances. Mozilla  Development Centers Client- Side JavaScript Reference and the Adobe Java Script for Acrobat API Reference (see the  Bibliography ) give  details on the contents and effects of JavaScript scripts.  Ta b l e  217 shows the action dictionary entries specific  to this type of action.  To support the use of parameterized function calls in JavaScript scripts, the  JavaScript  entry in a PDF  documents name dictionary (see  7.7.4, Name Dictionary ) may contain a name tree that maps name strings to  document-level JavaScript actions. When the document is  opened, all of the actions in this name tree shall be  executed, defining JavaScript functions for use by other scripts in the document.  NOTE The name strings associated with individual JavaScri pt actions in the name dictionary serve merely as a  convenient means for organizing and packaging script s. The names are arbitrary and need not bear any  relation to the JavaScript name space.  12.7 Interactive Forms 12.7.1 General An in teractive form (PDF 1.2) sometimes referred to as an  AcroFormis a collection of fields  for gathering  information interactively from the user. A PDF document  may contain any number of fields appearing on any  combination of pages, all of which make up a single,  global interactive form sp anning the entire document.  Arbitrary subsets of these fields can be imported or exported from the document; see  12.7.5, Form Actions.  NOTE 1 Interactive forms should not  be confused with form XObjects (see  8.10, Form XObjects ). Despite the  similarity of names, the two are different, unrelated types of objects.  Each field in a documents interactive form shall be defined by a  field dictionary  (see  12.7.3, Field  Dictionaries). For purposes of definition a nd naming, the fields can be organized hierarchically and can inherit  attributes from their ancestors in the field hierarchy.  A fields children in the hierarchy may also include widget  annotations (see  12.5.6.19, Widget Annotations ) that define its appearance on the page. A field that has  children that are fields is called a  non-terminal field . A field that does not have child ren that are fields is called a  terminal field.Table  217    Additional entries specific to a JavaScript action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  JavaScript  for a JavaScript action.  JStext string or text stream(Required)  A text string or text stream containing the JavaScript script to  be executed.  PDFDocEncoding or Unicode encoding (the latter identified by the  Unicode prefix  U+ FEFF ) sha ll be used to encode the contents of the  string or stream.",""],"439":["' Adobe Systems Incorporated 2008  All rights reserved 431PDF 32000-1:2008 A terminal field may have children  that are widget annotations (see  12.5.6.19, Widget Annotations ) that define  its appearance on the page. As a convenience, when a fi eld has only a single associ ated widget annotation, the  contents of the field dictionary and the annotation dictionary ( 12.5.2, Annotation Dictionaries ) may be merged  into a single dictionary containing entries that pertai n to both a field and an annotation. (This presents no  ambiguity, since the contents of the tw o kinds of dictionaries do not conf lict.) If such an object defines an  appearance stream, the appearance shall be consistent with the objects current value as a field. NOTE 2 Fields containing text whose contents are not k nown in advance may need to  construct their appearance  streams dynamically instead of defining them  statically in an appearance dictionary; see  12.7.3.3, Variable  Te x t .  12.7.2 Interactive Form Dictionary The contents and properties of a documents interactive form shall be defined by an  interactive form dictionary that shall be referenced from the  AcroForm entry in the document catalogue (see  7.7.2, Document Catalog ). Ta b l e  218 shows the contents of this dictionary.  Table  218    Entries in the inte ractive form dictionary  Key Type Value Fields array(Required)  An array of references to the documents  root fields (those with no ancestors in the field hierarchy).  NeedAppearances boolean (Optional)  A flag specifying whether to construct appearance  streams and appearance dictiona ries for all widget annotations  in the document (see  12.7.3.3, Variable Text ). Default value:  false. SigFlags integer (Optional; PDF  1.3)  A set  of flags specif ying various document- level characteristics related to signature fields (see  Table  219 , and  12.7.4.5, Signa ture Fields ). Default value: 0.  COarray(Required if any fields in the document have additional-actions  dictionaries containing a  C entry; PDF  1.3) An array of indirect references to field dictionaries with calculation actions, defining  the calculation order  in which their values will be recalculated  when the value of any field changes (see  12.6.3, Trigger  Events ). DRdictionary (Optional)  A resource dictionary (see  7.8.3, Resource  Dictionaries ) containing default resources (such as fonts,  patterns, or colour spaces) that shall be used by form field  appearance streams. At a minimum, this dictionary shall contain  a Font  entry specifying the resource name and font dictionary of  the default font fo r displaying text.  DAstring (Optional)  A document-wide default value for the  DA attribute of  variable text fields (see  12.7.3.3, Variable Text ).  Qinteger (Optional)  A document-wide default value for the  Q attribute of  variable text fields (see  12.7.3.3, Variable Text ).  XFA stream or array (Optional; PDF 1.5)  A stream or array containing an  XFA  resource , whose format shall be described by the  Data Package  (XDP) Specification . (see the  Bibliography ). The value of this entry shall be  either a stream  representing the  entire contents of the XML Data Package or an array of text  string and stream pairs representing the individual packets  comprising the XML Data Package. See 12.7.8, XFA Forms,  for more information.",""],"440":["PDF 32000-1:2008 432 ' Adobe Systems Incorporated 2008  All rights reserved The value of the intera ctive form dictionarys  SigFlags entry is an unsigned 32-bit integer containing flags  specifying various document-level characteristics related to signature fields (see  12.7.4.5, Signature Fields ). Bit positions within the flag word shall be numbered from 1 (low-order) to 32 (high-order).  Ta b l e  219  shows the  meanings of the flags; all undefined flag bits shall be reserved and shall be set to 0.  12.7.3 Field Dictionaries 12.7.3.1 General Each field in a documents interactive form shall be defined by a  field dictionary , which shall be an indirect  object. The field dictionaries may be organized hierarchically into one or more tree structures. Many field  attributes are  inheritable , meaning that if they are not explicitly specif ied for a given field, their values are taken  from those of its parent in the field hierarchy. Such in heritable attributes shall be designated as such in the  Ta b l e s   220  and  221. The designation  (Required; inheritable)  means that an attribute shall be defined for every  field, whether explicitly in its own  field dictionary or by inheritance from an ancestor in the hierarchy.  Ta b l e  220shows those entries that are common to  all field dictionaries, regardless of ty pe. Entries that pertain only to a  particular type of field are descri bed in the relevant sub-clauses in  Table  220 . Table  219    Signature flags   Bit positionName Meaning 1SignaturesExist If set, the document contains at least one signature field. This flag  allows a conforming reader to enabl e user interface items (such as  menu items or pushbuttons) relate d to signature processing without  having to scan the entire document for the presence of signature  fields.  2AppendOnly If set, the document contains signa tures that may be invalidated if  the file is saved (written) in a way  that alters its previous contents,  as opposed to an incremental update. Merely updating the file by  appending new information to the end of the previous version is  safe (see H.7, Updating Example ). Conforming readers may use  this flag to inform a user requesting a full save that signatures will  be invalidated and require explicit confirmation before continuing  with the operation.  Table  220    Entries common to all field dictionaries   KeyType Value FTname (Required for terminal fields; inheritable)  The type of field that this  dictionary describes:  Btn Button (see  12.7.4.2, Button Fields ) Tx T ext (see  12.7.4.3, Text Fields ) Ch Choice (see  12.7.4.4, Choice Fields ) Sig(PDF 1.3) Signature (see 12.7.4. 5, Signature Fields)  This entry may be present in a non-terminal field (one whose  descendants are fields) to provide an inheritable  FT value. However, a  non-terminal field does not logically have a type of its own; it is merely  a container for inheritable attributes  that are intended for descendant  terminal fields of any type.  Parentdictionary (Required if this field is the child of another in the field hierarchy;  absent otherwise)  The field that is the immediate parent of this one  (the field, if any, whose  Kids array includes this field). A field can have  at most one parent; that is, it can be included in the  Kids  array of at  most one other field.",""],"441":["' Adobe Systems Incorporated 2008  All rights reserved 433PDF 32000-1:2008 The value of the field dictionarys  Ff entry is an unsigned 32-bit intege r containing flags specifying various  characteristics of the field. Bit positions within the flag word shall be numbered from 1 (low-order) to 32 (high- order). The flags shown in  Ta b l e  221  are common to all types of fields. Fl ags that apply only to specific field  types are discussed in the sub-clauses describing those  types. All undefined flag bits shall be reserved and  shall be set to 0.  Kidsarray(Sometimes required,  as described below)  An array of indirect  references to the immediate children of this field.  In a non-terminal field, the  Kids array shall refer to field dictionaries that are immediate descendants of this  field. In a terminal field, the  Kids array ordinarily shall refer to one or more separate widget  annotations that are associated with this  field. However, if there is only  one associated widget annotation, and its contents have been merged  into the field dictionary,  Kids shall be omitted. Ttext string (Optional)   The partial field name (see  12.7.3.2, Field Names ). TUtext string  (Optional; PDF  1.3) An al ternate field name that shall be used in place  of the actual field name wherever the field shall be identified in the  user interface (such as in error or  status messages referring to the  field). This text is also useful when extracting the documents contents  in support of accessibility to us ers with disabilities or for other  purposes (see  14.9.3, Alternate Descriptions ). TMtext string (Optional; PDF  1.3) The   mapping name  that shall be used when  exporting interactive form field data from the document.  Ffinteger (Optional; inheritable)  A set of flags specifying various characteristics  of the field (see  Table  221 ). Default value: 0.  V(various)(Optional; inheritable)  The fields value, whose format varies  depending on the field type. See the descriptions of individual field  types for further information.  DV(various)(Optional; inheritable)  The default value to which the field reverts when  a reset-form action is executed (see  12.7.5.3, Reset-Form Action ). The format of this value  is the same as that of  V. AAdictionary (Optional; PDF  1.2)  An ad ditional-actions dictionary defining the fields  behaviour in response to various trigger events (see  12.6.3, Trigger  Events ). This entry has exactly the same meaning as the  AA entry in an annotation dictionary (see  12.5.2, Annotation Dictionaries ).  Table  221    Field flags common to all field types   Bit positionName Meaning 1ReadOnly If set, the user may not change the val ue of the field. Any associated  widget annotations will not interact with the user; that is, they will not  respond to mouse clicks or change  their appearance in  response to  mouse motions. This flag is useful for fields whose values are  computed or imported from a database.  2Required If set, the field shall have a value at the time it is exported by a submit- form action (see  12.7.5.2, Submit-Form Action ). 3NoExport If set, the field shall not be exported by a submit-form action (see  12.7.5.2, Submit-Form Action ). Table 220   Entries common to all field dictionaries  (continued) Key Type Value",""],"442":["PDF 32000-1:2008 434 ' Adobe Systems Incorporated 2008  All rights reserved 12.7.3.2 Field Names The  T entr y in the field dictionary (see  Table  220) holds a text string defining the fields  partial field name . The fully qualified field name  is not explicitly defined but shall be constr ucted from the partial field names of the field  and all of its ancestors. For a field with no parent, the partial and fully qualified names are the same. For a field  that is the child of another field, the fully qualified na me shall be formed by appending the child fields partial  name to the parents fully qualified name, separated by a PERIOD (2Eh) as shown: parents_full_name  . childs_partial_name EXAMPLE If a field with the partial field name PersonalData has  a child whose partial name is Address, which in turn  has a child with the partial name ZipCode, the  fully qualified name of this last field is  PersonalData  . Address  . ZipCode Because the PERIOD is used as a separator for fully  qualified names, a partial name shall not contain a  PERIOD character. Thus, all fields descended from a comm on ancestor share the ancestors fully qualified field  name as a common prefix in their own fully qualified names.  It is possible for different field dictionaries to have th e same fully qualified field name if they are descendants of  a common ancestor with that name and have no partial field names ( T entries) of their own. Such field  dictionaries are different representations of the same underl ying field; they should differ only in properties that  specify their visual appearance. In particular, field di ctionaries with the same fully  qualified field name shall  have the same field type ( FT), value ( V), and default value ( DV).  12.7.3.3 Variable Text When the contents and properties of a field are known in  advance, its visual appearance can be specified by an  appearance stream defined in the PDF file (see  12.5.5, Appearance Streams,  and  12.5.6.19, Widget  Annotations ). In some cases, however, the field may contain  text whose value is not known until viewing time.  NOTE Examples include text fields to be filled in with text  typed by the user from the keyboard, scrollable list boxes  whose contents are determined interactively at the ti me the document is displayed and fields containing  current dates or values calculated by a JavaScript. In such cases, the PDF document cannot provide a st atically defined appearance  stream for displaying the  field. Instead, the conforming reader shall construct an  appearance stream dynamically at viewing time. The  dictionary entries shown in  Ta b l e  222  provide general information about the fields appearance that can be  combined with the sp ecific text it contains to  construct an appearance stream.  Table  222    Additional entries common to al l fields containing variable text   KeyType Value DAstring (Required; inheritable)  The default appearance string  containing a sequence of  valid page-content graphics or text state operators that define such properties  as the fields text size and colour.  Qinteger (Optional; inheritable)  A code specifying the form of  quadding  (justification) that  shall be used in displaying the text:  0  Left-justified  1  Centered  2  Right-justified  Default value: 0 (left-justified).  DStext string(Optional; PDF 1.5)  A default style string, as described in  12.7.3.4, Rich Text  Strings.",""],"443":["' Adobe Systems Incorporated 2008  All rights reserved 435PDF 32000-1:2008 The new appearance stream becomes the normal appearance ( N) in the appearance dictionary associated  with the fields widget annotation (see  Ta b l e  168 ). (If the widget annotation ha s no appearance dictionary, the  conforming reader shall create one and st ore it in the annotation dictionarys  AP entry.) In PDF 1.5, form fields that have the RichText flag set (see  Table  226 ) specify formatting information as  described in  12.7.3.4, Rich Text Strings.  For these fields, the following  conventions are not used, and the  entire annotation appearance shall be regenerated each time the value is changed.  For non-rich text fields, the appearance streamwhich , like all appearance streams, is a form XObjecthas  the contents of its form dict ionary initialized as follows:   The resource dictionary ( Resources ) shall be created using resources from the interactive form  dictionarys  DR entry (see  Table  218 ). The lower-left corner of the bounding box ( BBox) is set to coordinates (0,  0) in the form coordinate system.  The boxs top and right coordinates are taken from  the dimensions of the annotation rectangle (the  Rectentry in the widget annotation dictionary).   All other entries in the appearance streams form  dictionary are set to t heir default values (see  8.10, Form  XObjects ).  EXAMPLE The appearance stream includes the following secti on of marked content, which represents the portion of  the stream that draws the text:  /Tx  BMC% Begin marked content with tag Tx  q% Save graphics state  Any required graphics state changes, such as clipping  BT% Begin text object  Default appearance string (  DA )  Text-positioning and text-showing oper ators to show the variable text  ET% End text object Q% Restore graphics state EMC% End marked content The  BMC (begin marked content) and  EMC (end marked content) o perators are discussed in  14.6,  Marked Content.  q (sa ve graphics state) and  Q (restore graphics state) are discussed in  8.4.4,  Graphics State Operators.  BT (be gin text object) and  ET (end text object) are discussed in  9.4, Text  Objects.  See Example 1  in  12.7.8, XFA Forms  for an example. The default appearance string ( DA) contains any graphics state or text state operators needed to establish the  graphics state parameters, such as text size and colour,  for displaying the fields variable text. Only operators  that are allowed within text objects shall occur in this string (see  Figure 9 ). At a minimum, the string shall  include a  Tf (text font) operator along with its two operands,  font  and  size. The specified  font value shall match  a resource name in the  Font  entry of the default resource dictionary (referenced from the  DR entry of the  interactive form dictionary; see  Ta b l e  218 ). A zero value for  size means that the font shall be  auto-sized : its size  shall be computed as a function of the height of the annotation rectangle.  The default appearance string shall contain at most one  Tm (text matrix) operator. If this operator is present,  the conforming reader shall replace the horizontal and ve rtical translation components with positioning values it  determines to be appropriate, bas ed on the field value, the quadding ( Q) attribute, and any layout rules it  employs. If the default appe arance string contains no  Tm operator, the viewer shall insert one in the  appearance stream (with appropriate horizontal and  vertical translation components) after the default  appearance string and before the text-positioning and text-showing operators for the variable text. RVtext string  or text stream(Optional; PDF 1.5)  A rich text string, as described in  12.7.3.4, Rich Text  Strings. Table 222   Additional entries common to all fields containing variable text  (continued) Key Type Value",""],"444":["PDF 32000-1:2008 436 ' Adobe Systems Incorporated 2008  All rights reserved To update an existing appearance stream to reflect a new field value, the conforming reader shall first copy any  needed resources from the documents  DR dictionary (see  Table  218 ) into the streams  Resources  dictionary.  (If the  DR and Resources  dictionaries contain resources with th e same name, the one already in the  Resources  dictionary shall be left intact, not replaced with the corresponding value from the  DR dictionary.)  The conforming reader shall then replace the exis ting contents of the appearance stream from /Tx  BMC to the  matching EMC with the corresponding new contents as shown in  Example 1  in \"Check Boxes,\"  12.7.4, Field  Types.  (If the existing appearance stream contains no ma rked content with tag Tx, t he new contents shall be  appended to the end of the original stream.)  12.7.3.4 Rich Text Strings Beginning with PDF 1.5, the text contents of variable  text form fields, as well as markup annotations, may  include formatting (style) information. These  rich text strings  are fully-formed XML documents that conform to  the rich text conventions specified fo r the XML Forms Architecture (XFA) spec ification, which is itself a subset  of the XHTML 1.0 specification, augmented with a re stricted set of CSS2 style attributes (see the  Bibliography for references to all these standards).  Ta b l e  223 lists the XHTML elements that may appear in rich  text strings. The <body > element is the root  element; its required attributes are listed in  Ta b l e  224 . Other elements (<p> and <sp an>) contain enclosed text  that may take style attributes , which are listed in Ta b l e  225 . These style attributes are CSS inline style property  declarations of the form  name:value , with each declaration separated by  a SEMICOLON (3Bh),  as illustrated in  the Example in  \"Radio Buttons,\"  12.7.4, Field Types.  In PDF 1.6, PDF supports the rich text  elements and attributes specified in the  XML Forms Architecture (XFA)  Specification, 2.2  (see  Bibliography ). These rich text elements and attrib utes are a superset of those described  in Ta b l e  223, Ta b l e  224 and  Ta b l e  225 . In PDF 1.7, PDF supports the rich  text elements and attributes specified  in the XML Forms Architecture (XFA) Specification, 2.4  (see  Bibliography ). Table  223   XHTML elements used in rich text strings   element Description <body> The element at the root  of the XML document.  Ta b l e  224 lists the required attributes for  this element. <p> Encloses text that shall be interpreted as  a paragraph. It may take the style attributes  listed in Table  225 .<i>Encloses text that shall be displayed in an italic font. <b> Encloses text that shall be displayed in a bold font. <span> Groups text solely for the purpose of a pplying styles (using the attributes in  Table  225 ).Table  224   Attributes of the <body> element   Attribute Description xmlns The default namespaces for elements  within the rich text string. Shall be  xmlns=\"http://www.w3.org/1999/xhtml\"  xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0\".  xfa:contentType  Shall be \"text/html\".",""],"445":["' Adobe Systems Incorporated 2008  All rights reserved 437PDF 32000-1:2008 xfa:APIVersion A string that identifies the software used to  generate the rich text st ring. It shall be of  the form software_name:software_version, where software_name identifies the software  by name. It shall not contain spaces. software_version identifies the version of t he software. It consists of a series of  integers separated by decimal points. Each  integer is a version number, the leftmost  value being a major version number, with values to the right increasingly minor.  When comparing strings, the versions shall be compared in order.  NOTE 5.2 is less than 5.13 because 2  is less than 13; the string is not  treated as a decimal number. When comparing strings with different  numbers of sections, the string with fewe r sections is implicitly padded  on the right with sections containing 0 to make the number of  sections equivalent. xfa:specThe version of the  XML Forms Architecture (XFA)  specification to which the rich text  string complies. If the file being written confo rms to PDF 1.5, then the rich text string  shall conform to XFA 2.0, and this attribute shall be XFA 2.0; if  the file being written  conforms to PDF 1.6, then the rich text st ring shall conform to XFA 2.2, and this  attribute shall be XFA 2.2; an d if the file being written co nforms to PDF 1.7, then the  rich text string shall conform to XFA 2. 4, and this attribute shall be XFA 2.4. Table  225    CSS2 style attributes used in rich text strings   AttributeValue Description text-align keywordHorizontal alignment. Possible values: left, right, and center. vertical-aligndecimalAn amount by which to adjust the baseline of the enclosed text. A  positive value indicates a superscript; a negative value indicates a  subscript. The val ue is of the form  <decimal number> pt, optionally  preceded by a sign, and followed by pt.  EXAMPLE -3pt, 4pt.  font-sizedecimalThe font size of the enclosed  text. The value is of the form <decimal number> pt.font-stylekeywordSpecifies the font style of the enclosed text. Possible values: normal,  italic. font-weight keywordThe weight of the font for the enclosed text. Possible values: normal,  bold, 100, 200, 300, 400,  500, 600, 700, 800, 900. normal is equivalent to 400, and  bold  is equivalent to 700. font-family list A font name or list of font name s that shall be used to display the  enclosed text. (If a list is provided, the first one containing glyphs for  the specified text shall be used.) fontlist A shorthand CSS font property of the form font: <fon t-style> <font-weight> <font-size> <font-family> colorRGB valueThe colour of the enclosed text.  It can be in one of two forms: #rrg gbb  with a 2-digit hexadecimal value for each component rgb(rrr ,ggg,bbb)  with a decimal value for each component. Although the values specified by the  color property are interpreted as  sRGB values, they shall be transformed into values in a non-ICC  based colour space when used to generate the annotations  appearance. Table 224   Attributes of the <body> element  (continued) AttributeDescription",""],"446":["PDF 32000-1:2008 438 ' Adobe Systems Incorporated 2008  All rights reserved Rich text strings shall be specified by the  RV entry of variable text form field dictionaries (see  Ta b l e  222 ) and  the RC entry of markup annotat ion dictionaries (see  Table  170 ). Rich text strings may be packaged as  text streams  ( see  7.9.3, Text Streams ). Form fields using rich text stream s should also have the RichText flag set  (see  Ta b l e  228 ).A defau lt style string  shall be specified by the  DS entry for free text annotations (see  Ta b l e  174 ) or variable text  form fields (see  Table  222). This string specifies the default values  for style attributes, which shall be used for  any style attributes that are not exp licitly specified for the annotation  or field. All attributes listed in  Ta b l e  225are legal in the default style string. This string, in addition to the  RV or RC entry, shall be used to generate the  appearance. NOTE 1 Markup annotations other t han free text annotations (see  12.5.6.2, Markup Annotations ) do not use a default  style string because their appearan ces are implemented using platform controls requiring the conforming  reader to pick an appropriate system font for display. When a form field or annotation contains rich text strings, the  flat text  (character data) of the string should also  be preserved (in the  V entry for form fields and the  Contents  entry for annotations). This enables older readers  to read and edit the data (although with loss of formatting information). The  DA entry should be written out as  well when the file is saved. When a rich text string specifies font attributes, the conforming reader shall use font name selection as  described in Section 15.3 of the CSS2 specification (see the  Bibliography ). Precedence should be given to the  fonts in the default resources di ctionary, as specified by the  DR entry in  Ta b l e  218 .EXAMPLE The following example illustrates  the entries in a wi dget annotation di ctionary for rich text. The  DS entry  specifies the default font. The  RV entry contains two paragraphs of rich  text: the first paragraph specifies  bold and italic text in the default font; t he second paragraph changes the font size. /DS (font: 18pt Arial) % Default  style string using an abbreviated font % descriptor to specify 18pt text using an Arial font /RV (<?xml version=\"1.0\"?><body  xmlns=\"http://www.w 3.org/1999/xtml\" xmlns:xfa=\"http://www.xfa.o rg/schema/xfa-data/1.0/\" xfa:contentType=\"t ext/html\" xfa:APIVersion=\"Acrobat:8.0.0\" xfa:spec=\"2.4\"> <p style=\"text-align:left\"> <b> <i> Here is some bold italic text </i> </b> </p> <p style= \"font-size:16pt\"> This text uses default text state para meters but changes the font size to 16. </p> </body> ) text-decoration keyword One of the following keywords: underline: The enclosed text shall be underlined. line-through: The enclosed text shall have a line drawn through it. font-stretchkeyword Specifies a normal, condensed or extended face from a font family.  Supported values from narrowest to widest are ultra-condensed,  extra-condensed, condensed,  semi-condensed, normal, semi- expanded, expanded, extra- expanded, and ultra-expanded. Table 225   CSS2 style attributes used in rich text strings  (continued) Attribute Value Description",""],"447":["' Adobe Systems Incorporated 2008  All rights reserved 439PDF 32000-1:2008 12.7.4 Field Types 12.7.4.1 General Interactive forms support  the following field types:Button fields represent interactive controls on the screen th at the user can manipulate with the mouse.  They include  pushbuttons , check boxes , and  radio buttons . T ext fields  are boxes or spaces in which the user can enter text from the keyboard.  Ch oice fields  contain several text items, at most one of  which may be selected as the field value. They  include  scrollable  list boxes and  combo boxes. Sign ature fields  represent digital signatures and optional data  for authenticating the name of the signer and  the documents contents. The following sub-clauses describe each of these field type s in detail. Further types may be added in the future.  12.7.4.2 Button Fields 12.7.4.2.1 General A bu tton field  (field type  Btn) represents an interactive control on the screen that the user can manipulate with  the mouse. There are three types of button fields:  A  pushbutton is a purely interactive control that responds  immediately to user input without retaining a  permanent value (see  12.7.4.2.2, Pushbuttons ).  A  c heck box  toggles between two states, on and off (see  12.7.4.2.3, Check Boxes ). Ra dio button fields  contain a set of related buttons that can each be on or off. Typically, at most one radio  button in a set may be on at any given time, and selecting any one of the buttons automatically deselects  all the others. (There are exceptions to this rule, as noted in  \"Radio Buttons.\" ) For button fields, bits 15, 16, 17, and 26 shall indicate the intended  behaviour  of the button fi eld. A conforming  reader shall follow the intended behaviour, as defined in  Ta b l e  226  and clauses  12.7.4.2.2, \"Pushbuttons\" , 12.7.4.2.3, \"Check Boxes\"  and  12.7.4.2.4, \"Radio Buttons\" .Table  226    Field flags specific to button fields   Bit positionName Meaning 15NoToggleToOff (Radio buttons only)  If set, exactly one radio button shall be  selected at all times; selecting the currently selected button has no  effect. If clear, clicking the selected button deselects it, leaving no  button selected.  16Radio If set, the field is a set of radio buttons; if clear, the field is a check  box. This flag may be set only if the Pushbutton flag is clear.  17PushbuttonIf set, the field is a pushbutton that does not retain a permanent  value. 26RadiosInUnison (PDF 1.5) If set, a group of radio butt ons within a radio button field  that use the same value for the on state will turn on and off in  unison; that is if one is checked,  they are all checked. If clear, the  buttons are mutually exclusive (the same behavior as HTML radio  buttons).",""],"448":["PDF 32000-1:2008 440 ' Adobe Systems Incorporated 2008  All rights reserved 12.7.4.2.2 Pushbuttons A pu shbutton field  shall have a field type of  Btn  and the Pushbutton flag (see  Ta b l e  226 ) set to one. Because  this type of button retains no permanent value, it shall not use the  V and DV entries in the field dictionary (see  Ta b l e  220). 12.7.4.2.3 Check Boxes A c heck box field  represents one or more check boxes that t oggle between two states, on and off, when  manipulated by the user with the mouse  or keyboard. Its field type shall be  Btn and its Pushbutton and Radio  flags (see  Ta b l e  226 ) shall both be clear. Each state can have  a separate appearance, which shall be defined  by an appearance stream in the appearance di ctionary of the fields widget annotation (see  12.5.5,  Appearance Streams ). The appearance for the off state is optiona l but, if present, shall be stored in the  appearance dictionary under the name  Off. Yes  should be used as the name for the on state. The  V  entry in the field dictionary (see  Table  220 ) holds a name object representing the check boxs  appearance state, which shall be used to select the  appropriate appearance from the appearance dictionary.  EXAMPLE 1 This example shows a ty pical check box definition. 1 0 obj << /FT  /Btn  /T ( Urgent  ) /V /Yes  /AS /Yes  /AP << /N << /Yes  2 0 R /Off   3 0 R>> >>endobj 2 0 obj << /Resources  20 0 R  /Length  104>>streamq0 0 1 rgBT/ZaDb  12 Tf0 0 Td( 8 ) TjETQendstream endobj 3 0 obj","<< /Resources  20 0 R  /Length  104>>streamq0 0 1 rgBT/ZaDb  12 Tf0 0 Td( 8 ) TjETQendstream endobj",""],"449":["' Adobe Systems Incorporated 2008  All rights reserved 441PDF 32000-1:2008 Beginning with PDF 1.4, the field di ctionary for check boxes and radio buttons may contain an optional  Optentry (see  Ta b l e  227 ). If present, the  Opt entry shall be an array of text stri ngs representing the export value of  each annotation in the field. It may be used for the following purposes:  To represent the export values of check box and radio  button fields in non-Latin  writing systems. Because  name objects in the appearance dictionary are limited to  PDFDocEncoding, they cannot represent non- Latin text.   To allow radio buttons or check boxes to be checke d independently, even if th ey have the same export  value.EXAMPLE 2 A group of check boxes may be  duplicated on more than  one page such that the des ired behavior is that when a user checks a box, the corresponding boxes on ea ch of the other pages are also checked. In this  case, each of the corresponding check boxes is a widget in the  Kids array of a check box field.  NOTE For radio buttons, the same behavior shall occur only if the  RadiosInUnison  flag is set. If it is not set, at most  one radio button in a field shall be set at a time.  12.7.4.2.4 Radio Buttons A radio button field is a set of related buttons. Like ch eck boxes, individual radio buttons have two states, on  and off. A single radio button may not be turned off directly but only as a result of  another button being turned  on. Typically, a set of radio buttons (annotations that are  children of a single radio button field) have at most one  button in the on state at any given time; selecting any of the buttons automatically deselects all the others.  NOTE An exception occurs when multiple radio buttons in a field have the same on state and the RadiosInUnison flag  is set. In that case, turning on one of the buttons turns on all of them. The field type is  Btn, the Pushbutton flag (see  Ta b l e  226 ) is clear, and the Radio flag is set. This type of button  field has an additional flag, NoToggleToOff, which specifie s, if set, that exactly one of the radio buttons shall be  selected at all times. In th is case, clicking the currently selected bu tton has no effect; if the NoToggleToOff flag  is clear, clicking the selected button  deselects it, leaving  no button selected.  The  Kids entry in the radio button fields field dictionary (see  Ta b l e  220 ) holds an array of widget annotations  representing the individual buttons in the set. The parent fields  V entry holds a name object corresponding to  the appearance state of whichever child fi eld is currently in the on state; the  default value for this entry is Off.  EXAMPLE This example shows the object def initions for a set of radio buttons.  10 0 obj % Radio button field << /FT  /Btn  /Ff  %  Radio flag = 1, Pushbutton = 0   /T ( Credit card  ) /V /cardbrand1  /Kids [  11 0 R   12 0 R ]Table  227   Additional entry specific to check box and radio button fields   Key Type Value Opt array of text  strings(Optional; inheritable; PDF  1.4) An a rray containing one entry for each widget  annotation in the  Kids array of the radio button or check box field. Each entry  shall be a text string representing the  on state of the corresponding widget  annotation. When this entry is present, the names  used to represent the on state in the  APdictionary of each annotation (for example,  /1, /2) numeri cal position (starting with  0) of the annotation in the  Kids array, encoded as a name object. This allows  distinguishing between the annotations even  if two or more of them have the  same value in the  Opt  array.",""],"450":["PDF 32000-1:2008 442 ' Adobe Systems Incorporated 2008  All rights reserved >>endobj 11 0 obj% First radio button << /Parent  10 0 R /AS /cardbrand1  /AP << /N <<  /cardbrand1  8 0 R /Off  9 0 R>>  >>>>endobj 12 0 obj% Second radio button << /Parent  10 0 R /AS /Off  /AP << /N <<  /cardbrand2  8 0 R /Off  9 0 R>>  >>>>endobj 8 0 obj % Appearance stream for on state << /Resources  20 0 R  /Length  104>>streamq0 0 1 rgBT/ZaDb  12 Tf0 0 Td("," 8 ) TjETQendstream endobj 9 0 obj % Appearance stream for off state << /Resources  20 0 R  /Length  104>>streamq0 0 1 rgBT/ZaDb  12 Tf0 0 Td( 4 ) TjETQendstream endobj Like a check box field, a radio button field may use the optional  Opt  entry in the field dictionary  (PDF 1.4)  to define export values for its constituent radio button s, using Unicode (UTF-16BE) encoding for non-Latin  characters (see  Table  227 ). 12.7.4.3 Text Fields A tex t field  (field type  Tx) is a box or space for text  fill-in data typically  entered from a keyboard. The text may  be restricted to a single line or may be permitted to span  multiple lines, depending on the setting of the Multiline",""],"451":["' Adobe Systems Incorporated 2008  All rights reserved 443PDF 32000-1:2008 flag in the field dictionarys  Ff entry.  Table  228  shows the flags pertaining to this  type of field. A text field shall  have a field type of  Tx. A conforming PDF file, and a conforming pr ocessor shall obey the usage guidelines in  Ta b l e  228.The fields text shall be held in a text stri ng (or, beginning with PDF 1.5, a stream) in the  V (value) entry of the  field dictionary. The contents of this text string or st ream shall be used to construct an appearance stream for  displaying the field, as described under  12.7.3.3, Variable Text.  The text shall be presented in a single style  (font, size, colour, and so  forth), as specified by the  DA (default appearance) string.  If the FileSelect flag  (PDF 1.4)  is set, the field shall function as a  file-select control . In this case, the fields text  represents the pathname of a file whose cont ents shall be submitted as the fields value:   For fields submitted in HTML Fo rm format, the submission shall use the MIME content type multipart  / form- data, as described in Internet RFC 2045,  Multipurpose Internet Mail Extens ions (MIME), Part One: Format  of Internet Message Bodies  (see the  Bibliography ).   For Forms Data Format (FDF) submission, the value of the  V entry in the FDF field dictionary (see  FDF Fields  in 12.7.7.3, FDF Catalog ) shall be a file specification ( 7.11, File Specifications ) identifying the  selected file.   XML format is not supported for file-select controls;  therefore, no value shall be submitted in this case.  Besides the usual entries common to all fields (see  Ta b l e  220 ) and to fields containing variable text (see  Ta b l e  222), the field dictionary for a text field  may contain the additional entry shown in  Ta b l e  229 .Table  228    Field flags specific to text fields   Bit positionName Meaning 13Multiline If set, the field may contain multiple  lines of text; if clear, the fields  text shall be restricted to a single line.  14Password If set, the field is intended for entering a secure password that  should not be echoed visibly to t he screen. Characters typed from  the keyboard shall instead be echoed in some unreadable form,  such as asterisks or bullet characters.  NOTE To protect password confidentiality, readers should  never store the value of the text field in the PDF file if  this flag is set.  21FileSelect (PDF  1.4) If set, the text entered in the field represents the  pathname of a file whose contents shall be submitted as the value  of the field.  23DoNotSpellCheck (PDF  1.4) If  set, text entered in the field shall not be spell-checked.  24DoNotScroll(PDF  1.4) If  set, the field shall not scroll (horizontally for single-line  fields, vertically for multiple-line fields) to accommodate more text  than fits within its annotation rectangle. Once the field is full, no  further text shall be accepted for interactive form filling; for non- interactive form filling, the filler should take care not to add more  character than will visibly fit in the defined area.  25Comb (PDF 1.5)  May be set only if the  MaxLen entry is present in the text  field dictionary (see  Ta b l e  229 ) and if the Multiline, Password, and  FileSelect flags are clear. If set,  the field shall  be automatically  divided into as many equally spaced positions, or  combs, as the  value of  MaxLen , and the text is laid out into those combs. 26RichText (PDF 1.5)   If set, the value of this fiel d shall be a rich text string (see  12.7.3.4, Rich Text Strings ). If the field has a value, the  RV entry of the field dictionary ( Table  222 ) shall specify the rich text string.",""],"452":["PDF 32000-1:2008 444 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE The following example show s the object definitions fo r a typical text field. 6 0 obj << /FT  /Tx  /Ff  % Set Multiline flag  /T ( Silly prose  ) /DA ( 0 0 1 rg /Ti 12 Tf  ) /V ( The quick brown fox ate the lazy mouse  ) /AP << /N 5 0 R >>>>endobj 5 0 obj << /Resources  21 0 R  /Length  172>>stream/Tx  BMC qBT0 0 1 rg/Ti  12 Tf1 0 0 1 100  100  Tm0 0 Td( The quick brown fox  ) Tj0","-13  Td( ate the lazy mouse.  ) TjETQ EMCendstream endobj 12.7.4.4 Choice Fields A choice f ield  shall have a field type of  Ch that contains several text items, one or more of which shall be  selected as the field value. The items may be present ed to the user in one of the following two forms:   A scrollable  list box A  combo box consisting of a drop-down lis t. The combo box may be accompanied by an editable text box  in which the user can type a value other than the predefi ned choices, as directed by the value of the Edit bit  in the Ff  entry. Table  229    Additional entry specific to a text field   KeyType Value MaxLen integer (Optional; inheritable)  The maximum length of the  fields text, in characters.  Table  230    Field flags specific to choice fields   Bit positionName Meaning18Combo If set, the field is a combo box; if  clear, the field is a list box.  19EditIf set, the combo box shall include an editable text box as well  as a drop-down list; if clear, it  shall include only a drop-down  list. This flag shall be used only if the Combo flag is set.",""],"453":["' Adobe Systems Incorporated 2008  All rights reserved 445PDF 32000-1:2008 The various types of choice fields  are distinguished by flags in the  Ff entry, as shown in  Ta b l e  230 . Ta b l e  231shows the field dictionary entries specific to choice fields.  The  Opt ar ray specifies the list of options in the choice field, each of which shall be represented by a text string  that shall be displayed on the screen. Each element of the  Opt  array contains either this text string by itself or a  two-element array, whose second element is the text stri ng and whose first element is a text string representing  the export value that shall be used when exporting interactive form field data from the document. The field dictionarys  V (value) entry (see  Table  220) identifies the item or items currently selected in the choice  field. If the field does not  allow multiple selectionthat  is, if the MultiSelect flag  (PDF 1.4)  is not setor if  20Sort If set, the fields option items shall be sorted alphabetically. This  flag is intended for use by writer s, not by readers. Conforming  readers shall display the options in the order in which they  occur in the  Opt  array (see  Ta b l e  231 ). 22MultiSelect (PDF 1.4)  If  set, more than one of the fields option items may  be selected simultaneously; if cl ear, at most one item shall be  selected. 23DoNotSpellCheck (PDF 1.4)  If set, text entered in the field shall not be spell- checked. This flag shall not be  used unless the Combo and Edit  flags are both set.  27CommitOnSelChange (PDF 1.5)   If set, the new value shall be committed as soon as a  selection is made (commonly wit h the pointing device). In this  case, supplying a value for a field involves three actions:  selecting the field for fill-in, se lecting a choice for the fill-in  value, and leaving that field, which finalizes or commits the  data choice and triggers any actions associated with the entry  or changing of this data. If this flag is on, then processing does  not wait for leaving the field action to occur, but immediately  proceeds to the third step. This option enables applications to perform an action once a  selection is made, without requiring  the user to exit the field. If  clear, the new value is not committed until the user exits the  field. Table  231   Additional entries sp ecific to a choice field   KeyType Value Opt array(Optional)  An array of options that shall be presented to the user. Each element  of the array is either a text string repr esenting one of the avai lable options or an  array consisting of two text strings: th e options export value and the text that  shall be displayed as the name of the option.  If this entry is not present, no choi ces should be presented to the user. TIinteger (Optional)  For scrollable list boxes, the  top index  (the index in the  Opt  array of the  first option visible in the list). Default value: 0. Iarray(Sometimes required,  otherwise optional; PDF  1.4)  F or choice fields that allow  multiple selection (MultiSelect flag set),  an array of integers, sorted in ascending  order, representing the zero-based indices in the  Opt  array of the currently  selected option items. This entry shall be used when two or more elements in the  Opt  array have different names but the same export value or when the value of  the choice field is an array. This entry should not be used for choice fields that do  not allow multiple selection. If the items iden tified by this entry differ from those in  the V entry of the field dictionary (see  discussion following this Table), the  V entry  shall be used.  Table 230   Field flags specific  to choice fields  (continued) Bit position Name Meaning",""],"454":["PDF 32000-1:2008 446 ' Adobe Systems Incorporated 2008  All rights reserved multiple selection is su pported but only one item is currently selected,  V is a text string representing the name  of the selected item, as given in the field dictionarys  Opt array. If multiple  items are selected,  V is an array of  such strings. (For items represented in the  Opt array by a two-element array, the name string is the second of  the two array elements.) The default value of  V is  null, indicating that no item is currently selected.  EXAMPLE The following example shows a ty pical choice field definition.  << /FT /Ch /Ff   /T ( Body Color  ) /V ( Blue ) /Opt [  ( Red )  ( My favorite color  )  ( Blue )]>>12.7.4.5 Signature Fields A s ignature field (PDF 1.3)  is a form field that contains a digital signature (see  12.8, Digital Signatures ). The  field dictionary representing a  signature field may contain the  additional entries listed in  Table  232 , as well as  the standard entries described in  Ta b l e  220 . The field type ( FT) shall be Sig, and the field value ( V), if present,  shall be a signature dictionary  containing the signature and specifying  various attributes of the signature field  (see  Ta b l e  252 ).NOTE 1 This signature form field serves two primary purposes.  The first is to define the form field that will provide the  visual signing properties for display but it also may hold information needed later when the actual signing takes  place, such as the signature technology to use. This ca rries information from the author of the document to the  software that later does the signing. NOTE 2 Filling in (signing) the signatur e field entails updating at least the  V entry and usually also the  AP entry of the  associated widget annotation. Exporting a signature field typically exports the  T, V, and  AP entries. Like any other field, a signature field may be described  by a widget annotation di ctionary containing entries  pertaining to an annotation as well as a field (see  12.5.6.19, Widget Annotations ). The annotation rectangle  (Re ct ) in such a dictionary shall give the position of the field on its page. Signature fields that are not intended  to be visible shall have an annotation rectangle that has zero height and width. Conforming readers shall treat  such signatures as not visible. Conforming readers sha ll also treat signatures as  not visible if either the  Hidden bit or the  NoView  bit of the  F entry is true . The  F entry is described in  Ta b l e  164, and annotation flags are  described in  Ta b l e  165 .The appearance dictionary ( AP) of a signature fields widget annotation defines the fields visual appearance on  the page (see  12.5.5, Appearance Streams ).The signature field lock dictionary (described in  Ta b l e  233 ) contains field names from the signature seed value  dictionary (described in  Ta b l e  234) that cannot be changed through the  user interface of  a conforming reader. Table  232   Additional entries specific to a signature field   KeyType Value Lock dictionary (Optional; shall be an indirect reference; PDF 1.5)  A signature field lock  dictionary  that specifies a set of form fields that shall be locked when this  signature field is signed.  Ta b l e  233  lists the entries in this dictionary.  SVdictionary (Optional; shall be an indirect reference; PDF 1.5)  A seed value dictionary  (see Table  234 ) containing information that constr ains the properties of a signature  that is applied to this field.",""],"455":["' Adobe Systems Incorporated 2008  All rights reserved 447PDF 32000-1:2008 The value of the  SV entry in the field dictionary is a  seed value dictionary whose entries (see  Ta b l e  234 ) provide constraining information that shall be us ed at the time the signature is applied. Its  Ff entry specifies  whether the other entries in the dictionary shall be honoured or whether they are merely recommendations.  The seed value dictionary may include seed values for  private entries belonging to multiple handlers. A given  handler shall use only those entries that are pertinent to itself and ignore the others. Table  233   Entries in a signature field lock dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  SigFieldLock  for a signature field lock dictionary. Actionname(Required)  A name which, in conjunction with  Fields , indicates the set of fields  that should be locked. The value shall be one of the following: All All fields in the document Include All fields specified in  Fields Exclude All fields except those specified in  Fields Fields array(Required if the value of  Action is Include or Exclude)  An array of text strings  containing field names. Table  234    Entries in a signature field seed value dictionary   Key Type Value Type name(Optional)   The type of PDF object that this dictionary describes; if  present, shall be  SV for a seed value dictionary.  Ffinteger (Optional)   A set of bit flags specifying the interpretation of specific  entries in this dictionary. A value of 1 for the flag indicates that the  associated entry is a required constraint. A value of 0 indicates that the  associated entry is an optional constraint. Bit positions are 1 ( Filter ); 2 (SubFilter); 3 (V); 4 (Reasons ); 5 (LegalAttestation ); 6 (AddRevInfo ); and 7 ( DigestMethod). Default value: 0.  Filter name(Optional)   The signature handler that shall be used to sign the signature  field. Beginning with PDF 1.7, if  Filter  is specified and the  Ff entry indicates this entry is a required constraint, then the signature handler  specified by this entry shall be used  when signing; otherwise, signing  shall not take place. If  Ff indicates that this is an optional constraint, this  handler may be used if it is available. If it is not available, a different  handler may be used instead.  SubFilterarray(Optional)  An array of names indicating encodings to use when signing.  The first name in the array that matches an encoding supported by the  signature handler shall be the encoding  that is actually used for signing.  If  SubFilter  is specified and the  Ff entry indicates that this entry is a  required constraint, then the first matching encodings shall be used  when signing; otherwise, signing shall not take place. If  Ff indicates that  this is an optional constraint, then the first matching encoding shall be  used if it is available. If none is  available, a different encoding may be  used.  DigestMethodarray(Op tional; PDF 1.7 ) An array of names indicating acceptable digest  algorithms to use while signing. The value shall be one of  SHA1, SHA256 , SHA384 , SHA512  and  RIPEMD160 . The default value is  implementation-specific. This property is only applicable if t he digital credential signing contains  RSA public/private keys. If it contains DSA public/ private keys, the digest algorithm is always  SHA1 and this attribute shall be ignored.",""],"456":["PDF 32000-1:2008 448 ' Adobe Systems Incorporated 2008  All rights reserved Vreal(Optional)  The minimum required capability of the signature field seed  value dictionary parser. A value of 1  specifies that the  parser shall be  able to recognize all seed value dictionary entries in a PDF 1.5 file. A  value of 2 specifies that it shall  be able to recognize all seed value  dictionary entries specified.  The  Ff e ntry indicates whether this shall be treated as a required  constraint.  Cert dictionary (Optional)  A certificate seed value dictionary  (see Table  235 ) containing  information about the characteristics of  the certificate that shall be used  when signing. Reasons array(Optional)  An array of text strings that specifying possible reasons for  signing a document. If specified, the reasons supplied in this entry  replace those used by  conforming products.  If the  Reasons  array is provided and the  Ff entry indicates that  Reasons  is a required constraint, one of the reasons in the array shall  be used for the signature dictionary;  otherwise, signing shall not take  place. If the  Ff entry indicates Reasons  is an optional constraint, one of  the reasons in the array may be c hosen or a custom reason can be  provided.  If the  Reas ons  array is omitted or contains a single entry with the value  PERIOD (2Eh) and the  Ff entry indicates that  Reasons  is a required  constraint, the  Reason  entry shall be omitted from the signature  dictionary (see  Ta b l e  252 ). MDPdictionary (Optional; PDF 1.6)  A dictionary containing a single entry whose key is  P and whose value is an integer between 0 and 3. A value of 0 defines  the signature as an author signature (see  12.8, Digital Signatures ). The values 1 through 3 shall be used  for certification signatures and  correspond to the value of  P in a  DocMDP transform parameters  dictionary (see  Ta b l e  254 ).If this  MDP key is not present or the  MDP dictionary does not contain a  P entry, no rules shall be defined regarding the type of signature or its  permissions.TimeStamp dictionary (Optional; PDF 1.6)  A time stamp dictionary containing two entries: URL An  ASCII string specifying the URL of a time-stamping server,  providing a time stamp that is compliant with RFC 3161,  Internet X.509 Public Key Infrastructure Time-Stamp Protocol  (see the  Bibliography ).  Ff An  integer whose value is 1 (the signature shall have a time  stamp) or 0 (the signature need not have a time stamp). Default  value: 0. NOTE Please see  12.8.3.3, \"PKCS#7 Signatures as used in ISO  32000\"  for more details about hashing. LegalAttestation array(Optional; PDF 1.6)  An array of text string s specifying possible legal  attestations (see  12.8.5, Legal Content Attestations ). The value of the  corresponding flag in the  Ff entry indicates whether this is a required  constraint.  Table 234   Entries in a signature fi eld seed value dictionary  (continued) Key Type Value",""],"457":["' Adobe Systems Incorporated 2008  All rights reserved 449PDF 32000-1:2008 For optional keys that are not present, no constraint  shall be placed upon the signature handler for that  property when signing. AddRevInfo boolean (Op tional; PDF 1.7 ) A flag indicating whether revocation checking shall  be carried out. If  AddRevInfo  is true, the conforming processor shall  perform the following additional tasks when signing the signature field:  Perform revocation checking of the  certificate (and the corresponding  issuing certificates) used to sign. Include the revocation information within the signature value.  Three  S ubFilter  values have been defined for ISO 32000. For those  values the  AddRevInfo  value shall be  true only if  SubFilter  is adbe.pkcs7.detached  or adbe.pkcs7.sha1 . If  SubFilter  is x509.rsa_sha1 , this entry shall be omitted or set to  false. Additional  SubFilters may be defined that also use  AddRevInfo  values.If  AddRe vInfo  is true and the  Ff entry indicates this is a required  constraint, then the preceding tasks s hall be performed. If they cannot  be performed, then signing shall fail.  Default value:  false NOTE 1 Revocation information is carrie d in the signature data as  specified by PCKS#7. See  12.8.3.3, \"PKCS#7 Signatures  as used in ISO 32000\" .NOTE 2 The trust anchors used ar e determined by the signature  handlers for both creation and validation. Table  235    Entries in a certificate seed value dictionary   KeyType Value Type name(Optional)   The type of PDF object that this dictionary describes; if  present, shall be  SVCert  for a certificate seed value dictionary. Ffinteger (Optional)   A set of bit flags specifying the interpretation of specific  entries in this dictionary. A value of 1 for the flag means that a signer  shall be required to use only the sp ecified values for the entry. A value  of 0 means that other values are permissible. Bit positions are 1  (Subject); 2 (Issuer ); 3 (OID ); 4 (SubjectDN ); 5 (Re served ); 6  (KeyUsage ); 7 (URL).Default value: 0. Subjectarray(Optional)  An array of byte strings  containing DER-encoded X.509v3  certificates that are acceptable for signing. X.509v3 certificates are  described in RFC 3280,  Internet X.509 Public Key Infrastructure,  Certificate and Certificate Re vocation List (CRL) Profile  (see the Bibliography ). The value of the corresponding flag in the  Ff entry indicates whether this is a required constraint.  Table 234   Entries in a signature fi eld seed value dictionary  (continued) Key Type Value",""],"458":["PDF 32000-1:2008 450 ' Adobe Systems Incorporated 2008  All rights reserved SubjectDNarray of dictionaries (Op tional; PDF 1.7 ) An array of dictionaries,  each specifying a Subject  Distinguished Name (DN) that shall be  present within the certificate for it  to be acceptable for signing. The certificate ultimately used for the  digital signature shall contain all the  attributes specified in each of the  dictionaries in this array. (PDF keys and values are mapped to  certificate attributes and values.) Th e certificate is not constrained to  use only attribute entries from t hese dictionaries but may contain  additional attributes.The Subject Distinguished Name is described in  RFC 3280 (see the  Bibliography ). The key can be any legal attribute  identifier (OID). Attribute names shal l contain characters in the set a-z  A-Z 0-9 and PERIOD. Certificate attribute name s are used as key names in the dictionaries in  this array. Values of the attribut es are used as values of the keys.  Values shall be  text strings.The value of the corresponding flag in the  Ff entry indicates whether  this entry is a required constraint. KeyUsage array of ASCII strings(Op tional; PDF 1.7 ) An array of ASCII strings, where each string  specifies an acceptable key-usage extens ion that shall be present in the  signing certificate. Multiple string s specify a range of acceptable key- usage extensions. The key-usage extension is described in RFC 3280.  Each character in a string represen ts a key-usage type, where the order  of the characters indicates the key- usage extension it represents. The  first through ninth characters in the st ring, from left to right, represent  the required value for the fo llowing key-usage extensions:  1  digitalSignature 4 dataEncipherment 7 cRLSign 2  non-Repudiation 5  keyAgreement 8 encipherOnly 3  keyEncipherment 6 keyCertSign 9 decipherOnly Any additional characters shall be ignored. Any missing characters or  characters that are not  one of the following values, shall be treated as  X. The following character values shall be supported: 0  Corresponding key-usage shall not be set. 1  Corresponding key-usage shall be set. X  State of the corresponding key-usage does not matter. EXAMPLE 1 The string values  1 and  1XXXXXXXX  represent  settings where the key-usage type digitalSignature is  set and the state of all other key-usage types do not  matter. The value of the corresponding flag in the  Ff entry indicates whether  this is a required constraint.  Issuer array(Optional)   An array of byte strings containing DER-encoded X.509v3  certificates of acceptable  issuers. If the signers  certificate refers to any  of the specified issuers (either directly or indirect ly), the certificate shall  be considered acceptable for signing.  The value of the corresponding  flag in the  Ff entry indicates whether this is a required constraint. This array may contain self-signed certificates. OID array(Optional)  An array of byte strings that  contain Object Identifiers (OIDs)  of the certificate policies  that shall be present in  the signing certificate.  EXAMPLE 2 An example of  such a string is: (2.16.840.1.1 13733.1.7.1.1).  This field shall only be used if the value of  Issuer is not empty. The  certificate policies extension is  described in RFC 3280 (see the  Bibliography ). The value of the corresponding flag in the  Ff entry indicates whether this is a required constraint.  Table 235   Entries in a certificate seed value dictionary  (continued) KeyType Value",""],"459":["' Adobe Systems Incorporated 2008  All rights reserved 451PDF 32000-1:2008 12.7.5 Form Actions 12.7.5.1 General Interactive forms also support special types of  actions in addition to those described in  12.6.4, Action Types :  submit-form action  reset-form action  import-data action 12.7.5.2 Submit-Form Action Upon invocation of a  submit-form action , a conforming processor shall transmit the names and values of  selected interactive form fields to a specified uniform resource locator (URL),  NOTE Presumably, the URL is the address of a Web  server that will process them an d send back a  response. The value of the action dictionarys  Flags  entry shall be an non-negative integer containing flags specifying  various characteristics of the action. Bit positions within the flag word shall be numbered starting with 1  (low-order).  Ta b l e  237  shows the meanings of the flags; all undefined flag bits shall be reserved and shall be  set to 0. URLASCII string(Optional)   A URL, the use for which shall be defined by the  URLType entry. URLType Name(Op tional; PDF 1.7 ) A name indicating the usage of the  URL  entry.  There are standard uses and there ca n be implementation-specific uses  for this URL. The following value specifies a valid standard usage: Browser   The URL references content that shall be displayed in a web  browser to allow enrolling for a new credential if a matching credential is  not found. The  Ff attributes URL bit shall be ignored for this usage. Third parties may extend the use of th is attribute with their own attribute  values, which shall conform to the guidelines described in  Annex E.The default value is  Browser. Table  236   Additional entries specific to a submit-form action   KeyType Value Sname (Required)  The type of action that this dictionary describes;  shall be  SubmitForm for a submit-form action.  Ffile specification (Required)  A URL file specification (see  7.11.5, URL  Specifications ) giving the uniform res ource locator (URL) of the script at the Web server t hat will process the submission.  Table 235   Entries in a certificate seed value dictionary  (continued) KeyType Value",""],"460":["PDF 32000-1:2008 452 ' Adobe Systems Incorporated 2008  All rights reserved Fields array(Optional)   An array identifying which fields to include in the  submission or which to exclude, depending on the setting of  the Include/Exclude flag in the  Flags  entry (see  Ta b l e  237). Each element of the array s hall be either an indirect  reference to a field dictionary or  (PDF 1.3) a text string  representing the fully qualified name of a field. Elements of  both kinds may be mixed in the same array.  If this entry is omitted, the Include/Exclude flag shall be ignored, and all fields in the documents interactive form shall  be submitted except those whose NoExport flag (see  Ta b l e  221) is set. Fields with no values may also be  excluded, as dictated by the value of the  IncludeNoValueFields flag; see  Ta b l e  237 .Flags integer (Optional; inheritable)  A set of flags specifying various characteristics of the action (see  Table  237). Default value: 0.  Table  237   Flags for submit-form actions   Bit positionName Meaning 1Include/Exclude If clear, the  Fields  array (see  Table  236 ) specifies which  fields to include in the submission. (All descendants of the  specified fields in the field hierarchy shall be submitted as  well.)  If set, the  Fields  array tells which fields to exclude. All fields  in the documents interactive form shall be submitted  exceptthose listed in the  Fields  array and those whose NoExport  flag (see  Ta b l e  221 ) is set and fields with no values if the  IncludeNoValueFields flag is clear.  2IncludeNoValueFields If set, all fields designated by the  Fields  array and the  Include/Exclude flag shall be submitted, regardless of  whether they have a value ( V entry in the field dictionary). For  fields without a value, only the field name shall be transmitted.  If clear, fields without a value shall not be submitted.  3ExportFormat Meaningful only if the SubmitPDF and XFDF flags are clear. If  set, field names and values shall be submitted in HTML Form  format. If clear, they shall be submitted in Forms Data Format  (FDF); see 12.7.7, Forms Data Format.  4GetMethod If set, field names and values shall be submitted using an  HTTP GET request. If clear, they shall be submitted using a  POST request. This flag is  meaningful only when the  ExportFormat flag is set; if Ex portFormat is clear, this flag  shall also be clear.  Table 236   Additional entries specific to a submit-form action  (continued) KeyType Value",""],"461":["' Adobe Systems Incorporated 2008  All rights reserved 453PDF 32000-1:2008 5SubmitCoordinates If set, the coordinates of the mouse click that caused the  submit-form action shall be tran smitted as part of the form  data. The coordinate values are relative to the upper-left  corner of the fields widget annotation rectangle. They shall  be represented in the data in the format  name  . x = xval & name . y = yvalwhere  name is the fields mapping name ( TM in the field  dictionary) if pr esent; otherwise,  name  is the field name. If the  value of the  TM entry is a single ASCII SPACE (20h)  character, both the name and the ASCII PERIOD (2Eh) following it shall be suppressed, resulting in the format  x = xval & y = yval This flag shall be used only when the ExportFormat flag is  set. If ExportFormat is clear, this flag shall also be clear.  6XFDF(PDF 1.4)  shall be used only if the SubmitPDF flags are clear.  If set, field names and values shall be submitted as XFDF.  7IncludeAppendSaves (PDF 1.4)  shall be used only when the form is being  submitted in Forms Data Format (that is, when both the  XFDF and ExportFormat flags are clear). If set, the submitted  FDF file shall include the conten ts of all incremental updates  to the underlying PDF document, as contained in the  Differences entry in the FDF dictionary (see  Table  243 ). If clear, the incremental updates shall not be included.  8IncludeAnnotations (PDF 1.4)  shall be used only when the form is being  submitted in Forms Data Format (that is, when both the  XFDF and ExportFormat flags are clear). If set, the submitted  FDF file shall include includes all markup annotations in the  underlying PDF document (see  12.5.6.2, Markup  Annotations ). If clear, markup annotations shall not be included.  9SubmitPDF(PDF 1.4) If set, the document shall be submitted as PDF,  using the MIME cont ent type application  / pdf (described in  Internet RFC 2045,  Multipurpose Internet Mail Extensions  (MIME), Part One: Format of  Internet Message Bodies ; see the Bibliography ). If set, all other flags shall be ignored except  GetMethod.  10CanonicalFormat (PDF 1.4) If set, any submitted field values representing  dates shall be converted to the standard format described in  7.9.4, Dates.  NOTE 1 The interpretation of a form field as a date is not  specified explicitly in th e field itself but only in  the JavaScript code  that processes it. Table 237   Flags for submit-form actions  (continued) Bit position Name Meaning",""],"462":["PDF 32000-1:2008 454 ' Adobe Systems Incorporated 2008  All rights reserved The set of fields whose names and values are to be submitted shall be defined by the  Fields  array in the action  dictionary ( Table  236) together with the Include/Exclude and  IncludeNoValueFields flags in the  Flags entry  (Ta b l e  237 ). Each element of the  Fields array shall identify an interactive form field, either by an indirect  reference to its field dictionary or  (PDF 1.3)  by its fully qualified field name (see  12.7.3.2, Field Names ). If the Include/Exclude flag is clear, the submissi on consists of all fields listed in the  Fields  array, along with any  descendants of those fields in the field hierarchy. If th e Include/Exclude flag is set, the submission shall consist  of all fields in the documents interactive form  except those listed in the  Fields  array.  The NoExport flag in the field dictionarys  Ff entry (see  Ta b l e  220  and  Ta b l e  221 ) takes precedence over the  actions  Fields  array and Include/Exclude flag. Fields whose NoEx port flag is set shall not be included in a  submit-form action.  Field names and values may be submitted in any of th e following formats, depending  on the settings of the  actions ExportFormat, SubmitPDF, and XFDF flags (see the  Bibliography  for references):   HTML Form format  (described in the  HTML 4.01 Specification )  Forms Data Format (FDF), wh ich is described in  12.7.7, Forms Data Format.  XFDF, a version of FDF based on XML. XFDF is described in the Adobe technical note  XML Forms Data  Format Specification, Version 2.0.  XML is described in the W3C document  Extensible Markup Language  (XML) 1.1 )  PDF (in this case, the entire do cument shall be submitted rather than individual fields and values).  The name submitted for each field shall be its fully qualified name (see  12.7.3.2, Field Names ), and the value  shall be specified by the  V entry in its field dictionary.  11ExclNonUserAnnots (PDF 1.4)  shall be used only when the form is being  submitted in Forms Data Format (that is, when both the  XFDF and ExportFormat flags are clear) and the  IncludeAnnotations flag is set. If set, it shall include only  those markup annotations whose  T entry (see  Table  170 ) matches the name of the current user, as determined by the  remote server to which the form is being submitted.  NOTE 2 The  T entry for markup annotations specifies the  text label that is displayed in the title bar of the  annotations pop-up window and is assumed to  represent the name of  the user authoring the  annotation. NOTE 3 This allows multiple users to collaborate in  annotating a single remote PDF document  without affecting one anothers annotations.  12ExclFKey(PDF 1.4)  shall be used only when the form is being  submitted in Forms Data Format (that is, when both the  XFDF and ExportFormat flags are  clear). If set, the submitted  FDF shall exclude the  F entry.  14EmbedForm (PDF 1.5)  shall be used only when the form is being  submitted in Forms Data Format (that is, when both the  XFDF and ExportFormat flags are clear). If set, the  F entry of  the submitted FDF shall be a f ile specification containing an  embedded file stream represen ting the PDF file from which  the FDF is being submitted. Table 237   Flags for submit-form actions  (continued) Bit position Name Meaning",""],"463":["' Adobe Systems Incorporated 2008  All rights reserved 455PDF 32000-1:2008 For pushbutton fields submitted in FDF,  the value submitted shall be that of the  AP entry in the fields widget  annotation dictionary. If the submit-form action dictionary contains no  Fields entry, such push button fields shall not be submitted.  Fields with no value (that is, whose field dictionary does not contain a  V entry) are ordinarily not included in the  submission. The submit-form actions IncludeNoValueFields fl ag may override this behaviour. If this flag is set,  such valueless fields sh all be included in the submission by  name only, with no associated value.  12.7.5.3 Reset-Form Action Upon invocation of a  reset-form action , a conforming processor shall reset selected interactive form fields to  their default values; that is,  it shall set the value of the  V entry in the field dictionary to that of the  DV entry (see Ta b l e  220). If no default value is defined for a field, its  V entry shall be removed. For fields that can have no  value (such as pushbuttons), the action has no effect.  Ta b l e  238  shows the action dictiona ry entries specific to  this type of action.  The value of the action dictionarys  Flags entry is a non-negative contai ning flags specifying various  characteristics of the action. Bit positions within the flag  word shall be numbered starting from 1 (low-order).  Only one flag is defined for this type of action. All un defined flag bits shall be reserved and shall be set to 0. Table  238   Additional entries speci fic to a reset-form action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  ResetForm  for a reset-form action.  Fields array(Optional)  An array identifying which fields to reset or which to  exclude from resetting, depending on the setting of the Include/ Exclude flag in the  Flags  entry (see  Ta b l e  239 ). Each element of  the array shall be either an indirect reference to a field dictionary  or (PDF 1.3) a text string representing the fully qualified name of a  field. Elements of both kinds may be mixed in the same array.  If this entry is omitted, the In clude/Exclude flag shall be ignored;  all fields in the documents interactive form are reset.  Flags integer (Optional; inheritable)  A set of flags specifying various  characteristics of the action (see  Ta b l e  239 ). Default value: 0.  Table  239    Flag for reset-form actions   Bit positionName Meaning 1Include/Exclude If clear, the  Fields  array (see  Ta b l e  238 ) specifies which fields to  reset. (All descendants of the specified fields in the field hierarchy  are reset as well.) If set, the  Fields  array indicates which fields to  exclude from resetting; that is, all fields in the documents  interactive form shall be reset  except  those listed in the  Fields array.",""],"464":["PDF 32000-1:2008 456 ' Adobe Systems Incorporated 2008  All rights reserved 12.7.5.4 Import-Data Action Upon invocation of an  import-data action , a conforming processor shall import Forms Data Format (FDF) data  into the documents interactiv e form from a specified file.  12.7.6 Named Pages The optional  Pages entry  (PDF 1.3)  in a documents name dictionary (see  7.7.4, Name Dictionary ) contains a  name tree that maps name strings to individual page s within the document. Naming a page allows it to be  referenced in two different ways:   An import-data action can add the named page to th e document into which FDF is  being imported, either  as a page or as a button appearance.   A script executed by a JavaScript  action can add the named page to the current document as a regular  page.  A named page that is intended to be visible to a user shall be left in the page tree (see  7.7.3, Page Tree ), and  there shall be a reference to it in the appr opriate leaf node of the name dictionarys  Pages tree. If the page is  not intended to be displayed by the reader, it shall be referenced from the name dictionarys  Templates  tree  instead. Such invisible pages shall have an object type of  Template  rather than  Page and shall have no  Parent or  B entry (see  Ta b l e  30). 12.7.7 Forms Data Format 12.7.7.1 General This sub-clause describes Forms Data Format (FDF),  the file format used fo r interactive form data  (PDF 1.2) . FDF can be used when submitting form data to a server , receiving the response, and incorporating it into the  interactive form. It can also be used to export form dat a to stand-alone files that can be stored, transmitted  electronically, and imported back into the corresponding  PDF interactive form. In addition, beginning in PDF  1.3, FDF can be used to define a container for annotatio ns that are separate from the PDF document to which  they apply.  FDF is based on PDF; it uses the same syntax  and has essentially the same file structure ( 7.5, File Structure ). However, it differs from  PDF in the following ways:   The cross-reference table ( 7.5.4, Cross-Reference Table ) is optional.   FDF files shall not be updated (see  7.5.6, Increme ntal Updates ). Objects shall only be of generation 0,  and no two objects within an FDF file shall have the same object number.   The document structure is much si mpler than PDF, since the body of  an FDF document consists of only  one required object.   The length of a stream shall not be specified by an indirect object.  FDF uses the MIME content type application  / vnd . fdf. On the Windows and UNIX pl atforms, FDF files have the  extension .  fdf; on Mac OS, they have file type ’  FDF  ’. Table  240    Additional entries specific to an import-data action   KeyType Value Sname (Required)  The type of action that this dictionary describes; shall be  ImportData  for an import-data action.  Ffile specification (Required)   The FDF file from which to import the data.",""],"465":["' Adobe Systems Incorporated 2008  All rights reserved 457PDF 32000-1:2008 12.7.7.2 FDF File Structure 12.7.7.2.1 General An FDF file shall be struct ured in essentially the same way as a PD F file but contains only those elements  required for the export and import of interactive form and  annotation data. It consists of three required elements  and one optional element (see  Figure 65 ):  A one-line  header  identifying the version number of the PDF  specification to whic h the file conforms  A  bod y  containing the objects that make up the content of the file   An optional  cross-reference table  containing information about the indirect objects in the file   An optional  trailer giving the location of the cross-reference t able and of certain special objects within the  body of the file  Figure 65   FDF file structure 12.7.7.2.2 FDF Header The first line of an FDF file shall be a  header , which shall contain %FDF-1 . 2The version number is given by the  Version  entry in the FDF catalogue dictionary (see  12.7.7.3, FDF Catalog ). 12.7.7.2.3 FDF Body The  bod y  of an FDF file shall consist of a sequence of indi rect objects representing the files catalogue (see  12.7.7.3, FDF Catalog ) and any additional objects that the catalogue references. The objects are of the same  basic types described in  7.5, File Structure  (other than the %PDFn.m and %%EOF comments described in  7.5, File Structure ) have no semantics. They are not necessar ily preserved by applications that edit PDF  files. Just as in PDF, objects in  FDF can be direct or indirect.","HeaderBodyCross-reference table (optional)Trailer",""],"466":["PDF 32000-1:2008 458 ' Adobe Systems Incorporated 2008  All rights reserved 12.7.7.2.4 FDF Trailer The  trailer of an FDF file enables a reader to find significant  objects quickly within the body of the file. The last  line of the file contains only the end-of-file mark er, %%EOF. This marker shall be preceded by the  FDF trailer  dictionary , consisting of the keyword  trailer followed by a series of one or more key-value pairs enclosed in  double angle brackets (<<   >>) (using LESS-THAN SIGNs (3Ch) a nd GREATER-THAN SIGNs (3Eh)). The  only required key is  Root , whose value is an indirect reference  to the files catalogue dictionary (see  Ta b l e  242). The trailer may optionally contain additional entri es for objects that are referenced from within the  catalogue.  Thus, the trailer has the overall structure  trailer << /Root c 0 R key2 value2  keyn valuen>>%%EOFwhere c is the object number of the files catalogue dictionary.  12.7.7.3 FDF Catalog 12.7.7.3.1 General The root node of an FDF files object hierarchy is the  Catalog  dictionary, located by means of the  Root  entry in  the files traile r dictionary (see  FDF Trailer  in 12.7.7.2, FDF File Structure ). As shown in Ta b l e  241 , the only  required entry in the catalogue is  FDF; its value shall be an  FDF dictionary  (Ta b l e  243 ), which in turn shall  contain references to other objects describing the file s contents. The catalogue may also contain an optional  Version  entry identifying the version of the PDF spec ification to which this  FDF file conforms.  Table  241    Entry in the FDF trailer dictionary   KeyType Value Rootdictionary (Required; shall be an indirect reference)  The Catalog  object for this FDF file  (see 12.7.7.3, FDF Catalog ). Table  242    Entries in the FDF catalog dictionary   KeyType Value Version name (Optional; PDF  1.4)  The  version of the FDF specification to  which this FDF file conforms (for  example, 1.4) if later than  the version specified in the files header (see  FDF Header  in  12.7.7.2, FDF File Structure ). If the header specifies a later  version, or if this entry is  absent, the document conforms to  the version specified in the header.  The value of this entry is a name object, not a number, and  therefore shall be precede d by a slash character ( /) when  written in the FDF file (for example,  /1.4 ). FDF dictionary (Required)   The FDF dictionary for this file (see  Table  243 ).",""],"467":["' Adobe Systems Incorporated 2008  All rights reserved 459PDF 32000-1:2008 Table  243    Entries in the FDF dictionary   KeyType Value Ffile specification (Optional)  The source file  or target file : the PDF document file  that this FDF file was exported from or is intended to be  imported into.  IDarray(Optional)  An array of two byte strings constituting a file  identifier (see  14.4, File Identifiers ) for the source or target  file designated by  F, taken from the  ID entry in the files trailer  dictionary (see  7.5.5, File Trailer ). Fields array(Optional)  An array of FDF field dictionaries (see  FDF Fields in  12.7.7.3, FDF Catalog ) describing the root fields (those  with no ancestors in the field hi erarchy) that shall be exported  or imported. This entry and the  Pages entry shall not both be  present.  Status PDFDocEncoded  string(Optional)   A status string that shall be displayed indicating  the result of an action, typically a submit-form action (see  12.7.5.2, Submit-Form Action ). The string shall be encoded  with  PDFD ocEncoding . This entry and the  Pages entry shall not both be present.  Pages array(Optional; PDF  1.3) An  array of FDF page dictionaries (see  FDF Pages  in 12.7.7.3, FDF Catalog ) describing pages that  shall be added to a PDF target document. The  Fields  and  Status  entries shall not be present together with this entry.  Encoding name(Optional; PDF  1.3)  The encoding that shall be used for any  FDF field value or option ( V or Opt  in the field dictionary; see  Ta b l e  246 ) or field name that is a string and does not begin  with the Unicode prefix U+FEFF. Default value:  PDFDocEncoding . Other allowed values include  Shift_JIS, BigFive, GBK, UHC , utf_8 , utf_16 Annots array(Optional; PDF  1.3) An a rray of FDF annotation dictionaries  (see FDF Annotation Dictionaries  in 12.7.7.3, FDF Catalog ). The array may include annotations of any of the standard  types listed in Table  169  except Link, Movie, Widget , PrinterMark, Screen, and  TrapNet .",""],"468":["PDF 32000-1:2008 460 ' Adobe Systems Incorporated 2008  All rights reserved Embedded FDF files specified in the FDF dictionarys  EmbeddedFDFs  entry may be encr ypted. Besides the  usual entries for an embedded file stream, the stream  dictionary representing such an encrypted FDF file shall  contain the addition al entry shown in  Table  244  to identify the revision number  of the FDF encryption algorithm  used to encrypt the file. Although the FDF encrypti on mechanism is separate from the one for PDF file  encryption described in  7.6, Encryption,  revision 1 (the only one defined) uses a similar RC4 encryption  algorithm based on a 40-bit encryption key. The key  shall be computed by means of an MD5 hash, using a  padded user-supplied password as input. The computat ion shall be identical to steps (a) and (b) of the  \"Algorithm 2: Computin g an encryption key\"  in 7.6.3.3, \"Encryption Key Algorithm\" ; the first 5 bytes of the result  shall be the encryption key for the embedded FDF file.  The  Jav aScript  entry in the FDF dictionary holds a  JavaScript dictionary  containing JavaScript scripts that  shall be defined globally at the document level, rather t han associated with individual fields. The dictionary may  contain scripts defining JavaScript functions for use by other scripts in the document, as well as scripts that  shall be executed immediately before and after the FDF file is imported.  Ta b l e  245  shows the contents of this  dictionary.  Differencesstream(Optional; PDF  1.4)  A  stream containing all the bytes in all  incremental updates made to  the underlying PDF document  since it was opened (see  7.5.6, Incremental Updates ). If a  submit-form action submitting  the document to a remote  server as FDF has its IncludeAppendSaves flag set (see  12.7.5.2, Submit-Form Action ), the contents of this stream  shall be included in the submission. This allows any digital  signatures (see  12.8, Digital Signatures ) to be transmitted  to the server. An incrementa l update shall be automatically  performed just before the submission takes place, in order to  capture all changes made to the document.  The submission shall include the full set of incremental  updates back to the time the document was first opened,  even if some of them may already have been included in  intervening submissions. Although a  Fields  or Annots entry (or both) may be present  along with  Differences , there is no requirement that their  contents will be consistent with  each other. In particular, if  Differences  contains a digital signat ure, only the values of  the form fields given in the  Differences  stream shall be  considered trustworthy under that signature.  Target string(Optional; PDF  1.4)  The name of a browser frame in which  the underlying PDF document shall be opened. This mimics  the behaviour of the tar get attribute in HTML <  href > tags.  EmbeddedFDFs array(Optional; PDF  1.4) An a rray of file specifications (see  7.11,  File Specifications ) representing other FDF files embedded  within this one ( 7.11.4, Embedded File Streams ). JavaScript dictionary (Optional; PDF  1.4) A JavaScript dictionary  (see Ta b l e  245) defining document-level JavaScript scripts.  Table  244   Additional entry in an embedded file stream dictionary for an encrypted FDF file   KeyType Value EncryptionRevision integer (Required if the FDF file is encrypted; PDF  1.4)  Th e revision number of  the FDF encryption algorithm used to encrypt the file. This value shall  be defined at the time of publication is 1.  Table 243   Entries in the FDF dictionary  (continued) KeyType Value",""],"469":["' Adobe Systems Incorporated 2008  All rights reserved 461PDF 32000-1:2008 12.7.7.3.2 FDF Fields Each field in an FDF file shall be described by an  FDF field dictionary . Table  246  shows the contents of this type  of dictionary. Most of the entries have the same fo rm and meaning as the corresponding entries in a field  dictionary ( Table  220, Ta b l e  222 , Table  229, and  Table  231 ) or a widget annotation dictionary ( Table  168  and  Ta b l e  188). Unless otherwise indicated in the table, importing a  field causes the values of  the entries in the FDF  field dictionary to replace th ose of the corresponding entries in the field with the same fully qualified name in the  target document.  Table  245    Entries in the JavaScript dictionary   KeyType Value Beforetext string or text stream(Optional)  A text string or text stream  containing a JavaScript script  that shall be executed just before the FDF file is imported.  After text string or text stream(Optional)  A text string or text stream  containing a JavaScript script  that shall be executed just after the FDF file is imported.  AfterPermsReady text string or text stream(Optional; PDF 1.6)  A text string or text stream containing a  JavaScript script that shall be  executed after the FDF file is  imported and the usage rights in  the PDF document have been  determined (see  12.8.2.3, UR ). Verification of usage rights requires  the entire file to be present, in  which case execution of this script shall be deferred until that  requirement is met.  Docarray(Optional)  An array defining additional Ja vaScript scripts that shall  be added to those defined in the  JavaScript  entry of the  documents name dictionary (see  7.7.4, Name Dictionary ). The  array shall contain an even number of elements, organized in pairs.  The first element of each pair shall be a name and the second shall  be a text string or text stream  defining the script corresponding to  that name. Each of the defined scripts shall be added to those  already defined in the name dictionary and shall then be executed  before the script defined in the  Before  entry is executed.  NOTE As described in  12.6.4.16, JavaScript Actions,  these scripts are used to define Ja vaScript functions for use  by other scripts in the document.  Table  246   Entries in an FDF field dictionary   KeyType Value Kidsarray(Optional)  An array containing the immediate children of this field.  Unlike the children of fields in a PDF file, which shall be specified as indirect  object references, those of an FDF field may be either direct or indirect objects.  Ttext string(Required)  The partial field name (see  12.7.3.2, Field Names ).  V(various) (Optional)  The fields value, whose format varies depending on the field type;  see the descriptions of individual field types in  12.7.4, Field Types  for further  information. Ffinteger (Optional)  A set of flags specifying variou s characteristics of the field (see  Ta b l e  221 , Ta b l e  226 , Ta b l e  228 , and  Table  230). When imported into an  interactive form, the value of this  entry shall replace that of the  Ff entry in the  forms corresponding field dictionary. If this field is present, the  SetFf  and  ClrFf entries, if any, shall be ignored.  SetFfinteger (Optional)   A set of flags to be set (turned on) in the  Ff entry of the forms  corresponding field dictionary. Bits equal to 1 in  SetFf shall cause the  corresponding bits in  Ff to be set to 1. This entry shall be ignored if an  Ff entry  is present in the FDF field dictionary.",""],"470":["PDF 32000-1:2008 462 ' Adobe Systems Incorporated 2008  All rights reserved ClrFfinteger (Optional)  A set of flags to be cleared (turned off) in the  Ff entry of the forms  corresponding field dictionary. Bits equal to 1 in  ClrFf  shall cause the  corresponding bits in  Ff to be set to 0. If a  SetFf entry is also present in the  FDF field dictionary, it shall be applied before this entry. This entry shall be ignored if an  Ff entry is present in the FDF field dictionary.  Finteger (Optional)   A set of flags specifying various characteristics of the fields widget  annotation (see  12.5.3, Annotation Flags ). When imported into an interactive  form, the value of this entry shall replace that of the  F entry in the forms  corresponding annotation dictionary. If this field is present, the  SetF and  ClrF entries, if any, shall be ignored.  SetFinteger (Optional)  A set of flags to be set (turned on) in the  F entry of the forms  corresponding widget annotation dictionary. Bits equal to 1 in  SetF shall cause  the corresponding bits in  F to be set to 1. This entry shall be ignored if an  Fentry is present in the FDF field dictionary.  ClrFinteger (Optional)  A set of flags to be cleared (turned off) in the  F entry of the forms  corresponding widget annotation dictionary. Bits equal to 1 in  ClrF shall cause  the corresponding bits in  F to be set to 0. If a  SetF  entry is also present in the  FDF field dictionary, it shall be applied before this entry. This entry shall be ignored if an  F entry is present in the FDF field dictionary.  APdictionary (Optional)  An appearance dictionary sp ecifying the appearance of a  pushbutton field (see  Pushbuttons  in  12.7.4.2, Button Fields ). The  appearance dictionarys contents are as shown in  Ta b l e  168 , except that the values of the  N, R, and D entries shall all be streams.  APRefdictionary (Optional; PDF  1.3)  A d ictionary holding references to external PDF files  containing the pages to use for the appea rances of a pushbutton field. This  dictionary is similar to an appearance dictionary (see  Ta b l e  168 ), except that  the values of the  N, R, and D entries shall all be named page reference  dictionaries ( Table  250 ). This entry shall be ignored if an  AP entry is present. IFdictionary (Optional; PDF  1.3; button fields only)  An icon fit dictionary (see  Table  247 ) specifying how to display a button fields icon within the annotation rectangle of  its widget annotation.  Opt array (Required; choice fields only)  An array of options that shall be presented to the  user. Each element of the array shall take one of two forms:  A text string representing one of the available options  A two-element array consisting of a text  string representing one of the available  options and a default appearance string  for constructing the items appearance  dynamically at viewing time (see  12.7.3.3, Variable Text ). Adictionary (Optional)  An action that shall be performed wh en this fields widget annotation  is activated (see  12.6, Actions ). AAdictionary (Optional)  An additional-actions dictionary defining the fields behaviour in  response to various trigger events (see  12.6.3, Trigger Events ). RVtext string or  text stream(Optional; PDF 1.5)  A rich text string, as described in  12.7.3.4, Rich Text  Strings. Table 246   Entries in an FDF field dictionary  (continued) Key Type Value",""],"471":["' Adobe Systems Incorporated 2008  All rights reserved 463PDF 32000-1:2008 In an FDF field dictionary representi ng a button field, the optional  IF entry holds an  icon fit dictionary (PDF 1.3) specifying how to display the buttons icon within the annotation rectangle of its widget annotation.  Ta b l e  247shows the contents of this type of dictionary.  12.7.7.3.3 FDF Pages The optional  Pages field in an FDF dictionary (see  Ta b l e  243 ) shall contain an array of  FDF page dictionaries  (PDF 1.3)  describing new pages that shall be added to the target document.  Ta b l e  248  shows the contents of  this type of dictionary.  An F DF template dictionary  shall contain information describing a  named page that serves as a template.  Ta b l e  249 shows the contents of this type of dictionary.  Table  247    Entries in an icon fit dictionary   KeyType Value SWname (Optional)   The circumstances under which the icon shall be scaled inside the  annotation rectangle:  A Always scale.  B Scale only when the icon is bigge r than the annotation rectangle.  S  Scale only when the icon is smaller than the annotation rectangle.  N Never scale.  Default value: A. Sname (Optional)  The type of scaling that shall be used:  A Anamorphic scaling : Scale the icon to fill the annotation rectangle exactly,  without regard to its original aspect ratio (ratio of width to height).  P Pro portional scaling : Scale the icon to fit the width or height of the annotation  rectangle while maintaining the icons original aspect ratio. If the required  horizontal and vertical scaling factors are  different, use the smaller of the two,  centering the icon within the annotation  rectangle in the other dimension.  Default value: P.  Aarray(Optional)  An array of two numbers that shal l be between 0.0 and 1.0 indicating  the fraction of leftover space to allocate at  the left and bottom of the icon. A value  of [ 0.0 0.0 ] shall position the icon at the bottom-left corner of the annotation  rectangle. A value of [  0.5 0.5  ] shall center it within the  rectangle. This entry shall  be used only if the icon is scaled proportionally. Default value: [  0.5 0.5  ].  FBboolean (Optional; PDF 1.5)  If true, indicates that the button appearance shall be scaled  to fit fully within the bounds of the annot ation without taking into consideration the  line width of the border. Default value:  false.Table  248   Entries in an FDF page dictionary   KeyType Value Templates array(Required)  An array of FDF template dictionaries  (see  Table  249) that shall describe the named pages that serve as templates on the page.  Info dictionary (Optional)  An FDF page information dictionary  that shall contain additional information about the page.",""],"472":["PDF 32000-1:2008 464 ' Adobe Systems Incorporated 2008  All rights reserved NOTE The names of fields import ed from a template can sometimes conflict with those of existing fields in the target  document. This can occur, for example, if the same  template page is imported more than once or if two  different templates have fields with the same names.  The  Rename  flag does not define a renaming algorithm (see  Annex J).  The  TRef entry in an FDF template  dictionary shall hold a  named page reference dictionary  that shall describe  the location of external templates or page elements.  Ta b l e  250  shows the contents of this type of dictionary.  12.7.7.3.4 FDF Annotation Dictionaries Each annotation dictionary in an FDF file shall have a  Page entry (see  Ta b l e  251 ) that shall indicate the page of  the source document to which the annotation is attached.  12.7.8 XFA Forms PDF 1.5 introduces support for interactive forms base d on the Adobe XML Forms Architecture (XFA). The  XFA entry in the interactive  forms dictionary (see  Table  218 ) specifies an  XFA resource , which shall be an XML  stream that contains the form information. The  format of an XFA resource is described in the  XML Data  Package (XDP) Specification  (see the Bibliography). The  XF A  entry shall be either a stream containing the en tire XFA resource or an array specifying individual  packets  that together make up the XFA resource. The resource includes but is not limited to the following  information: The  fo rm template  (specified in the template packet), which  describes the characte ristics of the form,  including its fields, calculations, validations, and formatting. The  XML Template Specification  describes the  architecture of a form template (see Bibliography).  Table  249    Entries in an FDF  template dictionary   KeyType Value TRef dictionary (Required)  A named page reference dictionary (see  Ta b l e  250) that shall  specify the location of the template.  Fields array(Optional)   An array of references to FDF field dictionaries (see  Table  246 ) describing the root fields that shall be imported (those with no ancestors  in the field hierarchy).  Renameboolean (Optional)   A flag that shall specify whether fields imported from the  template shall be renamed in the ev ent of name conflicts with existing  fields; see the Note in this sub-clause for further discussion. Default  value: true. Table  250    Entries in an FDF named page reference dictionary   KeyType Value Name string (Required)   The name of the referenced page.  Ffile specification (Optional)  The file containing the named pa ge. If this entry is absent, it  shall be assumed that the page resides in the associated PDF file.  Table  251   Additional entry for annotation dictionaries in an FDF file   KeyType Value Pageinteger (Required for annotations in FDF files)  The ordinal page number on  which this annotation shall appear, where page 0 is the first page.",""],"473":["' Adobe Systems Incorporated 2008  All rights reserved 465PDF 32000-1:2008 The  data  (specified in the datasets packet), wh ich represents the state of the form  The  configuration information  (specified in the config packet), whic h shall be used to properly process the  form template and associated data. Configuration in formation shall be formatted as described in the  XML Configuration Specification  (see Bibliography).  A pa cket  is a pair of a string and stream. The string co ntains the name of the XML element and the stream  contains the complete text of this XML element. Each  packet represents a complete XML element, with the  exception of the first and last packet, which specif y begin and end tags for the xdp:xdp element (see  EXAMPLE  1 in this sub-clause). EXAMPLE 1 This example shows the  XFA  entry consisting of an array of packets.  1 0 objXFA entry in interactive form dictionary << /XFA [(xdp:xdp) 10 0 R XFA resource specified as individual packets (template) 11 0 R (datasets) 12 0 R (config) 13 0 R(/xdp:xdp) 14 0 R ] >>endobj 10 0 obj stream<xdp:xdp xmlns:xdp=\"htt p://ns.adobe.com/xdp/\"> endstream 11 0 obj stream<template xmlns=\"http://www.xfa.o rg/schema/xfa-template/2.4/\">...remaining contents of template packet... </template> endstream 12 0 obj stream<xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\"> ...contents of datasets packet... </xfa:datasets> endstream 13 0 obj stream<config xmlns=\"http://www.x fa.org/schem a/xci/1.0/\"> ...contents of config node of XFA Data Package... <config> endstream 14 0 obj stream</xdp:xdp> endstream EXAMPLE 2 The following example shows the  same entry specified as a stream. 1 0 objXFA entry in interactive form dictionary << /XFA 10 0 R >> endobj 10 0 obj stream<xdp:xdp xmlns:xdp=\"htt p://ns.adobe.com/xdp/\"> <template xmlns=\"http://www.xfa.o rg/schema/xfa-template/2.4/\">...remaining contents of template packet... </template>",""],"474":["PDF 32000-1:2008 466 ' Adobe Systems Incorporated 2008  All rights reserved <xfa:datasets xmlns:xfa=\"http://ww w.xfa.org/schema/xfa-data/1.0/\"> ...contents of datasets packet... </xfa:datasets> <config xmlns=\"http://www.x fa.org/schema/xci/1.0/\"> ...contents of config node of XFA Data Package... <config> </xdp:xdp> endstream endobj When an  XFA  entry is present in an interactive form dictiona ry, the XFA resource provides information about  the form; in particular, all form-related events such as  calculations and validations. The other entries in the  interactive form dictionary  shall be consistent with the information in the XFA resource. When creating or  modifying a PDF file with an XFA resource, a  conforming writer s hall follow these rules:  PDF interactive form field objects shall be present  for each field specified in the XFA resource. The XFA  field values shall be consistent with the corresponding  V entries of the PDF field objects. The  XFA Scripting Object Model (SOM)  specifies a naming convention that shall be used to connect  interactive form field names with field names in the XF A resource. Information about this model is available  in the XFA Specification, version 2.5  (see the  Bibliography ). No  A or AA entries (see  Ta b l e  164 ) shall be present in the annotation dictionaries of fields that also have  actions specified by the XFA resource.  12.8 Digital Signatures 12.8.1 General A digital signature  (PDF 1.3)  may be used to authenticate the identity of a user and the documents contents. It  stores information about the signer and the state of  the document when it was signed. The signature may be  purely mathematical, such as a public/private-key encr ypted document digest, or it may be a biometric form of  identification, such as a handwritten signature, fingerpri nt, or retinal scan. The spec ific form of authentication  used shall be implemented by a special software module called a  signature handler . Signature handlers shall  be identified in accordance with the rules defined in  Annex E.Digital signatures in ISO 32000 currently support two activitie s: adding a digital signature to a document and  later checking that signature for valid ity. Revocation information is a sign ed attribute, which means that the  signing software must capture the revocation informati on before signing. A similar requirement applies to the  chain of certificates. The signing software mu st capture and validate the certificate’s chain  before  signing. Signature information shall be contained in a  signature dictionary , whose entries are listed in  Ta b l e  252 . Signature handlers may use or omit tho se entries that are marked optional in  the table but should use them in a  standard way if they are used at all. In addition, signature handlers may add private entries of their own. To  avoid name duplication, the keys for all such private entrie s shall be prefixed with the registered handler name  followed by a PERIOD (2Eh). Signatures shall be created by computing a  digest  of the data (or part of the data) in a document, and storing  the digest in the document. To verify the signature, the digest shall be re-computed and compared with the one  stored in the document. Differences in the digest values  indicate that modifications have been made since the  document was signed.  There are two defined techniques for computing a digital si gnature of the contents of all or part of a PDF file: A  byte  range digest  shall be computed over a range of bytes in the file, that shall be indicated by the  ByteRange entry in the signature dictionary. This range  should be the entire file, including the signature  dictionary but excluding the signature value itself (the  Contents  entry). Other ranges may be used but  since they do not check for all changes to the do cument, their use is not  recommended. When a byte  range digest is present, all values in the signature dictionary shall be direct objects.",""],"475":["' Adobe Systems Incorporated 2008  All rights reserved 467PDF 32000-1:2008  Additionally, modification dete ction may be specified by a  signature reference dictionary . The TransformMethod  entry shall specify the general method  for modification detection, and the  TransformParams  entry shall specify the variable portions of the method. A PDF document may contain the following standard types of signatures:   One or more approval signatures. T hese signatures appear in  signature form fields (see  12.7.4.5,  Signature Fields ). The signature dictionary corresponding to  each signature shall be the value of the form  field (as specified by its  V entry). The signature dictionary shall contain a  ByteRange entry representing a  byte range digest, as described previously. A signature shall be validated by recomputing the digest and  comparing it with the one stored in the signature.  NOTE 1 If a signed document is modified and saved by incremental update (see  7.5.6, Incremental Updates ), the data  corresponding to the byte range of the original signature is  preserved. Therefore, if th e signature is valid, it is  possible to recreate the state of the documen t as it existed at the time of signing.  At most one certification signature ( PDF 1.5). The signature dictionary of a  certification signature shall be  the value of a signature field and shall contain a  ByteRange entry. It may also be referenced from the  DocMDP  entry in the permissions dictionary (see  12.8.4, Permissions ). The signature dictionary shall  contain a signature reference dictionary (see  Ta b l e  253 ) that has a  DocMDP  transform method. See 12.8.2.2, DocMDP  for information on how these signatures shall be created and validated. A signature dictionary for a certification or appr oval signature may also have a signature reference  dictionary with a  FieldMDP  transform method; see  12.8.2.4, FieldMDP.  At most two  usage rights  signatures ( PDF 1.5). Its signature dictionary shall be referenced from the  UR3 (PDF 1.6) entry in the permissions dictionary, whose entries are listed in  Ta b l e  258 , (not from a signature  field). The signature dictionary shall contain a  Reference entry whose value is a signature reference  dictionary that has a  UR transform method. See  12.8.2.3, UR  for information on how these signatures  shall be created and validated. Table  252    Entries in a signature dictionary   Key  Type  Value Type name(Optional)  The type of PDF object that  this dictionary describes; if  present, shall be  Sig  for a signature dictionary.  Filter name(Required; inheritable)  The name of the preferred signature handler to  use when validating this  signature. If the  Prop_Build entry is not  present, it shall be also the name  of the signature handler that was  used to create t he signature. If  Prop_Build is present, it may be used  to determine the name of the handler  that created the signature (which  is typically the same as  Filter  but is not needed to be). A conforming  reader may substitute a different h andler when verifying the signature,  as long as it supports the specified  SubFilter format. Example  signature handlers are  Adobe.PPKLite , Entrust.PPKEF , CICI.SignIt, and  VeriSign.PPKVS . The name of the filter (i.e. signature handler)  shall be identified in accordance with the rules defined in  Annex E.SubFiltername(Optional)   A name that describes the en coding of the signature value  and key information in the signature dictionary. A conforming reader  may use any handler that supports this format to validate the  signature.  (PDF 1.6) The following values for public-key cryptographic signatures  shall be used:  adbe.x509.rsa_sha1 , adbe.pkcs7.detached , and  adbe.pkcs7.sha1  (see 12.8.3, Signature Interoperability ). Other values may be defined by developers, and when used, shall be  prefixed with the registered developer  identification. All prefix names  shall be registered (see  Annex E ). The prefix adbe has been  registered by Adobe Systems and th e three subfilter names listed  above and defined in  12.8.3, Signature Interoperability  may be used  by any developer.",""],"476":["PDF 32000-1:2008 468 ' Adobe Systems Incorporated 2008  All rights reserved Contents byte string (Required)  The signature value. When  ByteRange  is present, the  value shall be a hexadecimal string (see  7.3.4.3, Hexadecimal  Strings ) representing the value of the byte range digest. For public-key signatures,  Contents  should be either a DER-encoded  PKCS#1 binary data object or a DER-encoded PKCS#7 binary data  object. Space for the Contents value must be allocated before the message  digest is computed. (See  7.3.4, String Objects )Cert array orbyte string (Required when  SubFilter is adbe.x509.rsa_sha1 ) An array of byte strings that shall represent the X.509 certificate chain used when  signing and verifying signatures that  use public-key cryptography, or a  byte string if the chain has only one  entry. The signing certificate shall  appear first in the array; it shall be  used to verify the signature value in  Contents , and the other certificates shall be used to verify the  authenticity of the  signing certificate. If  SubFilter is adbe.pkcs7.detached  or adbe.pkcs7.sha1 , this entry  shall not be used, and the certificate  chain shall be put in the PKCS#7  envelope in  Contents . ByteRange array(Required for all signatures that are pa rt of a signature field and usage  rights signatures referenced from the  UR3  entry in the permissions  dictionary)  An array of pairs of integers  (starting byte offset, length in  bytes) that shall describe the  exact byte range for the digest  calculation. Multiple discontiguous byte ranges shall be used to  describe a digest that does not  include the signature value (the Contents  entry) itself.  Reference array(Optional; PDF 1.5)  An array of signature reference dictionaries (see  Table  253). Changesarray(Optional)  An array of three integers that shall specify changes to the  document that have been made betwe en the previous signature and  this signature: in this order, the nu mber of pages altered, the number  of fields altered, and the number of fields filled in.  The ordering of signatures shall  be determined by the value of  ByteRange . Since each signature results in an incremental save, later  signatures have a greater length value.  Name text string (Optional)  The name of the person or  authority signing the document.  This value should be used only when it is not possible to extract the  name from the signature. EXAMPLE 1 From the certif icate of the signer.  Mdate(Optional)  The time of signing. Depending on the signature handler,  this may be a normal unverified computer time or a time generated in a  verifiable way from a secure time server.  This value should be used only w hen the time of signing is not  available in the signature. EXAMPLE 2 A time stamp can be embedded in a PKCS#7 binary  data object (see  12.8.3.3, PKCS#7 Signatures as  used in ISO 32000 ).Location text string (Optional)  The CPU host name or physical location of the signing.  Reason text string (Optional)  The reason for the signing, such as (  I agree   ).ContactInfo text string (Optional)  Information provided by the signer to enable a recipient to  contact the signer to verify the signature. EXAMPLE 3 A phone number. Table 252   Entries in a signature dictionary  (continued) Key Type Value",""],"477":["' Adobe Systems Incorporated 2008  All rights reserved 469PDF 32000-1:2008 NOTE 2 The entries in the signature dictio nary can be conceptualized as being in di fferent dictionaries; they are in one  dictionary for historical and cryptographic re asons. The categories are  signature properties ( R, M, Name, Reason , Location , Prop_Build , Prop_AuthTime , and  Prop_AuthType ); key information (Cert and portions  of  Contents  when the signature value is a PKCS# 7 object); reference (Reference and  ByteRange ); and  signature value ( Contents  when the signature value is a PKCS#1 object). Rinteger (Optional)   The version of the signature  handler that was used to create  the signature.  (PDF 1.5)  This entry shall not be used, and the  information shall be stored in the Prop_Build dictionary. Vinteger (Optional; PDF 1.5)  The version of the signature dictionary format. It  corresponds to the usage of the signature dictionary in the context of  the value of  SubFilter. The value is 1 if the  Reference  dictionary shall  be considered critical to t he validation of the signature. Default value: 0. Prop_Build dictionary (Optional; PDF 1.5)  A dictionary that may be used by a signature  handler to record information that  captures the state  of the computer  environment used for signing, such as  the name of the handler used to  create the signature, software bui ld date, version, and operating  system. he PDF Signature Build Dictionary  Specification, provides  implementation guidelines for the use of this dictionary. Prop_AuthTime integer (Optional; PDF 1.5)  The number of seconds since the signer was last  authenticated, used in cl aims of signature repudiation. It should be  omitted if the value is unknown. Prop_AuthType name(Optional; PDF 1.5)  The method that shall be used to authenticate the  signer, used in claims of signature repudiation. Valid values shall be  PIN, Password, and Fingerprint.  Table  253   Entries in a signature reference dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary  describes; if present, shall be  SigRef for a signature  reference dictionary. TransformMethod name (Required)  The name of the transform method (see  Section 12.8.2, Trans form Methods) that shall guide the  modification analysis that takes place when the signature is  validated. Valid values shall be: DocMDP Used to detect modifications to a document  relative to a signature field that is signed by the  originator of a document; see  12.8.2.2,  DocMDP. UR Used to detect modifications to a document  that would invalidate a signature in a rights- enabled document; see  12.8.2.3, UR. FieldMDP Used to detect modifications to a list of form  fields specified in  TransformParams ; see 12.8.2.4, FieldMDP. TransformParams dictionary (Optional)  A dictionary specifyi ng transform parameters  (variable data) for the trans form method specified by  TransformMethod . Each method take s its own set of  parameters. See each of the sub-clauses specified previously  for details on the individual transform parameter dictionaries Table 252   Entries in a signature dictionary  (continued) Key Type Value",""],"478":["PDF 32000-1:2008 470 ' Adobe Systems Incorporated 2008  All rights reserved 12.8.2 Transform Methods 12.8.2.1 General Transform methods, along with transform parameters, sh all determine which objects are included and excluded  in revision comparison. The following sub-clauses discuss the types of transform methods, their transform  parameters, and when they shall be used.  12.8.2.2 DocMDP 12.8.2.2.1 General The  DocMDP transform method shall be used to detect modifica tions relative to a signat ure field that is signed  by the author of a document (the person applying the first signature). A document can contain only one  signature field that contains a  DocMDP  transform method; it shall be the first signed field in the document. It  enables the author to specify what changes shall be  permitted to be made the document and what changes  invalidate the authors signature. NOTE As discussed earlier, MDP stands for  modification detection and prevention . Certification si gnatures that use  the DocMDP transform method enable  detection of disallowed changes specified by the author. In addition,  disallowed changes can also be  prevented  when the signature dictiona ry is referred to by the  DocMDP  entry in  the permissions dictionary (see  12.8.4, Permissions ). A certification signature should have a legal attestation dictionary (see  12.8.5, Legal Content Attestations ) that specifies all content that might result in unexpe cted rendering of the docum ent contents, along with the  authors attestation to such content. This dictionary may be  used to establish an authors intent if the integrity of  the document is questioned. The  P  entry in the  DocMDP transform parameters dictionary (see  Table  254) shall indicate the authors  specification of which changes to the document will inva lidate the signature. (These changes to the document shall also be prevented if the signat ure dictionary is referred from the  DocMDP  entry in the permissions  dictionary.) A value of 1 for  P indicates that the document shall be final; that is, any changes shall invalidate the  signature. The values 2 and 3 shall permit modificati ons that are appropriate for form field or comment  workflows. 12.8.2.2.2 Validating Signatures That Use the DocMDP Transform Method To validate a signature that uses the DocMDP transform me thod, a conforming reader fi rst shall verify the byte  range digest. Next, it shall verify that any modification s that have been made to the document are permitted by  the transform parameters. Once the byte range digest is validated, t he portion of the document specified by the  ByteRange entry in the  signature dictionary (see  Table  252 ) is known to correspond to the state of  the document at the time of signing. Data (various) (Required when  TransformMethod  is FieldMDP ) An indirect  reference to the object in the document upon which the object  modification analysis should be performed. For transform  methods other than  FieldMDP , this object is implicitly  defined.  DigestMethodname (Optional; PDF 1.5 required)  A name identifying the algorithm  that shall be used when computing the digest. Valid values  are  MD5 and  SHA1. Default value:  MD5. For security  reasons, MD5 should not be used. It is mentioned for  backwards compatibility, since  it remains the default value. Table 253   Entries in a signature reference dictionary  (continued) KeyType Value",""],"479":["' Adobe Systems Incorporated 2008  All rights reserved 471PDF 32000-1:2008 Therefore, conforming readers may compare the signed an d current versions of the document to see whether  there have been modifications to any objects that  are not permitted by the transform parameters.  12.8.2.3 UR The  UR tr ansform method shall be used to detect c hanges to a document that shall invalidate a  usage rights signature, which is referred to from the  UR3  entry in the permissions dictionary (see  12.8.4, Permissions ). Usage rights signatures shall be used to enable additional  interactive features that may not available by default  in a conforming reader. The signature shall be used to validate that the permissions have been granted by a  bonafide granting authority. The trans form parameters dictionary (see  Ta b l e  255) specifies the additional rights  that shall be enabled if the signature is valid. If  the signature is invalid because the document has been  modified in a way that is not permitted or the identi ty of the signer is not gr anted the extended permissions,  additional rights shall not be granted. EXAMPLE Adobe Systems grants permissions  to enable add itional features in Adobe Reader,  using public-key  cryptography. It uses certificate author ities to issue public key certificat es to document creators with which  it has entered into a business relationship. Adobe R eader verifies that the ri ghts-enabling signature uses  a certificate from an Adobe-au thorized certificate author ity. Other conforming reade rs are free to use this  same mechanism for their own purposes. UR3 (PDF 1.6): The  ByteRange entry in the signature dictionary (see  Ta b l e  252 ) shall be present. First, a  conforming reader shall verify the byte range digest to  determine whether the portio n of the document specified  by ByteRange corresponds to the state of the document at the time of signing. Next, a conforming reader shall  examine the current version of the document to see whet her there have been modifications to any objects that  are not permitted by the transform parameters. Table  254    Entries in the DocMDP tran sform parameters dictionary   Key Type Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  TransformParams  for a transform parameters dictionary.  Pnumber(Optional)  The access permissions granted for this document. Valid values  shall be: 1 No changes to the document shall  be permitted; any change to the  document shall invalidate the signature.  2 Permitted changes shall be filling in forms, instantiating page  templates, and signing; other changes shall invalidate the signature.  3  Permitted changes shall be the same  as for 2, as well as annotation  creation, deletion, and modification; other changes shall invalidate the  signature. Default value: 2.  Vname(Optional)  The DocMDP transform parameters dictionary version. The only  valid value shall be  1.2 . NOTE this value is a name object, not a number.  Default value:  1.2.",""],"480":["PDF 32000-1:2008 472 ' Adobe Systems Incorporated 2008  All rights reserved Table  255    Entries in the UR transform parameters dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if present,  shall be  TransformParams  for a transform parameters dictionary.  Document array (Optional)  An array of names specifying  additional document-wide usage  rights for the document. The only defined value shall be FullSave, which  permits a user to save the document along with modified form and/or  annotation data.  (PDF 1.5)  Any usage right that permits the document to be  modified implicitly shall enable the  FullSave  right.  If the PDF document contains a  UR3 dictionary, only rights specified by the  Annots  entry that permit the document to be modified shall implicitly enable  the FullSave  right. For all other rights,  FullSave  shall be explicitly enabled in  order to save the document. (Signature righ ts shall permit saving as part of the  signing process but not otherwise).  If the  P entry in the UR transform parameters dictionary is  true (PDF 1.6)  and  greater conforming readers shall permit  only those rights that are enabled by  the entries in the dictionary. However, conforming readers shall permit saving  the document as long as any rights that  permit modifying the document are  enabled. Msg text string(Optional)  A text string that may be used to  specify any arbitrary information,  such as the reason for adding usage rights to the document. Vname (Optional)  The UR transform parameters dictionary  version. The value shall be 2.2. If an unknown version is present, no rights shall be enabled.  NOTE This value is a name object, not a number.  Default value:  2.2. Annots array (Optional)  An array of names specifying additional annotation-related usage  rights for the document. Valid names  (PDF 1.5)  are Create, Delete, Modify,  Copy, Import, and Export, which shall permit the user to perform the named  operation on annotations. The following names  (PDF 1.6) shall be permitted only when the signature  dictionary is referenced from the  UR3  entry of the permissions dictionary (see  Ta b l e  258):Online Permits online commenting; that is, the ability to upload or  download markup annotations from a server. SummaryView Permits a user interfac e to be shown that summarizes the  comments (markup annotations) in a document.",""],"481":["' Adobe Systems Incorporated 2008  All rights reserved 473PDF 32000-1:2008 12.8.2.4 FieldMDP The  Fi eldMDP  transform method shall be used to detect chang es to the values of a list of form fields. The  entries in its transform parameters dictionary are listed in  Ta b l e  256. Form array (Optional)   An array of names specifying  additional form-field-related usage rights for the document. Valid names  (PDF 1.5) are:AddPermits the user to add form fields to the document. Delete Permits the user to delete form fields to the document. FillInPermits the user to save  a document on which form fill-in  has been done. Import Permits the user to import form data files in FDF, XFDF and  text (CSV/TSV) formats. ExportPermits the user to export form data files as FDF or XFDF. SubmitStandalone  Permits the user to su bmit form data when the document is  not open in a Web browser. SpawnTemplate  Permits new pages to be instantiated from named page  templates. The following names  (PDF 1.6) shall be permitted only when the signature  dictionary is referenced from the  UR3 entry of the permissions dictionary; see  Ta b l e  258:BarcodePlaintext Permits  (PDF 1.6)  text form field data to be encoded as a  plaintext two-dimensional barcode.  Online Permits  (PDF 1.6)  the use of forms-specific online  mechanisms such as SOAP or Active Data Object. Signature array (Optional)  An array of names specifying additional signature-related usage  rights for the document. The only defined value shall be Modify, which permits  a user to apply a digital signature to an existing signature form field or clear a  signed signature form field.  EFarray (Optional; PDF 1.6)  An array of names specifying additional usage rights for  named embedded files in the document. Valid names shall be Create, Delete,  Modify, and Import, which shall permit the user to perform the named operation  on named embedded files. Pboolean (Optional; PDF 1.6)  If true, permissions for the document shall be restricted in  all consumer applications to those permissions granted by a conforming  reader, while allowing permissions for rights enabled by other entries in this  dictionary. Default value:  false. Table  256    Entries in the FieldMDP transform parameters dictionary   Key Type Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  TransformParams  for a transform parameters dictionary. Action name(Required)  A name that, along with the  Fields  array, describes which form  fields do not permit changes after the signature is applied. Valid values shall be: All All form fields. Include Only those form fields that specified in  Fields .Exclude  Only those form fields not specified in  Fields .Fields array(Required if  Action is Include or Exclude)  An array of text strings containing  field names. Table 255   Entries in the UR transform parameters dictionary  (continued) Key Type Value",""],"482":["PDF 32000-1:2008 474 ' Adobe Systems Incorporated 2008  All rights reserved On behalf of a document author creating a document co ntaining both form fields  and signatures the following  shall be supported by conforming writers:   The author specifies that form fi elds shall be filled in without inva lidating the approval or certification  signature. The  P entry of the  DocMDP  transform parameters dictionary shall be set to either 2 or 3 (see  Ta b l e  254). The author can also specify that  after a specific recipient has signed  the document, any modifications to  specific form fields shall invalidate that recipients si gnature. There shall be a separate signature field for  each designated recipient, each having an asso ciated signature field lock dictionary (see  Ta b l e  233 ) specifying the form fields that shall be locked for that user.  When the recipient signs the field, the signature,  signature reference, and transform parameters  dictionaries shall be created. The  Action and  Fields entries in the transform parameters dictionary shall  be copied from the corresponding fields  in the signature field lock dictionary. NOTE This copying is done because all objects in a signatu re dictionary must be direct objects if the dictionary  contains a byte range signature.  Therefore, the transform parameters dictionary cannot reference the  signature field lock dictionary indirectly.  FieldMDP signatures shall be validated in a similar manner to  DocMDP  signatures. See  Validating Signatures  That Use the DocMDP Transform Method  in 12.8.2.2, DocMDP  for details. 12.8.3 Signature Interoperability 12.8.3.1 General It is intended that conforming rea ders allow interoperability  between signature handlers; that is, a PDF file  signed with a handler from one vendor shall be able to be validated with a handler from a different vendor. If present, the  SubFilter entry in the signature dictionary shall s pecify the encoding of the signature value and  key information, while the  Filter  entry shall specify the preferred handler that should be used to validate the  signature. When handlers are being registered according to  Annex E  they shall specify the SubFilter encodings  they support enabling handlers other than the preferr ed handler to validate the si gnatures that the preferred  handler creates. There are several defined values for the  SubFilter  entry, all based on public-key cryptographic standards  published by RSA Security and also as part of the st andards issued by the Internet Engineering Task Force  (IETF) Public Key Infrastructure (PKIX) working group; see the  Bibliography  for references. 12.8.3.2 PKCS#1 Signatures The PKCS#1 standard supports several public-key cryp tographic algorithms and digest methods, including  RSA encryption, DSA signatures, an d SHA-1 and MD5 digests (see the  Bibliography  for references). For  signing PDF files using PKCS#1, the only value of SubFilt er that should be used is adbe.x509.rsa_sha1, which  uses the RSA encryption algorithm and SHA-1 digest met hod. The certificate chain of  the signer shall be stored  in the Cert entry. Vname(Optional :  PDF 1.5 required) The transform pa rameters dictionary version. The  value for PDF 1.5 and later shall be  1.2. NOTE This value is a name object, not a number. Default value:  1.2. Table 256   Entries in the FieldMDP tran sform parameters dict ionary  (continued) Key Type Value",""],"483":["' Adobe Systems Incorporated 2008  All rights reserved 475PDF 32000-1:2008 12.8.3.3 PKCS#7 Signatures  as used in ISO 32000 12.8.3.3.1 General When PKCS#7 signatures are used, the value of  Contents  shall be a DER-encoded PKCS#7 binary data  object containing the signature. The PKCS#7 object  shall conform to RFC3852 Cryptographic Message  Syntax. Different subfilters may be used an d shall be registered in accordance with  Annex E. SubF ilter  shall  take one of the following values: ad be.pkcs7.detached : The original signed message digest ov er the documents byte range shall be  incorporated as the normal PKCS#7 SignedData fiel d. No data shall be encapsulated in the PKCS#7  SignedData field. ad be.pkcs7.sha1 : The SHA1 digest of the documents byte r ange shall be encapsulated in the PKCS#7  SignedData field with Conten tInfo of type Data. The digest of that  SignedData shall be incorporated as the  normal PKCS#7 digest. The PKCS#7 object shall conform to the PKCS #7 specification in Internet RFC 2315,  PKCS #7: Cryptographic  Message Syntax, Version 1.5  (see the  Bibliography ). At minimum, it shall include the signers X.509 signing  certificate. This certificate shall be  used to verify the signature value in  Contents . The PKCS#7 object should contain the following:   Time stamp information as an unsigned attribute  (PDF 1.6) : The timestamp token shall conform to RFC  3161 and shall be computed and embedded into the PKCS#7 object as described in Appendix A of RFC  3161. The specific treatment of timestamps and their pr ocessing is left to the pa rticular signature handlers  to define.  Revocation information as  an signed attribute  (PDF 1.6): This attribute may incl ude all the revocation  information that is necessary to ca rry out revocation che cks for the signer’s certificate and its issuer  certificates. Since revocation informat ion is a signed attribute, it must  be obtained before the computation  of the digital signature. This means that the software used by the signer must  be able to construct the  certification path and the associated revocation info rmation. If one of the elements cannot be obtained  (e.g. no connection is possible), a signature with this attribute will not be possible. (PD F 1.6) . This differs from the treatment when using  adbe.x509.rsa_sha1  when the certificates shall be  placed in the  Cert key of the signature di ctionary as defined in  Ta b l e  252 . One or more RFC 3281 attribute certificat es associated with the signer certificate  (PDF 1.7) . The specific  treatment of attribute certificates and their processing is  left to the particular signature handlers to define. NOTE For maximum compatibility with earlier versions,  conforming writers should follow this practice. The policy of how to establish trusted identity lists to  validate embedded certificates is up to the validation  signature handler.  12.8.3.3.2 Revocation Information The adbe Revocation Information attribute:  adbe-revocationInfoArchiva l OBJECT IDENTIFIER ::=  { adbe(1.2.840.113583) acrobat(1) security(1) 8 } The value of the revocation information attribute can include any of the following data types:   Certificate Revocation Lists (CRLs), described in RFC 3280 (see the  Bibliography ): CRLs are generally  large and therefore should not be embedded in the PKCS#7 object.",""],"484":["PDF 32000-1:2008 476 ' Adobe Systems Incorporated 2008  All rights reserved  Online Certificate Status Protocol (OC SP) Responses, described in RFC 2560,  X.509 Internet Public Key  Infrastructure Online Certificate Status ProtocolOCSP  (see the  Bibliography ): These are generally small  and constant in size and should be the data type included in the PKCS#7 object.   Custom revocation information: The fo rmat is not prescribed by this s pecification, other  than that it be  encoded as an OCTET STRING. The application should be  able to determine the type of data contained  within the OCTET STRING by looking at the associated OBJECT IDENTIFIER. adbe’s Revocation Information attribute va lue has ASN.1 type RevocationInfoArchival: RevocationInfoArchival ::= SEQUENCE { crl     [0] EXPLICIT SEQ UENCE of CRLs, OPTIONALocsp      [1] EXPLICIT SEQUE NCE of OCSP Responses, OPTIONAL otherRevInfo [2] EXPLICIT SEQUENCE of OtherRevInfo, OPTIONAL}OtherRevInfo ::= SEQUENCE { Type  OBJECT IDENTIFIER Value OCTET STRING }For byte range signatures,  Contents  shall be a hexadecimal string with <  and > delimiters. It shall fit  precisely in the space betwe en the ranges specified by  ByteRange. Since the length of PKCS#7 objects is not  entirely predictable, the value of  Contents  shall be padded with zeros at the end of the string (before the >  delimiter) before writing the PKCS#7 to  the allocated space in the file. The format for encoding signature values should be  adbe.pkcs7.detached . This encoding allows the most  options in terms of algorithm use. The following table shows the algorithms supported for the various  SubFilter values.  12.8.4 Permissions The  Perms entry in the document catalogue (see  Ta b l e  28) shall specify a  permissions dictionary (PDF 1.5) . Each entry in this dictionary (see  Ta b l e  258 for the currently defined entrie s) shall specify the name of a  permission handler that controls ac cess permissions for the document. These permissions are similar to those  Table  257    SubFilter  value algorithm support   SubFilter value adbe.pkcs7.detached adbe.pkcs7.sha1 adbe.x509.rsa.sha1 aMessage Digest SHA1  (PDF 1.3)SHA256  (PDF 1.6)SHA384  (PDF 1.7)SHA512  (PDF 1.7)RIPEMD160 (PDF 1.7)SHA1 (PDF 1.3)bSHA1 (PDF 1.3) SHA256 (PDF 1.6) SHA384 (PDF 1.7) SHA512 (PDF 1.7) RIPEMD160  (PDF 1.7)RSA Algorithm Support Up to 1024-bit  (PDF 1.3)Up to 2048-bit  (PDF 1.5)Up to 4096-bit  (PDF 1.5)See adbe.pkcs7.detached See adbe.pkcs7.detached DSA Algorithm Support Up to 4096-bits  (PDF 1.6)See adbe.pkcs7.detached NoaDespite the appearance of  sha1  in the name of this  SubFilter value, supported encodings shall not  be limited to the SHA1 algorithm. The PKCS#1 object contains an identifier that indicates which al -gorithm shall be used. bOther digest algorithms may be used to digest the  signed-data field; however, SHA1 shall be used  to digest the data that is being signed.",""],"485":["' Adobe Systems Incorporated 2008  All rights reserved 477PDF 32000-1:2008 defined by security handlers (see  Table  22) but do not require that the document be encrypted. For a  permission to be actually granted for a document, it shall be  allowed by each permission handler that is present  in the permissions dictionary as well as by the security handler. NOTE An example of a permission is  the ability to fill in a form field. 12.8.5 Legal Content Attestations The PDF language provides a number of capabilitie s that can make the rend ered appearance of a PDF  document vary. These capabilities could  potentially be used to construct a do cument that misleads the recipient  of a document, intentionally or unintentionally. These  situations are relevant when considering the legal  implications of a signed PDF document.  Therefore, a mechanism shall be provided by which a  document recipient can determine whether the document  can be trusted. The primary method is to accept only docu ments that contain certificat ion signatures (one that  has a  DocMDP signature that defines what shall be  permitted to change in a document; see  12.8.2.2,  DocMDP ). When creating certification signatures, c onforming writers should also create a  legal attestation dictionary , whose entries are shown in  Ta b l e  259 . This dictionary sha ll be the value of the  Legal  entry in the document  catalogue (see  Ta b l e  28). Its entries shall specify a ll content that may result in unexpected rendering of the  document contents. The author may provide further  clarification of such content by means of the  Attestation entry. Reviewers should establish for themselves that they  trust the author and contents of the document. In the  case of a legal challenge to the document, any questi onable content can be reviewed in the context of the  information in this dictionary. Table  258    Entries in a permissions dictionary   KeyType Value DocMDPdictionary (Optional)  An indirect reference to a signature dictionary (see  Ta b l e  252). This dictionary shall contain a  Reference  entry that shall be a signature  reference dictionary (see  Table  252) that has a DocMDP transform method  (see 12.8.2.2, DocMDP ) and corresponding transform parameters.  If this entry is present, consumer app lications shall enfor ce the permissions  specified by the  P attribute in the  DocMDP  transform parameters dictionary  and shall also validate the corresponding signature based on whether any of  these permissions have been violated. UR3dictionary (Optional)   A signature dictionary that shall be used to specify and validate  additional capabilities (usage rights) gr anted for this docu ment; that is, the  enabling of interactive f eatures of the conforming  reader that are not  available by default.  For example, A conforming reader does not permit saving documents by  default, but an agent may grant permi ssions that enable saving specific  documents. The signature shall be used to validate that the permissions  have been granted by the agent that did the signing.  The signature dictionary shall contain a  Reference  entry that shall be a  signature reference dictionary that has a  UR transform method (see  12.8.2.3, UR). The transform parameter dictio nary for this method indicates  which additional permissions shall be granted for the document. If the  signature is valid, the conforming reader shall allow the specified  permissions for the document, in addition to the applications default  permissions.",""],"486":["PDF 32000-1:2008 478 ' Adobe Systems Incorporated 2008  All rights reserved Table  259    Entries in a legal attestation dictionary   KeyType Value JavaScriptActions integer (Optional)  The number of JavaScript ac tions found in the document  (see 12.6.4.16, JavaScript Actions ).LaunchActions integer (Optional)  The number of launch actions found in the document (see  12.6.4.5, Launch Actions ).URIActions integer (Optional)  The number of URI actions found in the document (see  12.6.4.7, URI Actions ).MovieActions integer (Optional)  The number of movie actions found in the document (see  12.6.4.9, Movie Actions ).SoundActions integer (Optional)  The number of sound actions found in the document (see  12.6.4.8, Sound Actions ).HideAnnotationActions integer (Optional)  The number of hide actions found in the document (see  12.6.4.10, Hide Actions ).GoToRemoteActions integer (Optional)  The number of remote go-to actions found in the  document (see  12.6.4.3, Remote Go-To Actions ).AlternateImages integer (Optional)  The number of alternate im ages found in the document  (see 8.9.5.4, Alternate Images )ExternalStreams integer (Optional)  The number of external st reams found in the document.  TrueTypeFonts integer (Optional)  The number of TrueType fonts found in the document (see  9.6.3, TrueType Fonts ).ExternalRefXobjects  integer (Optional)  The number of reference XObjects found in the document  (see 8.10.4, Reference XObjects ). ExternalOPIdicts integer (Optional)  The number of OPI dictiona ries found in the document  (see 14.11.7, Open Prepress Interface (OPI) ). NonEmbeddedFonts integer (Optional)  The number of non-embedded fonts found in the  document (see  9.9, Embedded Font Programs )DevDepGS_OP integer (Optional)  The number of references to the graphics state parameter  OP found in the document (see  Ta b l e  58).DevDepGS_HT integer (Optional)  The number of references to the graphics state parameter  HT found in the document (see  Ta b l e  58).DevDepGS_TR integer (Optional)  The number of references to the graphics state parameter  TR found in the document (see  Ta b l e  58).DevDepGS_UCR integer (Optional)  The number of references to the graphics state parameter  UCR  found in the document (see  Ta b l e  58).DevDepGS_BG integer (Optional)  The number of references to the graphics state parameter  BG found in the document (see  Table  58).DevDepGS_FL integer (Optional)  The number of references to the graphics state parameter  FL found in the document (see  Table  58).Annotations integer (Optional)  The number of annotations  found in the document (see  12.5, Annotations ).OptionalContent boolean (Optional)  true if optional content is f ound in the document (see  8.11,  Optional Content ).Attestation text string (Optional)  An attestation, created by  the author of the document,  explaining the presence of any of th e other entries in this dictionary  or the presence of any other content affecting the legal integrity of the  document.",""],"487":["' Adobe Systems Incorporated 2008  All rights reserved 479PDF 32000-1:2008 12.9 Measurement Properties PDF documents, such as those created by CAD software , may contain graphics that are intended to represent  real-world objects. Users of such documents often  require information about the scale and units of  measurement of the corresponding real-world objects an d their relationship to units in PDF user space.  This information enables users of conforming readers to  perform measurements that yield results in the units  intended by the creator of the document. A measurement in th is context is the result of a canonical function that  takes as input a set of  n coordinate pairs and produces a single number as output depending on  the type of measurement. For example, distance  measurement is equivalent to  for Beginning with PDF 1.6, such information may be stored in a  measure dictionary  (see  Table  261 ). Measure  dictionaries provide information about measurement units  associated with a rectangular area of the document  known as a  viewport . A viewport  (PDF 1.6)  is a rectangular region of a page. The optional  VP entry in a page dictionary (see  Ta b l e  30) shall specify an array of viewport dictio naries, whose entries shall be as shown in  Ta b l e  260 . Viewports allow different measurement scales (specified by the  Measure  entry) to be used in different areas of  a page, if necessary. The dictionaries in the  VP array shall be in drawing order. Since  viewports might overlap, to determine the  viewport to use for any point on a page, the dictionaries  in the array shall be examined, starting with the last  one and iterating in reverse, and the first one whose  BBox entry contains the point shall be chosen. NOTE 1 Any measurement that potentially  involves multiple viewports, such as one specifying the distance between  two points, shall use the information specified in the viewport of the first point. Table  260    Entries in a viewport dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; shall be  Viewport  for a viewport dictionary. BBoxrectangle (Required)  A rectangle in default user space coordinates specifying the  location of the viewport on the page.  The two coordinate pairs of the rectangle shall be specified in normalized  form; that is, lower-left followed by upper-right, relative to the measuring  coordinate system. This ordering shal l determine the orientation of the  measuring coordinate system (that is, the direction of the positive  x and  yaxes) in this viewport, which may have a different rotation from the page. The coordinates of this rectangle are independent of the origin of the  measuring coordinate syst em, specified in the  O entry (see  Ta b l e  262 ) of the  measurement dictionary specified by  Measure.","x0y0} xn1yn1^‘","xixi1+2yiyi1+2+i0=n2ƒ","n2. t",""],"488":["PDF 32000-1:2008 480 ' Adobe Systems Incorporated 2008  All rights reserved A measure dictionary shall specify an alternate coordi nate system for a region of a page. Along with the  viewport dictionary, it shall provid e the information needed to convert coordinates in the pages coordinate  system to coordinates in the measuring coordinate sys tem. The measure dictionary shall provide information  for formatting the resultin g values into textual form for presentation in a graphical user interface.  Ta b l e  261 shows the entries in a measure dictionary. PDF 1.6  defines only a single type of coordinate system,  a rectilinear coordinate system, that shall be specified by the value  RL for the Subtype entry, which is defined  as one in which the  x and  y axes are perpendicular and have units that increment linearly (to the right and up,  respectively). Other subtypes may be used,  providing the flexibility to measure using othe r types of coordinate  systems. Ta b l e  262 shows the additional entries in a  rectilinear measure dictionary. Many of  the entries in this dictionary  shall be nu mber format arrays , which are arrays of  number format dictionaries  (see  Ta b l e  263 ). Each number  format dictionary shall represent a specific unit of me asurement (such as miles or feet). It shall contain  information about how each unit shall be expressed in  text and factors for calculating the number of units.  Number format arrays specify all t he units that shall be used when expr essing a specific measurement. Each  array shall contain one or more number format dictionari es, in descending order of granularity. If one unit of  measurement X is larger than one unit of measurement Y  then X has a larger order of granularity than Y. All the  elements in the array shall contain text strings that, concatenated together, specify how the units shall be  displayed.  NOTE 2 For example, a meas urement of 1.4505 miles might be expressed as 1.4505 mi, which would require one  number format dictionary for miles, or as 1 mi 2,378  ft 7 5/8 in, which would requ ire three dictionaries (for  miles, feet, and inches). EXAMPLE 1 A number format dictionary specifying feet should precede one specifying inches.  Name text string (Optional)  A descriptive text string or title of the viewport, intended for use in  a user interface. Measure dictionary (Optional)   A measure dictionary (see  Table  261) that specifies the scale and  units that shall apply to measurements taken on the contents within the  viewport. Table  261    Entries in a measure dictionary   KeyType Value Type name(Optional)   The type of PDF object that this  dictionary describes; shall be  Measure  for a measure dictionary. Subtypename(Optional)   A name specifying the type of  coordinate system to use for  measuring. Default value:  RL, which specifies a rectilinear coordinate system Table 260   Entries in a viewport dictionary  (continued) Key Type Value",""],"489":["' Adobe Systems Incorporated 2008  All rights reserved 481PDF 32000-1:2008 Table  262    Additional entries in a rectilinear measure dictionary   KeyType Value Rtext string(Required)  A text string expressing the  scale ratio  of the drawing in the  region corresponding to this dictionary. Universally recognized unit  abbreviations should be used, either  matching those of the number format  arrays in this dictionary or those of commonly used scale ratios.  EXAMPLE 1 a common scale in architectura l drawings is 1/4 in = 1 ft,  indicating that 1/4 inches in default user space is  equivalent to 1 foot in real-world measurements.  If the scale ratio differs in the  x and y directions, both scales should be  specified. EXAMPLE 2 in X 1 cm = 1 m, in Y 1 cm = 30 m. Xarray(Required)  A number format array for measurement of change along the  xaxis and, if  Y is not present, along the  y axis as well. The first element in the  array shall contain the scale factor for converting from default user space  units to the largest units in the measur ing coordinate system along that axis. The directions of the  x and y axes are in the measuring coordinate system  and are independent of the page rotation. These directions shall be determined by the  BBox  entry of the containing viewport (see  Table  260).Yarray(Required when the  x and y scales have different units or conversion factors)  A number format array for measurement of change along the  y axis. The first  element in the array shall contain the scale factor for converting from default  user space units to the largest units in the measuring coordinate system  along the  y axis. Darray(Required)  A number format array for measurement of distance in any  direction. The first element in the array shall specify the conversion to the  largest distance unit from units r epresented by the first element in  X. The  scale factors from  X, Y (if present) and  CYX  (if Y is present) shall be used to  convert from default user space to the appropriate units before applying the  distance function. Aarray(Required)  A number format array for measurement of area. The first  element in the array shall specify the c onversion to the largest area unit from  units represented by the first element in  X, squared. The scale factors from  X, Y (if present) and  CYX (if  Y is present) shall be used to convert from  default user space to the appropriate  units before applying the area function. Tarray(Optional)   A number format array for measurement of angles. The first  element in the array shall specify the conversion to the largest angle unit  from degrees. The scale factor from  CYX (if present) shall be used to convert  from default user space to the appropriate units before applying the angle  function.Sarray(Optional)   A number format array for measurement of the slope of a line. The  first element in the array shall specify  the conversion to the largest slope unit  from units represented by the first element in  Y divided by the first element in  X. The scale factors from  X, Y (if present) and  CYX (if Y is present) shall be used to convert from default user  space to the appropriate units before  applying the slope function. Oarray(Optional)   An array of two numbers that  shall specify the origin of the  measurement coordinate system in de fault user space coordinates. The  directions by which  x and  y increase in value from this origin shall be determined by the viewports  BBox  entry (see  Table  260 ).Default value: the first coordinate pair (lower-left corner) of the rectangle  specified by the viewports  BBox entry.",""],"490":["PDF 32000-1:2008 482 ' Adobe Systems Incorporated 2008  All rights reserved The  X and  Y entries in a measure dictionary shall be number format arrays that shall specify the units used for  measurements in the  x and  y directions, respectively, and the ratio between user space units and the specified  units.  Y is present only when the  x and  y measurements are in different units or have different ratios; in this  case, the  CYX entry shall be used to convert  y values to  x values when appropriate. CYXnumber (Optional; meaningful only when  Y is present)  A factor that shall be used to  convert the largest units along the  y axis to the largest units along the  x axis.  It shall be used for calculations (distance, area, and angle) where the units  are be equivalent; if not  specified, these calculations may not be performed  (which would be the case in situations such as  x representing time and  yrepresenting temperature). Ot her calculations (change in  x, change in  y, and  slope) shall not require this value. Table  263    Entries in a number format dictionary   KeyType Value Type name(Optional)   The type of PDF object that this  dictionary describes; shall be  NumberFormat  for a number format dictionary. Utext string (Required)  A text string specifying a label for displaying the units represented  by this dictionary in a user interfac e; the label should use a universally  recognized abbreviation.  Cnumber (Required)  The conversion factor used to multiply a value in partial units of  the previous number format array element to obtain a value in the units of  this dictionary. When this entry is in  the first number format dictionary in the  array, its meaning (that is, what it  shall be multiplied by) depends on which  entry in the rectilinear measure dictionary (see  Ta b l e  262 ) references the  number format array. Fname(Optional; meaningful only for the last dictionary in a number format array)  A name indicating whether and in what manner to display a fractional value  from the result of converting to the un its of this dictionary by means of the  Centry. Valid values shall be: DShow as decimal to the precision specified by the  D entry.  F Show as a fraction with denominator specified by the  D entry.  RNo fractional part; round to the nearest whole unit. TNo fractional part; truncate to achieve whole units. Default value:  D.Dinteger (Optional; meaningful only for the last dictionary in a number format array)  A positive integer that shall specify the pr ecision or denominator of a fractional  amount: When the value of  F is D, this entry shall be the precision of a decimal  display; it shall be a multiple of 10.  Low-order zeros may be truncated unless  FD is true. Default value: 100 (hundredths, corresponding to two decimal  digits). When the value of  F is F, this entry shall be the denominator of a fractional  display. The fraction may be reduced unless the value of  FD is true. Default  value: 16.  FDboolean (Optional; meaningful only for the last dictionary in a number format array)  If true, a fractional value formatted according to the  D entry may not have its  denominator reduced or low-order zeros truncated. Default value:  false.Table 262   Additional entries in a rect ilinear measure dictionary  (continued) Key Type Value",""],"491":["' Adobe Systems Incorporated 2008  All rights reserved 483PDF 32000-1:2008 To use a number format array to create a text string containing the appropriately formatted units for display in a  user interface, apply the following algorithm:  Algorithm: Use of a number format array to create a formatted text string a) The entry in the rectilinear measure dictionary (see  Ta b l e  262 ) that references the number format array  determines the meaning of the initial  measurement value. For example, the  X entry specifies user space  units, and the  T entry specifies degrees. b) Multiply the value spec ified previously by the  C entry of the first number format dictionary in the array,  which converts the measurement to units of the largest  granularity specified in the array. Apply the value of  RT as appropriate. c) If the result contains no nonzero fractional  portion, concatenate the  label specified by the  U entry in the  order specified by  O, after adding spacing from  PS and  SS. The formatting is then complete. d) If there is a nonzero fractional portion and no more el ements in the array, format the fractional portion as  specified by the  RD, F, D, and  FD entries of the last dictionary. Concatenate the label specified by the  Uentry in the order specified by  O, after adding spacing from  PS and  SS. The formatting is then complete. e) If there is a nonzero fractional portion and more el ements in the array, proceed to the next number format  dictionary in the array. Multiply its  C entry by the fractional result from  the previous step. Apply the value of  RT as appropriate. Then proceed to step 3. The concatenation of elements in this process assumes left-to-right order. Documents using right-to-left  languages may modify the process and the meaning of the entries as appropriate to produce the correct  results. RTtext string(Optional)   Text that shall be used between orders of thousands in display of  numerical values. An empty string indicates that no text shall be added. Default value: COMMA (2Ch). RDtext string(Optional)  Text that shall be used as the decimal position in displaying  numerical values. An empty string indi cates that the default shall be used. Default value: PERIOD (2Eh).  PStext string(Optional)   Text that shall be concatenated to the left of the label specified by  U. An empty string indicates that no text shall be added.  Default value: A single ASC II SPACE character (20h). SStext string(Optional)   Text that shall be concatenated after the label specified by  U. An empty string indicates t hat no text shall be added. Default value: A single ASC II SPACE character (20h). Oname(Optional)  A name indicating the position  of the label specified by  U with  respect to the calculated unit value. Valid values shall be: S Th e label is a suffix to the value. PT he label is a prefix to the value. The characters specified by  PS and SS shall be concatenated before  considering this entry. Default value:  S.Table 263   Entries in a number format dictionary  (continued) Key Type Value",""],"492":["PDF 32000-1:2008 484 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE 2 The following example shows a measure di ctionary that specifies that changes in x or  y are expressed in  miles; distances are expressed in miles, feet, and inch es; and area is expressed in acres. Given a sample  distance in scaled units of 1.4505 miles, the formatted text produced by applying the number format array  would be  1 mi 2,378 ft 7 5/8 in. <</Type /Measure /Subtype /RL/R (1in = 0.1 mi)  /X [ <</U (mi)  % x offset represented in miles /C .00139  % Conversion from user space units to miles /D 100000 ]/D [<< /U (mi) /C 1 >> % Distance: initial unit is miles; no conversion needed   << /U (ft) /C 5280 >> % Conversion from miles to feet   << /U (in) /C 12  % Conversion from feet to inches   /F /F /D 8 >> % Fractions of inches rounded to nearest 1/8 ]/A [<</U (acres)  % Area: measured in acres /C 640 >> % Conversion from square miles to acres ]>>12.10 Document Requirements  12.10.1 General Beginning with PDF 1.7, a document may  specify requirements that shall be present in a conforming reader in  order for the document to function properly. The  Requirements  entry in the document catalogue (see  7.7.2, Document Catalog ) shall specify an array of  requirement dictionaries , whose entries are shown in  Ta b l e  264. The  RH entry ensures backward-capability  for this feature. Some  PDF documents include JavaScript segments  that verify compliance with certain requirements. Such JavaScript segments are called  requirement handlers . Backward-compatibility shall be achieved  by ensuring that either the conforming reader  checks the requirement  or the JavaScript segment checks  the requirement, but not both.  When a PDF document is first opened, all JavaScript  segments in the document shall be executed, including  the requirement handlers. If the conforming reader u nderstands the requirement dictionary, it shall disable  execution of the requirement handlers named by the  RH entry. If the requirement handler is in JavaScript, the  conforming reader shall look up the segment using the  Names  dictionary ( 7.7.4, Name Dictionary ).In PDF 1.7, the only defined requirement type shall be  EnableJavaScripts . This requirement indicates that the  document requires JavaScript execution to be enabled in the conforming reader. If the  EnableJavaScripts requirement is present, an interactive conforming read er may allow the user to choose between keeping  JavaScript execution disabled or temporarily enabling it  to benefit from the full function of the document. Table  264    Entries common to all requirement dictionaries   KeyType Description Type name (Optional)  The type of PDF object that this dictionary  describes. If present, shall be  Requirement  for a  requirement dictionary. Sname (Required)  The type of requirement that this dictionary  describes. The value shall be  EnableJavaScripts .RH array(Optional)   An array of  requirement handler dictionaries  (see Ta b l e  265). This array lists the requirement handlers that  shall be disabled (not executed)  if the conforming reader can  check the requirement specified in the  S entry.",""],"493":["' Adobe Systems Incorporated 2008  All rights reserved 485PDF 32000-1:2008 If the  EnableJavaScripts  requirement is present in a requirement dictionary, the inclusion of the  RH entry that  specifies a JavaScript segment would be pointless. Writin g a JavaScript segment to ve rify that JavaScript is  enabled would not achieve the desired goal. The  RH entry shall not be used in PDF 1.7. 12.10.2 Requirement Handlers  A requirement handler is a program that ve rifies certain requirements are satisfied.  Ta b l e  265 describes the  entries in a requirement handler dictionary.  Table  265    Entries in a requirement handler dictionary   KeyType Description Type name (Optional)  The type of PDF object that this dictionary  describes. If present, shall be  ReqHandler  for a requirement  handler dictionary. Sname (Required)  The type of requirement handler that this  dictionary describes. Valid requirement handler types shall be JS (for a JavaScript requirement handlers) and  NoOp. A value of NoOp allows older conforming readers to ignore  unrecognized requirements. Th is value does not add any  specific entry to the requirement handler dictionary. Scripttext string (Op tional; valid only if the  S entry has a value of  JS) The  name of a document-level Java Script action stored in the  document name dictionary (see  7.7.4, Name Dictionary ). If the conforming reader understa nds the parent requirement  dictionary and can verify the requirement specified in that  dictionary, it shall disable  execution of the requirement  handler identified in this dictionary.",""],"494":["PDF 32000-1:2008 486 ' Adobe Systems Incorporated 2008  All rights reserved 13 Multimedia Features 13.1 General This clause describes those features  of PDF that support embedding and  playing multimedia content. It  contains the following sub-clauses: 13.2, Multimedia,  describes the comprehensive set of multim edia capabilities that  were introduced in  PDF 1.5. 13.3, Sounds,  and  13.4, Movies,  describe features that have be en supported since PDF 1.2.  13.5, Alternate Presentations,  describes a slideshow capability that was introduced in PDF 1.4. 13.6, 3D Artwork,  describes the capability of  embedding three-dimensional graphics in a document,  introduced in PDF 1.6.  13.2 Multimedia 13.2.1 General PDF 1.5 introduces a comp rehensive set of languag e constructs to enable the following capabilities:  Arbitrary media types may be embedded in PDF files.   Embedded media, as well as referenced media outside a  PDF file, may be played with a variety of player  software. (In some situations, the player software may be the conforming reader itself.) NOTE 1 The term playing is used with a wide variety of media,  and is not restricted to audio  or video. For example, it  may be applied to static images such as JPEGs.  Media objects ma y have multiple  renditions, which may be chosen at play-time based on considerations  such as available bandwidth.  Document authors may control play-time requirements, su ch as which player software should be used to  play a given media object.  Media objects may be played in various ways; for example, in a floating window as well as in a region on a  page.  Future extensions to the media constructs may  be handled in an appropriate manner by current  conforming readers. Authors may control how old  conforming readers treat future extensions.  Document authors may adapt the use of multimedia to  accessibility requirements.  On-line media objects may be played efficiently, even when very large. The following list summarizes the multimedia features and indicates where each feature is discussed: 13.2.2, Viability,  describes the rules for determining when media objects are suitable for playing on a  particular system.  Rendition actions (see  12.6.4.13, Rendition Actions ) shall be used to begin the playing of multimedia  content.   A rendition action associates  a screen annotation (see  12.5.6.18, Screen Annotations ) with a rendition  (see  13.2.3, Renditions ).",""],"495":["' Adobe Systems Incorporated 2008  All rights reserved 487PDF 32000-1:2008  Renditions are of two varieties: media renditions (see  13.2.3.2, Media Renditions ) that define the  characteristics of the media to be played, and selector renditions (see  13.2.3.3, Selector Renditions ) that  enables choosing which of a set of media renditions should be played.   Media renditions contain entries that  specify what should be played (see  13.2.4, Media Clip Objects ), how it should be played (see  13.2.5, Media Play Parameters ), and where it should be played (see  13.2.6,  Media Screen Parameters ).13.2.7, Other Multimedia Objects,  describes several PDF objects that are referenced by the preceding major objects. NOTE 2 Some of the features described  in the following sub-clauses have references to corresponding elements in the  Synchronized Multimedia Integratio n Language (SMIL 2.0)  standard (see the  Bibliography ).13.2.2 Viability When playing multimedia content, the conforming reader  shall often make decisions such as which player  software and which options, such as volume and duration, to use.  In making these decisions, th e viewer shall determine the  viability  of the objects used. If an object is considered  non-viable, the media should not be played. If the object  is viable, the media should be played, though possibly  under less than optimum conditions. There are several entries in  the multimedia object dictionari es whose values shall have  an effect on viability. In  particular, some of the object dictionaries define two en tries that divide options into one of two categories: MH ( must honour) : The options specified by this entry shall be honoured; otherwise, the containing object  shall be considered non-viable. BE ( best effort ): An attempt should be made to honour the options; however, if they cannot be honoured,  the containing object is  still considered viable. MH an d  BE are both dictionaries, and the same entries sha ll be defined for both of them. In any dictionary  where these entries are allowed, both entries may be present, or only one, or neither.  EXAMPLE The media play para meters dictionary (see Ta b l e  279) allows the playback volume to be set by means of  the V en try in its  MH and  BE dictionaries (see  Ta b l e  280 ). If the specified volume cannot be honoured,  the object shall be considered non-viable if  V is in the MHdictionary, and playback shall not occur. If  V is in the BE dictionary (and not also in the  MH dictionary), playback  should still occur: th e playing software attempts  to honour the specified op tion as best it can.  Using this mechanism, authors ma y specify minimum requirements ( MH) and preferred options ( BE). They  may also specify how entries that are added in the future to the multimedia dictionaries shall be interpreted by  old conforming readers. If an entry that is  unrecognized by the viewer is in the  MH dictionary, the object shall be considered non-viable. If an unrecognized entry is in a  BE dictionary, the entry sh all be ignored and viability  shall be unaffected. Unless otherwise stated, an object shall be considered non-viable if its  MH dictionary  contains an unrecognized key or an unrecognized value for a recognized key. The following rules apply to the entries in  MH and BE dictionaries, which behave somewhat differently from  other PDF dictionaries:  If an entry is required, the requirement is  met if the entry is present in either the  MH dictionary or the  BEdictionary.  If an optional entry is not present in either  dictionary, it shall be considered to be present with its default  value (if one is defined) in the  BE dictionary.",""],"496":["PDF 32000-1:2008 488 ' Adobe Systems Incorporated 2008  All rights reserved  If an instance of the same entry is present in both  MH and  BE, the instance in the  BE dictionary shall be ignored unless otherwise specified.   If the value of an entry in an  MH or a BE dictionary is a dictionary or array,  it shall be treated as an atomic  unit when determining viability. That is, all entries  within the dictionary or array shall be honoured for the  containing object to be viable. NOTE When determining whether entries can be honoured, it is not required that each one be evaluated  independently, since they may be dependent on one another . That is, a conforming reader or player may  examine multiple entries at once (even within different  dictionaries) to determine whether their values can be  honoured. The following media objects may have  MH and  BE dictionaries. They function as described previously, except  where noted in the individual sub-clauses:  Rendition ( Ta b l e  267 ) Media clip data ( Ta b l e  276 ) Media clip section ( Ta b l e  278 ) Media play parameters ( Ta b l e  280 ) Media screen parameters ( Ta b l e  283)13.2.3 Renditions 13.2.3.1 General There are two types of  rendition objects: A  med ia rendition  (see  13.2.3.2, Media Renditions ) is a basic media object that specifies what to play,  how to play it, and where to play it.  A  s elector rendition  (see  13.2.3.3, Selector Renditions ) contains an ordered list of renditions. This list  may include other selector renditions, resulting in  a tree whose leaves are media renditions. The  conforming reader should play the first viable  media rendition it encounters in the tree (see  13.2.2,  Viability ).NOTE 1Ta b l e  266  shows the entries common to all rendition dictionari es. The N entry in a rendition dictionary specifies  a name that can be used to access the rendition object by means of name tree lookup (see  Ta b l e  31). JavaScript actions (see  12.6.4.16, JavaScript Actions ), for example, use this mechanism.  Since the values referenced by name trees shall be indi rect objects, all rendition objects should be indirect  objects. NOTE 2 A rendition dictionary is not required to have a na me tree entry. When it does, the conforming reader should  ensure that the name specif ied in the tree is kept t he same as the value of the  N entry (for example, if the user  interface allows the name to be changed). A document should not contain multiple renditions with the same  name.  The  MH and  BE entries are dictionaries whose entries may be present in one or the other of them, as  described in  13.2.2, Viability.  For renditions, these dictionari es shall have a single entry  C (see  Table  267 ), whose value shall have a  media criteria dictionary  specifying a set of criteria that shall be met for the rendition  to be considered viable (see  Ta b l e  268 ).  The media criteria dictionary beha ves somewhat differently than other  MH/BE entries, as they are described in  13.2.2, Viability.  The criteria specified by all of its entries sh all be met regardless of whether they are in an  MHor a  BE d ictionary. The only exceptio n is that if an entry in a  BE dictionary is unrecognized  by the conforming",""],"497":["' Adobe Systems Incorporated 2008  All rights reserved 489PDF 32000-1:2008 reader, it shall not affect the viab ility of the object. If a media criter ia dictionary is present in both  MH and  BE, the entries in both dictionaries shall be individually evaluated, with  MH taking precedence (corresponding  BEentries shall be ignored).  Table  266    Entries common to all rendition dictionaries   KeyType Value Type name (Optional)  The type of PDF object that dict ionary describes; if present, shall  be  Rendition  for a rendition object. Sname (Required)  The type of rendition that this dictionary describes. May be  MRfor media rendition or  SR for selector rendition. The rendition shall be  considered non-viable if the conforming  reader does not recognize the value  of this entry. Ntext string (Optional)  A Unicode-encoded text string specifying the name of the  rendition for use in a user interface and for name tree lookup by JavaScript  actions. MHdictionary (Optional)   A dictionary whose entries (see  Ta b l e  267) shall be honoured for  the rendition to be considered viable.  BEdictionary (Optional)   A dictionary whose entries (see  Ta b l e  267) shall only be honoured  in a best effort sense.  Table  267    Entries in a rendition MH/BE dictionary   KeyType Value Cdictionary (Optional)  A media criteria dictionary (see  Table  268).  The media criteria dictionary behave s somewhat differently than other  MH/BE entries described in  13.2.2, Viability.  The criteria specified by all of its  entries shall be met regardless of whether it is in an  MH or a  BE dictionary.  The only exception is that if an  entry in a  BE dictionary is  unrecognized  by  the conforming reader, it shall not af fect the viability of the object.  Table  268    Entries in a media criteria dictionary   KeyType Value Type name (Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaCriteria for a media criteria dictionary. Aboolean  (Optional)  If specified, the value of th is entry shall match the users  preference for whether to hear audio descriptions in order for this object to  be viable.  NOTE 1 Equivalent to SMILs  systemAudioDesc attribute.  Cboolean (Optional)  If specified, the value of th is entry shall match the users  preference for whether to see text capt ions in order for this object to be  viable. NOTE 2 Equivalent to SMILs  systemCaptions  attribute. Oboolean (Optional)  If specified, the value of th is entry shall match the users  preference for whether to hear audio over dubs in order for this object to be  viable. Sboolean (Optional)  If specified, the value of th is entry shall match the users  preference for whether to see subtitles in order for this object to be viable.",""],"498":["PDF 32000-1:2008 490 ' Adobe Systems Incorporated 2008  All rights reserved Rinteger (Optional)   If specified, the syst ems bandwidth (in bits per second) shall be  greater than or equal to the value of this  entry in order for this object to be  viable. NOTE 3 Equivalent to SMILs  systemBitrate attribute. Ddictionary (Optional)   A dictionary (see  Ta b l e  269) specifying the minimum bit depth  required in order for this object to be viable.  NOTE 4 Equivalent to SMILs  systemScreenDepth attribute. Zdictionary  (Optional)  A dictionary (see  Table  270) specifying the minimum screen size  required in order for this object to be viable.  NOTE 5 Equivalent to SMILs  systemScreenSize  attribute. Varray(Optional)  An array of software identifier objects (see  13.2.7.4, Software  Identifier Dictionary ). If this entry is present  and non-empty, the conforming  reader shall be identified by one or more  of the objects in the array in order  for this object to be viable. Parray(Optional)  An array containing one or two name objects specifying a  minimum and optionally a maximum PDF language version, in the same  format as the  Version  entry in the document catalog (see  Table  28). If this  entry is present and non-empty, the ve rsion of multimedia constructs fully  supported by the conforming reader shall be within the specified range in  order for this object to be viable. Larray(Optional)  An array of language identifiers (see  14.9.2.2, Language  Identifiers ). If this entry is present and no n-empty, the language in which the  conforming reader is running shall exactly match a language identifier, or  consist only of a primary code that ma tches the primary code of an identifier,  in order for this object to be viable.  NOTE 6 Equivalent to SMILs  systemLanguage  attribute. Table  269    Entries in a minimum bit depth dictionary   KeyType Value Type name (Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MinBitDepth for a minimum bit depth dictionary. Vinteger (Required)  A positive integer (0 or greater) specifying the minimum screen  depth (in bits) of the monitor for the  rendition to be viable. A negative value  shall not be allowed. Minteger (Optional)  A monitor specifier (see Ta b l e  270 ) that specifies which monitor  the value of  V should be tested against. If the value is unrecognized, the  object shall not be viable.  Default value: 0.  Table 268   Entries in a media criteria dictionary  (continued) Key Type Value",""],"499":["' Adobe Systems Incorporated 2008  All rights reserved 491PDF 32000-1:2008 13.2.3.2 Media Renditions Ta b l e  271 lists the entries in a media rendition dictionary.  Its entries specify what media should be played ( C), how ( P), and where ( SP) it should be played. A media rendition object  shall be viable if and only if the objects  referenced by its  C, P, and  SP entries are viable. C ma y be omitted only in cases where a referenced pl ayer takes no meaningful input. This requires that  P shall  be present and that its referenced m edia play parameters dictionary (see  Table  279) shall contain a  PL entry,  whose referenced media players dictionary (see  13.2.7.2, Media Players Dictionary ) has a non-empty  MUarray or a non-empty  A array. 13.2.3.3 Selector Renditions A se lector rendition dictionary  shall specify an array of rendition objects in its  R entry (see  Ta b l e  272 ). The  renditions in this array should be ordered by preference,  with the most preferred renditio n first. At play-time, the  renditions in the array shall be evaluated and the first  viable media rendition, if any, shall be played. If one of  the renditions is itself a selector, that selector shall be ev aluated in turn, yielding the equivalent of a depth-first  tree search. A selector rendition itself may be non-viable;  in this case, none of its associated media renditions  shall be evaluated (in effect, this branch of the tree is skipped). NOTE This mechanism may be used, for example, to specify that a large video clip should be used on high- bandwidth machines and a smaller clip should be used on low-bandwidth machines. Table  270    Entries in a minimum  screen size dictionary   KeyType Value Type name (Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MinScreenSize for a rendition object. Varray(Required)  An array containing two non-negative integers. The width and  height (in pixels) of the monitor specif ied by M shall be greater than or equal  to the values of the first and second integers in the array, respectively, in  order for this object to be viable. Minteger (Optional)   A monitor specifier (see  Ta b l e  293 ) that specifies which monitor  the value of  V should be tested against. If  the value is unrecognized, the  object shall be not viable.  Default value: 0.  Table  271    Additional entries in  a media rendition dictionary   KeyType Value Cdictionary (Optional)  A media clip  dictionary (see  13.2.4, Media Clip Objects ) that  specifies what should be played when the media rendition object is played. Pdictionary (Required if  C is not present, otherwise optional)  A media play parameters dictionary (see  13.2.5, Media Play Parameters ) that specifies how the  media rendition object should be played.  Default value: a media play parameters dictionary whose entries (see  Table  279) all contain their default values.  SPdictionary (Optional)  A media screen parameters  dictionary (see  13.2.6, Media Screen  Parameters ) that specifies where the me dia rendition object should be  played.  Default value: a media screen parameters dictionary whose entries (see  Table  282) all contain their default values.",""],"500":["PDF 32000-1:2008 492 ' Adobe Systems Incorporated 2008  All rights reserved 13.2.4 Media Clip Objects 13.2.4.1 General There are two types of media clip  objects, determined by the subtype  S, which can be either  MCD for media  clip data (see  13.2.4.2, Media Clip Data ) or  MCS for media clip section (see  13.2.4.3, Media  Clip Section ). The entries common to all media clip dictionaries are listed in  Ta b l e  273 .13.2.4.2 Media Clip Data A me dia clip data dictionary  defines the data for a media object that can be played. Its entries are listed in  Ta b l e  274NOTE 1 It may reference a URL to a streaming vid eo presentation or a movie embedded in the PDF file. Table  272    Additional entries specific to a selector rendition dictionary   KeyType Value Rarray(Required)  An array of rendition objects. The first viable media rendition  object found in the array, or nested  within a selector rendition in the array,  should be used. An empty array is legal. Table  273    Entries common to all media clip dictionaries   KeyType Value Type name  (Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaClip for a media clip dictionary. Sname (Required)  The subtype of media clip that this dictionary describes. May be  MCD for media clip data (see  13.2.4.2, Media Clip Data ) or MCS for a media clip section (see  13.2.4.3, Media Clip Section ). The media clip shall  be considered non-viable if the conf orming reader does not recognize the  value of this entry.  Ntext string(Optional)   The name of the media clip, for use in the user interface. Table  274    Additional entries in a me dia clip data dictionary   KeyType Value Dfile  specification or stream(Required)  A full file specification or form  XObject that specifies the actual  media data.  CTASCII string (Optional; not allowed for form XObjects)  An ASCII string identifying the type  of data in  D. The string should conform to the content type specification  described in Internet RFC 2045,  Multipurpose Internet Mail Extensions  (MIME) Part One: Format of  Internet Message Bodies  (see the  Bibliography ).Pdictionary (Optional)  A media permissions dictionary  (see Table  275 ) containing  permissions that control the use of th e media data. Default value: a media  permissions dictionary containing default values. Altarray (Optional)  An array that provides alternate text descriptions for the media clip  data in case it cannot be played; see  14.9.2.4, Multi-language Text Arrays.",""],"501":["' Adobe Systems Incorporated 2008  All rights reserved 493PDF 32000-1:2008 The media clip data object shall be considered  non-viable if the object referenced by the  D entry does not  contain a  Type  entry, the  Type  entry is unrecognized, or the referenced object is not a dictionary or stream.  This shall effectively exclude the use  of simple file specifications (see  7.11, File Specifications ).If  D re ferences a file spec ification that has an emb edded file stream (see  7.11.4, Embedded File Streams ), the  embedded file streams  Subtype entry shall be ignored if present, and the media clip data dictionarys  CT entry  shall identify the type of data. If  D refe rences a form XObject, the associated player is  implicitly the conforming re ader, and the form XObject  shall be rendered as if it were any other data type.  NOTE 2 The  F and  D entries in the media play parameters dictionary (see  Ta b l e  279) should apply to a form XObject  just as they do to a QuickTime movie. For media other than form XObjects, the media clip  object shall provide enough information to allow a  conforming reader to locate an appropriate player. Th is may be done by providing one or both of the following  entries, the first being the preferred method: A  CT  entry that specifies the content type  of the media. If this entry is present, any player that is selected  shall support this content type. A  PL entry that specifies one or more players that  may be used to play the referenced media. if  CT is  present, there should also be a  PL present.  The  P en try specifies a  media permissions dictionary  (see  Ta b l e  275 ) specifying the manner in which the data  referenced by the media may be used by a conforming  reader. These permissions allow authors control over  how their data is exposed to operations that could allo w it to be copied. If the dictionary contains unrecognized  entries or entries with unrecognized values, it shall be considered non-viable, and the conforming reader shall not play the media. PLdictionary (Optional)  A media players dictionary  (see 13.2.7.2, Media Players  Dictionary ) that identifies, among other thi ngs, players that are legal and not  legal for playing the media. If the media players dictionary is non-viable, the media clip data shall be  non-viable. MHdictionary (Optional)   A dictionary whose entries (see  Ta b l e  276) shall be honoured for  the media clip data to be considered viable. BEdictionary (Optional)  A dictionary whose entries (see  Ta b l e  276 ) should only be  honoured in a best effort sense. Table 274   Additional entries in a media clip data dictionary  (continued) Key Type Value",""],"502":["PDF 32000-1:2008 494 ' Adobe Systems Incorporated 2008  All rights reserved The  BU entry in the media clip data  MH and  BE dictionaries (see  Ta b l e  276) specifies a base URL for the  media data. Relative URLs in the medi a (which point to auxiliary files or  are used for hyperlinking) should be  resolved with respect to the value of  BU. The following are additional requirements concerning the  BU entry: If  BU  is in the  MH dictionary and the base URL is not honoured the media clip data shall be non-viable.  NOTE 3 An example of this is that th e player does not accept base URLs.  Determining the viability of the object shall not  require checking whether the base URL is valid  NOTE 4 The target host exists.  Absolute URls within the media shall not be affected.  If the media itself contains a base URL, that value shall be used in preference to  BU.NOTE 5 An example of this is that th e <BASE> element is defined in HTML. BU is completely independent of and unrelated to the value of the  URI entry in the document catalogue  (see  7.7.2, Document Catalog ).If  BU  is not present and the media is embedded within the document, the URL to the PDF file itself shall be  used as if it were the value of a  BU entry in the  BE dictionary; that is, as an implicit best-effort base URL. 13.2.4.3 Media Clip Section A media clip section  dictionary (see  Ta b l e  277) defines a continuous section of another media clip object  (known as the  next-level  media clip object). The next-level  media clip object, specified by the  D entry, may be  either a media clip data object or another media clip  section object. However, the linked list formed by the  DTable  275    Entries in a media  permissions dictionary   KeyType Value Type name (Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaPermissions  for a media permi ssions dictionary. TFASCII string (Optional)  An ASCII string indicating the circumstances under which it is  acceptable to write a temporary file in order to play a media clip. Valid values  are:(TEMPNEVER) Never allowed.  (TEMPEXTRACT) Allowed only if the do cument permissions allow content extraction; when bit 5 of the user access permissions  (see  Table  22) is set.(TEMPACCESS) Allowed only if the do cument permissions allow content extraction, including for accessibility purposes; when bits  5 or 10 of the user access permissions (see  Table  22) are set, or both.(TEMPALWAYS) Always allowed. Default value: (TEMPNEVER).  An unrecognized value shall be treated as (TEMPNEVER).  Table  276    Entries in a media clip  data MH/BE dictionary   KeyType Value BUASCII string (Optional)  An absolute URL that shall be used as the base URL in resolving  any relative URLs found within the media data.",""],"503":["' Adobe Systems Incorporated 2008  All rights reserved 495PDF 32000-1:2008 entries of media clip sections shall terminate in a medi a clip data object. If the next-level media object is non- viable, the media clip section shall be also non-viable. NOTE 1 A media clip section could define a 15-minute segm ent of a media clip data object representing a two-hour  movie.The  B and  E entries in the media clip sections  MH and  BE dictionaries (see  Ta b l e  278 ) shall define a subsection of the next-level media object referenced by  D by specifying beginning and ending offsets into it.  Depending on the media type, the offsets may be specified by time, frames, or markers (see  13.2.6.2, Media  Offset Dictionary ). B an d  E are not required to specify the same type of offset. The following rules apply to these offsets:  For media types where an offset makes no sense (such as JPEG images),  B and E shall be ignored, with  no effect on viability.   When  B or E are specified by time or frames, their value sha ll be considered to be relative to the start of  the next-level media clip. However, if  E specifies an offset beyond the end of the next-level media clip, the  end value shall be used  instead, and there is no effect on viability.  When  B or E are specified by markers, there shall be a corr esponding absolute offset into the underlying  media clip data object. If this offset  is not within the range defined by the next-level media clip (if any), or if  the marker is not present in the underlying media clip, the existence of the entry shall be ignored, and there  is no effect on viability.  If the absolute offset derived from the values of all  B entries in a media clip section chain is greater than or  equal to the absolute offset derived from the values of all  E entries, an empty range shall be defined. An  empty range is legal. Any  B or E entry in a media clip sections  MH dictionary shall be honoured at play-time in order for the  media clip section to be considered viable.  NOTE 2 The entry may not be honored if its value was not viable  or if the player did not suppo rt its value; for example,  the player did not support markers. If a  B or  E entry is in a media clip sections  MH dictionary, all  B or  E entries, respectively, at deeper levels  (closer to the media clip data), shall be evaluated as if they were in an  MH dictionary (even if they are  actually within  BE dictionaries). If  B or E entry in a  BE dictionary cannot be supported, it may be ignored at play-time. Table  277   Additional entries in a  media clip section dictionary   KeyType Value Ddictionary (Required)  The media clip section or media cl ip data object (the next-level  media object) of which this media clip  section object defines a continuous  section.Altarray (Optional)  An array that provides alternate text descriptions for the media clip  section in case it cannot be played; see  14.9.2.4, Multi-language Text  Arrays.MHdictionary (Optional)   A dictionary whose entries (see  Ta b l e  278) shall be honoured for  the media clip section to be considered viable. BEdictionary (Optional)   A dictionary whose entries (see  Ta b l e  278) shall only be honoured  in a best effort sense.",""],"504":["PDF 32000-1:2008 496 ' Adobe Systems Incorporated 2008  All rights reserved 13.2.5 Media Play Parameters A media play parameters dictionary specifies how a medi a object should be played. It shall be referenced from  a media rendition (see  13.2.3.2, Media Renditions ).Table  278    Entries in a media clip  section MH/BE dictionary   KeyType Value Bdictionary (Optional)  A media offset dictionary  (see 13.2.6.2, Media Offset Dictionary ) that specifies the offset into the next-le vel media object at which the media  clip section begins. Default: the start of the next-level media object. Edictionary (Optional)  A media offset dictionary  (see 13.2.6.2, Media Offset Dictionary ) that specifies the offset into the next-le vel media object at which the media  clip section ends. Default: the end  of the next-level media object. Table  279    Entries in a media play  parameters dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaPlayParams  for a media play parameters dictionary. PLdictionary (Optional)  A media players dictionary (see  13.2.7.2, Media Players  Dictionary ) that identifies, among other thi ngs, players that are legal and not  legal for playing the media. If this object is non-viable, the media play parameters dictionary shall be  considered non-viable. MHdictionary (Optional)   A dictionary whose entries (see  Ta b l e  278) shall be honoured for  the media play parameters to be considered viable. BEdictionary (Optional)  A dictionary whose entries (see  Ta b l e  278) shall only be honoured  in a best effort sense. Table  280    Entries in a media play parameters MH/BE dictionary   KeyType Value Vinteger (Optional)  An integer that specifies the desired volume level as a percentage  of recorded volume level. A zero value shall be equivalent to mute; negative  values shall be illegal. Default value: 100. Cboolean (Optional)  A flag specifying whether to display a player-specific controller  user interface when playing.  EXAMPLE play/pause/stop controls. Default value: false",""],"505":["' Adobe Systems Incorporated 2008  All rights reserved 497PDF 32000-1:2008 The value of the  D entry is a  media duration dictionary , whose entries are shown in  Ta b l e  281. It specifies a  temporal duration. NOTE 1 The D entry dictionary temporal duration corresponds to the notion of a simple duration in SMIL.  The duration may be a specific amount of time,  it may be infinity, or it may be the medias  intrinsic duration. EXAMPLE The intrinsic du ration of a two-hour QuickT ime movie is two hours.  Finteger (Optional)  The manner in which the player shall treat a visual media type that  does not exactly fit the rectangle in which it plays. 0The medias width and height shall be scaled while preserving the aspect  ratio so that the media and play  rectangles have the greatest possible  intersection while still displaying all media content.  NOTE 1 Same as meet value of SMILs  fit attribute.  1 The medias width and height shall be scaled while preserving the aspect  ratio so that the play rectangle is entirely filled, and the amount of media  content that does not fi t within the play rectangle shall be minimized.  NOTE 2 Same as slice value of SMILs  fit attribute.2 The medias width and height shall be scaled independently so that the  media and play rectangles are the same; the aspect ratio shall not be  preserved.  NOTE 3 Same as fill value of SMILs  fit attribute. 3 The media shall not be scaled. A scrolling user interface shall be  provided if the media rectangle is wider  or taller than the play rectangle.  NOTE 4 Same as scroll value of SMILs  fit attribute. 4 The media shall not be scaled. Only  the portions of the media rectangle  that intersect the play re ctangle shall be displayed.  NOTE 5 Same as hidden value of SMILs  fit attribute.5 Use the players default setti ng (author has no preference). Default value: 5.An unrecognized value shall be treated as  the default value if the entry is in a  BE dictionary. If the entry is in an  MH dictionary and it has an unrecognized  value, the object shall be considered non-viable.  Ddictionary (Optional)  A media duration dictionary (see  Ta b l e  281). Default value: a  dictionary specifying the intrinsic duration (see  RC). Aboolean (Optional)  If true, the media shall automatically play when activated. If  false, the media shall be initia lly paused when activated.  EXAMPLE The first frame is displayed.  Relevant only for media that ma y be paused. Default value:  true.RCnumber (Optional)  Specifies the number of iterations of the duration  D to repeat.  NOTE 6 Similar to SMILs  repeatCount  attribute. Zero means repeat  forever. Negative values shall be illegal; non-integral values  shall be legal.  Default value: 1.0. Table 280   Entries in a media play para meters MH/BE dictionary  (continued) Key Type Value",""],"506":["PDF 32000-1:2008 498 ' Adobe Systems Incorporated 2008  All rights reserved The intrinsic duration may be modified when a media clip section (see  13.2.4.3, Media Clip Section) is used:  the intrinsic duration shall be the difference between  the absolute begin and end offsets. For a media type  having no notion of time (such as a JPEG image), the duration shall be considered to be infinity. If the simple duration is longer than the intrinsic duratio n, the player shall freeze the media in its final state until  the simple duration has elapsed. For visual media types, the last appearance (frame) shall be displayed. For  aural media types, the media is logically fr ozen but shall not continue to produce sound.  NOTE 2 In this case, the  RC entry, which specifies a repeat count, applie s to the simple duration;  therefore, the entire  play-pause sequence is repeated  RC times.13.2.6 Media Screen Parameters 13.2.6.1 General A media screen parameters dictionary (see  Table  282) shall specify where a media object should be played. It  shall contain  MH and BE dictionaries (see  Ta b l e  283 ), which shall functi on as discussed in  13.2.2, Viability.  All  media clips that are being played shall be associated with  a particular document and shall be stopped when the  document is closed. NOTE Conforming readers should disallow floating windows  and full-screen windows unless specifically allowed by  the user. The reason is that docume nt-based security attacks are possibl e if windows cont aining arbitrary media content can be displayed without indicating to t he user that the window is merely hosting a media  object. This recommendation may be relaxed if it is possi ble to communicate the nature of such windows to the  user; for example, with text in a floating windows title bar. Table  281    Entries in a media duration dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaDuration  for a media duration dictionary. Sname(Required)   The subtype of media duration dictionary. Valid values are: IThe  duration is the intrinsic duration of the associated media FT he duration is infinity TThe  duration shall be specified by the  T entryThe media duration dictionary shall be considered non-viable if the  conforming reader does not recognize the value of this entry. Tdictionary (Required if the value of  S is T; otherwise ignored)  A timespan dictionary  specifying an explicit duration (see  Ta b l e  289). A negative duration is illegal. Table  282   Entries in a media scre en parameters dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaScreenParams  for a media screen parameters dictionary. MHdictionary (Optional)   A dictionary whose entries (see  Ta b l e  283) shall be honoured for  the media screen parameters to be considered viable. BEdictionary (Optional)  A dictionary whose entries (see  Ta b l e  283) should be honoured.",""],"507":["' Adobe Systems Incorporated 2008  All rights reserved 499PDF 32000-1:2008 The  F entry in the media screen parameters  MH/BE dictionaries shall be a floating window parameters  dictionary, whose entries are listed in  Ta b l e  284. The entries in the floating window parameters dictionary shall  be treated as if they were present in the  MH or BE dictionaries that they are referenced from. That is, the  contained entries shall be individually  evaluated for viability rather than  the dictionary being evaluated as a whole. (There may be an  F entry in both  MH and  BE. In such a case, if a given en try is present in both floating  window parameters dictionaries, the one in the  MH dictionary shall take precedence.) The  D, P, and RT entries shall be used to specify the rectangle that the floating window occupies. Once  created, the floating windows size and position shall not be  tied to any other window, ev en if the initial size or  position was computed relative to other windows. Unrecognized values for the R, P, RT, and O entries shall be handled as follows: if they are nested within an  MH dictionary, the floating window parameters object (and  hence the media screen parameters object) shall be  Table  283    Entries in a media screen parameters MH/BE dictionary   KeyType Value Winteger (Optional)   The type of window that the media object shall play in: 0 A floating window 1 A full-screen window that obscures all other windows 2 A hidden window 3 The rectangle occupied by the screen annotation (see  12.5.6.18,  Screen Annotations ) associated with the media rendition  Default value: 3. Unrecognized value in  MH: object is non-viable; in  BE: treat  as default value. Barray(Optional)  An array of three numbers in the range 0.0 to 1.0 that shall specify  the components in the  DeviceRGB  colour space of the background colour  for the rectangle in which the media is being played. This colour shall be  used if the media object does not entirely cover the rectangle or if it has  transparent sections. It shall be ignored for hidden windows. Default value: implementation-defined.  The conforming reader should  choose a reasonable value based on the value of  W. EXAMPLE 1 A system default backgroun d colour for floating windows or a user-preferred background colour for full-screen  windows. If a media format has an intrinsic background colour,  B shall not override it.  However, the  B colour shall be visible if the media has transparent areas or  otherwise does not cover the entire window. Onumber (Optional)  A number in the range 0.0 to 1.0  specifying the constant opacity  value that shall be used in painting the background colour specified by  B. A value below 1.0 means the window shall be transparent.  EXAMPLE 2 Windows behind a floating window show through if the  media does not cover the entire floating window.  A value of 0.0 shall indicate full transparency and shall make  B irrelevant. It shall be ignored for full-screen and hidden windows. Default value: 1.0 (fully opaque). Minteger (Optional)  A monitor specifier (see  Ta b l e  293 ) that shall specify which  monitor in a multi-monitor system, a floating or full-screen window shall  appear on. Ignored for other types. Default value: 0 (document monitor). Unrecognized value in  MH: object is non-viable; in  BE: treat as default value. Fdictionary (Required if the value of  W is 0; otherwise ignored)  A floating window  parameters dictionary (see  Ta b l e  284) that shall specify the size, position,  and options used in displaying floating windows.",""],"508":["PDF 32000-1:2008 500 ' Adobe Systems Incorporated 2008  All rights reserved considered non-viable; if  they are nested within a  BE dictionary, they shall be cons idered to have their default  values.Table  284   Entries in a floating window parameters dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  FWParams  for a floating window  parameters dictionary. Darray(Required)  An array containing two non-negative integers that shall  represent the floating windows width and height, in pixels, respectively.  These values shall correspond to the di mensions of the rectangle in which  the media shall play, not including such items as title bar and resizing  handles. RTinteger (Optional)  The window relative to which the floating window shall be  positioned: 0 The document window 1 The application window 2 The full virtual desktop 3 The monitor specified by  M in the media screen parameters  MH or  BEdictionary (see 9.22) Default value: 0. Pinteger (Optional)   The location where the floating window (including such items as  title bar and resizing handles) shall be positioned relative to the window  specified by  RT:0 Upper-left corner 1 Upper center 2 Upper-right corner 3Center left 4Center 5Center right 6 Lower-left corner 7 Lower center 8 Lower-right corner Default value: 4. Ointeger (Optional)  Specifies what shall occur if the floating window is positioned  totally or partially offscreen (that is , not visible on any physical monitor): 0 Take no special action 1 Move and/or resize the window so that it is on-screen 2 Consider the object to be non-viable Default value: 1 Tboolean (Optional)  If true, the floating window shall have a title bar. Default value:  true.UCboolean (Optional; meaningful only if  T is true) If true, the floating window shall  include user interface elements that allow a user to close a floating window. Default value: trueRinteger (Optional)  Specifies whether the floating window may be resized by a user: 0 May not be resized 1 May be resized only if aspect ratio is preserved 2 May be resized without preserving aspect ratio Default value: 0.",""],"509":["' Adobe Systems Incorporated 2008  All rights reserved 501PDF 32000-1:2008 13.2.6.2 Media Offset Dictionary A me dia offset dictionary  (Ta b l e  285 ) shall specify an offset into a media object. The  S (subtype) entry indicates  how the offset shall be specified: in terms of time, fram es or markers. Different media types support different  types of offsets.  EXAMPLE Time, 10 seconds; frames, fra me 20; markers, Chapter One. TTarray(Optional; meaningful only if  T is true) An array providing text to display on  the floating windows title bar. See  14.9.2.4, Multi-language Text Arrays.  If  this entry is not present, the confo rming reader may provide default text. Table  285   Entries common to all media offset dictionaries   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaOffset for a media offset dictionary. Sname(Required)  The subtype of media offset di ctionary. Valid values shall be: T A media offset time dictionary (see  Ta b l e  286)F A media offset frame dictionary (see  Ta b l e  287)M A media offset marker dictionary (see  Ta b l e  288)The rendition shall be considered non-viable if the conforming reader does  not recognize the value of this entry. Table  286   Additional entries in a media offset time dictionary   KeyType Value Tdictionary (Required)  A timespan dictionary (see  Ta b l e  289 ) that shall specify a temporal offset into a media object. Nega tive timespans are not allowed in  this context. The media offset time di ctionary is non-viable if its timespan  dictionary is non-viable. Table  287    Additional entries in a media offset frame dictionary   KeyType Value Finteger (Required)  Shall specify a frame within  a media object. Frame numbers  begin at 0; negative fram e numbers are not allowed. Table  288    Additional entries in a media offset marker dictionary   KeyType Value Mtext string (Required)  A text string that identifies a  named offset within a media object. Table 284   Entries in a floating window parameters dictionary  (continued) Key Type Value",""],"510":["PDF 32000-1:2008 502 ' Adobe Systems Incorporated 2008  All rights reserved 13.2.6.3 Timespan Dictionary A tim espan dictionary  shall specify a length of time; its entries are shown in  Ta b l e  289 . 13.2.7 Other Multimedia Objects 13.2.7.1 General This sub-clause defines several dictionary types  that are referenced by the previous sub-clauses. 13.2.7.2 Media Players Dictionary A media players dictionary may be referenced by media clip data (see  13.2.4.2, Media Clip Data ) and media  play parameters (see  13.2.5, Media Play Parameters ) dictionaries, and shall a llow them to specify which  players may or may not be used to play the associat ed media. The media player s dictionary references  media  player info dictionaries  (see  13.2.7.3, Media Player Info Dictionary ) that shall provide specific information  about each player.  Table  289    Entries in a timespan dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  Timespan  for a timespan dictionary. Sname(Required)  The subtype of timespan dictionary. The value shall be  S (simple  timespan). The rendition shall be considered non-viable if the conforming  reader does not recognize the value of this entry.  Vnumber (Required)  The number of seconds in the  timespan. Non-integral values  shall be allowed. Negative values shall be allowed, but may be disallowed in  some contexts.  (PDF 1.5)   Negative values are not allowed. This entry shall be used only if the value of the  S entry is S. Subtypes defined in the future need not use this entry. Table  290    Entries in a media players dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaPlayers for a media players dictionary. MUarray(Optional)  An array of media player info dictionaries (see  Ta b l e  291) that shall specify a set of players, one of which shall be used in playing the  associated media object.  Any players specified in  NU are effectively removed from  MU. EXAMPLE If  MU specifies versions 1 through 5 of a player and  NUspecifies versions 1 and 2 of the same player,  MU is  effectively versions 3 through 5. Aarray(Optional)  An array of media player info dictionaries (see  Ta b l e  291) that shall specify a set of players, any of which  may be used in playing the  associated media object. If  MU is also present and non-empty,  A shall be  ignored. NUarray(Optional)  An array of media player info dictionaries (see  Ta b l e  291) that shall specify a set of players that shall  not be used in playing the associated  media object (even if they are also specified in  MU).",""],"511":["' Adobe Systems Incorporated 2008  All rights reserved 503PDF 32000-1:2008 The  MU, A, and  NU entries each shall specify one or more media player info dictionaries. An empty array shall  be treated as if it is not present. The media player in fo dictionaries shall be allo wed to specify overlapping  player ranges. NOTE 1MU could contain a media player info dictionary describi ng versions 1 to 10 of Player X and another describing  versions 3 through 5 of Player X. If a non-viable media player info dictionary is referenced by  MU, NU, or A, it shall be treated  as if it were not  present in its original array, and a media player info dict ionary containing the same software identifier dictionary  (see  13.2.7.4, Software Id entifier Dictionary ) shall logically considered present in  NU. The same rule shall  apply to a media player info dictiona ry that contains a partially unrecogn ized software identifier dictionary.  Since both media clip data and media play parameters di ctionaries may be employed  in a play operation, and  each may reference a media players dictionary, there is  a potential for conflict between the contents of the two  media players dictionaries. At play-time, the viewer shall use the followi ng algorithm to determine whether a  player present on the machine may be employed. The player  may not be used if any of the following conditions  are true: Algorithm: Media Player a) The content type is known and the player does not support the type. b) The player is found in the  NU array of either dictionary. c) Both dictionaries have non-empty  MU arrays and the player is not found in  both of them, or only one of the  dictionaries has a non-empty  MU array and the player is not found in it. d) Neither dictionary has a non-empty  MU array, the content type is not know n, and the player is not found in  the A array of either dictionary. If none of the conditions are true, the player may be used.  NOTE 2 A player is found in the  NU, MU, or A arrays if it matches the information found in the PID entry of one of the  entries, as described by the Algorithm in  13.2.7.4, Software Identifier Dictionary. 13.2.7.3 Media Player Info Dictionary A m edia player info dictionary  shall provide a variety of information rega rding a specific media player. Its entries  (see  Ta b l e  291 ) shall associate information with a particular version or range of versions of a player. As of PDF  1.5, only the  PID entry shall provide information about the player, as described in the next sub-clause,  13.2.7.4,  Software Identifier Dictionary. Table  291   Entries in a media player info dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  MediaPlayerInfo  for a media player info dictionary. PIDdictionary (Required)  A software identifier dictionary (see  13.2.7.4, Softw are Identifier  Dictionary ) that shall specify the player  name, versions, and operating  systems to which this media player info dictionary applies. MHdictionary (Optional)  A dictionary containing entries that shall be honored for this  dictionary to be considered viable Currently, there are no defined entries for this dictionary BEdictionary (Optional)  A dictionary containing entries that need only be honored in a  best effort sense. Currently, there are no defined entries for this dictionary",""],"512":["PDF 32000-1:2008 504 ' Adobe Systems Incorporated 2008  All rights reserved 13.2.7.4 Software Identifier Dictionary 13.2.7.4.1 General A sof tware identifier dictionary  shall allow software to be identified by  name, range of versions, and operating  systems; its entries are listed in  Ta b l e  292 . A conforming reader uses this information to determine whether a  given media player may be used in a  given situation. If the dictionary cont ains keys that are unrecognized by  the conforming reader, it shall be considered to be partially recognized. The conforming reader may or may not  decide to treat the softwa re identifier as viable, depending on the context in which it is used. The following procedure shall be used to determine whet her a piece of software is considered to match a  software identifier dictionary: Algorithm: Soft ware identifier a) The software name shall match the name specified by the  U entry (see  Software URIs  in 13.2.7.4,  Software Identifier Dictionary ).b) The software version shall be wit hin the interval specified by the  L, H, LI, and  H1 entries (see  Version  arrays  in  13.2.7.4, Software Identifier Dictionary ).c) The machines operating system name shall be an exact match for one present in the  OS array. If the array  is not present or empty, a match sh all also be considered to exist. Table  292    Entries in a software identifier dictionary   KeyType Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  SoftwareIdentifier  for a software identifier dictionary. UASCII string (Required)  A URI that identifies a piece of software (see  Software URIs  in  13.2.7.4, Software Identifier Dictionary ).Larray(Optional)  The lower bound of the range of  software versions that this  software identifier dictionary specifies (see  Version arrays  in  13.2.7.4,  Software Identifier Dictionary ). Default value: the array [0].  LIboolean (Optional)  If true, the lower bound of the interval defined by  L and  H is inclusive; that is, the software versi on shall be greater than or equal to  L (see Version arrays  in 13.2.7.4, Software  Identifier Dictionary ). If false, it shall  not be inclusive. Default value:  true.Harray(Optional)   The upper bound of the range of software versions that this  software identifier dictionary specifies (see  Version arrays  in  13.2.7.4,  Software Identifier Dictionary ). Default value: an empty array [].  HIboolean (Optional)  If true, the upper bound of the interval defined by  L and  H is  inclusive; that is, the software version shall be less than or equal to  H (see Version arrays  in 13.2.7.4, Software  Identifier Dictionary ). If false, it shall  not be inclusive. Default value:  true.OSarray(Optional)  An array of byte strings repres enting operating system identifiers  that shall indicate to which operating systems this object applies. The  defined values are the same as those defined for SMIL 2.0s  systemOperatingSystem  attribute. There may not be  multiple copies of the  same identifier in the array. An empty array shall be considered to represent  all operating systems. Default value: an empty array.",""],"513":["' Adobe Systems Incorporated 2008  All rights reserved 505PDF 32000-1:2008 13.2.7.4.2 Software URIs The  U  entry is a URI (universal resource identifier) that  identifies a piece of software. It shall be interpreted  according to its scheme; the only presently defined scheme is  vnd.adobe.swname . The scheme name is case- insensitive; if shall not be recognize d by the conforming reader, the softwa re shall be considered a non-match.  The syntax of URIs of this scheme is  vnd.adobe.swname:  software_name where sof tware_name  shall be  reg_name  as defined in Internet RFC 2396,  Uniform Resource Id entifiers (URI):  Generic Syntax ; see the  Bibliography . sof tware_name  shall be a sequence of UTF-8-encoded characters that  have been escaped with one pass of URL escaping (see  14.10.3.2, URL Strings ). That is, to recover the  original software name,  software_name  shall be unescaped and then treated as a sequence of UTF-8  characters. The actual software names shall be compared in a case-sensitive fashion.  Software names shall be  second-class names (see Annex E ). EXAMPLE The URI for Adobe  Acrobat is vnd.adobe.swname:ADBE_Acrobat 13.2.7.4.3 Version arrays The  L, H, LI, and HI entries shall be used to specify a range of software versions.  L and H shall be  version  arrays  containing zero or more non-negative integers representing subversion numbers. The first integer shall  be the major version numbers, and subsequent integers shall be increasingly minor.  H shall be greater than or  equal to  L, according to the following rules for comparing version arrays: Algorithm: Comparing version arrays a) An empty version array shall be treated as infinity;  that is, it shall be considered greater than any other  version array except another empty array. Two empty arrays are equal. b) When comparing arrays that contain different number s of elements, the smaller  array shall be implicitly  padded with zero-valued integers to make the number of elements equal.  EXAMPLE When comparing [5 1 2 3  4] to [5], the latter is  treated as [5 0 0 0 0].  c) The corresponding elements of the arrays shall be compared, starting with the first. When a difference is  found, the array containing the larger element shall be  considered to have the larger version number. If no  differences are found, the versions are equal. If a version array contains negative numbers, it shall  be considered non-viable, as is the enclosing software  identifier. 13.2.7.5 Monitor Specifier A mo nitor specifier  is an integer that shall identify a physical  monitor attached to a system. It may have one of  the values in  Ta b l e  293 :",""],"514":["PDF 32000-1:2008 506 ' Adobe Systems Incorporated 2008  All rights reserved For some of these values, it is poss ible have a tie at play-time; for example, two monitors might have the  same colour depth. Ties may be broken in an implementation-dependent manner. 13.3 Sounds A sound object (PDF 1.2)  shall be a stream containing sample values that define a sound to be played through  the computers speakers. The  Sound entry in a sound annotation or  sound action dictionary (see  Ta b l e  185and  Ta b l e  208 ) shall identify a sound object representing the sound to be played when the annotation is  activated. Since a sound object is a stream,  it may contain any of the standard entries common to all streams, as  described in  Ta b l e  5. In particular, if it contains an  F (file specification) entry, the sound shall be defined in an  external file. This sound file shall be self-describing, co ntaining all information needed to render the sound; no  additional information need be present in the PDF file.  NOTE The AIFF, AIFF-C (Mac OS), RIFF ( . wav ),  and snd ( . au)  file formats are all self-describing.  If no F entry is present, the sound object itself shall contain the sample data and all other information needed to  define the sound.  Ta b l e  294  shows the additional dictionary entries specific to a sound object.  Table  293   Monitor specifier values   Value Description 0The monitor containing the largest section of the document window 1The monitor containing the smallest  section of the document window 2Primary monitor. If no monitor is considered primary, shall treat as  case 03Monitor with the greatest colour depth 4Monitor with the greatest area (in pixels squared) 5Monitor with the greatest height (in pixels) 6Monitor with the greatest width (in pixels) Table  294   Additional entries sp ecific to a sound object   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if present,  shall be  Sound for a sound object.  Rnumber (Required)   The sampling rate, in samples per second.  Cinteger (Optional)   The number of sound channels. Default value: 1.  Binteger (Optional)  The number of bits per sample value per channel. Default value: 8.  Ename (Optional)   The encoding format for the sample data:  Raw Unspecified or unsigned values in the range 0 to 2 B  1 Signed Twos-complement values  muLaw m-lawencoded samples  ALaw A-lawencoded samples  Default value: Raw.",""],"515":["' Adobe Systems Incorporated 2008  All rights reserved 507PDF 32000-1:2008 Sample values shall be stored in the stream with the most  significant bits first (big-endian order for samples  larger than 8 bits). Samples that are not a multiple of 8  bits shall be packed into co nsecutive bytes, starting at  the most significant end. If a sample extends across a by te boundary, the most signific ant bits shall be placed in  the first byte, followed by less signif icant bits in subsequent bytes. For  dual-channel stereophonic sounds, the  samples shall be stored in an interl eaved format, with each sample value for the left channel (channel 1)  preceding the corresponding sample for the right (channel 2).  To maximize the portability of PDF doc uments containing embedded s ounds, conforming readers should support at least the following formats (assuming the platform has sufficient hardware and OS support to play  sounds at all):  R800 0, 11,025, or 22,050 samples per second  C1  or 2 channels  B8 or  16 bits per channel  ERa w, Signed, or muLaw encoding  If the encoding ( E) is Raw or Signed,  R shall be 11,025 or 22,050 samples per channel. If the encoding is  muLaw,  R shall be 8000 samples per channel,  C shall be 1 channel, and  B shall be 8 bits per channel. Sound  players shall convert between formats, downsample ra tes, and combine channels as necessary to render  sound on the target platform.  13.4 Movies The features described in this sub-clause are obsolescent and their use is no longer recommended. They are  superseded by the general multimedia framework described in  13.2, Multimedia. PDF shall embed  movies within a document by means  of movie annotations (see  12.5.6.17, Movie  Annotations ). Despite the name, a movie may consist entirely of  sound with no visible images to be displayed  on the screen. The  Movie and A (activation) entries in the movie annotation dictionary shall refer, respectively,  to a movie dictionary  (Ta b l e  295 ) that shall describe the static characteristics of the movie and a  movie activation dictionary  (Ta b l e  296 ) that shall specify how it shall be presented.  COname (Optional)  The sound compression format used on the sample data. (This is  separate from any stream compressi on specified by the sound objects  Filter entry; see Table  5 and  7.4, Filters. ) If this entry is absent, sound  compression shall not be used; the data contains sampled waveforms that  shall be played at  R samples per second per channel.  CP(various)(Optional)  Optional parameters specific to the sound compression format  used.  No standard values have been defined for the  CO and CP entries. Table 294   Additional entries specific to a sound object  (continued) Key Type Value",""],"516":["PDF 32000-1:2008 508 ' Adobe Systems Incorporated 2008  All rights reserved Table  295    Entries in a movie dictionary   KeyType Value Ffile specification (Required)   A file specification identifyin g a self-describing movie file.  NOTE The format of a self-describing movie file shall be left  unspecified, and there is  no guarantee of portability.  Aspect array(Optional)  The width and height of the movies bounding box, in pixels,  and shall be specified as  [ width  height  ].  This entry should be omitted  for a movie consisting entirely of sound with no visible images.  Rotate integer (Optional)  The number of degrees by which the movie shall be rotated  clockwise relative to the page. The value shall be a multiple of 90.  Default value: 0.  Posterboolean  or stream(Optional)  A flag or stream specifying whether and how a  poster image representing the movie shall be display ed. If this value is a stream, it  shall contain an image XObject (see  8.9, Images ) to be displayed as  the poster. If it is the boolean value  true, the poster image shall be  retrieved from the movie file; if it is  false, no poster shall be displayed.  Default value: false . Table  296    Entries in a movie activation dictionary   KeyType Value Start (various) (Optional)   The starting time of the movie segment to be played. Movie  time values shall be expressed in units of time based on a  time scale, which defines the number of units per second. The default time scale  shall be defined in the movie data. The starting time shall be nominally  a non-negative 64-bit integer,  specified as follows:   If it is representable as an integer (subject to the implementation  limit for integers, as described in  Annex C ), it shall be specified as  such.  If it is not representable as an int eger, it shall be specified as an  8-byte string representing a 64-bit  twos-complement integer, most  significant byte first.   If it is expressed in a time scale different from that of the movie  itself, it shall be represented as an array of two values: an integer  or byte string denoting the starting time, followed by an integer  specifying the time scale in units per second.  If this entry is omitted, the movi e shall be played from the beginning.  Duration(various) (Optional)  The duration of the movie segment to be played, that shall  be specified in the same form as  Start . If this entry is omitted, the  movie shall be played to the end.  Ratenumber (Optional)  The initial speed at which to play the movie. If the value of  this entry is negative, the movie shall be played backward with respect  to Start  and  Duration . Default value: 1.0.  Volume number (Optional)   The initial sound volume at which to play the movie, in the  range  1.0 to 1.0. Higher values sha ll denote greater  volume; negative  values shall mute the sound. Default value: 1.0.  ShowControls boolean (Optional)  A flag specifying whether to display a movie controller bar  while playing the movie. Default value:  false.",""],"517":["' Adobe Systems Incorporated 2008  All rights reserved 509PDF 32000-1:2008 13.5 Alternate Presentations Beginning with PDF 1.4, a PDF document shall contain  alternate presentations , which specify al ternate ways in  which the document may be viewed. The optional  AlternatePresentations  entry  (PDF 1.4)  in a documents  name dictionary (see  Ta b l e  31) contains a name tree that maps name strings to the alternate presentations  available for the document.  NOTE 1 Since conforming readers are not required to sup port alternate presentations, authors of documents containing  alternate presentations should define the files such that  something useful and meaningful can be displayed  and printed. For example, if the document contains  an alternate presentation slideshow of a sequence of  photographs, the photographs should be viewable in a st atic form by viewers that are not capable of playing  the slideshow. As of PDF 1.5, the only type  of alternate presentation is a  slideshow . Slideshows may be invoked by means of  JavaScript actions (see  12.6.4.16, JavaScript Actions ) initiated by user action on an interactive form element  (see  12.7, Interactive Forms ). The following table shows the entr ies in a slideshow dictionary.  Modename (Optional)  The play mode  for playing the movie:  Once Play once and stop.  Open Play and leave the movie controller bar open.  Repeat Play repeatedly from beginning to end until stopped.  Palindrome Play continuously forward and backward until stopped.  Default value: Once.  Synchronous boolean (Optional)  A flag specifying whether to play the movie synchronously  or asynchronously. If this value is  true, the movie player shall retain  control until the movie is complet ed or dismissed by the user. If the  value is  false, the player shall return control to the conforming reader  immediately after starting the movie. Default value:  false. FWScale array(Optional)  The magnification (zoom) factor at which the movie shall be  played. The presence of this entry  implies that the movie shall be  played in a floating window. If the entry is absent, the movie shall be  played in the annotation rectangle.  The value of the entry shall be an array of two positive integers,  [ numerator  denominator  ], den oting a rational magnification factor for  the movie. The final window size, in pixels, shall be  (n umerator  ydenominator ) u Aspect where the value of  Aspect shall be taken from the movie dictionary  (see Table  295).  FWPosition array(Optional)  For floating play windows, the relative position of the  window on the screen. The value shall be an array of two numbers  [ horiz  vert ]each in the range 0.0 to 1.0, denoting the relative horizontal and  vertical position of the movie wi ndow with respect to the screen.  EXAMPLE The value [  0.5 0.5 ] centers the window on the  screen. Default value: [  0.5 0.5 ].  Table 296   Entries in a movie activation dictionary  (continued) KeyType Value",""],"518":["PDF 32000-1:2008 510 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 2 The  Resources  name tree represents a virtual file system to the  slideshow. It associates strings (file names)  with PDF objects that represent resources used by the slideshow. For example, a root stream may reference a  file name, which would be looked up in the  Resources  name tree, and the corresponding object would be  loaded as the file. (This virtual file system is flat ; that is, there is no way to reference subfolders.) NOTE 3 Typically, images are stored in  the document as image XObjects (see  8.9.5, Image Dictionaries ), thereby  allowing them to be shared between the standard PDF representation and the slideshow. Other media objects  are stored or embedded file streams (see  7.11.4, Embedded File Streams ). To allow conforming readers to verify content against t heir own supported features all referenced objects shall  include a  Type  entry in their dictionary, even when the  Type  entry is normally optional for a given object.  EXAMPLE The following example illustrates the use of alternat e presentation slideshows. 1 0 obj <</Type /Catalog /Pages 2 0 R /Names 3 0 R  % Indirect reference to name dictionary >>... 3 0 obj  % The name dictionary <</AlternatePresentations 4 0 R >> endobj 4 0 obj  % The alternate presentations name tree <</Names [(MySlideShow) 5 0 R]>> endobj 5 0 obj  % The slideshow definition <</Type /SlideShow /Subtype /Embedded /Resources <</Names [ (mysvg.svg) 31 0R (abc0001.jpg) 35 0 R (abc0002.jpg) 36 0 R (mysvg.js) 61 0 R (mymusic.mp3) 65 0 R ]>> /StartResource (mysvg.svg) >>... 31 0 obj <</Type /Filespec % The root object, which  /F (mysvg.svg) % points to an embedded file stream /EF <</F 32 0 R>>  >>endobj 32 0 obj % The embedded file stream <</Type /EmbeddedFile /Subtype /image#2Fsvg+xml Table  297    Entries in a slideshow dictionary   KeyType Value Type name(Required; PDF 1.4)  The type of PDF object that  this dictionary describes;  shall be  SlideShow for a slideshow dictionary. Subtype name(Required; PDF 1.4)  The subtype of the PDF obje ct that this dictionary  describes; shall be  Embedded for a slideshow dictionary. Resources name  tree(Required; PDF 1.4)  A name tree that maps name strings to objects  referenced by the alternate presentation. NOTE Even though PDF treats the stri ngs in the name tree as strings  without a specified encoding, the slideshow shall interpret  them as UTF-8 encoded Unicode. StartResource byte string(Required; PDF 1.4)  A byte string that shall ma tch one of the strings in the  Resources  entry. It shall define the root object for the slideshow  presentation.",""],"519":["' Adobe Systems Incorporated 2008  All rights reserved 511PDF 32000-1:2008 /Length 72 >>stream<?xml version=\"1.0\" standalone=\"no\"?> <svg><!-- Some SVG  goes here--></svg>endstream endobj % ... other objects not shown 13.6 3D Artwork 13.6.1 General Starting with PDF 1.6, collections of three-dimensional  objects, such as those used by CAD software, may be  embedded in PDF files. Such collections are often called  3D models ; in the context of PDF, they shall be referred to as  3D artwork . The PDF constructs for 3D artwork support the following features:   3D artwork may be rendered within a page; that is, not as a separate window or user interface element.   Multiple instances of 3D artwork may appear within a page or document.  Specific views of 3D artwork may be specified, includin g a default view that shall be displayed initially and  other views that may be selected. Views may have nam es that can be presented in a user interface.  (PDF 1.7) Conforming readers may specify how 3D artwork shall be rendered, coloured, lit, and cross- sectioned, without the use of embedded JavaScript. Th ey may also specify state information that shall be  applied to individual nodes (3D graphic objects or co llections thereof) in the 3D ar twork, such as visibility,  opacity, position, or orientation.   Pages containing 3D artwork may be printed.  Users may rotate and move the artwork, enabling th em to examine complex objects from any angle or  orientation. (PDF 1.7) Keyframe animations contained in 3D artwork ma y be played in specific styles and timescales,  without programatic intervention.   JavaScripts and other software may programmatically  manipulate objects in the artwork, creating dynamic  presentations in which objects move, spin, appear, and disappear.  (PDF 1.7) The activation of 3D artwork can trigger the di splay of additional user interface items in the  conforming reader. Such items may include model trees and toolbars.   Two-dimensional (2D) content such as  labels may be overlaid on 3D artw ork. This feature is not the same  as the ability to apply 2D  markup annotations.  (PD F 1.7)  2D markup annotations may be applied to sp ecific views of the 3D artwork, using the  ExData entry to identify the 3D annotation and the 3D view in that annotation.  The following sub-clauses describe the major PDF objects  that relate to 3D artwork, as well as providing  background information on 3D graphics: 3D an notations  provide a  virtual camera  through which the artwork shall be viewed. (see  13.6.2, 3D  Annotations ).",""],"520":["PDF 32000-1:2008 512 ' Adobe Systems Incorporated 2008  All rights reserved 3D streams  shall contain the actual specificat ion of a piece of 3D artwork (see  13.6.3, 3D Streams ). This  specification supports the Standard ECMA-363,  Universal 3D file format  developed by the 3D Industry  Forum (see  Bibliography ). 3D views shall specify information about the relationshi p between the camera and the 3D artwork (see  13.6.4, 3D Views ). Beginning with PDF 1.7, views may also  describe additional parameters such as  render mode, lighting, cross sections, and nodes. Nodes  shall be 3D graphic objects or collections thereof.  3D coordinate systems are described in  13.6.5, Coordinate Systems for 3D.  2D markup annotations applied to 3D artwork views are described in  13.6.6, 3D Markup. NOTE Many of the concepts and terminology of 3D render ing are beyond the scope of this reference. Readers  interested in further information are en couraged to consult outside references. 13.6.2 3D Annotations 3D annotations ( PDF 1.6) are the means by which 3D artwork sh all be represented in a PDF document.  Ta b l e  298 shows the entries specific to a 3D annotation dictionary.  Ta b l e  164  describes the entries common to  all annotation dictionaries.  In addition to these entries, a 3D annotation shall provide an appearance stream in its  AP entry (see  Ta b l e  164 ) that has a normal appearance (the  N entry in Ta b l e  168 ). This appearance may be us ed by applications that do  not support 3D annotations and by all applications for the initial display of the annotation. Table  298    Additional entries specific to a 3D annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  3D for a 3D annotation.  3DDstream or  dictionary (Required)  A 3D stream (see  13.6.3, 3D Streams ) or 3D reference  dictionary (see  13.6.3.3, 3D Reference Dictionaries ) that specifies the  3D artwork to be shown.  3DV(various)(Optional)  An object that specif ies the default initial view of the 3D artwork  that shall be used when the annotation is activated. It may be either a 3D  view dictionary (see  13.6.4, 3D Views ) or one of the following types  specifying an element in the  VA array in the 3D stream (see  Ta b l e  300 ): An integer specifying an index into the  VA array. A text string matching the  IN entry in one of the views in the  VAarray.  A name that indicates the first ( F), last (L), or default ( D) entries in  the VA array. Default value: the defaul t view in the 3D stream object specified by  3DD . 3DAdictionary (Optional)  An activation dictionary  (see Table  299 ) that defines the times  at which the annotation shall be ac tivated and deactivated and the state  of the 3D artwork instance at those  times. Default value: an activation  dictionary containing default values for all its entries. 3DIboolean (Optional)  A flag indicating the primary use of the 3D annotation. If  true, it  is intended to be interactive; if  false, it is intended to be manipulated  programmatically, as with a JavaScript animation. Conforming readers  may present different user interface controls for interactive 3D  annotations (for example, to rotate,  pan, or zoom the artwork) than for  those managed by a script or other mechanism. Default value: true.",""],"521":["' Adobe Systems Incorporated 2008  All rights reserved 513PDF 32000-1:2008 The  3DB entry specifies the  3D view box , a rectangle in which the 3D artwork appears. The view box shall fit  within the annotations rectangle (specified by its  Rect entry). It may be the same si ze, or it may be smaller if  necessary to provide extra drawing area for additional 2D graphics within the annotation. NOTE 1 Although 3D artwork can internally specify viewport  size, conforming readers ignore it in favour of information  provided by the  3DB  entry. The view box shall be specified in the annotations  target coordinate system , whose origin is at the center of the  annotations rectangle. Units in this coordinate system ar e the same as default user space units. Therefore, the  coordinates of the annotations rectangle in the target coordinate system are  [ -w/2  - h/2 w/2 h/2 ]given  w an d  h as the rectangles width and height.  The  3DD  entry shall specify a 3D stream that contains  the 3D artwork to be shown in the annotation; 3D  streams are described in  Section 13.6.3 . The 3D D  entry may specify a 3D stream  directly; it may also specify a  3D stream indirectly by means of  a 3D reference dictionary (see  13.6.3.3, \"3D Refer ence Dictionaries\" ). These  options control whether annotations shall share th e same run-time instance of the artwork. The  3DV entry shall specify the view of the 3D artwork th at is displayed when the annotation is activated (as  described in the next paragraph). 3D views, which are described in  Section 13.6.4 , represent settings for the  virtual camera, such as position, orientation,  and projection style.  The view specified by  3DV  shall be one of the  3D view dictionaries listed in the  VA entry in a 3D stream (see  Ta b l e  300). The  3D A  entry shall be an activation dictionary (see  Ta b l e  299 ) that determines how the  state of the annotation  and its associated artwork may change.  NOTE 2 These states serve to delay the processing or displa y of 3D artwork until a user c hooses to interact with it.  Such delays in activating 3D artwork can be advantageous to performance.  At any given moment, a 3D annotation shall be in one of two states: Inac tive  (the default initial state): the annotation displays the annotations normal appearance. NOTE 3 It is typical, though not required, for the normal appear ance to be a pre-rendered bitmap of the default view of  the 3D artwork. Conforming writers should provide bitm aps of appropriate resolution for all intended uses of  the document; for example, a high-resolution bitmap for  high-quality printing and a screen-resolution bitmap for  on-screen viewing. Optional content (see  8.11, Optional Content ) may be used to select the appropriate  bitmap for each situation. Active: the annotation displays a rendering of the 3D ar twork. This rendering shall be specified by the  annotations  3DV entry. 3DBrectangle (Optional)   The 3D view box, which is the rectangular area in which the 3D  artwork shall be drawn. It shall be  within the rectangle specified by the  annotations  Rect  entry and shall be expressed in the annotations target  coordinate system (see discussion following this Table).  Default value: the annotations  Rect entry, expressed in the target  coordinate system. This value is [ - w/2 -h/2 w/2 h/2 ], where  w and h are the width and height, respectively, of  Rect .Table 298   Additional entries specific to a 3D annotation  (continued) Key Type Value",""],"522":["PDF 32000-1:2008 514 ' Adobe Systems Incorporated 2008  All rights reserved Table  299    Entries in a 3D activation dictionary   Key Type Value Aname(Optional)  A name specifying the circumstances under which the  annotation shall be activated. Valid values are: PO  The annotation shall be activated as soon as the page containing  the annotation is opened.  PV  The annotation shall be activated as soon as any part of the page  containing the annotation becomes visible.  XA  The annotation shall remain inactive until explicitly activated by a  script or user action. NOTE 1 At any one time, only a single page shall be considered  open in a conforming reader, even though more than one  page may be visible, depending on the page layout. Default value:  XA.NOTE 2 For performance reasons,  documents intended for viewing  in a web browser should use explicit activation ( XA). In non- interactive applications, such as printing systems or  aggregating conforming reader,  PO and  PV indicate that the  annotation shall be activated when the page is printed or  placed;  XA indicates that the annotation shall never be  activated and the normal appearance shall be used.  AIS name(Optional)  A name specifying the state of the artwork instance upon  activation of the annotation. Valid values are: ITh e artwork shall be instantiate d, but real-time script-driven  animations shall be disabled. L  Real-time script-driven animations shall be enabled if present; if  not, the artwork shall be instantiated. Default value:  L.NOTE 3 In non-interactive conformi ng readers, the artwork shall be  instantiated and scripts shall be disabled.  Dname(Optional)  A name specifying the circumstances under which the  annotation shall be deactivated. Valid values are: PC  The annotation shall be deactivated as soon as the page is closed.  PI  The annotation shall be deactivated as soon as the page  containing the annotation becomes invisible.  XD  The annotation shall remain active  until explicitly deactivated by a  script or user action. NOTE 4 At any one time, only a single page shall be considered  open in the conforming reader, even though more than one  page may be visible, depending on the page layout. Default value:  PI.DIS name(Optional)  A name specifying the state of the artwork instance upon  deactivation of the annotation. Valid values are  U (uninstantiated),  I(instantiated), and  L (live). Default value:  U.NOTE 5 If the value of this entry is  L, uninstantiation of instantiated  artwork is necessary unle ss it has been modified.  Uninstantiation is never required in non-interactive  conforming readers.",""],"523":["' Adobe Systems Incorporated 2008  All rights reserved 515PDF 32000-1:2008 The  A and  D entries of the activation di ctionary determine when a 3D  annotation may become active and  inactive. The AIS and  DIS  entries determine what state the associated  artwork shall be in when the annotation  is activated or deactivated. 3D artw ork may be in one of three states: Unins tantiated:  the initial state of the artwork before it has been used in any way.  In stantiated : the state in which the artwork has been read  and a run-time instance of the artwork has been  created. In this state, it may be rendered but script-driven real-time modifications (that is, animations) shall  be disabled. Live: the artwork has been instantiated, and it is being  modified in real time to achieve some animation  effect. In the case of keyframe anima tion, the artwork shall be live while it  is playing and then shall revert to  an instantiated state when playing completes or is stopped. NOTE 4 The live state is valid only for keyframe animations  or in interactive conforming readers that have JavaScript  support.  If 3D artwork becomes uninstantiated after having been  instantiated, later use of the artwork requires re- instantiation (animations are lost, and the artwork appears in its initial form).  NOTE 5 For this reason, uninstantiation is not necessary  unless the artwork has been modified in some way;  consumers may choose to keep unchanged artw ork instantiated for performance reasons.  NOTE 6 In non-interactive systems such as printing systems,  the artwork cannot be changed . Therefore, applications  may choose to deactivate annotations and uninstantiate  artwork differently, based on factors such as memory  usage and the time needed to instantiate artwork, and the  TB, NP, D and  DIS entries may be ignored. Multiple 3D annotations may share an inst ance of 3D artwork, as described in  13.6.3.3, \"3D Reference  Dictionaries\". In such a case, the state of  the artwork instance shall be de termined in the following way:  If any active annotation dictates (through its activation  dictionary) that the artwork shall be live, it shall be live. Otherwise, if any active annotation dictates that th e artwork shall be instantiated, it shall be instantiated.  Otherwise  (that is, all active annotations dictate that the  artwork shall be uninstantiated), the artwork shall  be uninstantiated. TBboolean (Opti onal; PDF 1.7 ) A flag indicating the default behavior of an  interactive toolbar associated with this annotation. If  true, a toolbar shall  be displayed by default when the annotation is activated and given  focus. If false, a toolbar shall not be displayed by default.  NOTE 6 Typically, a toolbar is pos itioned in proximity to the 3D  annotation.  Default value:  true.NPboolean (Opti onal; PDF 1.7 ) A flag indicating the default behavior of the user  interface for viewing or managing information about the 3D artwork.  Such user interfaces can enable navigation to different views or can  depict the hierarchy of the objects  in the artwork (the model tree). If  true, the user interface should be made  visible when the annotation is  activated. If  false, the user interface should not be made visible by  default.  Default value:  false Table 299   Entries in a 3D activation dictionary  (continued) Key Type Value",""],"524":["PDF 32000-1:2008 516 ' Adobe Systems Incorporated 2008  All rights reserved The rules described in  13.6.2, 3D Annotations , apply only to active annotations. If all annotations referring to  the artwork are inactive, the artwork nevertheless may be uninstantiated, instantiated, or live 3D Streams. 13.6.3 3D Streams 13.6.3.1 General The specification of 3D artwork shall be contained in a  3D stream. 3D stream dictionaries, whose entries (in  addition to the regular stream dictionary’s entries; see  7.3.7, Dictionary Objects ) are shown in  Ta b l e  300 , mayprovide a set of predefined views of  the artwork, as well as a default view. They may also provide scripts and  resources for providing customized behaviours or presentations. The  Subty pe  entry specifies the format of the 3D stream data. The only valid value is  U3D, which indicates that  the stream data conforms to the  Universal 3D File Format  specification (see  Bibliography ). Conforming readers shall be prepared to encounter unknown values for  Subtype and recover appropriately, which usually means  leaving the annotation in its inactive state, displaying its normal appearance.  NOTE Conforming readers should follow the approach of fa lling back to the normal appear ance with regard to entries  in other dictionaries that may take different  types or values than the ones specified here. Table  300    Entries in a 3D stream dictionary   KeyType Value Type name (Optional)   The type of PDF object that this dictionary describes; if  present, shall be  3D for a 3D stream.  Subtypename (Required)  A name specifying the format of the 3D data contained in  the stream. The only valid value is  U3D . VAarray(Optional)  An array of 3D view dictionaries , each of which specifies a  named preset view of this 3D artwork (see  Section 13.6.4, 3D  Views ). DV(various) (Optional)  An object that specifies the default (initial) view of the 3D  artwork. It may be a 3D view dictionary (see  Section 13.6.4, 3D  Views ) or one of the following types:  An integer specifying an index into the  VA array. A text string matching the  IN entry in one of the views in the  VAarray.  A name that indicates the first ( F) or last (L) entries in the  VAarray. Default value: 0 (the first entry in the  VA array) if  VA is present; if  VA is  not present, the default view shall be specified within the 3D stream  itself.  Resources name tree (Optional)  A name tree that maps name st rings to objects that may be  used by applications or scripts to  modify the default view of the 3D  artwork. The names in this name tree shall be  text strings so as to be encoded  in a way that will be accessible from JavaScript.  OnInstantiate stream(Optional)   A JavaScript script that shall be executed when the 3D  stream is instantiated.  ANdictionary (Optional; PDF 1.7)  An animation style dictionary  indicating the  method that conforming readers sh ould use to drive keyframe  animations present in this artwork (see  13.6.3.2, \"3D Animation Style  Dictionaries\" ).Default value: an animation style dictionary whose  Subtype entry has a value of  None.",""],"525":["' Adobe Systems Incorporated 2008  All rights reserved 517PDF 32000-1:2008 If present, the  VA entry shall be an array containing a list of named present views of the 3D artwork. Each entry  in the array shall be a 3D view dictionary (see  13.6.4, 3D Views ) that shall contain the name of the view and  the information needed to display the view. The order of array elements determines the order in which the  views shall be presented in a user interface. The  DV entry specifies the view that shall be used as the initial  view of the 3D artwork. Default views shall be determined in the following order  of precedence: in the annotation dictionary, in the 3D  stream dictionary, or in the 3D ar twork contained in the 3D stream.  3D streams contain information that may be used by conf orming readers and by scripts to perform animations  and other programmatically-defined beh aviours, such as changing the viewing orientation or moving individual  components of the artwork. If present, the  OnInstantiate  entry shall contain a JavaSc ript script that shall be executed by applications that support  JavaScript whenever a 3D stream is read to create an instance of the 3D  artwork. The  Resources  entry shall be a name tree that contains obj ects that may be used to modify the initial  appearance of the 3D artwork.  13.6.3.2 3D Animation Style Dictionaries A 3D  animation style dictionary  (PDF 1.7)  specifies the method that confo rming readers should use to apply  timeline scaling to keyframe animatio ns. It may also specify that keyfra me animations be played repeatedly.  The  AN entry of the 3D stream shall spec ify a 3D animation style dictionary. A keyframe animation may be provided as the conten t of a 3D stream dictionary. A keyframe animation  provides key frames and specifies the mapping for the position of geometry over a set period of time ( animation  timeline). Keyframe animation is an interact ive feature that is highly depende nt on the behaviour and controls  provided by the conforming reader.  Ta b l e  301 shows the entries in an animation style dictionary.  The descriptions of the animation styles (see  Ta b l e  302 ) use the following variables to represent application  time or keyframe settings  specified in the 3D artwork. Table  301    Entries in an 3D animation style dictionary   KeyType Value Type name (Opti onal ). The type of PDF object that this dictionary describes; if present,  shall be  3DAnimationStyle .Subtypename (Opti onal ) The animation style described by this dictionary; see  Table  302 for valid values. If an animation st yle is encountered other than those  described in  Ta b l e  302 , an animation style of  None shall be used.  Default value:  NonePCinteger (Opti onal ) An integer specifying the play count for this animation style. A  non-negative integer represents the number of times the animation shall  be played. A negative integer indicates that the animation shall be infinitely  repeated. This value shall be ignor ed for animation styles of type  None.Default value: 0 TMnumber (Opti onal ) A positive number specifying the time multiplier to be used  when running the animation. A value greater than one shortens the time it  takes to play the animation, or effectively speeds up the animation.  NOTE This allows authors to adjust the de sired speed of animations,  without having to re-author the 3D artwork. This value shall be ignored for animation styles of type  None.Default value: 1",""],"526":["PDF 32000-1:2008 518 ' Adobe Systems Incorporated 2008  All rights reserved t is a point on the animation time  line. This value shall be used in conjunction with the keyframe animation  data to determine the state of the 3D artwork. [r0, r1] is the keyframe animation time line.  ta is the current time of  the conforming reader. t0 is the time when the conforming reader starts the animation. p  is the time it takes to play the keyframe an imation through one cycle. In the case of the  Linear  animation  style, one cycle consists of playing the animation thro ugh once from beginning to end. In the case of the  Oscillating  animation style, one cycle cons ists of playing the animation  from beginning to end and then  from end to beginning. m is  the positive multiplier specified by the  TM entry in the animation style dictionary. 13.6.3.3 3D Refere nce Dictionaries More than one 3D annotation may be associated with the  same 3D artwork. There are two ways in which this  association may occur, as det ermined by the annotations  3DD entry (see  Ta b l e  298 ):   If the  3DD entry specifies a 3D stream, the annotation sh all have its own run-time instance of the 3D  artwork. Any changes to the artwork shall be reflected on ly in this annotation. Other annotations that refer  to the same stream shall have separate run-time instances.   If the  3DD entry specifies a 3D reference dictionary (whose entries are shown in  Ta b l e  303 ), the annotation  shall have a run-time instance of the 3D artwork with all other annotations that specify the same reference  dictionary. Any changes to the artwork shall be reflected in all such annotations. Table  302   Animation styles   NoneKeyframe animations shall not be dr iven directly by the conforming  reader. This value shall be used by documents that are intended to  drive animations through an alternate means, such as JavaScript.  The remaining entries in the animation style dictionary shall be  ignored.Linear Keyframe animations shall be driven linearly from beginning to end.  This animation style results in a repetitive playthrough of the  animation, such as in a walking motion. t = (m(ta - t0) +  r0) % ( r1 - r0)p = (r1 - r0) / mThe % symbol indicates the modulus operator.  Oscillating Keyframe animations shall oscillate along their time range. This  animation style results in a back-and-forth playing of the animation,  such as exploding or collapsing parts. t = (0.5)(r1 - r0)(1 - cos( m(ta - t0))) +  r0p = 2 * pi / m",""],"527":["' Adobe Systems Incorporated 2008  All rights reserved 519PDF 32000-1:2008 EXAMPLE The following example and  Figure 66  through  Figure 68  show three annotations that use the same 3D  artwork. Object 100 (Annotation 1) has its own run- time instance of the 3D stream (object 200); object  101(Annotation 2) and object 102 (Annotation 3) s hare a run-time instance through the 3D reference  dictionary (object 201). 100 0 obj  % 3D annotation 1 << /Type /Annot /Subtype /3D /3DD 200 0 R  % Reference to the 3D stream containing the 3D artwork >>endobj 101 0 obj  % 3D annotation 2 << /Type /Annot /Subtype /3D /3DD 201 0 R  % Reference to a 3D reference dictionary >>endobj 102 0 obj  % 3D annotation 3 << /Type /Annot /Subtype /3D /3DD 201 0 R  % Reference to the same 3D reference dictionary >>endobj 200 0 obj  % The 3D stream << /Type /3D /Subtype /U3D ... other keys related to a stream, such as /Length >>stream... U3D data... endstream endobj 201 0 obj  % 3D reference dictionary << /Type /3DRef /3DD 200 0 R  % Reference to the actual 3D artwork. >>endobj Table  303    Entries in a 3D reference dictionary   KeyType Value Type name (Optional)   The type of PDF object that this dictionary describes; if  present, shall be  3DRef  for a 3D reference dictionary.  3DDstream(Required)  The 3D stream (see  13.6.3, 3D Streams ) containing the  specification of the 3D artwork.",""],"528":["PDF 32000-1:2008 520 ' Adobe Systems Incorporated 2008  All rights reserved Figure 66   Default view of artwork Figure 67   Annotation 2 rotated Figure  68   Shared artwork (annotations 2 & 3) modified The figures show how the objects in the Example in  13.5, Alternate Presentations,  might be used.  Figure 66  shows the same initial view of the artwork in all three annotations.  Figure 67  shows the results  of rotating the view of t he artwork within Annotation 2.  Figure 68  shows the results of manipulating the  artwork shared by Annotation 2 and Annotation 3: th ey both reflect the change in the artwork because  they share the same run-time instance. Annotation 1 remains unchanged because it has its own run-time  instance. NOTE When multiple annotations refer to the same instance of  3D artwork, the state of the instance is determined as  described in 13.6.2, 3D Annotations.","Annotation 1 Annotation 2 Annotation 3","2 1 5","B A E","2 1 5","B A E","215","BAE","Annotation 1 Annotation 2 Annotation 3","215","1","15","BAE","A","BAE","Annotation 1 Annotation 2 Annotation 3","215","1","215","BAE","A","BAE",""],"529":["' Adobe Systems Incorporated 2008  All rights reserved 521PDF 32000-1:2008 13.6.4 3D Views 13.6.4.1 General A 3D view (or simply  view) specifies parameters that shall be applied  to the virtual camera associated with a 3D  annotation. These parameters may include orientation  and position of the camera, details regarding the  projection of camera coordinates into the annotations target coordinate system, and a description of the  background on which the artwork shall be drawn. Starti ng with PDF 1.7, views may specify how 3D artwork is  rendered, coloured, lit, and cross-sectioned, without th e use of embedded JavaScript. Views may also specify  which nodes (three-dimensional areas) of 3D artwork  shall be included in a view and whether those nodes are  opaque or invisible.  NOTE 1 Users can manipulate views by performing interactiv e operations such as free rotation and translation. In  addition, 3D artwork can contain a set of predefined view s that the author deems to be of particular interest.  For example, a mechanical drawing of a part may have specif ic views showing the top, bottom, left, right, front,  and back of an object. A 3D stream may contain a list of named preset vi ews of the 3D artwork, as specified by the  VA entry, which  shall be an array of 3D view dictionaries. The entries in a 3D view dictionary are shown in  Ta b l e  304 . Table  304   Entries in a 3D view dictionary   Key Type Value Type name(Optional)  The type of PDF object that  this dictionary describes; if  present, shall be  3DView  for a 3D view dictionary.  XNtext string(Required)  The external name of the view, suitable for presentation in a  user interface.  INtext string(Optional)   The internal name of the view, used to refer to the view from  other objects, such as the go-to-3D-view action (see  12.6.4.15, Go-To- 3D-View Actions ). MSname(Optional)  A name specifying how the 3D camera-to-world  transformation matrix shall be determined. The following values are  valid:M Ind icates that the  C2W entry shall specify the matrix U3D  In dicates that the view node selected by the  U3DPath entry shall  specify the matrix.  If omitted, the view specified in the 3D artwork shall be used.  C2W array(Required if the value of  MS is M, ignored otherwise)  A 12-element 3D  transformation matrix that specifies a position and orientation of the  camera in world coordinates.  U3DPath text string or  array(Required if the value of  MS is U3D, ignored otherwise)  A sequence of  one or more text strings used to access a  view node  within the 3D  artwork. The first string in the array is a  node ID  for the  root view node , and each subsequent string is the node ID for a child of the view node  specified by the prior string. Each view node specifies a 3D  transformation matrix (see 13.6.5, Coordinate Systems for 3D ); the concatenation of all the matrices forms the camera-to-world matrix.  Conforming writers should specify only a single text string, not an array,  for this entry. NOTE Do not confuse View Nodes with nodes. A View Node is a  parameter in the 3D artwork that specifies a view, while a  node is a PDF dictionary that specifies 3D graphic objects  or collections thereof.",""],"530":["PDF 32000-1:2008 522 ' Adobe Systems Incorporated 2008  All rights reserved For any view, the conforming  writer may provide 2D conten t specific to the view, to  be drawn on top of the 3D  artwork. The  O entry specifies a form XObject that shall be  overlaid on the rendered 3D artwork. The  COnumber (Optional; used only if  MS is present)  A non-negative number indicating  a distance in the camera  coordinate system along the  z axis to the center  of orbit for this view; see discussion following this Table. If this entry is  not present, the conforming reader  shall determine the center of orbit. Pdictionary (Optional)  A projection dictionary  (see 13.6.4.2, Projection Dictionaries ) that defines the projection of coor dinates in the 3D artwork (already  transformed into camera coordinates)  onto the target coordinate system  of the annotation. Default value: a projection dictionary where the value of  Subtype is Perspective, the value of  FOV  is 90, and all other entries take their  default values. Ostream(Optional; meaningful only if  MS and P are present)  A form XObject that shall be used to overlay 2D graphi cs on top of the rendered 3D artwork  (see 13.6.6, 3D Markup ). BGdictionary (Optional)  A background dictionary  that defines the background over  which the 3D artwork shall be drawn (see  13.6.4.3, 3D Background  Dictionaries ). Default value: a background  dictionary whose entries take  their default values. RMdictionary (Optiona l; PDF 1.7 ) A render mode dictionary  that specifies the render  mode to use when rendering 3D artwork with this view (see  13.6.4.4, 3D  Render Mode Dictionaries ). If omitted, the render mode specified in the  3D artwork shall be used. LSdictionary (Optional; PDF 1.7) A lighting scheme dictionary  that specifies the  lighting scheme to be used when rendering 3D artwork with this view  (see 13.6.4.5, 3D Lighting Scheme Dictionaries ). If omitted, the lighting  scheme specified in the 3D artwork shall be used. SAarray(Optional; PDF 1.7 ) An array that contains  cross section dictionaries  (see 13.6.4.6, 3D Cross  Section Dictionaries ). Each cross section  dictionary provides parameters for applying a cross section to the 3D  artwork when using this view. An empty array signifies that no cross  sections shall be displayed.  NAarray(Optional; PDF 1.7; meaningful only if  NR is present) An array that  contains 3D node dictionaries (see  13.6.4.7, 3D Node Dictionaries ). Each node dictionary may contain entr ies that change the nodes state,  including its opacity and its position in world space. This entry and the  NR entry specify how the state  of each node shall be changed.  If a node dictionary is present mo re than once, only the last such  dictionary (using a depth-first traversal) shall be used.  NRboolean (Optiona l; PDF 1.7 ) Specifies whether nodes specified in the  NA array  shall be returned to their original states (as specified in the 3D artwork)  before applying transformation matrices  and opacity settings specified in  the node dictionaries. If  true, the artworks 3D node parameters shall be  restored to their original states and  then the dictionaries specified by the  NA array shall be applied. If  false, the dictionaries specified by the  NAarray shall be applied to the current states of the nodes.  In addition to the parameters specified by a 3D node dictionary, this flag  should also apply to any runtime parameters used by a conforming  reader.  Default value:  falseTable 304   Entries in a 3D view dictionary  (continued) Key Type Value",""],"531":["' Adobe Systems Incorporated 2008  All rights reserved 523PDF 32000-1:2008 coordinate system of the form XObject shall be defined to be the same as the ( x, y, 0) plane in the camera  coordinate system (see  13.6.5, Coordinate Systems for 3D ). Use of the  O entry is subject to the following restrictions.  NOTE 2 Failure to abide by them could result in misalignment of the overlay with the rendered 3D graphics:  It may be specified only in 3D view dictionar ies in which both a camera-to-world matrix ( MSand associated entries) and  a projection dictionary (the  P entry) are present.  The form XObject shall be associated with a spec ific view (not with the camera position de -fined by the 3D view dictionary). The conforming  reader should draw it only when the user  navigates using the 3D view, not when the user  happens to navigate to the same orientation  by manual means.  The confirming reader should draw it only if the  user has not invoked an y actions that alter the  artwork-to-world matrix. The  CO entry specifies the distance from the camera to the  center of orbit  for the 3D view, which is the point  around which the camera shall rotate when performing an orbit-style navigation.  Figure 69  illustrates camera  positioning when orbiting arou nd the center of orbit.  Figure  69   Rotation around the center of orbit NOTE 3 The  LS entry allows the lighting of the 3D artwork to  be changed without changing the artwork itself. This  enables consumers to view a given piece of 3D artw ork with a variety of lighting options without requiring  multiple copies of the 3D artwork stre am that differ only in lighting. It al so enables artwork with poor lighting to  be corrected in cases where the origin al content cannot be re-authored. See  13.6.4.5, 3D Lighting Scheme  Dictionaries. The  SA en try provides cross section information for clipping 3D artwork while its associated view is active. This  allows view authors to be more clear in calling out the  intended areas of interest for a particular view, some of  which might otherwise be completely obscured. See  13.6.4.6, 3D Cross Se ction Dictionaries.  The  NR an d  NA entries are meant to give a more accurate repr esentation of the 3D artwork at a given state.  These keys give view authors finer granularity in manipula ting the artwork to be presented in a particular way.  They also provide a means for returning node para meters to a known state after potential changes by  interactive features such as keyframe animations and JavaScript. See  13.6.4.7, 3D Node Dictionaries.  13.6.4.2 Projection Dictionaries A p rojection dictionary  (see  Table  305 ) defines the mapping of 3D came ra coordinates onto the target  coordinate system of the annotation. Each 3D view  may specify a projection dictionary by means of its  P entry.  NOTE Although view nodes can specify projection informati on, PDF consumers ignore it in favour of information in  the projection dictionary.","Center Of Orbit",""],"532":["PDF 32000-1:2008 524 ' Adobe Systems Incorporated 2008  All rights reserved PDF 1.6 introduces  near/far clipping . This type of clipping defines a  near plane  and a  far plane  (as shown in  Figure 70 ). Objects, or parts of objects, that are beyond the far plane or closer to the camera than the near  plane are not drawn. 3D objects shall be projected onto  the near plane and then scaled and positioned within  the annotations target coordinate system, as described  Ta b l e  305.Table  305    Entries in a projection dictionary   KeyType Value Subtypename (Required)  The type of projection. Valid values shall be  O (orthographic) or  P(perspective).  CSname (Optional)  The clipping style. Valid values shall be  XNF (explicit near/far) or  ANF (automatic near/far). Default value:  ANF.Fnumber (Optional; meaningful only if the value of  CS is XNF) The far clipping distance,  expressed in the camera coordinate  system. No parts of objects whose  zcoordinates are greater than the value of  this entry are drawn. If this entry is  absent, no far clipping occurs. Nnumber (Meaningful only if the value of  CS is XNF; required if the value of  Subtype is P) The near clipping distance, expressed in the camera coordinate system. No  parts of objects whose  z coordinates are less than the value of this entry are  drawn. If  Subtype is P, the value shall be positive; if  Subtype is O, the value  shall be non-negative, and the default value is 0.  FOV number (Required if  Subtype is P, ignored otherwise)  A number between 0 and 180,  inclusive, specifying the field of view of  the virtual camera, in degrees. It defines  a cone in 3D space centered around the  z axis and a circle where the cone  intersects the near clipping plane.  The circle, along with the value of  PS, specify  the scaling of the projected artwork wh en rendered in the 2D plane of the  annotation.  PSnumber  or name(Optional; meaningful only if  Subtype is P) An object that specifies the scaling  used when projecting the 3D artwork on to the annotations target coordinate  system. It defines the diameter of the circ le formed by the intersection of the near  plane and the cone specified by  FOV . The value may be one of the following:  A positive number that ex plicitly specifies the diam eter as a distance in the  annotations target  coordinate system. A name specifying that the diameter shall be set to the width ( W), height  (H), minimum of width and height ( Min), or maximum of width and height  (Max) of the annotations 3D view box. Default value: W.OSnumber (Optional; meaningful only if  Subtype is O) A positive number that specifies the  scale factor to be applied to both the  x and  y coordinates when projecting onto  the annotations target  coordinate system (the z coordinate is discarded). Default  value: 1.OBname (Op tional; PDF 1.7; meaningf ul only if Subtype is  O) A name that specifies a  strategy for binding (scaling to fit) the near planes  x and y coordinates onto the  annotations target coordinat e system. The scaling specified in this entry shall be  applied in addition to the scali ng factor specified by the  OS entry. The value may  be one of the following: W Scale to fit the width of the annotation HScale to fit the height of the annotation MinScale to fit the lesser of width or height of the annotation MaxScale to fit the greater of width or height of the annotation Absolute No scaling should occur due to binding.  Default value: Absolute.",""],"533":["' Adobe Systems Incorporated 2008  All rights reserved 525PDF 32000-1:2008 The  CS entry defines how the near and far planes are determined. A value of  XNF means that the  N and  Fentries explicitly specify the  z coordinate of the near and far planes, respectively. A value of  ANF  for CS means  that the near and far planes shall be determined automatically based on the objects in the artwork. The  Subtype entry specifies the type of pr ojection, which determines how objec ts are projected onto the near  plane and scaled. The possible values are  O for  orthographic projection  and  P for perspective projection .For orthographic projection, objects shall be project ed onto the near plane by simply discarding their  z value. They shall be scaled from units of t he near planes coordinate system to  those of the annotations target  coordinate system by the combined factors specified by the  OS entry and the OB entry.  For perspective projecti on, a given coordinate ( x, y, z) shall be projected onto the near plane, defining a 2D  coordinate ( x1, y1) using the following formulas:  where n is  the  z coordinate of the near plane. Scaling with perspective projection is more co mplicated than for orthographic projection. The  FOV entry  specifies an angle that defines a cone centered along the  z axis in the camera coordinate system (see  Figure  70). The cone intersects with th e near plane, forming a circular area on the near plane.  Figure 71  shows this  circle and graphics from the position of the camera.  Figure  70   Perspective projection of 3D artwork onto the near plane Figure  71   Objects projected onto the near clipping pl ane, as seen from the position of the camera","x1xnz---u=","y1ynz---u=","Far Clipping Plane  Near Clipping plane Objects projected onto near clipping plane  Circle dened by Field of View angle on near clipping plane Field of View angle","Z axis","FOV circle  Z axis projected onto near plane",""],"534":["PDF 32000-1:2008 526 ' Adobe Systems Incorporated 2008  All rights reserved The  PS entry specifies the diameter that  this circle will have when the graphics projected onto the near plane  are rendered in the annotations 3D view box (see  Figure 72 ). Although the diameter  of the circle determines  the scaling factor, graphics outside the circle shall also be  displayed, providing they fit within the view box, as  seen in the figure. Figure 73  shows the entire 3D annotation. In this case, th e 3D view box is smaller than the annotations  rectangle, which also contains 2D content outside the 3D view box. Figure 72   Positioning and scaling the near pl ane onto the annotations 3D view box Figure  73   3D annotation positioned on the page  13.6.4.3 3D Background Dictionaries A 3D ba ckground dictionary  defines the background over which a 3D view shall be drawn. Table  306 shows the  entries in a background dictionary. Currently, only a single opaque colour is supported, where the colour shall be defined in the  DeviceRGB  colour space. 3D artwork may include transparent objects; however, there is no  interaction between such objects and objects drawn below the annotation. In effect, the 3D artwork and its  background form a transparency group whose flattened results have an opacity of 1 (see  11, Transparency ). NOTE An annotations normal appearance should have the  same behaviour with respect to transparency when the  appearance is intended to depict the 3D  artwork. This does not apply when  the appearance is used for another  purpose, such as a comp atibility warning message.","3D Annotations 3DB box  Z axis projected onto near plane, aligned with center of 3DB box, scaled to t the width of the 3DB box","","New Planet Discovered!  The Daily News",""],"535":["' Adobe Systems Incorporated 2008  All rights reserved 527PDF 32000-1:2008 13.6.4.4 3D Render  Mode Dictionaries A 3D  render mode dictionary (PDF 1.7)  specifies the style in which the 3D artwork shall be rendered.  NOTE 1 Surfaces may be filled with opaque colours, they ma y be stroked as a wireframe , or the artwork may be  rendered with special lighting effects. NOTE 2 A render mode dictionary enables document authors  to customize the rendered appearance of 3D artwork to  suit the needs of the intended consumer, without reauthoring the artwork.  For conforming readers concerned  strictly with geometry, comple x artwork rendered using the  Wireframe  or  Points  style may have much better  performance without the added overhead  of texturing and lighting effects.  Artwork in a document intended for  print may have a much more integrated feel when using the  Illustration  render mode style.  The  RM entry in the 3D views dictionary ma y specify a 3D render mode dictionary. Ta b l e  307 shows the entries in a render mode dictionary. Table  306    Entries in a 3D background dictionary   Key Type Value Type name(Optional)  The type of PDF object that this  dictionary describes; if present,  shall be  3DBG  for a 3D background dictionary.  Subtypename(Optional)  The type of background. The only valid value shall be  SC (solid  colour), which indicates a single opaque colour. Default value:  SC.CSname or  array(Optional)  The colour space of the background. The only valid value shall be  the name  DeviceRGB . Default value:  DeviceRGB . PDF consumers shall be prepared to encounter other values that may be  supported in future versions of PDF.  C(various) (Optional)  The colour of the background, in the colour space defined by  CS. Default value: an array [1 1 1] repres enting the colour white when the value  of  CS is DeviceRGB .EAboolean (Optional)  If true, the background shall apply to the entire annotation; if  false, the background shall apply only to the rectangle specified by the  annotations 3D view box (the  3DB  entry in  Ta b l e  298). Default value:  false. Table  307    Entries in a render mode dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary  describes; if present, shall be  3DRenderMode .Subtypename (Required)  The type of render mode described by this  dictionary; see  Ta b l e  308 for specific values. If an  unrecognized value is encounter ed, then this render mode  dictionary shall be ignored.",""],"536":["PDF 32000-1:2008 528 ' Adobe Systems Incorporated 2008  All rights reserved For render modes that add a level of transparency to the rendering, the  O entry specifies the additional opacity  that shall be used. All such transparency effects use a standard additive blend mode. The  CV en try sets the crease value that shall be used when determining silhouette edges, which may be used  to adjust the appearance of illustrate d render modes. An edge  shared by two faces shall be considered a  silhouette edge if either of the following conditions is met:  One face is front-facing and the other is back-facing.  The angle between the two faces is greater than or equal to the crease value. ACarray(Optional)   An array that  specifies the  auxiliary colour  that shall be used when rendering the 3D image. The first entry in  the array shall be a colour sp ace; the subsequent entries  shall be values specifying colour values in that colour space.  The interpretation of this entry depends on the render mode  specified by the  Subtype entry, but it is often used to specify  a colour for drawing points or edges. The only valid colour space shall be  DeviceRGB . If a colour space other than  DeviceRGB  is specified, this entry shall be  ignored and the default value shall be used.  Default value:  [/DeviceRGB 0 0 0]  representing the colour  black. FCname or  array(Optional)   A name or array that specifies the  face color  to be used when rendering the 3D image. This entry shall be  relevant only when  Subtype  has a value of  Illustration . If the value of  FC is an array, the first entry in the array shall  be a colour space and the subseq uent entries shall be values  specifying values in  that colour space. The only valid colour  space is  DeviceRGB . Any colour space other than  DeviceRGB  shall be ignored and the default value shall be  used.  If the value of  FC is a name, it shall describe a colour. The  only valid name value shall  BG, specifying the current  background colour in use for displaying the artwork. If a name  other than  BG is encountered, this entry shall be ignored and  the background colour for the host annotation shall be used  (see Ta b l e  189).  Default value:  BGOnumber (Optional)  A number specifying the opacity of the added  transparency applied by some render modes, using a  standard additive blend. Default value: 0.5 CVnumber (Optional)  A number specifying the angle, in degrees, that  shall be used as the  crease value  when determining  silhouette edges. If two front-facing faces share an edge and  the angle between the normals of  those faces is greater than  or equal to the crease value, t hen that shared edge shall be  considered a silhouette edge. Default value: 45 Table 307   Entries in a render mode dictionary  (continued) KeyType Value",""],"537":["' Adobe Systems Incorporated 2008  All rights reserved 529PDF 32000-1:2008 Ta b l e  308 describes the render modes that may be specified in a render mode dictionary. Table  308   Render modes   ModeDescription Solid Displays textured and lit geometric shapes. In the case of artwork  that conforms to the  Universal 3D File Format  specification, these  shapes are triangles. The  AC entry shall be ignored. SolidWireframe Displays textured and lit geometric  shapes (triangles) with single  colour edges on top of them. The  colour of these edges shall be  determined by the  AC entry. Transparent Displays textured and lit geometric shapes (triangles) with an  added level of transparency. The AC entry shall be ignored. TransparentWireframe Displays textured and lit geometric shapes (triangles) with an  added level of transparency, with single colour opaque edges on  top of it. The colour of these edges shall be determined by the  ACentry. BoundingBox Displays the bounding box edges o f each node, aligned with the  axes of the local coordinate space  for that node. The colour of the  bounding box edges shall be determined by the  AC entry. TransparentBoundingBox Displays bounding boxes faces of each node, aligned with the  axes of the local coordinate space for that node, with an added  level of transparency. The colour of the bounding box faces shall  be determined by the  FC entry. TransparentBoundingBoxOutline Displays bounding boxes edges and faces of each node, aligned  with the axes of the local coor dinate space for that node, with an  added level of transparency. The colour of the bounding box  edges shall be determined by the  AC entry. The colour of the  bounding boxes faces shall be determined by the  FC entry. Wireframe Displays only edges in a single colour. The colour of these edges  shall be determined by the  AC entry. ShadedWireframe Displays only edges, though inte rpolates their colour between  their two vertices and applies lighting. The  AC entry shall be  ignored. HiddenWireframe Displays edges in a single colour, though removes back-facing  and obscured edges. The colour of these edges shall be  determined by the  AC entry. Vertices Displays only vertices in a single colour. The colour of these points  shall be determined by the  AC entry. ShadedVertices Displays only vertices, though uses  their vertex colour and applies  lighting. The  AC entry shall be ignored. Illustration Displays silhouette edges with surfaces, removes obscured lines.  The colour of these edges shall be determined by the  AC entry,  and the colour of the surfaces  shall be determined by the  FCentry. SolidOutline Displays silhouette edges with lit and textured surfaces, removes  obscured lines. The colour of these edges shall be determined by  the AC entry. ShadedIllustration Displays silhouette edges with  lit and textured surfaces and an  additional emissive term to remove  poorly lit areas of the artwork.  The colour of these edges  shall be determined by the  AC entry.",""],"538":["PDF 32000-1:2008 530 ' Adobe Systems Incorporated 2008  All rights reserved If a render mode type is encountered other than those described in  Ta b l e  308 , the render mode dictionary  containing that entry shall be ignored by its consumers.  This allows future documents using new render modes  to behave consistently with future documents using new 3D  view constructs that are ignored by older viewers.  13.6.4.5 3D Lighting Scheme Dictionaries A 3D lig hting scheme dictionary  (PDF 1.7) specifies the lighting to apply to 3D artwork. The  LS entry in the 3D  view may include a 3D lighting scheme dictionary.  Ta b l e  301 shows the entries in a 3D lighting scheme dictionary.  Ta b l e  310 describes the supported lighting sch emes. With the exception of the  Artwork lighting style, all the  lights specified in  Table  310 are  infinite lights (also known as  distant  lights). Unlike lights fr om a point source, all  rays from an infinite light source are emitted along  a single direction vector . For lights specifying an  ambient term, this term shall be added to the diffuse colour of an  objects material. All colo urs shall be specified in the  DeviceRGB  colour space.  When a style other than  Artwork is used, only those lights described shall be present; any lighting described in  the artwork shall not be used. Table  309    Entries in a 3D lighting scheme dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary  describes; if present, shall be  3DLightingScheme .Subtypename (Required)  The style of lighting scheme described by this  dictionary (see  Table  310 ). Table  310    3D lighting scheme styles   SchemeDescription ArtworkLights as specified in the 3D artwork.  This has the same effect as if the 3D  lighting scheme dictionary were omitted. NoneNo lights shall be used. That is, lightin g specified in the 3D artwork shall be  ignored. White Three blue-grey infinite lights, no ambient term  Light 1 Colour: < 0.38, 0.38, 0.45  >Direction: < -2.0, -1.5, -0.5 > Light 2 Colour: < 0.6, 0.6, 0.67 > Direction: < 2.0, 1.1, -2.5 > Light 3 Colour: < 0.5, 0.5, 0.57  >Direction: < -0.5, 0.0, 2.0 > DayThree light-grey infinite lights, no ambient term Light 1 Colour: < 0.5, 0.5, 0.5 > Direction: < -2.0, -1.5, -.5 > Light 2 Colour: < 0.8, 0.8, 0.9 > Direction: < 2.0, 1.1, -2.5 > Light 3 Colour: < 0.9, 0.9, 0.9 > Direction: < 0.02, 0.01, 2.0 > NightOne yellow, one aqua, and one blue infinite light, no ambient term Light 1 Colour: < 1, .75, .39 > Direction: < -2.0, -1.5, -0.5 > Light 2 Colour: < 0.31, 0.47, 0.55 > Direction: < 2.0, 1.1, -2.5 > Light 3 Colour: < .5, .5, 1.0 > Direction: < 0.0, 0.0, 2.0 >",""],"539":["' Adobe Systems Incorporated 2008  All rights reserved 531PDF 32000-1:2008 NOTE If a lighting scheme style is encountered other than those described in  Ta b l e  310, the lighting scheme  dictionary containing that entry shall  be ignored. This allows future documents using new lighting schemes to  behave consistently with future documents using new 3D  view constructs. That is, the expected behaviour is  for the conforming reader to ignore unrecogn ized lighting styles and 3D view constructs.  13.6.4.6 3D Cross Section Dictionaries A 3D cr oss section dictionary  (PDF 1.7) specifies how a portion of the 3D artwork shall be clipped for the  purpose of showing artwork cross sections. The  SA entry of a 3D view may specify multiple 3D cross section  dictionaries. HardThree grey infinite lights, moderate ambient term Light  Colour: < 0.5, 0.5, 0.5 > Direction: < -1.5, -1.5, -1.5 > Light 2 Colour: < 0.8, 0.8, 0.9  >Direction: < 1.5, 1.5, -1.5 > Light 3 Colour: < 0.9, 0.9, 0. 9 > Direction: < -0.5, 0, 2.0 > Ambient Colour: < 0.5, 0.5, 0.5 > PrimaryOne red, one green, and one blue infinite light, no ambient term Light 1 Colour: < 1, 0.2, 0.5 > Direction: < -2, -1.5, -0.5 > Light 2 Colour: < 0.2, 1.0, 0.5 > Direction: < 2.0, 1.1, -2.5 > Light 3 Colour: < 0, 0, 1 > Direction: < 0.0, 0.0, 2.0 >  BlueThree blue infinite lights, no ambient term Light 1 Colour: < 0.4, 0.4, 0.7 > Direction: < -2.0, -1.5, -0.5 > Light 2 Colour: < 0.75, 0.75, 0.95 > Direction: < 2.0, 1.1, -2.5 > Light 3 Colour: < 0.7, 0.7, 0.95  >Direction: < 0.0, 0.0, 2.0 > RedThree red infinite lights, no ambient term Light 1 Colour: < 0.8, 0.3, 0.4 > Direction: < -2.0, -1.5, -0.5 > Light 2 Colour: < 0.95, 0.5, 0.7 > Direction: < 2.0, 1.1, -2.5 > Light 3 Colour: < 0.95, 0.4, 0.5 > Direction: < 0.0, 0.0, 2.0 > CubeSix grey infinite lights aligned with the major axes, no ambient term Light 1 Colour: < .4, .4, .4 > Direction: < 1.0, 0.01, 0.01 > Light 2 Colour: < .4, .4, .4 > Direction: < 0.01, 1.0, 0.01 > Light 3 Colour: < .4, .4, .4 > Direction: < 0.01, 0.01, 1.0 > Light 4 Colour: < .4, .4, .4 > Direction: < -1.0, 0.01, 0.01 > Light 5 Colour: < .4, .4, .4 > Direction: < 0.01, -1.0, 0.01 > Light 6 Colour: < .4, .4, .4 > Dir ection: < 0.01, 0.01, -1.0 > CADThree grey infinite lights and one light attached to the camera, no ambient  termLight 1 Colour: < 0.72, 0.72, 0.81 > Direction: < 0.0, 0.0, 0.0 > Light 2 Colour: < 0.2, 0.2, 0.2 > Direction: < -2.0, -1.5, -0.5 > Light 3 Colour: < 0.32, 0.32, 0.32 > Direction: < 2.0, 1.1, -2.5 > Light 4 Colour: < 0.36, 0.36, 0.36 > Direction: < 0.04, 0.01, 2.0 > Headlamp Single infinite light attached to the camera, low ambient term Light 1 Colour: < 0.8, 0.8, 0.9  >Direction: < 0.0, 0.0, 0.0 > Ambient Colour: < 0.1, 0.1, 0.1 > Table 310   3D lighting scheme styles  (continued) Scheme Description",""],"540":["PDF 32000-1:2008 532 ' Adobe Systems Incorporated 2008  All rights reserved NOTE Cross sections enable conforming readers to display otherwise hidden parts of the  artwork. They also allow  users to comment on cross sections, using markup a nnotations. For example, markup annotations can be  used to apply markup annotations to a cross section or  to measure distances in a cr oss section. If multiple  cross sections are specified for a view, the markup annotat ions in the view apply to all cross sections in the  view. Ta b l e  311  shows the entries in a 3D cross section dictionary. The  C en try specifies the center of the cutting plane. Th is implies that the plane passes through the center  point, but it is also the point of reference  when determining the orientation of the plane. The  O a rray indicates the orientation of the cutting plane,  taking into account its center. The orientation may be  determined by a two-step process: Table  311    Entries in a 3D cross section dictionary   KeyType Value Type name(Optional)  The type of PDF object that this di ctionary describes; if present, shall  be 3DCrossSection  for a 3D cross section dictionary. Carray(Optional)  A three element array specifying the center of rotation on the cutting  plane in world space coordinates (see  13.6.5, Coordinate Systems for 3D ).Default value: [0 0 0] specifying a cutt ing plane rotating about the origin of the  world space. Oarray(Required)  A three-element array specifying the orientation of the cutting plane  in world space, where each value represents the orientation in relation to the X,  Y, and Z axes, respectively (see  13.6.5, Coordinate Systems for 3D ). Exactly one of the values shall be  null , indicating an initial state of the cutting plane  that is perpendicular to the corresponding  axis and clipping all geometry on the  positive side of that axis. The other two  values shall be numbers indicating the  rotation of the plane, in degrees, around  their corresponding axes. The order in  which these rotations are applied shall match the order in which the values  appear in the array. Default value: [null 0 0] specifying a cutting plane that is perpendicular to the X  axis and coplanar with the Y and Z axes. POnumber (Optional)  A number in the range [0, 1] indicating the opacity of the cutting  plane using a standard additive blend mode. Default value: 0.5 PCarray(Optional)   An array that specifies the colour  for the cutting plane. The first entry  in the array is a colour space, and th e remaining entries are values in that  colour space. The only valid colour space is  DeviceRGB . If a colour space  other than  DeviceRGB  is specified, this entry sh all be ignored and the default  value shall be used. Default value: [/DeviceRGB 1 1 1]  representing the colour white. IVboolean (Optional)  A flag indicating the visibility of  the intersection of the cutting plane  with any 3D geometry. If  true, then the intersection shall be visible. If  false , then the intersection shall not be visible. Default value:  falseICarray(Optional)  An array that specifies the colour  for the cutting planes intersection  with the 3D artwork. The first entry in the array is a colour space, and the  remaining entries are values in that colour space. The only valid colour space  is DeviceRGB . If a colour space other than  DeviceRGB  is specified, this entry  shall be ignored and the default value s hall be used. This entry is meaningful  only if IV is true . Default value: [/DeviceRGB 0 1 0]  representing the colour green.",""],"541":["' Adobe Systems Incorporated 2008  All rights reserved 533PDF 32000-1:2008  The plane shall be situated such that it passes through point  C, and oriented such that it is perpendicular to  the axis specified by the array entry whose value is null.  For each of the other two axes, the plane shall be  rotated the specified number of degrees around the  associated axis, while maintaining  C as a fixed point on the plane. Since the two axes are perpendicular,  the order in which the rotations are performed is irrelevant. The  PO entry specifies the opacity of the plane itself when rendered, while the  PC entry provides its colour.  When the  PO entry is greater than 0, a visual representation  of the cutting plane shall be rendered with the 3D  artwork. This representation is a square with a side lengt h equal to the length of t he diagonal of the maximum  bounding box for the 3D artwork, taking into ac count any keyframe animations present. When the  PO entry is  0, no visible representation of the cutting plane shall be rendered. The  IV en try shall be a boolean value that determines whethe r a visual indication sha ll be drawn of the planes  intersection with the 3D artwork. If  such an indication is drawn, the  IC entry shall specify its colour. EXAMPLE The following example describes a set of views and corresponding cross sections that illustrate the  various effects of orientation. 3 0 obj%CrossSection1 <</Type /3DCrossSection /C [0 0 0] /O [null 0 0] /PO 0.35/PC [/DeviceRGB 0.75 0.86 1] /IV true /IC [/DeviceRGB 0 1 0] >>endobj 4 0 obj%CrossSection2 <</Type /3DCrossSection /C [0 0 0] /O [null -30 0] /PO 0.35/PC [/DeviceRGB 0.75 0.86 1] /IV true /IC [/DeviceRGB 0 1 0] >>endobj 5 0 obj%CrossSection3 <</Type /3DCrossSection /C [0 0 0] /O [null 0 30] /PO 0.35/PC [/DeviceRGB 0.75 0.86 1] /IV true /IC [/DeviceRGB 0 1 0] >>endobj 6 0 obj%CrossSection4 <</Type /3DCrossSection",""],"542":["PDF 32000-1:2008 534 ' Adobe Systems Incorporated 2008  All rights reserved /C [0 0 0] /O [null -30 30] /PO 0.35/PC [/DeviceRGB 0.75 0.86 1] /IV true /IC [/DeviceRGB 0 1 0] >>endobj 7 0 obj%View0 <</Type /3DView /XN (NoCrossSection) /SA [] ... >>endobj 8 0 obj%View1 <</Type /3DView /XN (CrossSection1) /SA [3 0 R] ... >>endobj 9 0 obj%View2 <</Type /3DView /XN (CrossSection2) /SA [4 0 R] ... >>endobj 10 0 obj %View3 <</Type /3DView /XN (CrossSection3) /SA [5 0 R] ... >>endobj 11 0 obj %View4 <</Type /3DView /XN (CrossSection4) /SA [6 0 R] ... >>endobj The following illustrations show the views described in the previous example, some  of which include cross  sections.",""],"543":["' Adobe Systems Incorporated 2008  All rights reserved 535PDF 32000-1:2008 Figure  74   Rendering of the 3D artwork using View0 (no cross section) Figure 74  through  Figure 78  use world coordinates whose origin is th e center of the cube. The axes illustrated  in each diagram show the relative orientation of the wo rld coordinate axes, not the  actual position of those  axes. These axes are not part of the 3D artwork used in this example. Figure  75   Rendering of the 3D artwork using View1  (cross section perpendicular to the x axis) Figure 75  shows the cross section specified for the  3DView  that references CrossS ection1. The illustration  shows the edges of the cutting plane ending at the edge s of the annotations rectangle. This cross section  specifies a plane with the  following characteristics:   Includes the world art origin: /C [0 0 0]  Perpendicular to the X axis and parallel to the Y and Z axes: /O [ null 0 0]  Opacity of the cutting plane is 35%: /PO 0.35",""],"544":["PDF 32000-1:2008 536 ' Adobe Systems Incorporated 2008  All rights reserved  Colour of the cutting plane is light blue: /PC [/DeviceRGB 0.75 0.86 1]  Intersection of the cutting plane wi th the object is visible: /IV true  Colour of the intersection of the cu tting plane and the object is green:  /IC [/DeviceRGB 0 1 0]Figure  76   Rendering of the 3D artwork using View2  (cross section rotated around the y axis by -30 degrees) Figure 76  shows the cross sect ion specified for the  3DView  that references CrossSec tion2. This cross section  specifies a plane that differs from the one specified in CrossSection1 ( Figure 75 ) in the following way:   Perpendicular to the  X axis, rotated -30 degrees around the  Y axis, and parallel to the  Z axis: /O [ null -30 0]Figure  77   Rendering of the 3D artwork using View3  (cross section rotated around the z axis by 30 degrees)",""],"545":["' Adobe Systems Incorporated 2008  All rights reserved 537PDF 32000-1:2008 Figure 77  shows the cross sect ion specified for the  3DView  that references CrossSec tion3. This cross section  specifies a plane that differs from the one specified in CrossSection1 ( Figure 75 ) in the following way:   Perpendicular to the  X axis, parallel to the  Y axis, and rotated 30 degrees around the  Z axis: /O [ null 0 30] Figure  78   Rendering of the 3D artwork using View4 (cross section rotated around the y axis by -30 degrees and around the z axis by 30 degrees) Figure 78  shows the cross sect ion specified for the  3DView  that references CrossSec tion4. This cross section  specifies a plane that differs from the one specified in CrossSection1 ( Figure 75 ) in the following way:   Perpendicular to the  X axis, rotated -30 degrees around the  Y axis, and rotated 30 degrees around the  Zaxis: /O [ null -30 30] 13.6.4.7 3D Node Dictionaries A 3D view may specify a 3D node dictionary  (PDF 1.7) , which specifies particular areas of 3D artwork and the  opacity and visibility with which indivi dual nodes shall be displa yed. The 3D artwork shall be contained in the  parent 3D stream object. The  NA entry of the 3D views dictionary may specify multiple 3D node dictionaries for  a particular view.  NOTE 1 While many PDF dictionaries reference 3D artwork in its  entirety, it is often useful  to reference 3D artwork at a  more granular level. This enables properties such as visibility, opacity, and orientation to be applied to subsets  of the 3D artwork. These controls  enable underlying nodes to be revealed, by making the overlying nodes  transparent or by moving them out of the way. NOTE 2 Do not confuse nodes with view nodes. A node is a PDF di ctionary that specifies an  area in 3D artwork, while  a view node is a parameter in the 3D artwork that specifies a view.  Ta b l e  312 shows the entries in a 3D node dictionary.",""],"546":["PDF 32000-1:2008 538 ' Adobe Systems Incorporated 2008  All rights reserved The  N entry specifies which node in the 3D stream corresponds to this node dictionary. The  O en try describes the opacity that shall be  used when rendering this node, and the  V entry shall determine  whether or not the node is rendered at all. While a node with an opacity of 0 shall be rendered in the same way  as a non-visible node, having a separate value for the visi bility of a node allows in teractive conforming readers to show/hide partially transparent nodes, without overwriting the intended  opacity of those nodes. The  M  entry specifies the nodes matrix re lative to its parent, in world coordinates. If an hierarchy of nodes is  intended to be repositi oned while still maintaining its  internal structure, then only  the node at the root of the  hierarchy needs to be adjusted. EXAMPLE The following example shows a 3D view  specifying an array  of node parameters.  3 0 obj% Default node params with all shapes visible and opaque [ << /Type /3DNode /N (Sphere) /O 1 /V true  /M [...]>> << /Type /3DNode /N (Cone) /O 1 /V true >> Table  312    Entries in a 3D node dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary  describes; if present, shall be  3DNode  for a 3D node  dictionary. Ntext string(Required)  The name of the node being described by the  node dictionary. If the  Subtype of the corresponding 3D  Stream is  U3D, this entry corresponds to the field Node block  name, as described in the  Universal 3D file format specification (see  Bibliography ). In the future, nodes may be  described using other 3D conventions. NOTE When comparing this entry to node names for a  particular convention (such as Universal 3D),  conforming readers shall translate between the  PDF text encoding used by PDF and the  character encoding specified in the 3D stream.  Onumber (Optional)  A number in the range [0, 1] indicating the opacity  of the geometry supplied by this node using a standard  additive blend mode. If this entry is absent, the viewer shall use the opacity  specified for the parent node or for the 3D artwork (in  ascending order).  Vboolean (Optional)  A flag indicating the visibility of this node. If  true, then the node is visible. If  false, then the node shall not be  visible.If this entry shall be absent, the viewer shall use the visibility  specified for the parent node or for the 3D artwork (in  ascending order).  Marray(Optional)  A 12-element 3D transformation matrix that  specifies the position and orientation of this node, relative to  its parent, in world coordinates (see  13.6.5, Coordinate  Systems for 3D ).",""],"547":["' Adobe Systems Incorporated 2008  All rights reserved 539PDF 32000-1:2008 << /Type /3DNode /N (Cube) /O 1 /V true >> ]4 0 obj% Params with the cone hidden and the sphere semi-transparent [ << /Type /3DNode /N (Sphere) /O 0.5 /V true >> << /Type /3DNode /N (Cone) /O 1 /V false >><< /Type /3DNode /N (Cube) /O 1 /V true >> ]endobj 5 0 obj%View1, using the default set of node params <</Type /3DView /XN (View1) /NA 3 0 R ... >>endobj 6 0 obj%View2, using the alternate set of node params <</Type /3DView /XN (View2) /NA 4 0 R ... >>endobj",""],"548":["PDF 32000-1:2008 540 ' Adobe Systems Incorporated 2008  All rights reserved Figure  79   Rendering of the 3D artwork using  View1 (all shapes visible and opaque) Figure 79  shows a view whose node array includes three  nodes, all of which shall be rendered with the  appearance opaque (/O 1) and visible (/V true).  Figure  80   Rendering of the 3D artwork using View2 (the cone is hidden and the sphere is semi- transparent) Figure 80  shows a view with a node array that specifies the same three nodes used in  Figure 79 . These nodes  have the following display c haracteristics:   The node named Sphere is partially transparent (/O 0.5) and visible (/V true)  The node named Cone is opaque (/O 1) and invisible (/V false)  The node named Cube is opaque (/O 1) and visible (/V true)",""],"549":["' Adobe Systems Incorporated 2008  All rights reserved 541PDF 32000-1:2008 13.6.5 Coordinate Systems for 3D  3D artwork is a collection of object s whose positions and geometry shall be specified using  three-dimensional  coordinates. 8.3, Coordinate Systems,  discusses the concepts of two-di mensional coordinate systems, their  geometry and transformations. This sub-clause extend s those concepts to include the third dimension. As described in  8.3, Coordinate Systems,  positions shall be defined in terms of pairs of  x and y coordinates  on the Cartesian plane. The origin of the plane specifies the location (0, 0);  x values increase to the right and  yvalues increase upward. For three-dimensional graphics, a third axis, the  z axis, shall be used. The origin shall  be at (0, 0, 0); positive  z values increase going into the page.  In two-dimensional graphics, the transformation matrix tr ansforms the position, size, and orientation of objects  in a plane. It is a 3-by-3 matrix, where only six of th e elements may be changed; therefore, the matrix shall be expressed in PDF as an array of six numbers:  In 3D graphics, a 4-by-4 matrix shall be used to transf orm the position, size, and or ientations of objects in a  three-dimensional coordinate system. Only the first three  columns of the matrix may be  changed; therefore, the  matrix shall be expressed in PDF as an array of 12 numbers: 3D coordinate transformations shall be expressed as matrix transformations: Carrying out the multiplicatio n has the following results: Position and orientation of 3D artwork typically involv es translation (movement) and rotation along any axis.  The virtual camera represents the view of the artwor k. The relationship between camera and artwork may be  thought of in two ways:  The 3D artwork is in a fixed position and orientat ion, and the camera moves to different positions and  orientations.  The camera is in a fixed location, and  the 3D artwork is translated and rotated.","ab0 cd0 tx ty 1 abcdtxty =","abc0 def0 ghi0 tx ty tz 1 abcdefghitxtytz =","x’ y’ z’ 1 x y z 1 abc0 def0 ghi0 tx ty tz 1 u=","x’ axdygztx +u+u+u=","y’ bxeyhzty +u+u+u=","z’ c x f y i z tz +u+u+u=",""],"550":["PDF 32000-1:2008 542 ' Adobe Systems Incorporated 2008  All rights reserved Both approaches may achieve the same visual effects; in  practice, 3D systems typically use a combination of  both. Conceptually, th ere are three distinct  coordinate systems:  The  artwork coordinate system .The  camera coordinate system , in which the camera shall be positioned  at (0, 0, 0) facing out along the  positive  z axis, with the positive  x axis to the right and the positive  y axis going straight up.   An intermediate  system called the  world coordinate system .Two 3D transformation matrices shall be used in coordinate conversions: The  a rtwork-to-world matrix  specifies the position and orientation of the artwork in the world coordinate  system. This matrix shall be contained in the 3D stream.  The  c amera-to-world matrix  specifies the position and orientation of the camera in the world coordinate  system. This matrix shall be  specified by either the  C2W or  U3DPath entries of the 3D view dictionary. When drawing 3D artwork in a 3D annotations target coordinate syst em, the follo wing transformations take  place: a) Artwork coordinates shall be transformed to world coordinates: b) World coordinates shall be transformed to camera coordinates: c) The first two steps can be expressed as a single equation, as follows: d) Finally, the camera coordinates shall be projected into two dimensions, eliminating the  z coordinate, then  scaled and positioned wi thin the annotations ta rget coordinate system. 13.6.6 3D Markup Beginning with PDF 1.7, users may comment on specific views of 3D artwork by using markup annotations  (see  12.5.6.2, Markup Annotations ). Markup annotations (as other annotations) are normally associated with  a location on a page. To associate the markup with a specif ic view of a 3D annotation, the annotation dictionary  for the markup annotation contains an  ExData  entry (see  Ta b l e  174 ) that specifies the 3D annotation and view.  Ta b l e  313 describes the entries in an  external data dictionary used  to markup 3D annotations.","xwywzw1xayaza1awu=","xcyczc1xwywzw1cw1u=","xcyczc1xayaza1aw cw 1uu=",""],"551":["' Adobe Systems Incorporated 2008  All rights reserved 543PDF 32000-1:2008 In a Markup3D  ExData  dictionary, the  3DA entry identifies the 3D annotat ion to which the markup shall be associated. Even though the markup annotation exists alongside the associated annotation in the pages  Annots  array, the markup may be t hought of as a child of the  3DA annotation. The  3DV  entry specifies the markups associated 3D view . The markup shall only be printed and displayed  when the specified view is the current view of its parent  3D annotation. This ensures  that the proper context is  preserved when the markup is displayed.  NOTE An equivalent view is not sufficie nt; if more than one markup specify eq uivalent views represented by different  objects, the markups will not display simultaneously. The  MD5  entry gives conforming readers a means to detect whether or not the 3D stream of the 3D annotation  specified by  3DA has changed. If the 3D stream has changed, the context provided by the  3DV entry may no  longer apply, and the markup may no longer be useful. Any action taken as a response to such a situation is  dependent on the conforming reader, but a warning shall be issued to the user. EXAMPLE The following example shows ho w markup annotations can be associated with particular views. 2 0 obj % 3D stream data with two named views <</Type /3D /Subtype /U3D /VA [4 0 R 5 0 R] ... >>stream... endstream endobj 3 0 obj % 3D annotation <</Type /Annot /Subtype /3D /3DD 2 0 RTable  313   Entries in an external data dictionary used to markup 3D annotations   KeyType Value Type name (Required)  The type of PDF object that this dictionary describes; if present,  shall be  ExData  for an external data dictionary. Subtypename (Required)  The type of external data that this dictionary describes; shall be  Markup3D for a 3D comment. The only defined value is  Markup3D. 3DAdictionary or  text string (Required)  The 3D annotation to which this markup annotation applies. The  3D annotation may be specified as a child dictionary or as the name of a 3D  annotation, as specified by its  NM entry. In the latter case, the 3D annotation  and the markup annotation shall be on the same page of the document. 3DVdictionary (Required)  The 3D view that this markup annotation is associated with. The  annotation will be hidden unless this view is currently being used for the 3D  annotation specified by  3DA.MD5byte string  (Optional ) A 16-byte string that contains the checksum of the bytes of the 3D  stream data that this 3D comment  shall be associated with. The checksum  shall be calculated by applying the standard MD5 message-digest algorithm  (described in Internet RFC 1321,  The MD5 Message-Digest Algorithm ; see the Bibliography ) to the bytes of the stream dat a. This value shall be used to  determine if artwork data has changed since this 3D comment was created.",""],"552":["PDF 32000-1:2008 544 ' Adobe Systems Incorporated 2008  All rights reserved ... >>endobj 4 0 obj % CommentView1 <</Type /3DView /XN (CommentView1) ... >>endobj 5 0 obj % CommentView2 <</Type /3DView /XN (CommentView2) ... >>endobj 6 0 obj % Cloud comment with no ExData <</Type /Annot /Subtype /Polygon /IT /PolygonCloud ... >>endobj 7 0 obj % Callout comment on CommentView1 <</Type /Annot /Subtype /FreeText /IT /FreeTextCallout /ExData << /Type /Markup3D /3DA 3 0 R/3DV 4 0 R>>... >>endobj 8 0 obj % Dimension comment on CommentView2 <</Type /Annot /Subtype /Line/IT /LineDimension /ExData << /Type /Markup3D /3DA 3 0 R/3DV 5 0 R>>... >>",""],"553":["' Adobe Systems Incorporated 2008  All rights reserved 545PDF 32000-1:2008 endobj 9 0 obj % Stamp comment on CommentView2 <</Type /Annot /Subtype /Stamp /ExData << /Type /Markup3D /3DA 3 0 R /3DV 5 0 R >>... >>endobj The following illustrations show the pl acement of markup on annotations on  different views of the same 3D  artwork. Figure 81   3D artwork set to its default view Figure 81  shows the default view, which has no markup annotations. Figure 82   3D artwork set to CommentView1 Figure 82  shows another view to which a markup annotation is applied.",""],"554":["PDF 32000-1:2008 546 ' Adobe Systems Incorporated 2008  All rights reserved Figure  83   3D artwork set to CommentView2  Figure 83  shows a view referenced by two markup annotations:  A line annotation (/Subtype /Lin e) with a line dimension intent  (/IT/ LineDimension)  A stamp annotation (/Subtype /Stamp)",""],"555":["' Adobe Systems Incorporated 2008  All rights reserved 547PDF 32000-1:2008 14 Document Interchange 14.1 General The features described in this clause do not affect t he final appearance of a document. Rather, these features  enable a document to include higher-level information that is useful for the interchange of documents among  conforming products:  Pr ocedure sets  (14.2, Procedure Sets ) that define the implementation of PDF operators  Me tadata  (14.3, Metadata ) consisting of general information about a document or a component of a  document, such as its title, author , and creation and modification dates  File identifiers (14.4, File Identifiers ) for reliable reference from one PDF file to another  Page-piece dictionaries (14.5, Page-Piece Dictionaries ) allowing a conforming product to embed private  data in a PDF document for its own use  Ma rked-content  operators ( 14.6, Marked Content ) for identifying portions  of a content stream and  associating them with additional proper ties or externally specified objects  Logical structure  facilities ( 14.7, Logical Structure ) for imposing a hierarchical organization on the content  of a document  T agged PDF  (14.8, Tagged PDF ), a set of conventions for using the  marked content and logical structure  facilities to facilitate the extraction and reus e of a documents content  for other purposes   Various ways of increasing the  accessibility of a document to users with disabilities ( 14.9, Accessibility  Support ), including the identification of  the natural language in which it  is written (such as English or  Spanish) for the benefit of a text-to-speech engine  The  Web Capture  extension ( 14.10,     Web Capture ), which creates PDF files  from Internet-based or  locally resident HTML, PDF, GIF, JPEG, and ASCII text files   Facilities supporting prep ress production workflows ( 14.11, Prepress Support ), such as the specification  of p age boundaries  and the generation of  printers marks , colour separations , output intents , traps , and  low-resolution  proxies  for high-resolution images 14.2 Procedure Sets The PDF operators used in content streams are grou ped into categories of related operators called  procedure  sets  (see  Ta b l e  314 ). Each procedure set corresponds to a name d resource containing the implementations of  the operators in that procedure set. The  ProcSet entry in a content streams resource dictionary (see  7.8.3, Resource Dictionaries ) shall hold an array consisting of the names of the procedure sets used in that content  stream. These procedure sets shall be used only when t he content stream is printe d to a PostScript output  device. The names identify PostScript procedure sets th at shall be sent to the device to interpret the PDF  operators in the content stream. Each element of this  array shall be one of the predefined names shown in  Ta b l e  314. Table  314   Predefined procedure set  Name Category of operators PDFPainting and graphics state  Text Text  ImageB Grayscale images or image masks",""],"556":["PDF 32000-1:2008 548 ' Adobe Systems Incorporated 2008  All rights reserved Beginning with PDF 1.4, this  feature is considered obsole te. For compatibility with ex isting confor ming readers,  conforming writers should continue to specify pr ocedure sets (preferably, all of those listed in  Ta b l e  314  unless it is known that fewer are needed).  However, conforming readers should not depend on the correctness of this  information.  14.3 Metadata 14.3.1 General A PDF document may include general information, such  as the documents title, author, and creation and  modification dates. Such global information about the  document (as opposed to its  content or structure) is  called metadata  and is intended to assist in cataloguing an d searching for documents in external databases.  Beginning with PDF 1.4, metadata may also be specified for individual components of a document.  Metadata may be stored in a PDF document in either of the following ways:  In a  metadata stream (PDF 1.4)  associated with the document or  a component of the document ( 14.3.2,  Metadata Streams )  In a  document information dictionary  associated with the document ( 14.3.3, Document Information  Dictionary )NOTE Document information dictionaries is the original  way that metadata was included in a PDF file. Metadata  streams were introduced in PDF 1.4 and is now  the preferred method to include metadata. 14.3.2 Metadata Streams Metadata, both for an entire document and for com ponents within a document, may be stored in PDF streams  called metadata streams (PDF 1.4) . NOTE 1 Metadata streams have the following advant ages over the document information dictionary:   PDF-based workflows often embed metadata-bearing ar twork as components within larger documents.  Metadata streams provide a standard way of pres erving the metadata of these components for  examination downstream. PDF-aware co nforming products should be able to derive a list of all metadata- bearing document components from the PDF document itself.   PDF documents are often made available on the Web or  in other environments, where many tools routinely  examine, catalogue, and classify documents. These to ols should be able to understand the self-contained  description of the document even  if they do not understand PDF.  Besides the usual entries common to all stream dictionaries (see  Ta b l e  5), the metadata stream dictionary shall  contain the additional entries listed in  Ta b l e  315 . The contents of a metadata stream shall be the metadat a represented in Extensible Markup Language (XML).  NOTE 2 This information is visible as plain text to tools t hat are not PDF-aware only if  the metadata stream is both  unfiltered and unencrypted.  ImageC Colour images  ImageI Indexed (colour-table) images  Table 314   Predefined procedure set (continued) Name Category of operators",""],"557":["' Adobe Systems Incorporated 2008  All rights reserved 549PDF 32000-1:2008 NOTE 3 The format of the XML representing the metadata is  defined as part of a fram ework called the Extensible  Metadata Platform (XMP) and described in the Adobe document  XMP: Extensible Metadata Platform  (see the  Bibliography ). This framework provides a way to use XML  to represent metadata describing documents and  their components and is intended to be adopted by a wider  class of products than just those that process PDF.  It includes a method to embed XML data within non-XML data files in a platform-independent format that can  be easily located and accessed by simple scanning rat her than requiring the document file to be parsed.  A metadata stream may be attached to a document through the  Metadata  entry in the document catalogue  (see  7.7.2, Document Catalog ). The metadata framework provides a date stamp for metadata expressed in  the framework. If this date stamp is equal to or la ter than the document modification date recorded in the  document information dictionary, the metadata stream  shall be taken as authoritative. If, however, the  document modification date recorded in the document  information dictionary is later than the metadata  streams date stamp, the document has likely been saved by  a writer that is not awar e of metadata streams. In  this case, information stored in the document information  dictionary shall be taken to override any semantically  equivalent items in the metadata stream. In addition, PDF document components represented as a stream or  dictionary may have a  Metadata  entry (see  Ta b l e  316 ). In general, any PDF stream or dictionary may have metadata a ttached to it as long as the stream or dictionary  represents an actual information resource, as opposed  to serving as an implementation artifact. Some PDF  constructs are considered implementational, and hence may not have associated metadata. When there is ambiguity about exactly which stream or dictionary may bear the  Metadata  entry, the metadata  shall be attached as close as possible to the object  that actually stores the data resource described.  NOTE 4 Metadata describing a tiling pattern should be attached  to the pattern streams dictionary, but a shading should  have metadata attached to the shading dictionary rather  than to the shading pattern dictionary that refers to it.  Similarly, metadata describing an  ICCBased  colour space should be attach ed to the ICC profile stream  describing it, and metadata for fonts should be attached  to font file streams rather  than to font dictionaries.  NOTE 5 In tables describing document co mponents in this specification, the  Metadata  entry is listed only for those in  which it is most likely to be used. Keep in mind, how ever, that this entry may appear in other components  represented as streams or dictionaries.   In addition, metadata may also be associated with marked content within a content stream. This  association shall be created by including an entry  in the property list dictionary whose key shall be Metadata  and whose value shall be the metadata stream dictionary. Because this construct refers to an  object outside the content stream, the property list is  referred to indirectly as a named resource (see  14.6.2, Property Lists ).14.3.3 Document Information Dictionary The optional  Info entry in the trailer of a PDF file (see  7.5.5, File Trailer ) shall hold a  document information  dictionary  containing metadata for the document;  Table  317 shows its contents. Any entry whose value is not  known should be omitted from the dictionary rather  than included with an empty string as its value.  Table  315    Additional entries in a metadata stream dictionary   KeyType Value Type name (Required)  The type of PDF object that this dictionary describes; shall be  Metadata  for a metadata stream.  Subtypename (Required)  The type of metadata stream that this dictionary describes; shall  be  XML. Table  316    Additional entry for components having metadata   KeyType Value Metadata stream(Optional; PDF  1.4) A metadata stream containing metadata for the  component.",""],"558":["PDF 32000-1:2008 550 ' Adobe Systems Incorporated 2008  All rights reserved Some conforming readers may choose to permit search es on the contents of the document information  dictionary. To facilitate browsi ng and editing, all keys in the dictionary  shall be fully spelled out, not abbreviated.  New keys should be chosen with care so that they make sense to users.  The value associated with any key not specifically mentioned in  Ta b l e  317  shall be a text string. Although conforming readers may store custom metadata  in the document information dictionary, they may not  store private content or structural information ther e. Such information shall be stored in the document  catalogue instead (see  7.7.2, Document Catalog ). EXAMPLE This example shows a typical  document informat ion dictionary.  1 0 obj << /Title  ( PostScript Language Reference, Third Edition  ) /Author  ( Adobe Systems Incorporated  ) /Creator  ( Adobe FrameMaker 5  . 5 . 3 for Power Macintoshﬁ  ) /Producer  ( Acrobat Distiller 3  . 01 for Power Macintosh  ) /CreationDate  ( D : 19970915110347  - 08 ’ 00 ’ ) /ModDate  ( D : 19990209153925  - 08 ’ 00 ’ )>>endobj Table  317    Entries in the document information dictionary   KeyType Value Title text string (Optional; PDF  1.1 ) T he documents title.  Author","text string (Optional)   The name of the person who created the document.  Subject text string (Optional; PDF  1.1)  T he subject of the document.  Keywords text string (Optional; PDF  1.1)  Keywo rds associated with the document.  Creator text string (Optional)  If the document was converted to PDF from another format,  the name of the conforming product th at created the original document  from which it was converted.  Producer text string (Optional)  If the document was converted to PDF from another format,  the name of the conforming product that converted it to PDF.  CreationDate date (Optional)  The date and time the document was created, in human- readable form (see  7.9.4, Dates ). ModDatedate (Required if  PieceInfo is present in the document catalogue;  otherwise optional; PDF  1.1)  T he date and time the document was  most recently modified, in human-readable form (see  7.9.4, Dates ). Trapped name (Optional; PDF  1.3) A name object indicating whether the document  has been modified to include trapping information (see  14.11.6,  Trapping Support ):  True The document has been fully  trapped; no further trapping  shall be needed. This shall be the name  True , not the boolean value  true. False The document has not yet been trapped. This shall be the  name  False , not the boolean value  false .UnknownEither it is unknown whet her the document has been  trapped or it has been partly but not yet fully trapped; some  additional trapping may still be needed.  Default value: Unknown . NOTE The value of this entry ma y be set automatically by the  software creating the documents trapping information, or  it may be known only to a human operator and entered  manually.",""],"559":["' Adobe Systems Incorporated 2008  All rights reserved 551PDF 32000-1:2008 14.4 File Identifiers PDF files may contain references to other PDF files (see  7.11, File Specifications ). Simply storing a file name,  however, even in a platform-independent format, does not  guarantee that the file can be found. Even if the file  still exists and its name has  not been changed, different server software a pplications may identify it in different  ways. Servers running on DOS platforms convert all file names to 8 characters and a 3-character extension.  Different servers may use different strategies fo r converting longer file names to this format.  External file references may be made more reliable by including a  file identifier (PDF 1.1)  in the file and using it  in addition to the normal platform-based file designation.  Matching the identifier in the file reference with the  one in the file confirms whether the correct file was found.  File identifiers shall be defined by the optional  ID entry in a PDF files  trailer dictionary (see  7.5.5, File Trailer ). The ID entry is optional but should be used. The value of  this entry shall be an array of two byte strings. The  first byte string shall be a permanent identifier based on  the contents of the file at  the time it was originally  created and shall not change when the file is increm entally updated. The second byte string shall be a  changing identifier based on the files  contents at the time it was last update d. When a file is first written, both  identifiers shall be set to th e same value. If both identifiers match when  a file reference is  resolved, it is very  likely that the correct and unchanged file  has been found. If only the first iden tifier matches, a different version  of the correct file has been found.  To help ensure the uniqueness of file identifiers, they  should be computed by means of a message digest  algorithm such as MD5 (described in Internet RFC 1321,  The MD5 Message-Digest Algorithm ; see the Bibliography ), using the following information:   The current time   A string representation of the files location, usually a pathname   The size of the file in bytes   The values of all  entries in the files document  information dictionary (see  14.3.3, Document Information  Dictionary ) NOTE The calculation of the file  identifier need not be reproducibl e; all that matters is that  the identifier is likely to be  unique. For example, two implementat ions of the preceding algorithm might use different formats for the  current time, causing them to produce different file identi fiers for the same file create d at the same time, but the  uniqueness of the identifier is not affected.  14.5 Page-Piece Dictionaries A page-piece dictionary (PDF 1.3)  may be used to hold private conforming product data. The data may be  associated with a page or form XO bject by means of the optional  PieceInfo  entry in the page object (see  Ta b l e  30) or form dictionary (see  Ta b l e  95). Beginning with PDF 1.4, private  data may also be associated with  the PDF document by means of the  PieceInfo  entry in the document catalogue (see  Ta b l e  28).NOTE 1 Conforming products may use this dictionary as a plac e to store private data in co nnection with that document,  page, or form. Such private data can convey information m eaningful to the conforming product that produces it  (such as information on object grouping for a graphics editor or the layer information used by Adobe  Photoshopﬁ) but may be ignored by general-purpose conforming readers.  As Ta b l e  318  shows, a page-piece dictionary may contain any nu mber of entries, each keyed by the name of a  distinct conforming product or of  a well-known data type recognized by a  family of conforming products. The  value associated with each key shall be a  data dictionary  containing the private data that shall be used by the  conforming product. The  Private entry may have a value of any data type, but typically it is a dictionary  containing all of the private data needed by the co nforming product other than the actual content of the  document, page, or form.",""],"560":["PDF 32000-1:2008 552 ' Adobe Systems Incorporated 2008  All rights reserved The  LastModified  entry indicates when this conforming product la st altered the content of the page or form. If  the page-piece dictionary contains several data dictionaries, their modification dates can be compared with  those in the corresponding entry of the page object or form dictionary (see  Ta b l e  30 and  Ta b l e  95), or the  ModDate  entry of the document information dictionary (see  Ta b l e  317 ), to ascertain which data dictionary  corresponds to the current content of the page or form. Because some platforms may use only an approximate  value for the date and time or may not deal correctly  with differing time zones, modification dates shall be compared only for equality and not for sequential ordering.  NOTE 2 It is possible for two or more data dictionaries to have the same modification date. Conforming products can  use this capability to define multiple or extended versio ns of the same data format. For example, suppose that  earlier versions of a conforming product use an data dictionary named  PictureEdit , and later versions of the  same conforming product extend the data to include ad ditional items not previously used. The original data  could continue to be kept in the  PictureEdit  dictionary and the additional items placed in a new dictionary  named  PictureEditExtended . This allows the earlier versions of the c onforming product to continue to work as  before, and later versions are able to locate and use the extended data items.  14.6 Marked Content 14.6.1 General Marked-content ope rators (PDF 1.2)  may identify a portion of a PDF content stream as a  marked-content  element  of interest to a particular conforming product. Marked-content elements and the operators that mark  them shall fall into two categories:  The  MP and DP operators shall designate a single  marked-content point  in the content stream.  The  BMC, BDC, and EMC operators shall bracket a  marked-content sequence  of objects within the  content stream.  NOTE 1 This is a sequence not simply of bytes in the content  stream but of complete graphics objects. Each object is  fully qualified by the parameters of the  graphics state in which it is rendered.  NOTE 2 A graphics application, for example,  might use marked content to identify  a set of related objects as a group to  be processed as a single unit. A text-processing applicat ion might use it to maintain a connection between a  footnote marker in the body of a document and the corres ponding footnote text at th e bottom of the page. The  PDF logical structure facilities use marked-content s equences to associate graphical content with structure  elements (see  14.7.4, Structure Content ). Ta b l e  320 summarizes the marked-content operators.  All marked-content operators except  EMC shall take a  tag  operand indicating the role or significance of the  marked-content element to the conforming reader. All  such tags shall be registered with Adobe Systems (see  Table  318    Entries in a page-piece dictionary   KeyType Value any  conforming product  name or  well- known data  typedictionary A data dictionary (see  Ta b l e  319 ). Table  319    Entries in an data dictionary   KeyType Value LastModifieddate (Required)  The date and time when the contents of the  document, page, or form were most recently modified by this  conforming product.  Private(any)(Optional)  Any private data appropriate to the conforming  product, typically in the form of a dictionary.",""],"561":["' Adobe Systems Incorporated 2008  All rights reserved 553PDF 32000-1:2008 Annex E) to avoid conflicts between different applications  marking the same content stream. In addition to the  tag operand, the  DP and BDC operators shall specify a  property list  containing further information associated  with the marked content. Property lists are discussed further in  14.6.2, Property Lists. Marked-content operators may appear only  between graphics objects in the co ntent stream. They may not  occur within a graphics object or between a graphics  state operator and its operands. Marked-content  sequences may be nested one within another, but each  sequence shall be entirely contained within a single  content stream. NOTE 3 A marked-content sequence may not cross page boundaries.  NOTE 4 The  Contents entry of a page object (see  7.7.3.3, Page Objects ), which may be either a single stream or an  array of streams, is considered a single stre am with respect to marked-content sequences.  When the marked-content operators  BMC, BDC , and  EMC are combined with the text object operators  BT and ET (see  9.4, Text Objects ), each pair of matching operators ( BMC  EMC, BDC  EMC, or BT  ET) shall  be  properly (separately) nested. Therefore, the sequences  BMCBTBTBMCand  ETEMCEMCETare valid, but  BMCBTBTBMCand  EMCETBTEMCare not valid.  Table  320   Marked-content operators   Operands Operator Description tag MPDesignate a marked-content point.  tag shall be a name object indicating  the role or significance of the point.  tag  properties DPDesignate a marked-content point with an associated property list.  tagshall be a name object indicating the role or significance of the point.  properties shall be either an inline dictionary containing the property list or  a name object associated with it in the  Properties  subdictionary of the  current resource dictionary (see  14.6.2, Property Lists ). tag BMCBegin a marked-content sequence terminated by a balancing  EMCoperator.  tag  shall be a name object indicating the role or significance of  the sequence.  tag  properties BDCBegin a marked-content sequence with an associated property list,  terminated by a balancing  EMC  operator.  tag  shall be a name object  indicating the role or significance of the sequence.  properties  shall be  either an inline dictionary containing  the property list or a name object  associated with it in the  Properties  subdictionary of th e current resource  dictionary (see  14.6.2, Property Lists ). EMC End a marked-content sequence begun by a  BMC or BDC operator.",""],"562":["PDF 32000-1:2008 554 ' Adobe Systems Incorporated 2008  All rights reserved 14.6.2 Property Lists The marked-content operators  DP and BDC  associate a property list  with a marked-content element within a  content stream. The property list is a dictionary contai ning private information meaningful to the conforming  writer creating the marked content. Conforming products  should use the dictionary en tries in a consistent way;  the values associated with a given key should always be of the same type (or small set of types).  If all of the values in a property list dictionary are  direct objects, the dictionary may be written inline in the  content stream as a direct object. If any of the values are indirect references to objects outside the content  stream, the property list dictionary shall be defined as a named resource in the  Properties  subdictionary of the  current resource dictionary (see  7.8.3, Resource Dictionaries ) and referenced by name as the  properties operand of the  DP or BDC operator.  14.6.3 Marked Content and Clipping Some PDF path and text objects are defined purely for  their effect on the current clipping path, without the  objects actually being painted on the page. This occurs  when a path object is defined using the operator  sequence  W n or  W* n (see  8.5.4, Clipping Path Operators ) or when a text object is painted in text rendering  mode 7 (see  9.3.6, Text Rendering Mode ). Such clipped, unpainted path or text objects are called  clipping objects .  When a clipping object falls within a marked-conten t sequence, it shall not be considered part of the  sequence unless the entire sequence consists only of clipping objects. In  Example 1 , for instance, the marked- content sequence tagged  Clip includes the text string (  Clip  me ) but not the rectangular path that defines the  clipping boundary.  EXAMPLE 1 /Clip  BMC100  100  10 10 re W n% Clipping path ( Clip me  ) Tj% Object to be clipped EMCOnly when a marked-content sequence  consists entirely of clipping objects shall the clipping objects be  considered part of the sequence. In this case, the sequence is known as a  marked clipping sequence . Such  sequences may be nested. In  Example 2 , for instance, multiple lines of te xt are used to clip a subsequent  graphics object (in this case, a fille d path). Each line of  text shall be bracketed  within a separate marked  clipping sequence, tagged  Pgf. The entire series shall be bracketed in turn by an outer marked clipping  sequence, tagged  Clip . NOTE The marked-content sequence tagged ClippedText is  not  a marked clipping sequence, since it contains a filled  rectangular path that is not a clipping object. The c lipping objects belonging to the Clip and Pgf sequences are  therefore not considered part of the ClippedText sequence.  EXAMPLE 2 /ClippedText  BMC /Clip  <<  >>BDC BT7 Tr % Begin text clip mode /Pgf BMC ( Line 1  ) TjEMC/Pgf BMC ( Line ) ’( 2 ) TjEMCET% Set current text clip EMC 100  100  10 10 re f% Filled path EMCThe precise rules governing marked clipping sequences shall be as follows:  A  clip ping object  shall be a path object ended by the operator sequence  W n or  W* n or a text object painted in text rendering mode 7.",""],"563":["' Adobe Systems Incorporated 2008  All rights reserved 555PDF 32000-1:2008 An  invisible graphics object  shall be a path object ended by the operator  n only (with no preceding  W or W*) or a text object painted in text rendering mode 3.  A  v isible graphics object  shall be a path object ended by any operator other than  n, a text object painted in  any text rendering mode other than 3 or  7, or any XObject invoked by the  Do operator.  An  e mpty marked-content element  shall be a marked-content point or a marked-content sequence that  encloses no graphics objects.  A  ma rked clipping sequence  shall be a marked-content sequence that  contains at least one clipping object  and no visible graphics objects.   Clipping objects and marked clipping  sequences shall be considered part of an en closing marked-content sequence only if it is a marked clipping sequence.   Invisible graphics objects and empty marked-content  elements shall always be considered part of an  enclosing marked-content sequenc e, regardless of whether it is a marked clipping sequence.  The  q (save) and  Q (restore) operators may not occur  within a marked clipping sequence.  Example 3 illustrates the application of these rules. Marked-content sequence S4 is a marked clipping  sequence because it contains a clipping object (clipping  path 2) and no visible graphics objects. Clipping path 2  is therefore considered part of sequence S4 . Marked-content sequences S1, S2, and S3 are  not  marked  clipping sequences, since they each include at least o ne visible graphics object. Thus, clipping paths 1 and 2  are not part of any of these three sequences.  EXAMPLE 3 /S1  BMC/S2 BMC/S3 BMC 0 0 m100 100 l0 100  l W n% Clipping path 1 0 0 m200 200 l0 100  l f% Filled path EMC /S4 BMC 0 0 m300 300 l0 100  l W n% Clipping path 2 EMC EMC100  100  10 10 re f% Filled path EMCIn Example 4 marked-content sequence S1 is a marked  clipping sequence because the only graphics object it  contains is a clipping path. Thus, the empty marked-c ontent sequence S3 and the marked-content point P1 are  both part of sequence S2, and S2, S3, and P1 are all part of sequence S1.  EXAMPLE 4 /S1  BMC Clipping path  /S2 BMC/S3 BMC EMC","/P1 DPEMCEMC",""],"564":["PDF 32000-1:2008 556 ' Adobe Systems Incorporated 2008  All rights reserved In Example 5  marked-content sequences S1 and S4 are marked  clipping sequences because the only object  they contain is a clipping path. Hence the clipping path  is part of sequences S1 and S4; S3 is part of S2; and  S2, S3, and S4 are all part of S1.  EXAMPLE 5 /S1  BMC/S2 BMC/S3 BMC EMC EMC/S4 BMC Clipping path  EMCEMC14.7 Logical Structure 14.7.1 General PDFs  logical structure  facilities  (PDF 1.3)  shall provide a mechanism for incorporating structural information  about a documents content into a PDF file. Such information may include the organization of the document into  chapters and sections or the identification of special  elements such as figures, tables, and footnotes. The  logical structure facilities shall be extensible, allowing conforming writers to choose what structural information  to include and how to represent it, while enabling conf orming readers to navigate a file without knowing the  producers structural conventions.  PDF logical structure shares basic  features with standard document ma rkup languages such as HTML, SGML,  and XML. A documents logical structure shall be expressed as a hierarchy of  structure elements , each  represented by a dictionary object. Li ke their counterparts in other markup languages, PDF structure elements  may have content and attributes. In PDF, rendered docum ent content takes over the ro le occupied by text in  HTML, SGML, and XML.  A PDF documents logical structure shall be stored separate ly from its visible content, with pointers from each  to the other. This separation allows the ordering and nes ting of logical elements to be entirely independent of  the order and location of graphics objects on the documents pages.  The  Mark ings  entry in the document catalogue (see  7.7.2, Document Catalog ) shall specify a  mark information dictionary, whose entries are shown in  Ta b l e  321 . It provides additional information relevant to  specialized uses of structured PDF documents. Table  321    Entries in the mark  information dictionary  Key Type Value Marked boolean (Optional)  A flag indicating whether the do cument conforms to Tagged  PDF conventions (see  14.8, Tagged PDF ). Default value:  false . If  Suspect s  is true, the document may not completely conform to Tagged  PDF conventions. UserProperties boolean (Optional; PDF 1.6)  A flag indicating the presence of structure elements  that contain user properties attributes (see  14.7.5.4, User Properties ). Default value:  false. Suspects boolean (Optional;  PDF 1.6) A flag indicating the presence of tag suspects (see  14.8.2.3, Page  Content Order). Default value:  false.",""],"565":["' Adobe Systems Incorporated 2008  All rights reserved 557PDF 32000-1:2008 14.7.2 Structure Hierarchy The logical structure of a document shall be described by a hierarchy of objects called the  structure hierarchy or  structure tree . At the root of the hierarchy sha ll be a dictionary object called the  structure tree root , located by  means of the  StructTreeRoot  entry in the document catalogue (see  7.7.2, Document Catalog ). Ta b l e  322shows the entries in the structure tree root dictionary. The  K entry shall specify the  immediate children of the  structure tree root, which shall be  structure elements . Structure elements shall be represented by  a dictionary, whose entries are shown in  Ta b l e  323 . The K en try  shall specify the children of the structure element, wh ich may be zero or more items of the following kinds:  Other structure elements  References to  content items , which are either marked-content sequences (see  14.6, Marked Content ) or  complete PDF objects such as XObjects and annotat ions. These content items  represent the graphical  content, if any, associated with a structure el ement. Content items are discussed in detail in  14.7.4,  Structure Content. Table  322    Entries in the structure tree root   Key Type Value Type name (Required)  The type of PDF object that this dictionary describes;  shall be  StructTreeRoot  for a structure tree root.  Kdictionary  or array(Optional)  The immediate child or children  of the structure tree root in  the structure hierarchy. The value may be either a dictionary  representing a single structure element or an array of such  dictionaries.  IDTree name  tree(Required if any structure elem ents have element identifiers)  A name tree that maps element identifiers (see  Table  323) to the structure  elements they denote.  ParentTree number  tree(Required if any structure el ement contains content items)  A number  tree (see 7.9.7, Number Trees ) used in finding the structure  elements to which content items belong. Each integer key in the  number tree shall correspond to a single page of the document or to  an individual object (such as an ann otation or an XObject) that is a  content item in its own right. The in teger key shall be the value of the  StructParent  or  StructParents  entry in that object (see  14.7.4.4, Finding Structure Elements from Content Items ). The form of the  associated value shall depend  on the nature of the object:  For an object that is a c ontent item in its own right, the value shall be  an indirect reference to the object s parent element (the structure  element that contains it as a content item).  For a page object or content stream containing marked-content  sequences that are content items, the value shall be an array of  references to the parent elements of those marked-content  sequences.  See 14.7.4.4, Finding Structure  Elements from Content Items  for further discussion.  ParentTreeNext Keyinteger (Optional)  An integer greater than any key in the parent tree, shall be  used as a key for the next entry added to the tree.  RoleMap dictionary (Optional)  A dictionary that shall map the names of structure types  used in the document to their approximate equivalents in the set of  standard structure types (see  14.8.4, Standard Structure Types ). ClassMap dictionary (Optional)  A dictionary that shall map name objects designating  attribute classes to the corresponding attribute objects or arrays of  attribute objects (see  14.7.5.2, Attribute Classes ).",""],"566":["PDF 32000-1:2008 558 ' Adobe Systems Incorporated 2008  All rights reserved Table  323    Entries in a structure element dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary describes; if  present, shall be  StructElem  for a structure element.  Sname (Required)  The structure type, a name object identifying the  nature of the struct ure element and its role within the document,  such as a chapter, paragraph, or footnote (see  14.7.3, Structure  Types ). Names of structure types shall conform to the guidelines  described in  Annex E. Pdictionary (Required; shall be an indirect reference)  The structure element  that is the immediate parent of th is one in the structure hierarchy.  IDbyte string (Optional)  The element identifier, a byte string designating this  structure element. The string sha ll be unique among all elements  in the documents structure hierarchy. The  IDTree  entry in the  structure tree root (see  Ta b l e  322 ) defines the correspondence  between element identifiers and  the structure elements they  denote.  Pgdictionary (Optional; shall be an indirect reference ) A page object  representing a page on which some or all of the content items  designated by the  K entry shall be rendered.  K(various)(Optional)  The children of this structure  element. The value of this  entry may be one of the following objects or an array consisting of  one or more of the following objects:   A structure element dictiona ry denoting anot her structure  element  An integer marked-content identifier denoting a marked- content sequence   A marked-content reference  dictionary denoting a marked- content sequence  An object reference dictionary denoting a PDF object  Each of these objects other than the first (structure element  dictionary) shall be considered  to be a content item; see  14.7.4,  Structure Content  for further discussion of each of these forms of  representation.  If the value of  K is a dictionary containing no  Type  entry, it shall be  assumed to be a structure element dictionary.  A(various)(Optional)  A single attribute object or  array of attribute objects  associated with this structure elemen t. Each attribute object shall  be either a dictionary or a stream.  If the value of this entry is an  array, each attribute object in the array may be followed by an  integer representing its revision number (see  14.7.5, Structure  Attributes,  and  14.7.5.3, Attribute  Revision Numbers). Cname  or array(Optional)  An attribute class name or array of class names  associated with this structure elemen t. If the value of this entry is  an array, each class name in the array may be followed by an  integer representing its revision number (see  14.7.5.2, Attribute  Classes, and  14.7.5.3, Attribute Revision Numbers ). If both the  A and C entries are present an d a given attribute is  specified by both, the one specified by the  A entry shall take  precedence.  Rinteger (Optional)  The current revision number of this structure element  (see 14.7.5.3, Attribute  Revision Numbers ). The value shall be a  non-negative integer.  Default value: 0.",""],"567":["' Adobe Systems Incorporated 2008  All rights reserved 559PDF 32000-1:2008 14.7.3 Structure Types Every structure element shall have a  structure type , a name object that identifie s the nature of the structure  element and its role within the document (such as a c hapter, paragraph, or foot note). To facilitate the  interchange of content amo ng conforming products, PDF defines a se t of standard structure types; see  14.8.4,  Standard Structure Types.  Conforming products are not required to adopt them, however, and may use any  names for their structure types.  Where names other than the standard ones are used, a  role map  may be provided in the structure tree root,  mapping the structure types used in the document to  their nearest equivalents in the standard set.  NOTE 1 A structure type named Section used in the do cument might be mapped to  the standard type Sect. The  equivalence need not be exact; the role map merely  indicates an approximate analogy between types,  allowing conforming products to share nonstandard structure elements in a reasonable way.  NOTE 2 The same structure type may occur as both a key  and a value in the role map, and circular chains of  association are explicitly permitted.  Therefore, a single role map ma y define a bidirectional mapping. A  conforming reader using the role map should follow the  chain of associations until it  either finds a structure  type it recognizes or returns to  one it has already encountered.  NOTE 3 In PDF versions earlier than 1.5, standard element  types were never remapped.  Beginning with PDF 1.5, an  element name shall always be mapped to its corresponding  name in the role map, if  there is one, even if the  original name is one of the standard types. This shall be  done to allow the element, for example, to represent a  tag with the same name as a standard role, even  though its use differs from the standard role. Ttext string (Optional)  The title of the structure element, a text string  representing it in human-read able form. The title should  characterize the specific structur e element, such as Chapter 1,  rather than merely a generic element type, such as Chapter.  Lang text string (Optional; PDF  1.4)  A language identifier specifying the natural  language for all text in the st ructure element except where  overridden by language specifications for nested structure  elements or marked content (see  14.9.2, Natural Language  Specification ). If this entry is absent, the language (if any)  specified in the document catalogue applies.  Alttext string (Optional)  An alternate description of the structure element and its  children in human-readable form, which is useful when extracting  the documents contents in suppor t of accessibility to users with  disabilities or for other purposes (see  14.9.3, Alternate  Descriptions ). Etext string (Optional; PDF  1.5)  T he expanded form of an abbreviation. ActualText text string (Optional; PDF  1.4)   Text that is an exact replacement for the  structure element and its children. This replacement text (which  should apply to as small a piece of  content as possible) is useful  when extracting the documents contents in support of  accessibility to users with disabili ties or for other purposes (see  14.9.4, Replacement Text ).Table 323   Entries in a structur e element dictionary  (continued) KeyType Value",""],"568":["PDF 32000-1:2008 560 ' Adobe Systems Incorporated 2008  All rights reserved 14.7.4 Structure Content 14.7.4.1 General Any structure element may have associated graphical content, consisting of one or more  content items. Content items shall be graphical objects that exist in the document independently of the structure tree but are  associated with structure elements as described in the following sub-clauses. Conten t items are of two kinds:  Marked-content sequences within content streams (see  14.7.4.2, Marked-Conten t Sequences as Content  Items ) Complete PDF objects such as annotations and XObjects (see  14.7.4.3, PDF Objects as Content Items )The  K en try in a structure element dictionary (see  Table  323) shall specify the children  of the structure element,  which may include any number of content items, as well  as child structure elements that may in turn have  content items of their own.  Content items shall be leaf nodes of the structure tree ; that is, they may not have  other content items nested  within them for purposes of logical structure. The hier archical relationship among structure elements shall be represented entirely by the  K entries of the structure element dictio naries, not by nesting of the associated  content items. Therefore, the following restrictions shall apply:  A marked-content sequence delimiting a structure c ontent item may not have another marked-content  sequence for a content item nested within it thou gh non-structural marked content shall be allowed.  A structure content item s hall not invoke (with the  Do operator) an XObject that is itself a structure content  item.14.7.4.2 Marked-Content Se quences as Content Items A sequence of graphics operators in a content stream  may be specified as a content item of a structure  element in the following way:  The operators shall be bracketed as  a marked-content sequence between  BDC and  EMC operators (see  14.6, Marked Content ). Although the tag associated with a ma rked-content sequence is not directly  related to the documents logical structure, it shoul d be the same as the struct ure type of the associated  structure element.   The marked-content sequence sh all have a property list (see  14.6.2, Property Lists ) containing an  MCIDentry, which i shall be an integer  marked-content identifier  that uniquely identifies the marked-content  sequence within its content stream, as shown in the following example: EXAMPLE 1 2  0 obj % Page object << /Type  /Page  /Contents  3 0 R% Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>stream/P << /MCID  0 >>% Start of marked-content sequence BDC ( Here is some text  ) TjEMC% End of marked-content sequence",""],"569":["' Adobe Systems Incorporated 2008  All rights reserved 561PDF 32000-1:2008 endstream endobj NOTE This example and the follo wing examples omit required  StructParents  entries in the objects used as content  items (see  14.7.4.4, Finding Structure  Elements from Content Items ).A structure element dictionary may include one or mo re marked-content sequenc es as content items by  referring to them in its  K entry (see  Ta b l e  323 ). This reference may have two forms:  A dictionary object called a  marked-content reference.  Table  324  shows the contents of this type of  dictionary, which shall specify the ma rked-content identifier, as well othe r information identifying the stream  in which the sequence is contained.  Example 2  illustrates the use of a mark ed-content reference to the  marked-content sequence shown in  Example 3 . An integer that specifies the marked-content identifie r. This may be done in the common case where the  marked-content sequence is contained in the conten t stream of the page that is specified in the  Pg entry of  the structure element dictionary.  Example 3  shows a structure element that has three children: a marked- content sequence specified by a marked-content id entifier, as well as two other structure elements. EXAMPLE 2 1  0 obj % Structure element << /Type  /StructElem   /S /P% Structure type   /P % Parent in structure hierarchy   /K << /Type  /MCR  /Pg 2 0 R% Page containing marked-content sequence  /MCID  0% Marked-content identifier >>>>endobj EXAMPLE 3 1  0 obj % Containing structure element << /Type  /StructElem  /S /MixedContainer % Structure type  /P % Parent in structure hierarchy Table  324    Entries in a marked-content reference dictionary   KeyType Value Type name (Required)  The type of PDF object that th is dictionary describes; shall be  MCR for a marked-content reference.  Pgdictionary (Optional; shall be an indirect reference)  The page object representing  the page on which the graphics objects in the marked-content sequence  shall be rendered. This entry overrides any  Pg entry in the structure  element containing the marked-content re ference; it shall be required if  the structure element has no such entry.  Stm stream(Optional; shall be an indirect reference)  The content stream containing  the marked-content seque nce. This entry should be present only if the  marked-content sequence resides in  a content stream other than the  content stream for the page (see  8.10, Form XObjects  and  12.5.5,  Appearance Streams ).  If this entry is absent, the marked-c ontent sequence shall be contained in  the content stream of the page identified by  Pg (either in the marked- content reference dictionary or in  the parent structure element). StmOwn (any)(Optional; shall be an indirect reference)  The PDF object owning the  stream identified by  Stems  annotation to which an appearance stream  belongs.  MCIDinteger (Required)  The marked-content identif ier of the marked-content  sequence within its content stream.",""],"570":["PDF 32000-1:2008 562 ' Adobe Systems Incorporated 2008  All rights reserved  /Pg 2 0 R% Page containing marked-content sequence  /K [ 4 0 R % Three children: a structure element   0% a marked-content identifier   5 0 R%  another structure element  ]>>endobj 2 0 obj % Page object << /Type  /Page /Contents  3 0 R% Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>stream/P << /MCID  0 >>% Start of marked-content sequence BDC ( Here is some text  ) TjEMC% End of marked-content sequence endstream endobj Content streams other than page contents may also cont ain marked content sequences  that are content items  of structure elements. The content of form XObjects may  be incorporated into structure elements in one of the  following ways:  A  Do operator that paints a form XObject may be pa rt of a marked-content sequence that shall be associated with a structure element (see  Example 4 ). In this case, the entire form XObject shall be considered to be part of the structure elements conten t, as if it were inserted  into the marked-content  sequence at the point of the  Do operator. The form XObject shall not  in turn contain any marked-content  sequences associated with this or other structure elements.   The content stream of a form XObject may contain  one or more marked-content sequences that shall be associated with structure elements (see  Example 5 ). The form XObject may have arbitrary substructure,  containing any number of marked-con tent sequences associated with logical structure elements. However,  any  Do operator that paints the form XObject should  not be part of a logical structure content item.  A form XObject that is painted  with multiple invocations of the Do operator may be incorporated into the  documents logical structure only by the first method, with each invocation of  Do individually associated with a  structure element.  EXAMPLE 4 1  0 obj % Structure element << /Type  /StructElem   /S /P% Structure type   /P % Parent in structure hierarchy   /Pg 2 0 R% Page containing marked-content sequence","/K 0% Marked-content identifier >>endobj 2 0 obj % Page object << /Type  /Page  /Resources <<  /XObject  << /Fm4  4 0 R >> % Resource dictionary >> %     containing form XObject   /Contents  3 0 R % Content stream  >>",""],"571":["' Adobe Systems Incorporated 2008  All rights reserved 563PDF 32000-1:2008 endobj 3 0 obj % Page’s content stream << /Length   >>stream /P << /MCID  0 >>% Start of marked-content sequence BDC /Fm4  Do% Paint form XObject EMC% End of mark ed-content sequence endstream endobj 4 0 obj % Form XObject << /Type  /XObject   /Subtype  /Form   /Length  >>stream ( Here is some text ) Tjendstream endobj EXAMPLE 5 1  0 obj % Structure element << /Type  /StructElem   /S /P% Structure type   /P % Parent in structure hierarchy   /K <<  /Type  /MCR /Pg 2 0 R% Page containing marked-content sequence  /Stm  4 0 R% Stream containing marked-content sequence  /MCID  0% Marked-content identifier >>>>endobj","2 0 obj % Page object << /Type  /Page  /Resources <<  /XObject  << /Fm4  4 0 R >> % Resource dictionary >>%     containing form XObject   /Contents  3 0 R % Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>stream /Fm4  Do% Paint form XObject endstream endobj 4 0 obj % Form XObject << /Type  /XObject   /Subtype  /Form   /Length  >>stream /P << /MCID  0 >> % Start of mark ed-content sequence BDC",""],"572":["PDF 32000-1:2008 564 ' Adobe Systems Incorporated 2008  All rights reserved ( Here is some text  ) TjEMC% End of marked-content sequence endstream endobj 14.7.4.3 PDF Objects as Content Items When a structure elements content includes an entire PDF object, such as an XObject or an annotation, that is  associated with a page but not directly included in the  pages content stream, the object shall be identified in  the structure elements  K entry by an  object reference dictionary  (see  Ta b l e  325 ). NOTE 1 This form of reference is used only for entire objects.  If the referenced content forms only part of the objects  content stream, it is instead handled as a marked- content sequence, as described in the preceding sub- clause.  NOTE 2 If the referenced object is rendered on multiple p ages, each rendering requires a separate object reference.  However, if it is rendered multiple times on the same p age, just a single object reference suffices to identify all  of them. (If it is important  to distinguish between multiple renditions  of the same XObject on the same page,  they should be accessed by means of marked-content  sequences enclosing particular invocations of the  Dooperator rather than through object references.)  14.7.4.4 Finding Structure Elements from Content Items Because a stream may not contain object references, ther e is no way for content item s that are marked-content  sequences to refer directly back to th eir parent structure elements (the on es to which they belong as content  items). Instead, a different mechanism, the  structural parent tree , shall be provided for this purpose. For  consistency, content items that are entire PDF objects, such  as XObjects, also shall use the parent tree to refer  to their parent structure elements.  The parent tree is a number tree (see  7.9.7, Number Trees ), accessed from the  ParentTree  entry in a  documents structure tree root ( Ta b l e  322). The tree shall contain an entry for each object that is a content item  of at least one structure element and  for each content stream containing at  least one marked-content sequence  that is a content item. The key for each entry shall be an integer given as the value of the  StructParent  or StructParents  entry in the object (see  Ta b l e  326 ). The values of these entries shall be as follows:   For an object identified as a content item by means of an object reference (see  14.7.4.3, PDF Objects as  Content Items ), the value shall be an indirect reference to the parent structure element.   For a content stream containing marked-content sequ ences that are content items, the value shall be an  array of indirect references to the sequences parent  structure elements. The array element corresponding  to each sequence shall be found by using the sequence s marked-content identifier as a zero-based index  into the array.  Table  325    Entries in an object reference dictionary   KeyType Value Type name (Required)  The type of PDF object that  this dictionary describes; shall be  OBJRfor an object reference.  Pgdictionary (Optional; shall be an indirect reference ) The page object of the page on which  the object shall be rendered. This entry overrides any  Pg entry in the structure  element containing the object reference;  it shall be used if the structure element  has no such entry.  Obj (any)(Required; shall be an indirect reference ) The referenced object.",""],"573":["' Adobe Systems Incorporated 2008  All rights reserved 565PDF 32000-1:2008 NOTE Because marked-content identifiers serve as indices into  an array in the structural parent tree, their assigned  values should be as small as possible to conserve space in the array.  The  ParentTreeNextKey  entry in the structure tree root shall hold  an integer value greater than any that is  currently in use as a key in the structural parent tree . Whenever a new entry is added to the parent tree, the  current value of  ParentTreeNextKey  shall be used as its key. The value shall be then incremented to prepare  for the next new entry to be added.  To locate the relevant parent tree entry, each object or  content stream that is represented in the tree shall contain a special dictionary entry,  StructParent  or  StructParents  (see  Ta b l e  326). Depending on the type of  content item, this entry may appear in the page object  of a page containing marked -content sequences, in the  stream dictionary of a form or image XObject, in an annotation dictionary, or in any other type of object  dictionary that is included as a cont ent item in a structure element. Its value shall be the integer key under  which the entry corresponding to the object sha ll be found in the structural parent tree.  For a content item identified by an ob ject reference, the parent structur e element may be found by using the  value of the  StructParent  entry in the items object dictionary as a  retrieval key in the structural parent tree  (found in the  ParentTree  entry of the structure tree root). The corr esponding value in the parent tree shall be a  reference to the parent structure element (see  Example 1 ). EXAMPLE 1 1  0 obj % Parent structure element << /Type  /StructElem   /K  <<  /Type  /OBJR % Object reference  /Pg 2 0 R% Page containing form XObject  /Obj  4 0 R% Reference to form XObject  >>>>endobj 2 0 obj % Page object << /Type  /Page /Resources <<  /XObject  << /Fm4  4 0 R >> % Resource dictionary >>%     containing form XObject  /Contents  3 0 R % Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>stream /Fm4  Do% Paint form XObject endstream endobj Table  326    Additional dictionary entries for structure element access   KeyType Value StructParent integer (Required for all objects that ar e structural content items; PDF  1.3)  Th e  integer key of this objects entry in the structural parent tree.  StructParents integer (Required for all content streams c ontaining marked-content sequences  that are structural content items; PDF  1.3) The  integer key of this objects  entry in the structural parent tree.  At most one of these two entries shall be present in a given object. An  object may be either a content item  in its entirety or a container for  marked-content sequence s that are content it ems, but not both.",""],"574":["PDF 32000-1:2008 566 ' Adobe Systems Incorporated 2008  All rights reserved 4 0 obj % Form XObject << /Type  /XObject  /Subtype  /Form  /Length   /StructParent  6% Parent tree key >>streamendstream endobj 100  0 obj% Parent tree (accessed from structure tree root) << /Nums  [  0 101 0 R  1 102 0 R   6 1 0 R% Entry for page object 2; points back    %     to parent structure element    ] >>endobj For a content item that is a marked -content sequence, the retrieval me thod is similar but slightly more  complicated. Because a marked-c ontent sequence is not an object in its own right, its parent tree key shall be  found in the  StructParents  entry of the page object or other conten t stream in which the sequence resides.  The value retrieved from the parent tree shall not be a reference to the parent structure element itself but to an  array of such referencesone for each marked-content  sequence contained within that content stream. The  parent structure element for the given sequence sha ll be found by using the sequences marked-content  identifier as an index  into this array (see Example 2 ). EXAMPLE 2 1  0 obj % Parent structure element << /Type  /StructElem   /Pg 2 0 R% Page containing marked-content sequence  /K 0% Marked-content identifier >>endobj 2 0 obj % Page object << /Type  /Page /Contents  3 0 R% Content stream  /StructParents  6% Parent tree key  >>endobj 3 0 obj % Page’s content stream << /Length","  >>stream/P << /MCID  0 >>% Start of marked-content sequence BDC ( Here is some text  ) TJEMC% End of marked-content sequence endstream endobj 100  0 obj% Parent tree (accessed from structure tree root) << /Nums  [ 0 101 0 R  1 102 0 R",""],"575":["' Adobe Systems Incorporated 2008  All rights reserved 567PDF 32000-1:2008  6 [ 1 0 R ]% Entry for page object 2; array element at index 0    %     points back to parent structure element     ] >>endobj 14.7.5 Structure Attributes 14.7.5.1 General A conforming product that processes logical stru cture may attach additional information, called  attributes , to  any structure element. The attribute information shall be held in one or more  attribute objects  associated with  the structure element. An attribute object shal l be a dictionary or stream that includes an  O entry (see  Ta b l e  327) identifying the conforming product that owns the  attribute information. Other entries shall represent  the attributes: the keys shall be attr ibute names, and values shall be the corresponding attribute values. To  facilitate the interchange of conten t among conforming products, PDF defines a set of standard structure  attributes identified by spec ific standard owners; see  14.8.5, Standard Structure Attributes.  In addition,  (PDF  1.6)  attribu tes may be used to represent user properties (see  14.7.5.4, User Properties ).Any conforming product may attach attributes to  any structure element, even one created by another  conforming product. Multiple conforming products may at tach attributes to the same structure element. The  Aentry in the structure element dictionary (see  Ta b l e  323 ) shall hold either a single at tribute object or an array of  such objects, together with  revision numbers  for coordinating attributes created by different conforming  products (see  14.7.5.3, Attribute Revision Numbers ). A conforming product creating or destroying the second  attribute object for a structure element shall be  responsible for converting the value of the  A entry from a single  object to an array or vice versa, as well as for maintaining the integrity of the revision numbers. No inherent  order shall be defined for the attribute objects in an  A array, but new objects should be added at the end of the  array so that the first array element is the one belongin g to the conforming product that originally created the  structure element.  14.7.5.2 Attribute Classes If many structure elements share the same set  of attribute values, they may be defined as an  attribute class sharing the identical attribute object. Structure elements  shall refer to the class by name. The association  between class names and attribute objects shall be defined by a dictionary called the  class map , that shall be  kept in the  ClassMap  entry of the struct ure tree root (see  Table  322 ). Each key in the class map shall be a  name object denoting the name of a class. The correspondi ng value shall be an attribute object or an array of  such objects.  NOTE PDF attribute classes are unrelated to the concept of  a class in object-oriented programming languages such  as Java and C++. Attribute classes are strictly a mechani sm for storing attribute information in a more compact  form; they have no inheritance properties like those of true object-oriented classes.  The  C entry in a structure element dictionary (see  Ta b l e  323) shall contain a class name or an array of class  names (typically accompanied by revision numbers as well; see  14.7.5.3, Attribute Revision Numbers ). For  each class named in the  C entry, the corresponding attribute object or objects shall be considered to be  attached to the given structure element, alo ng with those identifi ed in the elements  A entry. If both the  A and  Centries are present and a given attribute is  specified by both, the one specified by the  A entry shall take  precedence.  Table  327    Entry common to all attribute object dictionaries   KeyType Value Oname (Required)  The name of the conforming product owning the attribute data. The  name shall conform to the guidelines described in  Annex E.",""],"576":["PDF 32000-1:2008 568 ' Adobe Systems Incorporated 2008  All rights reserved 14.7.5.3 Attribute Revision Numbers When a conforming product modifies a structure element  or its contents, the change may affect the validity of  attribute information attached to  that structure element  by other conforming products. A system of  revision  numbers  shall allow conforming products to detect such  changes and update their  own attribute information  accordingly, as describe d in this sub-clause.  A structure element shall have a revision number, that shall be stored in the  R entry in the structure element  dictionary (see  Ta b l e  323 ) or default to 0 if no  R entry is present. Initially, the revision number shall be 0. When  a conforming product modifies the structure element or any of its content items, it may signal the change by  incrementing the revision number.  NOTE 1 The revision number is unrelated to the generat ion number associated with an indirect object (see  7.3.10,  Indirect Objects ). NOTE 2 If their is no R entry and the revision number is to be  incremented from the default va lue of 0 to 1, an R entry  must be created in the structure element  dictionary in order to record the 1. Each attribute object attached to a structure element  shall have an associated revision number. The revision  number shall be stored in the array that associates the attr ibute object with the structure element or if not stored  in the array that associates the attribute obje ct with the structure elem ent shall default to 0.  Each attribute object in a structure elements  A array shall be represented by a single or a pair of array  elements, the first or only element shall contain the at tribute object itself and  the second (when present)  shall contain the integer revision number associated with it in this structure element.  The structure elements  C array shall contain a single or a pair of elements for each attribute class, the first  or only shall contain the class name and the second  (when present) shall contain the associated revision  number. The revision numbers are optional in both the  A and C arrays. An attribute object or class name that is not  followed by an integer array element shall have a revision  number of 0 and is represented by a single entry in  the array. NOTE 3 The revision number is not stored  directly in the attribute object be cause a single attribute object may be  associated with more than one struct ure element (whose revision numbers may differ). Since an attribute  object reference is distinct from an integer, that distinct ion is used to determine whet her the attribute object is  represented in the array by a single or a pair of entries. NOTE 4 When an attribute object is created or modified, its re vision number is set to the cu rrent value of  the structure elements  R entry. By comparing the attribute objects revi sion number with that of  the structure element, an  application can determine whether the contents of the at tribute object are still current or whether they have  been outdated by more recent changes in the underlying structure element.  Changes in an attribute object shall not change the revision  number of the associated structure element, which  shall change only when the structure element itse lf or any of its content items is modified.  Occasionally, a conforming product may make extensiv e changes to a structure element that are likely to  invalidate all previous attribute information associated with  it. In this case, instead of incrementing the structure  elements revision number, the conforming product may ch oose to delete all unknown attribute objects from its  A and  C arrays. These two actions shall be mutually  exclusive: the conforming product should  either  increment the structure elements revision number  or remove its attribute objects, but not both.  NOTE 5 Any conforming product creating at tribute objects needs to be prepared  for the possibility that they can be  deleted at any time by another conforming product.  14.7.5.4 User Properties Most structure attributes (see  14.8.5, Standard Structure Attributes ) specify information that  is reflected in the  elements appearance; for example,  BackgroundColor  or  BorderStyle .",""],"577":["' Adobe Systems Incorporated 2008  All rights reserved 569PDF 32000-1:2008 Some conforming writers, such as CAD applications,  may use objects that have a standardized appearance,  each of which contains non-graphical information that di stinguishes the objects from one another. For example,  several transistors might have the same appearance but  different attributes such as type and part number.  User properties (PDF 1.6)  may be used to contain such information. Any graphical object that corresponds to a  structure element may have associated  user properties, specified by means  of an attribute object dictionary  that shall have a value of  UserProperties  for the  O entry (see  Ta b l e  328). The  P entr y shall be an array specifying the user properties. Each element in the array shall be a  user property  dictionary  representing an individual property (see  Table  329 ). The order of the array elements shall specify  attributes in order of importance. PDF documents that contain us er properties shall provide a  UserProperties  entry with a value of  true  in the  documents mark information dictionary (see  Table  321 ). This entry allows conf orming readers to quickly  determine whether it is necessary  to search the structure tree for elements containing user properties. EXAMPLE The following example shows a structure element containing user pr operties called Part Name, Part Number, Supplier, and Price.  100 0 obj << /Type /StructElem /S /Figure  % Structure type /P 50 0 R% Parent in structure tree /A << /O /UserProperties  % Attribute object /P [ % Array of user properties << /N (Part Name) /V (Framostat) >> << /N (Part Number) /V 11603 >> << /N (Supplier) /V (Just Framosta ts) /H true >>  % Hidden attribute << /N (Price) /V -37.99 /F  ($37.99) >>  % Formatted value ]>>>>endobj Table  328    Additional entries in an attribute object dictionary for user properties   KeyType Value Oname (Required)  The attribute owner. Shall be  UserProperties . Parray(Required)  An array of dictionaries, each of wh ich represents a user property (see  Table  329).Table  329    Entries in a user property dictionary   KeyType Value Ntext(Required)  The name of the user property. Vany (Required)  The value of the user property. While the value of this entry shall be an y type of PDF object, conforming writers  should use only text string, number , and boolean values. Conforming readers  should display text, number and boolean values to users but need not  display  values of other types; however, they should not treat other values as errors.  Ftext string(Optional)  A formatted representat ion of the value of  V, that shall be used for  special formatting; for example ($123.45)  for the number -123.45. If this entry is  absent, conforming readers  should use a default format. Hboolean (Optional)  If true, the attribute shall be hidden; that is, it shall not be shown in any  user interface element that presents the  attributes of an object. Default value:  false.",""],"578":["PDF 32000-1:2008 570 ' Adobe Systems Incorporated 2008  All rights reserved 14.7.6 Example of Logical Structure The next Example shows portions of a  PDF file with a simple document st ructure. The structure tree root  (object 300) contains elements with structure types  Chap (object 301) and  Para  (object 304). The  Chapelement, titled Chapter 1, contains elements with types  Head1  (object 302) and  Para (object 303).  These elements are mapped to the standard structure types specified in Tagged PDF (see  14.8.4, Standard  Structure Types ) by means of the role map specified in the structure tree root. Objects 302 through 304 have  attached attributes (see  14.7.5, Structu re Attributes,  and  14.8.5, Standard Structure Attributes ).The example also illustrates th e structure of a parent tree  (object 400) that maps c ontent items back to their  parent structure elements and an ID tree (object 403) th at maps element identifiers to the structure elements  they denote.  EXAMPLE 1  0 obj % Document catalog << /Type  /Catalog  /Pages  100 0 R % Page tree  /StructTreeRoot  300 0 R % Structure tree root >>endobj 100  0 obj% Page tree << /Type  /Pages  /Kids [  101 1 R % First page object    102 0 R % Second page object ] /Count  2% Page count >>endobj 101  1 obj % First page object << /Type  /Page /Parent  100 0 R % Parent is the page tree  /Resources <<  /Font  << /F1  6 0 R % Font resources     /F12  7 0 R >> /ProcSet  [ /PDF /Text  ]   % Procedure sets >>/MediaBox  [ 0 0 612 792 ]% Media box  /Contents  201 0 R % Content stream  /StructParents","0% Parent tree key >>endobj 201  0 obj% Content stream for first page << /Length   >>stream1 1 1 rg0 0 612  792 re fBT% Start of text object /Head1  << /MCID  0 >>% Start of marked-content sequence 0 BDC0 0 0 rg/F1  1 Tf30 0 0 30 18 732 Tm( This is a first level heading  . Hello world  : ) Tj1.1333  TLT*( goodbye universe  . ) TjEMC% End of marked-content sequence 0 /Para << /MCID  1 >> % Start of marked-content sequence 1",""],"579":["' Adobe Systems Incorporated 2008  All rights reserved 571PDF 32000-1:2008 BDC /F12  1 Tf14 0 0 14 18 660.8  Tm( This is the first paragraph, which spans pages  . It has four fairly short and \\ concise sentences  . This is the next to last )  TjEMC% End of marked -content sequence 1 ET% End of text object endstream endobj 102  0 obj% Second page object << /Type  /Page /Parent 100 0 R % Parent is the page tree  /Resources <<  /Font <<  /F1  6 0 R % Font resources     /F12  7 0 R  >> /ProcSet [ /PDF /Text  ]   % Procedure sets >>/MediaBox  [ 0 0 612 792 ]% Media box  /Contents  202 0 R % Content stream  /StructParents  1% Parent tree key >>endobj 202  0 obj% Content stream for second page << /Length   >>stream 1","1 1 rg 0 0 612  792 re fBT% Start of text object /Para << /MCID  0 >>% Start of marked-content sequence 0 BDC0 0 0 rg/F12  1 Tf14 0 0 14 18 732 Tm( sentence  . This is the very last se ntence of the first paragraph  . ) TjEMC% End of marked-content sequence 0 /Para << /MCID  1 >>% Start of marked-content sequence 1 BDC /F12  1 Tf14 0 0 14 18 570.8  Tm( This is the second paragraph  . It has four fairly short and concise sentences  . \\ This is the next  to last  ) TjEMC% End of marked -content sequence 1 /Para << /MCID  2 >>% Start of marked-content sequence 2 BDC 1.1429  TLT*( sentence . This is the very last se ntence of the second paragraph"," . ) TjEMC% End of marked -content sequence 2 ET% End of text object endstream endobj 300  0 obj% Structure tree root << /Type  /StructTreeRoot  /K [ 301 0 R % Two children: a chapter   304 0 R % and a paragraph  ]",""],"580":["PDF 32000-1:2008 572 ' Adobe Systems Incorporated 2008  All rights reserved  /RoleMap  << /Chap  /Sect % Mapping to standard structure types   /Head1  /H  /Para /P  >>/ClassMap <<   /Normal 305 0 R >> % Class map containing one attribute class  /ParentTree  400 0 R % Number tree for parent elements  /ParentTreeNextKey  2% Next key to use in parent tree  /IDTree  403 0 R % Name tree for element identifiers >>endobj 301  0 obj% Structure element for a chapter << /Type  /StructElem  /S /Chap /ID  ( Chap1  )% Element identifier  /T ( Chapter 1  )% Human-readable title  /P 300 0 R % Parent is the structure tree root  /K [ 302 0 R % Two children: a section head    303 0 R %     and a paragraph  ]>>endobj 302  0 obj% Structure element for a section head << /Type  /StructElem  /S /Head1  /ID  ( Sec1.1 )% Element identifier  /T ( Section 1.1  )% Human-readable title  /P 301 0 R % Parent is the chapter  /Pg"," 101 1 R % Page containing content items /A  << /O  /Layout % Attribute owned by Layout /SpaceAfter 25 /SpaceBefore 0 /TextIndent 12.5 >> /K 0% Marked-content sequence 0 >>endobj 303  0 obj% Structure element for a paragraph << /Type  /StructElem  /S /Para /ID  ( Para1 )% Element identifier  /P 301 0 R % Parent is the chapter  /Pg 101 1 R % Page containing first content item /C  /Normal % Class containing this elements attributes  /K [ 1% Marked-content sequence 1 << /Type  /MCR% Marked-content  reference to 2nd item /Pg 102 0 R % Page containing second item /MCID  0% Marked-content sequence 0 >> ]>>endobj 304  0 obj% Structure element for another paragraph << /Type  /StructElem  /S /Para /ID  ( Para2 )% Element identifier  /P 300 0 R % Parent is the structure tree root  /Pg 102 0 R % Page containing content items /C  /Normal % Class containing this elements attributes /A << /O  /Layout /TextAlign  /Justify % Overrides attribute provided by classmap",""],"581":["' Adobe Systems Incorporated 2008  All rights reserved 573PDF 32000-1:2008 >> /K [ 1 2 ]% Marked-content sequences 1 and 2 >>endobj 305  0  obj % Attribute class <<  /O  /Layout % Owned by Layout /EndIndent 0 /StartIndent 0 /WritingMode /LrTb /TextAlign /Start >>endobj 400  0 obj % Parent tree << /Nums  [ 0 401 0 R % Parent elements for first page  1 402 0 R % Parent elements for second page    ]>>endobj 401  0 obj% Array of parent elements for first page [ 302 0 R % Parent of marked-content sequence 0     303 0 R % Parent of marked-content sequence 1 ]endobj 402  0 obj% Array of parent elements for second page [ 303 0 R % Parent of marked-content sequence 0    304 0 R % Parent of marked-content sequence 1    304 0 R % Parent of marked-content sequence 2 ]endobj 403  0 obj% ID tree root node << /Kids  [ 404 0 R  ] >>% Reference to leaf node endobj 404  0 obj% ID tree leaf node << /Limits [  (","Chap1  ) ( Sec1.3 ) ] % Least and greatest keys in tree  /Names [  ( Chap1  ) 301 0 R % Mapping from element identifiers   ( Sec1.1  ) 302 0 R %     to structure elements   ( Sec1.2 ) 303 0 R   ( Sec1.3 ) 304 0 R ]>>endobj 14.8 Tagged PDF 14.8.1 General Tagged PDF (PDF  1.4)  is a stylized use of PDF that builds on  the logical structure framework described in  14.7,  Logical Structure.  It defines a set of standard structure types and attributes that allow page content (text,  graphics, and images) to be extracted and reused for  other purposes. A tagged PDF document is one that  conforms to the rules described in this sub-clause. A c onforming writer is not required to produce tagged PDF  documents; however, if it does, it shall conform to these rules. NOTE 1 It is intended for use by tools that  perform the following  types of operations:   Simple extraction of text and graphics for pasting into other applications",""],"582":["PDF 32000-1:2008 574 ' Adobe Systems Incorporated 2008  All rights reserved  Automatic reflow of text and associated graphics to  fit a page of a different size than was assumed for the  original layout   Processing text for such purposes as searching, indexing, and spell-checking   Conversion to other common file formats (such as  HTML, XML, and RTF) with  document structure and  basic styling information preserved   Making content accessible to users with visual impairments (see  14.9, Accessibility Support )A tagged PDF document shall conform to the following rules:  Pag e content  (14.8.2, Tagged PDF and Page Content ). Tagged PDF defines a set of rules for  representing text in the page content  so that characters, words, and text order can be determined reliably.  All text shall be represented in a form that can be  converted to Unicode. Word breaks shall be represented  explicitly. Actual content shall be di stinguished from artifacts of layo ut and pagination. Content shall be given in an order related to its appearance on the page, as determined by the conforming writer.  A  b asic layout model  (14.8.3, Basic  Layout Model ). A set of rules for describing the arrangement of  structure elements on the page. S tructure types  (14.8.4, Standard Structure Types ). A set of standard structure types define the meaning  of structure elements, such as paragr aphs, headings, articles, and tables.  S tructure attributes  (14.8.5, Standard Structure Attributes ). Standard structure attributes preserve styling  information used by the conforming writer in laying out content on the page.  A Tagged PDF document shall also contai n a mark information dictionary (see  Ta b l e  321 ) with a value of truefor the Ma rked  entry. NOTE 2 The types and attributes defined for Tagged PDF are intended to provide a set of standard fallback roles and  minimum guaranteed attributes to enable conforming r eaders to perform operations such as those mentioned  previously. Conforming writers are free to define additional structure types as  long as they also provide a role  mapping to the nearest equivalent standard types, as described in  14.7.3, Structure Types.  Likewise, conforming writers can define additional structure attrib utes using any of the available extension mechanisms.  14.8.2 Tagged PDF and Page Content 14.8.2.1 General Like all PDF documents, a Tagged PDF document consis ts of a sequence of self-contained pages, each of  which shall be described by one or more page content st reams (including any subsidia ry streams such as form  XObjects and annotation appearances). Tagged PDF de fines some further rules for organizing and marking  content streams so that additional information can be derived from them:   Distinguishing between the authors original c ontent and artifacts of t he layout process (see  14.8.2.2, Real  Content and Artifacts ). Specifying a content order to guide the layout proce ss if the conforming reader reflows the page content (see  14.8.2.3, Page Content Order ). Representing text in a form from which a Unicode repr esentation and information about font characteristics  can be unambiguously derived (see  14.8.2.4, Extraction of  Character Properties ). Representing word breaks unambiguously (see  14.8.2.5, Identifying Word Breaks ). Marking text with information fo r making it accessible to user s with visual impairments (see  14.9,  Accessibility Support ).",""],"583":["' Adobe Systems Incorporated 2008  All rights reserved 575PDF 32000-1:2008 14.8.2.2 Real Content and Artifacts 14.8.2.2.1 General The graphics objects in a document  can be divided into two classes:  The  real content  of a document comprises objects representi ng material originally introduced by the  documents author. Art ifacts  are graphics objects that are not part of the autho rs original content but rather are generated by  the conforming writer in the course of pagination , layout, or other strictly mechanical processes.  NOTE Artifacts may also be used to describe areas of the  document where the author uses a graphical background,  with the goal of enhancing the visual experience. In  such a case, the background is not required for  understanding the content. The documents logical structure encompasses all graphic s objects making up the real content and describes  how those objects relate to one another. It does not include graphics objects that are mere artifacts of the  layout and production process. A documents real content includes not only the page co ntent stream and subsidiary form XObjects but also  associated annotations that meet all of the following conditions:   The annotation has an appearance stream (see  12.5.5, Appearance Streams ) containing a normal ( N) appearance.   The annotations Hidden flag (see  12.5.3, Annotation Flags ) is not set.   The annotation is included in the documents logical structure (see  14.7, Logical Structure ).  14.8.2.2.2 Specificat ion of Artifacts An artifact shall be explicit ly distinguished from real content by encl osing it in a marked-content sequence with  the tag Artifact:  /Artifact /Artifact  propertyList BMCBDC or  EMCEMC The first form shall be used to identify a generic artifact; the second shall be used for those that have an  associated property list.  Table  330 shows the properties that can be included in such a property list.  NOTE 1 To aid in text reflow, artifact s should be defined with property lists whenever possible. Artifacts lacking a  specified bounding box are likely to be discarded during reflow.  Table  330    Property list entries for artifacts   KeyType Value Type name (Optional)  The type of artifact that this pr operty list describes; if present,  shall be one of the names  Pagination , Layout , Page , or (PDF 1.7) Background . BBoxrectangle (Optional; required for background artifacts)  An array of four numbers in  default user space units giving the coordinates of the left, bottom, right,  and top edges, respectively, of the artifacts bounding box (the rectangle  that completely encloses  its visible extent).",""],"584":["PDF 32000-1:2008 576 ' Adobe Systems Incorporated 2008  All rights reserved The following types of artifacts can be specified by the  Type  entry: Pag ination artifacts . Ancillary page features such as runn ing heads and folios  (page numbers).  La yout artifacts . Purely cosmetic typographical or design elements such as footnote rules or background  screens.  Page artifacts . Production aids extraneous to the document  itself, such as cut marks and colour bars.  Background artifacts . Images, patterns or coloured blocks that either run the entire length and/or width of  the page or the entire dimensions  of a structural element. Backgr ound artifacts typically serve as a  background for content shown either on top  of or placed adjacent to that background. A background artifact can further be cl assified as visual content that serv es to enhance the user experience,  that lies under the actual content, and that is not required except to retain visual fidelity.  NOTE 2 Examples of this include a coloured background, pattern , blend, or image that resides under main body text. In  the case of white text on a black background, the bla ck background is absolutely necessary to be able to read  the white text; however, the background itself is merely  there to enhance the visual experience. However, a  draft or other identifying watermark is classified as  a pagination artifact because it does not serve to enhance  the experience; rather, it serves as a running artifact ty pically used on every page in the document. As a further  example, a Figure differs from a background artifact in that removal of the graphics objects from a Figure  would detract from the overall contextual  understanding of the Figure as an entity.  Tagged conforming readers may have their own ideas  about what page content to consider relevant. A  text-to-speech engine, for instance, probably should not speak running heads or page numbers when the  page is turned. In general, conforming readers can do any of the following:   Disregard elements of page content (for example, s pecific types of artifacts)  that are not of interest   Treat some page elements as  terminals that are not to be examined furt her (for example, to treat an  illustration as a unit for reflow purposes)   Replace an element with  alternate text (see  14.9.3, Alternate Descriptions ) NOTE 3 Depending on their goals, different conforming reader s can make different decisions in this regard. The  purpose of Tagged PDF is not to prescribe what the conforming reader should do, but to provide sufficient  declarative and descriptive information to allow it to  make appropriate choices about how to process the  content. To support conforming readers in pr oviding accessibility to  users with disabilities, Tagged PDF documents  should use the natural language specification ( Lang ), alternate description ( Alt ), replacement text  (ActualText ), and abbreviation expansion text ( E) facilities described in  14.9, Accessibility Support.  Attached array(Optional; pagination and full-page background artifacts only)  An array of name objects containing one to four  of the names Top, Bottom, Left, and  Right, specifying the edges  of the page, if any, to which the artifact is  logically attached. Page edges shall be defined by the pages crop box  (see 14.11.2, Page Boundaries ). The ordering of names within the array  is immaterial. Including both Left and Right or both Top and Bottom  indicates a full-width or full-height artifact, respectively. Use of this entry for background artifacts shall be limited to full-page  artifacts. Background artifacts that ar e not full-page take their dimensions  from their parent structural element.  Subtypename (Optional; PDF 1.7)  The subtype of the artifact . This entry should appear  only when the  Type  entry has a value of Pagination. Standard values are  Header, Footer, and  Watermark. Additional values may be sp ecified for this entry, provided  they comply with the naming  conventions described in  Annex E.Table 330   Property list entries for artifacts  (continued) Key Type Value",""],"585":["' Adobe Systems Incorporated 2008  All rights reserved 577PDF 32000-1:2008 14.8.2.2.3 Incidental Artifacts In addition to objects that are explicitly marked as arti facts and excluded from the do cuments logical structure,  the running text of a page may contain other elements  and relationships that are not logically part of the  documents real content, but merely incidental results of  the process of laying out that content into a document.  They may include the following elements: Hyphe nation . Among the artifacts introduced by text layout  is the hyphen marking the incidental division of  a word at the end of a line. In Tagged PDF, such an  incidental word division  shall be represented by a  soft  hyphen  character, which the Unicode mapping algorithm (see  Unicode Mapping in Tagged PDF  in 14.8.2.4, Extraction of Character Properties ) translates to the Unicode va lue U+00AD. (This character is distinct from an ordinary  hard hyphen , whose Unicode value is U+002D.) The producer of a Tagged PDF  document shall distinguish explicitly between soft an d hard hyphens so that the consumer does not have  to guess which type a given character represents. NOTE 1 In some languages, the situation is more comp licated: there may be multip le hyphen characters, and  hyphenation may change the spelling of words. See the Example in  14.9.4, Replacement Text. Text discontinuities . The running text of a page, as expressed in page content order (see  14.8.2.3, Page  Content Order ), may contain places where the normal progression of text suffers a discontinuity.  Conforming readers may recognize such discontinuities  by examining the documents logical structure.  NOTE 2 For example, the page may contain t he beginnings of two separate articles (see  12.4.3, Articles ), each of which is continued onto a later page of the document. T he last words of the first article appearing on the page  should not be run together with the  first words of the second article. Hidden page elements . For a variety of reasons, elements of a  documents logical cont ent may be invisible  on the page: they may be clipped, their colour may match the background, or they may be obscured by  other, overlapping objects. For the purposes of Tag ged PDF, page content shall be considered to include  all text and illustrations in their en tirety, regardless of whether they  are visible when the document is  displayed or printed.  NOTE 3 For example, formerly invisible elements may beco me visible when a page is reflowed, or a text-to-speech  engine may choose to speak text that is not visible to a sighted reader. 14.8.2.3 Page  Content Order 14.8.2.3.1 General When dealing with material on a page-by-page basis, some Tagged PDF conforming readers may choose to  process elements in  page content order , determined by the sequencing of  graphics objects within a pages  content stream and of characters within a text object, rather than in the  logical structure order  defined by a  depth-first traversal of the pages logi cal structure hierarchy. The two orderings are logically distinct and may or  may not coincide. In particular, any artifacts the page  may contain shall be included in the page content order  but not in the logical structure order, since they are not  considered part of the documents logical structure. The conforming writer is responsible for establishing both an  appropriate page content order for each page and an  appropriate logical structure hi erarchy for the entire document.  Because the primary requirement for page content order is to enable reflow to maintain elements in proper  reading sequence, it should normally (for Western writing systems)  proceed from top to  bottom (and, in a  multiple-column layout,  from column to column), with  artifacts in their correct relative places. In general, all  parts of an article that appear on a given page should be  kept together, even if the article flows to scattered  locations on the page. Illustrations or footnotes may be in terspersed with the text of the associated article or  may appear at the end of its content (or, in the case of f ootnotes, at the end of the entire pages logical content).  In some situations, conforming writer may be unable  to determine correct page co ntent order for part of a  documents contents. In such cases,  tag suspects (PDF 1.6)  can be used. The conforming writer shall identify  suspect content by using marked content (see  14.6, Marked Content ) with a tag of TagSuspect, as shown in  next Example. The marked content shall have a pr operties dictionary with an entry whose name is  TagSuspect",""],"586":["PDF 32000-1:2008 578 ' Adobe Systems Incorporated 2008  All rights reserved and whose value is  Ordering , which indicates that the ordering of the enclosed marked content does not meet  Tagged PDF specifications. NOTE This can occur, for example, if content was extracted  from another application, or  if there are ambiguities or  missing information in text output. EXAMPLE /TagSuspect <</T agSuspect /Ordering>> BDC....% Problem page contents EMCDocuments containing tag suspects shall contain a  Suspects  entry with a value of  true  in the mark information  dictionary (see  Ta b l e  321 ). 14.8.2.3.2 Sequencing of Annotations Annotations associated with a page are not interleaved  within the pages content stream but shall be placed in  the Annots  array in its page object (see  7.7.3.3, Page Objects ). Consequently, the correct position of an  annotation in the page content order is not readily appa rent but shall be determined from the documents logical  structure.  Both page content (marked-content sequences) and an notations may be treated as content items that are  referenced from structure elements (see  14.7.4, Structure Content ). Structure elements of type Annot ( PDF 1.5), Lin k, or Form (see  14.8.4.4, Inline-Level Structure Elements,  and  14.8.4.5, Illustration Elements ) explicitly specify the association bet ween a marked-content sequence and a corresponding annotation. In other  cases, if the structure element corres ponding to an annotation immediately precedes or follows (in the logical  structure order) a structure element corresponding to  a marked-content sequence, t he annotation is considered  to precede or follow the marked-content sequenc e, respectively, in the page content order.  NOTE If necessary, a conforming writer may introduce an  empty marked-content sequence solely to serve as a  structure element for the purpose of positioning adjacent annotations in the page content order.  14.8.2.3.3 Reverse-Order Show Strings NOTE 1 In writing systems that are read from  right to left (such as Arabic or Hebr ew), one might expect that the glyphs  in a font would have their origins at the lower right  and their widths (rightward horizontal displacements)  specified as negative. For various technical and historical  reasons, however, many such fonts follow the same  conventions as those designed for Western writing systems, with gly ph origins at the lower left and positive  widths, as shown in  Figure 39 . Consequently, showing text in such right-to-left writing systems requires either  positioning each glyph individually (which is tedious  and costly) or representing text with show strings (see  9.2,  Organization and Use of Fonts ) whose character codes are given in re verse order. When the latter method is  used, the character codes correct page content order is  the reverse of their order  within the show string.  The marked-content tag ReversedChars informs the conf orming reader that show strings within a marked- content sequence contain characters in the reverse of  page content order. If the sequence encompasses  multiple show strings, only the indivi dual characters within each string shall be reversed; the strings themselves  shall be in natural reading order.  EXAMPLE The sequence /ReversedChars BMC( olleH  ) Tj200 0 Td( . dlrow  ) TjEMCrepresents the text Hello world  .",""],"587":["' Adobe Systems Incorporated 2008  All rights reserved 579PDF 32000-1:2008 The show strings may have a SPACE (U+0020) character at  the beginning or end to indicate a word break (see  14.8.2.5, Identifying Word Breaks ) but shall not contain interior SPACEs.  NOTE 2 This limitation is not serious, since a SPACE provides  an opportunity to realign the typography without visible  effect, and it serves the valuable purpose of limitin g the scope of reversals for word-processing conforming  readers.  14.8.2.4 Extraction of  Character Properties14.8.2.4.1 General Tagged PDF enables character codes to be unambiguou sly converted to Unicode values representing the  information content of the text. There are several methods for doing this; a Tagged PDF document shall conform to at least one of them (see  Unicode Mapping in Tagged PDF  in 14.8.2.4, Extraction of Character  Properties ). In addition, Tagged PDF enables some characteri stics of the associated fonts to be deduced (see  Font Characteristics  in 14.8.2.4, Extraction of Character Properties ). NOTE These Unicode values and font characteristics can then  be used for such operations as cut-and-paste editing,  searching, text-to-speech conversion, and export ing to other applications or file formats.  14.8.2.4.2 Unicode Mapping in Tagged PDF Tagged PDF requires that every character code in  a document can be mapped to a corresponding Unicode  value. NOTE 1 Unicode defines scalar values for  most of the characters used in the wo rlds languages and  writing systems, as well as providing a private use area for applicati on-specific characters. Information about Unicode can be  found in the Unicode Standard, by the Unicode Consortium (see the  Bibliography ). The methods for mapping a character code to a Unicode value are described in  9.10.2, Mapping Character  Codes to Unicode Values.  A conforming writer shall ensure that th e PDF file contains enough information to  map all character codes to Unicode by  one of the methods described there.  NOTE 2 An  Alt , ActualText , or E entry specified in a structure element dict ionary or a marked-content property list (see  14.9.3, Alternate Descriptions,  14.9.4, Replacement Text,  and  14.9.5, Expansion of  Abbreviations and  Acronyms ) may affect the character stream that some conf orming readers actually use. For example, some  conforming readers may choose to use the  Alt or ActualText  value and ignore all text and other content  associated with the structure element and its descendants.  NOTE 3 Some uses of Tagged PDF require characters that may  not be available in all fonts, such as the soft hyphen  (see 14.8.2.2.3, Incidental Artifacts ). Such characters may be represented  either by adding them to the fonts  encoding or CMap and using  ToUnicode  to map them to appropriate Unicode values, or by using an  ActualText  entry in the associated structure element to provide substitute characters.  14.8.2.4.3 Font  Characteristics In addition to a Unicode value, each character code  in a content stream has an  associated set of font  characteristics. These characteristics  are not specified explicitly  in the PDF file. Instead, the conforming reader  derives the characteristics from the f ont descriptor for the font that is se t in the text state at the time the  character is shown. NOTE These characteristics are useful when exporting text to another application or file  format that has a limited  repertoire of available fonts.  Ta b l e  331 lists a common set of font char acteristics corresponding to thos e used in CSS and XSL; the W3C  document  Extensible Stylesheet Language (XSL) 1.0  provides more information (see the  Bibliography ). Each  of the characteristics shall be  derived from information available in the font descriptors  Flags  entry (see  9.8.2, Font Descriptor Flags ).",""],"588":["PDF 32000-1:2008 580 ' Adobe Systems Incorporated 2008  All rights reserved The characteristics shown in the table apply only to ch aracter codes contained in show strings within content  streams. They do not exist for alternate description text ( Alt), replacement text ( ActualText ), or abbreviation  expansion text ( E). For the standard 14 Type 1 fonts, the font descriptor  may be missing; the well-known values for those fonts  shall be used.  Tagged PDF in PDF 1.5 defines a wider set of font  characteristics, which prov ide information needed when  converting PDF to other files format s such as RTF, HTML, XML, and O EB, and also impr ove accessibility and reflow of tables.  Ta b l e  332  lists these  font selector attributes  and shows how their values shall be derived.  If the  Fo ntFamily , FontWeight  and  FontStretch  fields are not present in the font  descriptor, these values shall be  derived from the font name in a manner of the conforming readers choosing. Table  331   Derivation of font characteristics   Characteristic Type Derivation Serifedboolean The value of the Serif flag in the font descriptors  Flags  entry  Proportional boolean The complement of the FixedPitch  flag in the font descriptors  Flags entry  Italic boolean The value of the Italic flag in the font descriptors  Flags  entry  Smallcap boolean The value of the SmallCap flag in the font descriptors  Flags  entry Table  332   Font selector attributes   AttributeDescription  FontFamily A string specifying the preferred fo nt family name.  Derived from the  FontFamily entry in the font descriptor (see  Ta b l e  122 ).GenericFontFamily A general font classification, used if Fo ntFamily is not found. Derived from the  font descriptors  Flags  entry as follows: Serif Chosen if the Serif flag is set and the FixedPitch and Script flags  are not setSansSerif Chosen if the FixedPitch, Script and Serif flags are all not set Cursive Chosen if the Script flag is set and the FixedPitch flag is not set Monospace Chosen if the FixedPitch flag is set NOTE The values Decorative and Symbol cannot be derived FontSize The size of the font: a positive number  specifying the height of the typeface in  points. Derived from the a, b, c, and  d fields of the current text matrix. FontStretch The stretch value of t he font. Derived from  FontStretch  in the font descriptor  (see Ta b l e  122).FontStyle The italicization value of the  font. It shall be Italic if t he Italic flag is set in the  Flags  field of the font descriptor; otherwise, it shall be Normal. FontVariant The small-caps value of the font. It shal l be SmallCaps if the SmallCap flag is set  in the  Flags  field of the font descriptor;  otherwise, it shall be Normal. FontWeight The weight (thickness) value of the font. Derived from  FontWeight  in the font  descriptor (see  Ta b l e  122 ).The ForceBold flag and the  StemV  field should not be used to set this attribute.",""],"589":["' Adobe Systems Incorporated 2008  All rights reserved 581PDF 32000-1:2008 14.8.2.5 Identifying Word Breaks NOTE 1 A documents text stream defines not only the ch aracters in a pages text but also the words. Unlike a  character, the notion of a word is  not precisely defined but depends on th e purpose for which the text is being  processed. A reflow tool needs to determine where it can break the running text into lines; a text-to-speech  engine needs to identify the words to be vocalized; spelling checkers and other applications all have their own  ideas of what constitutes a word. It is not important fo r a Tagged PDF document to  identify the words within the  text stream according to a single, unambiguous definition th at satisfies all of these clients. What is important is  that there be enough information available for each client to make that determination for itself.  A conforming reader of a Tagged PDF document may find words by sequentially examining the Unicode  character stream, perhaps augmented  by replacement te xt specified with  ActualText  (see  14.9.4,  Replacement Text ). For this purpose the spacing characters that would be present to separate words in a  pure text representation shall be present in the Tagged PDF representation of the text.  NOTE 2 The conforming reader does not need to guess ab out word breaks based on information such as glyph  positioning on the page, font changes, or glyph sizes. NOTE 3 The identification of what constitutes a word is unr elated to how the text happens to be grouped into show  strings. The division into show strings has no semantic  significance. In particular,  a SPACE (U+0020) or other  word-breaking character is still needed even if a word  break happens to fall at the end of a show string.  NOTE 4 Some conforming readers may identify words by si mply separating them at ev ery SPACE character. Others  may be slightly more sophisticated and treat punctuation marks such as hyphens or em dashes as word  separators as well. Still others may identify possible li ne-break opportunities by usi ng an algorithm similar to  the one in Unicode Standard Annex #29, Text Boundaries, available from the Unicode Consortium (see the  Bibliography ).  14.8.3 Basic Layout Model The basic layout model begins with the notion of a  reference area . This is a rectangular region used as a frame  or guide in which to place the documents content. So me of the standard structure attributes, such as  StartIndent  and  EndIndent  (see  14.8.5.4.3, Layout Attributes for BLSEs ), shall be measured from the  boundaries of the reference area. Reference areas are not specified explicitly but are inferred from context.  Those of interest are generally the column area or areas in a general text layout, the outer bounding box of a  table and those of its com ponent cells, and the bounding box of an illustration  or other floating element.  NOTE 1 Tagged PDFs standard structure ty pes and attributes shall be interprete d in the context of a basic layout  model that describes the arrangement  of structure elements on the page. Th is model is designed to capture  the general intent of the documents underlying st ructure and does not necessarily correspond to the one  actually used for page layout by the application creati ng the document. (The PDF co ntent stream specifies the  exact appearance.) The goal is to pr ovide sufficient information for conforming readers to make their own  layout decisions while preserving the au thoring applications intent as closely as their own layout models allow.  NOTE 2 The Tagged PDF layout model resembles the ones used in markup languages such as HTML, CSS, XSL, and  RTF, but does not correspond exactly to any of them. The model is deliberately defined loosely to allow  reasonable latitude in the interpretation of struct ure elements and attributes  when converting to other  document formats. Some degree of va riation in the resulting layout from one format to another is to be  expected.  The standard structure types are divided into four main  categories according to the roles they play in page  layout:  Gr ouping elements  (see  14.8.4.2, Grouping Elements ) group other elements into sequences or  hierarchies but hold no content directly and have no direct effect on layout.  Block-level structure elements  (BLSEs) (see  14.8.4.3, Block-Level Structure Elements ) describe the  overall layout of content on the page, proceeding in the  block-progression direction . Inlin e-level structure elements  (ILSEs) (see  14.8.4.4, Inline-Level Structure Elements ) describe the layout  of content within a BLSE, proceeding in the  inline-progression direction .",""],"590":["PDF 32000-1:2008 582 ' Adobe Systems Incorporated 2008  All rights reserved Illustration elements  (see  14.8.4.5, Illustration Elements ) are compact sequences of content, in page  content order, that are considered to  be unitary objects with respect to  page layout. An illustration can be  treated as either a BLSE or an ILSE.  The meaning of the terms  block-progression direction  and  inline-progression direction  depends on the writing  system in use, as specified by the standard attribute  WritingMode  (see  14.8.5.4.2, General Layout  Attributes ). In Western writing systems, the  block direction is from top to bottom and the inline direction is from  left to right. Other writin g systems use different direct ions for laying out content.  Because the progression directions c an vary depending on the writing system , edges of areas  and directions  on the page are identified by terms t hat are neutral with respec t to the progressi on order rather than by familiar  terms such as  up, down, left , and  right . Block layout proceeds from  before  to after , inline from start  to end . Thus, for example, in Western writing systems, the before  and after edges of a reference area are at the top  and bottom, respectively, and the start and end edges are at the left and right. Another term,  shift direction  (the direction of shift for a supers cript), refers to the direction opposite that  for block progressionthat is, from after  to before (in Western writing systems, from bottom to top).  BLSEs shall be  stacked  within a reference area in block-progression order. In general, the first BLSE shall be placed against the before edge of the reference area . Subsequent BLSEs shall be stacked against preceding  ones, progressing toward the after edge, until no more BL SEs fit in the reference area. If the overflowing BLSE  allows itself to be splitsuch as a paragraph that can be split between lines of texta portion of it may be  included in the current reference area and the remainde r carried over to a subsequent reference area (either  elsewhere on the same page or on another page of the do cument). Once the amount of  content that fits in a  reference area is determined, the placements of the i ndividual BLSEs may be adjusted to bias the placement  toward the before edge, the middle, or the after edge  of the reference area, or the spacing within or between  BLSEs may be adjusted to fill the full extent of the  reference area. BLSEs may be nested, with child BLSEs stacked within a parent BLSE in the same manner as BLSEs within a  reference area. Except in a few instances noted (the  BlockAlign and InlineAlign elements), such nesting of  BLSEs does not result in the nesting of  reference areas; a single reference ar ea prevails for all levels of nested  BLSEs. Within a BLSE, child ILSEs shall be  packed  into lines. Direct content items those that are immediate children  of a BLSE rather than contained within a child ILSEshall  be implicitly treated as ILSEs for packing purposes.  Each line shall be treated as a synthesized BLSE and shall be stacked within the parent BLSE. Lines may be  intermingled with other BLSEs within the parent area. This  line-building process is analogous to the stacking of  BLSEs within a reference area, except that it procee ds in the inline-progression rather than the block- progression direction: a line shall be packed with ILSEs  beginning at the start edge of the containing BLSE and  continuing until the end edge shall be reached and the line is full. The overflowing ILSE may allow itself to be  broken at linguistically determined or  explicitly marked break points (such as hyphenation points within a word),  and the remaining fragment shall be carried over to the next line.  Certain values of an elements  Placement  attribute remove the element from the normal stacking or packing  process and allow it instead to float to a specified ed ge of the enclosing reference area or parent BLSE; see  General Layout Attributes  in 14.8.5.4, Layout Attributes,  for further discussion.  Two enclosing rectangles shall be associated with each BL SE and ILSE (including direct content items that are treated implicitly as ILSEs):  The  content rectangle  shall be derived from the shape of the enclosed content and defines the bounds  used for the layout of any included child elements.  The  allocation rectangle  includes any additional borders or spacing surrounding the element, affecting how  it shall be positioned with respect to adjacent element s and the enclosing content rectangle or reference  area.  The definitions of these rectangles shall be determin ed by layout attributes as sociated with the structure  element; see  14.8.5.4.5, Content and Allocation Rectangles  for further discussion.",""],"591":["' Adobe Systems Incorporated 2008  All rights reserved 583PDF 32000-1:2008 14.8.4 Standard Structure Types 14.8.4.1 General Tagged PDFs  standard structure types  characterize the role of a content element within the document and, in  conjunction with the standard structure attributes (described in  14.8.5, Standard Structure Attributes ), how  that content is laid out on the page. As discussed in  14.7.3, Structure Types,  the structure type of a logical  structure element shall be specified by the  S entry in its structure element dictionary. To be considered a  standard structure type, this value shall be either:  One of the standard structure type names described in  14.8.4.2, Grouping Elements.   An arbitrary name that shall be mapped to one of the standard names by the documents role map (see  14.7.3, Structure Types ), possibly through mult iple levels of mapping. NOTE 1 Beginning with PDF 1.5, an elem ent name is always mapped to its corresponding name in the role map, if  there is one, even if the original name is one of the st andard types. This is done to allow the element, for  example, to represent a tag with the same name as a standard role, even though its use differs from the  standard role. Ordinarily, structure elements having standard structure types shall be processed the same way whether the  type is expressed directly or is dete rmined indirectly from the role map. However, some conforming readers may ascribe additional semantics to nonstandard structur e types, even though the role map associates them  with standard ones.  NOTE 2 For instance, the  actual values of the  S entries may be used when exporting to a tagged representation such  as XML, and the corresponding role-mapped values shall be used when converting to presentation formats  such as HTML or RTF, or for purposes such as re flow or accessibility to users with disabilities.  NOTE 3 Most of the standard element types  are designed primarily for laying out text; the terminology reflects this  usage. However, a layout may in fact include any  type of content, such as path or image objects.  The content items associated with a structure element sha ll be laid out on the page as if they were blocks of  text (for a BLSE) or characters within a line of text (for an ILSE).  14.8.4.2 Grouping Elements Grouping elements  shall be used solely to group other structure elements; they are not directly associated with  content items.  Ta b l e  333  describes the standard structure types for elements in this category.  H.8, Structured  Elements That Describe Hierarchical Lists  provides an example of nested table of content items. In a tagged PDF document, the structure tree shall contain a single top-level element; that is, the structure tree  root (identified by the  StructTreeRoot  entry in the document catalogue) shall have only one child in its  K (kids)  array. If the PDF file contains a complete document, the structure type Document should be used for this top- level element in the logical structure hierarchy. If the  file contains a well-formed document fragment, one of the  structure types Part, Art, Sect, or Div may be used instead.  Table  333    Standard structure types for grouping elements   Structure type Description Document (Document) A complete docum ent. This is the root elem ent of any structure tree  containing multiple parts or multiple articles.  Part(Part) A large-scale division of a document. T his type of element is appropriate for  grouping articles or sections.  Art(Article) A relatively self-contained body of text constituting a single narrative or  exposition. Articles should be disjoint; that  is, they should not contain other articles as  constituent elements.",""],"592":["PDF 32000-1:2008 584 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.4.3 Block-Level Structure Elements 14.8.4.3.1 General A blo ck-level structure element (BLSE)  is any region of text or other c ontent that is laid out in the block- progression direction, such as a paragr aph, heading, list item, or footnote.  A structure element is a BLSE if its  structure type (after role mapping, if any) is one of those listed in  Ta b l e  334 . All other standard structure types  shall be treated as ILSEs, with the following exceptions:  Sect(Section) A container for grouping related content elements.  NOTE 1 For example, a section might  contain a heading, several introductory  paragraphs, and two or more other sections nested within it as  subsections.  Div(Division) A generic block-level element or group of elements.  BlockQuote(Block quotation) A portion of text consisting of one or more paragraphs attributed to  someone other than the author of the surrounding text.  Caption (Caption) A brief portion of text describing a table or figure.  TOC (Table of contents) A list made up of tabl e of contents item entries (structure type  TOCI) and/or other nested table  of contents entries (TOC).  A TOC entry that includes only TOCI entries represents a flat hierarchy. A TOC entry  that includes other nested TOC entries (a nd possibly TOCI entries) represents a  more complex hierarchy. Ideally, the hierarchy of a top level TOC entry reflects the  structure of the main  body of the document.  NOTE 2 Lists of figures and tables, as  well as bibliographies, can be treated as  tables of contents for purposes  of the standard structure types.  TOCI (Table of contents item) An individual member of a table of contents. This entrys  children may be any of the following structure types: LblA label (see  List Elements  in 14.8.4.3, Block-Level Structure  Elements )Reference A reference to the title and the page number (see  Inline-Level  Structure Elements  in  14.8.4.4, Inline-Level Structure Elements )NonStruct Non-structure elements for wrapping a leader artifact (see  Grouping  Elements  in 14.8.4.2, Grouping Elements ).PDescriptive text (see  Paragraphlike Elements  14.8.4.3, Block-Level  Structure Elements )TOC Table of content elements for hi erarchical tables of content, as  described for the TOC entry Index (Index) A sequence of entries containing identifying text accompanied by reference  elements (structure type Reference; see  14.8.4.4, Inline-Level Structure Elements ) that point out occurrences of  the specified text in the main body of a document.  NonStruct (Nonstructural element) A grouping elem ent having no inherent structural  significance; it serves solely for grouping  purposes. This type of element differs from  a division (structure type Div) in that it  shall not be interpreted or exported to other  document formats; however, its descendants shall be processed normally.  Private(Private element) A grouping element cont aining private content belonging to the  application producing it. The structural si gnificance of this type of element is  unspecified and shall be determined entirely  by the conforming writer. Neither the  Private element nor any of its descendants shall be interpreted or exported to other  document formats.  Table 333   Standard structure types for grouping elements  (continued) Structure type Description",""],"593":["' Adobe Systems Incorporated 2008  All rights reserved 585PDF 32000-1:2008  TR (Table row), TH (Table header),  TD (Table data), THead (Table head), TBody (Table body), and TFoot  (Table footer), which shall be used to group elements within a table and shall be considered neither BLSEs  nor ILSEs Elements with a  Placement  attribute (see  General Layout Attributes  in 14.8.5.4, Layout Attributes ) other than the default value of Inline  In many cases, a BLSE may appear as one compact, cont iguous piece of page content; in other cases, it may  be discontiguous.  NOTE Examples of the latter include a  BLSE that extends across a page boundary or is interrupted in the page  content order by another, nested BLSE or a directly  included footnote. When necessary, Tagged conforming  readers can recognize such fragmented BLSEs from th e logical structure and use this information to  reassemble them and properly lay them out.  14.8.4.3.2 Paragraphlike Elements Ta b l e  335 describes structure types for  paragraphlike elements  that consist of running text and other content  laid out in the form of conventional paragraphs (as opposed to more specialized layouts such as lists and  tables).  14.8.4.3.3 List Elements Ta b l e  336 describes structure types for organizing the content of lists.  H.8, Structured Elements That Describe  Hierarchical Lists  provides an example of nested list entries. Table  334    Block-level structure elements   Category Structure types Paragraphlike elements PH1H 4HH2H 5H3H6List elements LLblLI LBody Table element Ta b l e Table  335    Standard structure types for paragraphlike elements   Structure Type Description H(Heading) A label for a subdivision of a documents content. It should be the first  child of the division that it heads.  H1H6 Headings with specific levels, for use  in conforming writers that cannot  hierarchically nest their sections and thus  cannot determine the level of a heading  from its level of nesting.  P(Paragraph) A low-level division of text.  Table  336    Standard structure types for list elements   Structure Type Description L(List) A sequence of items of like meani ng and importance. Its immediate children  should be an optional caption (s tructure type Caption; see  14.8.4.2, Grouping  Elements ) followed by one or more list items (structure type LI).  LI(List item) An individual member of a list.  Its children may be one or more labels,  list bodies, or both (struc ture types Lbl or LBody).",""],"594":["PDF 32000-1:2008 586 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.4.3.4 Table Elements The structure types described in  Ta b l e  337  shall be used for organizing the content of tables.  NOTE 1 Strictly speaking, the  Table  element is a BLSE; the others in th is table are neither BLSEs or ILSEs. NOTE 2 The association of headers with rows and columns of dat a is typically determined heuristically by applications.  Such heuristics may fail for comp lex tables; the standard attr ibutes for tables shown in  Ta b l e  348 can be used  to make the association explicit.  14.8.4.3.5 Usage Guidelines for Block-Level Structure Because different conforming readers  use PDFs logical structure facilities  in different ways, Tagged PDF does  not enforce any strict rules regarding the order and nes ting of elements using the standard structure types.  Furthermore, each export format has its own conventions  for logical structure. However, adhering to certain  general guidelines helps to achieve  the most consistent and  predictable interpretation among different Tagged  PDF consumers.  Lbl (Label) A name or number that distinguishes a  given item from others in the same  list or other group of like items.  NOTE In a dictionary list, for example, it  contains the term being defined; in a  bulleted or numbered list, it co ntains the bullet character or the  number of the list item  and associated punctuation.  LBody (List body) The descriptive content of a list item. In a dictionary list, for example, it  contains the definition of the term. It may ei ther contain the content directly or have  other BLSEs, perhaps including  nested lists, as children.  Table  337    Standard structure types for table elements   Structure Type Description Ta b l e (Table) A two-dimensional layout of rectangular data cells, possibly having a  complex substructure. It contains either one or more table rows (structure type TR)  as children; or an optional table head (str ucture type THead) followed by one or  more table body elements (structure  type TBody) and an optional table footer  (structure type TFoot). In addition, a ta ble may have a caption (structure type  Caption; see  14.8.4.2, Grouping Elements ) as its first or last child.  TR(Table row) A row of headings or data in a table. It may contain table header cells  and table data cells (structure types TH and TD).  TH(Table header cell) A table cell containing header text describing one or more rows  or columns of the table.  TD(Table data cell) A table cell containing dat a that is part of  the tables content.  THead (Table header row group;  PDF 1.5) A group of rows that constitute the header of a  table. If the table is split across multip le pages, these rows may be redrawn at the  top of each table fragment (although  there is only one THead element). TBody (Table body row group;  PDF 1.5) A group of rows that constitute the main body  portion of a table. If the table is split ac ross multiple pages, th e body area may be  broken apart on a row boundary. A table may have multiple TBody elements to  allow for the drawing of a border or background for a set of rows. TFoot (Table footer row group;  PDF 1.5) A group of rows that c onstitute the footer of a  table. If the table is split across multip le pages, these rows may be redrawn at the  bottom of each table fragment (altho ugh there is only one TFoot element.) Table 336   Standard structure types for list elements  (continued) Structure Type Description",""],"595":["' Adobe Systems Incorporated 2008  All rights reserved 587PDF 32000-1:2008 As described under  14.8.4.2, Grouping Elements,  a Tagged PDF document may have one or more levels of  grouping elements, such as Document, Part, Art (Article ), Sect (Section), and Div  (Division). The descendants  of these should be BLSEs, such as H (Heading), P (Parag raph), and L (List), that hold  the actual content. Their  descendants, in turn, should be either content  items or ILSEs that furt her describe the content.  NOTE 1 As noted earlier, elements with structure types  that would ordinarily be treated as ILSEs may have a  Placement  attribute (see  General Layout Attributes  in 14.8.5.4, Layout Attributes ) that causes them to be  treated as BLSEs instead. Such elements may be incl uded as BLSEs in the same manner as headings and  paragraphs.  The block-level structure may follow one of two principal paradigms:  S trongly structured . The grouping elements nest to as many le vels as necessary to reflect the organization  of the material into articles, sections, subsections,  and so on. At each level, the children of the grouping  element should consist of a heading (H), one or more  paragraphs (P) for content at that level, and perhaps  one or more additional grouping elements for nested subsections.  W eakly structured . The document is relatively flat, having perhaps only one or two levels of grouping  elements, with all the headings, paragraphs, and other BL SEs as their immediate children. In this case, the  organization of the material is not  reflected in the logical structure; however, it may be expressed by the  use of headings with specific levels (H1H6).  NOTE 2 The strongly structured paradigm  is used by some rich document  models based on XML. The weakly  structured paradigm is typical of  documents represented in HTML. Lists and tables should be organized using th e specific structure types described under  List Elements  in 14.8.4.3, Block-Level Structure Elements,  and  Table Elements  in 14.8.4.3, Block-Level Structure Elements . Likewise, tables of contents and indexes should be stru ctured as described for the TOC and Index structure  types under  Grouping Elements  in 14.8.4.2, Grouping Elements.  14.8.4.4 Inline-Level  Structure Elements 14.8.4.4.1 General An in line-level structure element (ILSE)  contains a portion of text or ot her content having specific styling  characteristics or playing a specific  role in the document. Within a paragraph or other block defined by a  containing BLSE, consecutive ILSEsp ossibly intermixed with other content items that are direct children of  the parent BLSEare laid out consecutively in the inline-progression direction (left to right in Western writing  systems). The resulting content may be broken into multiple  lines, which in turn shall be  stacked in the block- progression direction. An ILSE may in turn contain a BLSE,  which shall be treated as a unitary item of layout in  the inline direction.  Table  338 lists the standard structure types for ILSEs.",""],"596":["PDF 32000-1:2008 588 ' Adobe Systems Incorporated 2008  All rights reserved Table  338    Standard structure types for inline-level structure elements   Structure Type Description Span (Span) A generic inline portion of text having  no particular inherent characteristics.  It can be used, for example, to delimit a range of text with a given set of styling  attributes. NOTE 1 Not all inline style changes need to  be identified as a span. Text colour  and font changes (including modifier s such as bold, italic, and small  caps) need not be so marked, since these can be derived from the  PDF content (see  Font Characteristics  in  14.8.2.4, Extraction of  Character Properties ). However, it is necessary to use a span to  apply explicit layout  attributes such as  LineHeight , BaselineShift , or TextDecorationType  (see Layout Attributes for ILSEs  in 14.8.5.4,  Layout Attributes ).NOTE 2 Marked-content  s equences having the tag Span are also used to  carry certain accessi bility properties ( Alt, ActualText , Lang , and  E; see 14.9, Accessibility Support ). Such sequences lack an  MCIDproperty and are not associated wit h any structure element. This use  of the Span marked-content tag is di stinct from its use as a structure  type.  Quote(Quotation) An inline portion of text attr ibuted to someone other  than the author of  the surrounding text.  The quoted text should be contained inli ne within a single paragraph. This differs  from the block-level element BlockQuote (see  14.8.4.2, Grouping Elements ), which consists of one or more complete  paragraphs (or other elements presented  as if they were complete paragraphs).  Note(Note) An item of explanat ory text, such as a footnote  or an endnote, that is  referred to from within the body of the docu ment. It may have a label (structure type  Lbl; see  List Elements  in  14.8.4.3, Block-Level Structure Elements ) as a child.  The note may be included as a child of the  structure element in the body text that  refers to it, or it may be included elsew here (such as in an endnotes section) and  accessed by means of a reference (structure type Reference).  Tagged PDF does not prescribe the placement of footnotes in the page content  order. They may be either inline or at th e end of the page, at the discretion of the conforming writer.  Reference (Reference) A citation to content  elsewhere in the document.  BibEntry(Bibliography entry) A reference identifyi ng the external source of some cited  content. It may contain a label (structure type Lbl; see  List Elements  in 14.8.4.3,  Block-Level Structure Elements ) as a child.  Although a bibliography entry is likely to include component parts identifying the  cited contents author, work, publisher, a nd so forth, no standard structure types  are defined at this level of detail.  Code (Code) A fragment of co mputer program text.  Link (Link) An association between a portion  of the ILSEs content and a corresponding  link annotation or annotations (see  12.5.6.5, Link Annotations ). Its children should  be one or more content items or child IL SEs and one or more object references  (see 14.7.4.3, PDF Objects as Content Items ) identifying the associated link  annotations. See  Link Elements  in  14.8.4.3, Block-Level Structure Elements,  for further discussion. Annot (Annotation; PDF 1.5) An association between a portion of the ILSEs content and  a corresponding PDF annotation (see  12.5, Annotations ). Annot shall be used for  all PDF annotations except link annotations (see the Link element) and widget  annotations (see the Form element in  Table  340 ). See Annotation Elements 14.8.4.4, Inline-Level Structure Elements,  for further discussion.",""],"597":["' Adobe Systems Incorporated 2008  All rights reserved 589PDF 32000-1:2008 14.8.4.4.2 Link Elements NOTE 1 Link annotations (like all PDF annotations) are associ ated with a geometric region of the page rather than with  a particular object in its content stream. Any connection  between the link and the content is based solely on  visual appearance rather than on an explicitly specified a ssociation. For this reason,  link annotations alone are  not useful to users with visual impairments or to  applications needing to determine which content can be  activated to invoke a hypertext link.  Tagged PDF link elements (structure type Link) use PDFs logical structure fa cilities to establish the association  between content items and link annotations, providing fu nctionality comparable to  HTML hypertext links. The  following items may be children of a link element:   One or more content items or other ILSEs (except other links)   Object references (see  14.7.4.3, PDF Objects as Content Items ) to one or more link annotations  associated with the content  When a Link structure element describes a span of text to  be associated with a link annotation and that span  wraps from the end of one line to the beginning of another, the  Link  structure element shall include a single  object reference that associates the span with the associ ated link annotation. Further, the link annotation shall use the  QuadPoint  entry to denote the active areas on the page.  EXAMPLE 1 The  Link  structure element references a link annotation that includes a  QuadPoint  entry that boxes the  strings with a and link. That is, the  QuadPoint  entry contains 16 numbers: the first 8 numbers describe  a quadrilateral for with a, and the next  8 describe a quadrilateral for link. NOTE 2 Beginning with PDF 1.7, use of the  Link structure element to enclose multip le link annotations is deprecated.  EXAMPLE 2 Consider the following  fragment of HTML code, which produces a line of text c ontaining a hypertext link:  < html >< body  >< p >Here is some text < a href = http : / / www . adobe  . com >with a link<  /a > inside  .< /body  >< /html  >This code sample shows an equivalent fragment of PD F using a link element, whose text it displays in  blue and underlined.  /P << /MCID  0 >> % Marked-content sequence 0 (paragraph) BDC % Begin marked-content sequence Ruby (Ruby; PDF 1.5) A side-note (annotation) written in a smaller text size and placed  adjacent to the base text to which it refers. A Ruby element may also contain the  RB, RT, and RP elements. See  Ruby and Warichu Elements  in14.8.4.4, Inline- Level Structure Elements,  for more details. Warichu (Warichu; PDF 1.5) A comment or annotation  in a smaller text size and formatted  onto two smaller lines within the height of  the containing text line and placed  following (inline) the base text to which it refers. A Warichu element may also  contain the WT and WP elements. See  Ruby and Warichu Elements  in14.8.4.4,  Inline-Level Structure Elements,  for more details. Table 338   Standard structure types for inline-level structure elements  (continued) Structure Type Description","Here is some text  with a","link"," inside.",""],"598":["PDF 32000-1:2008 590 ' Adobe Systems Incorporated 2008  All rights reserved BT% Begin text object /T1_0  1 Tf% Set text font and size 14 0 0 14 10.000  753.976  Tm % Set text matrix 0.0 0.0 0.0 rg% Set nonstroking colour to black ( Here is some text   ) Tj % Show text preceding link ET% End text object EMC% End marked-content sequence /Link << /MCID  1 >> % Marked-content sequence 1 (link) BDC % Begin marked-content sequence 0.7 w% Set line width [ ] 0 d % Solid dash pattern 111.094  751.8587  m% Move to beginning of underline 174.486  751.8587  l% Draw underline 0.0 0.0  1.0 RG % Set stroking colour to blue S % Stroke  underline BT% Begin text object 14 0 0 14 111.094  753.976  Tm % Set text matrix 0.0 0.0 1.0 rg% Set nonstroking colour to blue ( with a link  ) Tj% Show text of link ET% End text object EMC% End marked-content sequence /P << /MCID  2 >> % Marked-content sequence 2 (paragraph) BDC % Begin marked-content sequence BT% Begin text object 14"," 0 0 14 174.486  753.976  Tm % Set text matrix 0.0 0.0 0.0 rg% Set nonstroking colour to black (  inside  . ) Tj% Show text following link ET% End text object EMC% End marked-content sequence EXAMPLE 3 This example shows an excerpt from t he associated logical structure hierarchy. 501  0 obj% Structure element for paragraph << /Type  /StructElem  /S /P  . . .  /K [ 0% Three children: ma rked-content sequence 0    502 0 R %     Link    2%     Marked-content sequence 2  ]>>endobj 502  0 obj% Structure element for link << /Type  /StructElem  /S /Link  . . .  /K [ 1% Two children: marked-content sequence 1    503 0 R %     Object reference to link annotation  ]>>endobj 503  0 obj% Object reference to link annotation << /Type  /OBJR  /Obj  600 0 R% Link annotation (not shown) >>endobj",""],"599":["' Adobe Systems Incorporated 2008  All rights reserved 591PDF 32000-1:2008 14.8.4.4.3 Annotation Elements Tagged PDF annotation elements (structure type Annot;  PDF 1.5) use PDFs logical structure facilities to  establish the association between content items and PD F annotations. Annotation elements shall be used for  all types of annotations other than links (see  Link Elements  in 14.8.4.3, Block-Level Structure Elements ) and  forms (see  Table  340).The following items may be children of an annotation element:   Object references (see  14.7.4.3, PDF Objects as Content Items ) to one or more annotation dictionaries  Optionally, one or more content items (such as ma rked-content sequences) or  other ILSEs (except other  annotations) associated with the annotations If an Annot element has no children other than object  references, its rendering shall be defined by the  appearance of the referenced annotations, and its text content shall be treated as if it were a Span element. It  may have an optional  BBox  attribute; if supplied, this attribute  overrides the rectangle specified by the  annotation dictionarys  Rect entry. If the Annot element has children that are content item s, those children represent  the displayed form of the  annotation, and the appearance of the associated anno tation may also be applied (for example, with a  Highlight  annotation). There may be multiple children that are object references to different annotations, subject to the constraint that  the annotations shall be the same except for their  Rect entry. This is much the same as is done for the Link  element; it allows an annotation to be associated wit h discontiguous pieces of content, such as line-wrapped  text.14.8.4.4.4 Ruby and Warichu Elements Ruby text is a side note, written in a sm aller text size and placed adjacent to t he base text to which it refers. It is  used in Japanese and Chinese to describe the pronunci ation of unusual words or to describe such items as  abbreviations and logos. Warichu text is a comment or annotation, written in a  smaller text size and formatted onto two smaller lines  within the height of the contai ning text line and placed following (inline) the base text to which it refers. It is used  in Japanese for descriptive comments an d for ruby annotation text that is too long to be aesthetically formatted  as a ruby. Table  339   Standard structure types for Ruby and Warichu elements ( PDF 1.5)  Structure Type Description Ruby (Ruby) The wrapper around the entire r uby assembly. It shall contain one RB  element followed by either an RT element or a three-element group consisting of  RP, RT, and RP. Ruby elements and their content elements shall not break across  multiple lines. RB(Ruby base text) The full-size text to whic h the ruby annotation  is applied. RB may  contain text, other inline elements, or a mixture of both. It may have the  RubyAlign attribute. RT(Ruby annotation text) The smaller-size text that shall be placed adjacent to the  ruby base text. It may contain text, other  inline elements, or a mixture of both. It  may have the  RubyAlign  and  RubyPosition  attributes.",""],"600":["PDF 32000-1:2008 592 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.4.5 Illustration Elements Tagged PDF defines an  illustration element as any structure element whose st ructure type (after role mapping,  if any) is one of those listed in  Ta b l e  340 . The illustrations cont ent shall consist of one  or more complete  graphics objects. It shall  not appear between the  BT and  ET operators delimiting a text object (see  9.4, Text  Objects ). It may include clipping only in the form of  a contained marked clipping  sequence, as defined in  14.6.3, Marked Co ntent and Clipping. In Tagged PDF, all such marked clipping sequences shall carry the  marked-content tag Clip.  An illustration may have logical substr ucture, including other illustrations. For purposes of reflow, however, it  shall be moved (and perhaps resized) as a unit, without exam ining its internal contents. To be useful for reflow,  it shall have a  BBox attribute. It may also have  Placement , Width , Height, and  BaselineShift  attributes (see  14.8.5.4, Layout Attributes ). RP(Ruby punctuation) Punctuation surrounding  the ruby annotation text. It is used  only when a ruby annotation cannot be pr operly formatted in a ruby style and  instead is formatted as a normal comment, or when it is formatted as a warichu. It  contains text (usually a single LE FT or RIGHT PARENTHESIS or similar  bracketing character). Warichu (Warichu) The wrapper around the entire warichu assembly. It may contain a three- element group consisting of WP, WT, and WP. Warichu elements (and their content  elements) may wrap across multiple lines, according to the warichu breaking rules  described in the Japanese Industrial Standard (JIS) X 4051-1995. WT(Warichu text) The smaller-size text of  a warichu comment that is formatted into  two lines and placed between surrounding WP elements.  WP(Warichu punctuation) The punc tuation that surrounds the WT text. It contains text  (usually a single LEFT or RIGHT PARENTHESIS or similar bracketing character).  According to JIS X 4051-1995, the parentheses surrounding a warichu may be  converted to a SPACE (nominally 1/4 EM  in width) at the discretion of the  formatter. Table  340    Standard structure types for illustration elements   Structure Type Description Figure (Figure) An item of graphical content.  Its placement may be specified with the  Placement  layout attribute (see  General Layout Attributes  in  14.8.5.4, Layout  Attributes ). Formula (Formula) A mathematical formula.  This structure type is useful only for  identifying an entire content element as a  formula. No standard structure types are defined for identifying individual  components within the formula. From a formatting standpoint, the formula shall be  treated similarly to a figure (structure type Figure).  Form (Form) A widget annotation representi ng an interactive form field (see  12.7,  Interactive Forms ). If the element contains a  Role attribute, it may contain content  items that represent the value of the (non -interactive) form field. If the element  omits a  Role attribute (see  Ta b l e  348), it shall have only one child: an object  reference (see 14.7.4.3, PDF Object s as Content Items ) identifying the widget  annotation. The annotations appearance stream (see  12.5.5, Appearance  Streams ) shall describe the appearance of the form element.  Table 339   Standard structure types for Ruby and Warichu elements ( PDF 1.5)  (continued) Structure Type Description",""],"601":["' Adobe Systems Incorporated 2008  All rights reserved 593PDF 32000-1:2008 Often an illustration is logically part of , or at least attached to, a paragrap h or other element of a document. Any  such containment or attachment shall be represented thro ugh the use of the Figure structure type. The Figure  element indicates the point of attachment, and its  Placement  attribute describes the nature of the attachment.  An illustration el ement without a Placement  attribute shall be treated as  an ILSE and laid out inline. For accessibility to users with disab ilities and other text ex traction purposes, an illu stration element should  have an  Alt entry or an  ActualText  entry (or both) in its structure element dictionary (see  14.9.3, Alternate  Descriptions,  and  14.9.4, Replacement Text ). Alt  is a description of the illustration, whereas  ActualText gives the exact text equivalent of a graphical  illustration that has the appearance of text. 14.8.5 Standard Structure Attributes 14.8.5.1 General In addition to the standard structure types, Tagged  PDF defines standard layout and styling attributes for  structure elements of those types. These attributes  enable predictable formatting to be applied during  operations such as reflow and export of PDF content to other document formats.  As discussed in  14.7.5, Structure Attributes,  attributes shall be defined in  attribute objects , which are dictionaries or streams attached to a structure element in either of two ways:  The  A entry in the structure element dictionary identifies  an attribute object or an array of such objects.  The  C entry in the structure element dictionary gives the name of an  attribute class  or an array of such  names. The class name is in turn looked up in the  class map, a dictionary identified by the  ClassMap  entry  in the structure tree root, yielding an attribute object or array of objects corresponding to the class.  In addition to the standard structure attributes described in  14.8.5.2, Standard Attribute Owners,  there are  several other optional entries Lang, Alt, ActualText , and  Ethat are described in  14.9, Accessibility  Support,  but are useful to other PDF cons umers as well. They appear in the following places in a PDF file  (rather than in attribute dictionaries):  As entries in the structure element dictionary (see  Table  323 ) As entries in property lists attached to marked-content sequences with a Span tag (see  14.6, Marked  Content )The Example in  14.7.6, Example of Logical Structure,  illustrates the use of stan dard structure attributes.14.8.5.2 Standard Attribute Owners Each attribute object has an  owner, specified by the objects  O entry, which determines the interpretation of the  attributes defined in the objects dictionary. Multiple  owners may define like-named attributes with different  value types or interpretations. Tagged PDF defi nes a set of standard attribute owners, shown in  Ta b l e  341 .Table  341    Standard attribute owners   Owner Description Layout Attributes governing th e layout of content  List Attributes governing the numbering of lists  PrintField (PDF 1.7) Attributes governing Form structure elements for  non-interactive form fields Table Attributes governing the organ ization of cells in tables",""],"602":["PDF 32000-1:2008 594 ' Adobe Systems Incorporated 2008  All rights reserved An attribute object owned by a s pecific export format, such as  XML-1.00 , shall be applied only when exporting  PDF content to that format. Such format-specific attrib utes shall override any corr esponding attributes owned  by Layout , List, PrintField , or Table . There may also be additional format-specific attributes; the set of  possible attributes is open-ended and is not ex plicitly specified or limited by Tagged PDF.  14.8.5.3 Attribute Values and Inheritance Some attributes are defined as  inheritable. Inheritable attributes propagate do wn the structure tree; that is, an  attribute that is specified for an element shall apply to  all the descendants of the element in the structure tree  unless a descendent element specifies an explicit value for the attribute. NOTE 1 The description of each of the  standard attributes in this sub-claus e specifies whether their values are  inheritable. An inheritable attribute may be specified for an element for the purpose of propagating its value to child  elements, even if the attribute is not meaningful for  the parent element. Non-inheritable attributes may be  specified only for elements on which they would be meaningful. The following list shows the priority for determining attribute values. A conforming reader determines an  attributes value to be the first item  in the following list that applies: a) The value of the attribute specified in the elements  A entry, owned by one of the export formats (such as  XML, HTML-3.20, HTML-4.01 , OEB-1.0 , CSS-1.00 , CSS-2.0, and  RTF), if present, and if outputting to that  formatb) The value of the attribute specified in the elements  A entry, owned by  Layout , PrintField , Table  or  List, if  present c) The value of the attribute specified in a class map associated with the elements  C entry, if there is one d) The resolved value of the parent structur e element, if the attribute is inheritable e) The default value for the attribute, if there is one NOTE 2 The attributes  Lang , Alt, ActualText , and  E do not appear in attribute dictionaries. The rules governing their  application are discussed in  14.9, Accessibility Support. XML-1.00Additional attributes governing  translation to XML, version  1.00  HTML-3.20Additional attributes governing translation to HTML, version  3.20 HTML-4.01Additional attributes governing translation to HTML, version  4.01 OEB-1.00 Additional attributes governing  translation to OEB, version  1.0 RTF-1.05 Additional attributes governing  translation to Microsoft Rich  Text Format, version 1.05  CSS-1.00Additional attributes governing translation to a format using  CSS, version 1.00  CSS-2.00Additional attributes governing translation to a format using  CSS, version 2.00  Table 341   Standard attribute owners  (continued) Owner Description",""],"603":["' Adobe Systems Incorporated 2008  All rights reserved 595PDF 32000-1:2008 There is no semantic distinction betw een attributes that are specified exp licitly and ones that are inherited.  Logically, the structure tree has attributes fully bound  to each element, even though some may be inherited  from an ancestor element. This is consistent with the behav iour of properties (such as  font characteristics) that  are not specified by structure attributes  but shall be derived from the content.  14.8.5.4 Layout Attributes 14.8.5.4.1 General Layout attributes  specify parameters of the layout process used to produce the appearance described by a  documents PDF content. Attributes in this category shall be defined in attribute objects whose  O (owner) entry  has the value  Layout  (or is one of the format-spe cific owner names listed in  Ta b l e  341 ).NOTE The intent is that these parameters can be used to  reflow the content or export it to some other document  format with at least basic styling preserved. Ta b l e  342 summarizes the standard layout attributes and  the structure elements to which they apply. The  following sub-clauses describe the meanin g and usage of these attributes. As described in  14.8.5.3, Attribute Values and Inheritance,  an inheritable attribute may be specified for any  element to propagate it to descendants, regardle ss of whether it is meaningful for that element. Table  342    Standard layout attributes   Structure Elements AttributesInheritable Any structure element Placement WritingMode BackgroundColor BorderColor BorderStyle BorderThickness ColorPaddingNoYes NoYes NoYes Yes NoAny BLSE ILSEs with Placement  other  than Inline SpaceBefore SpaceAfter StartIndent EndIndentNoNoYes Yes BLSEs containing text TextIndent TextAlign Yes Yes Illustration elements (Figure,  Formula, Form)Ta b l e BBoxWidth HeightNoNoNoTH (Table header) TD (Table data) Width HeightBlockAlign InlineAlign TBorderStyle TPadding NoNoYes Yes Yes Yes",""],"604":["PDF 32000-1:2008 596 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.5.4.2 General  Layout Attributes The layout attributes described in  Table  343  may apply to structure elements of  any of the standard types at the  block level (BLSEs) or th e inline level (ILSEs).  Any ILSEBLSEs containing ILSEs or  containing direct or nested  content items LineHeight BaselineShift TextDecorationType TextDecorationColor TextDecorationThickness Yes NoNoYes Yes Grouping elements Art, Sect,  and DivColumnCountColumnWidths ColumnGap NoNoNoVertical text GlyphOrientationVertical Yes Ruby text RubyAlign RubyPositionYes Yes Table 342   Standard layout attributes  (continued) Structure Elements Attributes Inheritable",""],"605":["' Adobe Systems Incorporated 2008  All rights reserved 597PDF 32000-1:2008 Table  343   Standard layout attributes common to all standard structure types   Key Type Value Placement name (Optional; not inheritable)  The positioning of the  element with respect  to the enclosing reference area and other content:  Block Stacked in the block-progression direction within an  enclosing reference area or parent BLSE.  Inline Packed in the inline-progression direction within an enclosing  BLSE. Before Placed so that the before edge of the elements allocation  rectangle (see  Content and Allocation Rectangles  in 14.8.5.4, Layout Attributes ) coincides with that of the  nearest enclosing reference area. T he element may float, if  necessary, to achieve the specified placement. The element  shall be treated as a block occupying the full extent of the  enclosing reference area in the  inline direction. Other content  shall be stacked so as to begin at the after edge of the  elements allocation rectangle.  Start Placed so that the start edg e of the elements allocation  rectangle (see  Content and Allocation Rectangles  in 14.8.5.4, Layout Attributes ) coincides with that of the  nearest enclosing reference area. T he element may float, if  necessary, to achieve the specif ied placement. Other content  that would intrude into the elements allocation rectangle shall  be laid out as a runaround.  End Placed so that the end edge of the elements allocation  rectangle (see  Content and Allocation Rectangles  in 14.8.5.4, Layout Attributes ) coincides with that of the  nearest enclosing reference area. T he element may float, if  necessary, to achieve the specif ied placement. Other content  that would intrude into the elements allocation rectangle shall  be laid out as a runaround.  When applied to an ILSE, any value except Inline shall cause the  element to be treated as a BLSE instead. Default value: Inline.  Elements with  Placement  values of Before, Start, or End shall be  removed from the normal stacking or packing process and allowed to  float to the specified edge of the en closing reference area or parent  BLSE. Multiple such floating elements may be positioned adjacent to  one another against the specified edge  of the reference area or placed  serially against the edge, in t he order encountered. Complex cases  such as floating elements that interfere with each other or do not fit on  the same page may be handled differently by different conforming  readers. Tagged PDF merely identifies the elements as floating and  indicates their desired placement.",""],"606":["PDF 32000-1:2008 598 ' Adobe Systems Incorporated 2008  All rights reserved WritingMode name (Optional; inheritable)  The directions of layout progression for packing  of ILSEs (inline progression) and stacking of BLSEs (block  progression):  LrTb Inline progression from left to right; block progression from top  to bottom. This is the typical  writing mode for Western writing  systems. RlTb Inline progression from right to left; block progression from top  to bottom. This is the typical writing mode for Arabic and  Hebrew writing systems.  TbRl Inline progression from top to bottom; block progression from  right to left. This is the typical writing mode for Chinese and  Japanese writing systems.  The specified layout directions shall apply to the given structure  element and all of its descendants to any level of nesting. Default  value: LrTb.  For elements that produce multiple  columns, the writing mode defines  the direction of column progression within the reference area: the  inline direction determines the stacking direction for columns and the  default flow order of text  from column to column. For tables, the writing  mode controls the layout of rows  and columns: table rows (structure  type TR) shall be stacked in the block direction, cells within a row  (structure type TD) in the inline direction.  The inline-progression direction s pecified by the writing mode is  subject to local override within the text being laid out, as described in  Unicode Standard Annex #9, The Bidirectional Algorithm, available  from the Unicode Consortium (see the  Bibliography ). BackgroundColor array(Optional; not inheritable; PDF 1.5)  The colour to be used to fill the  background of a table cell or any elements content rectangle (possibly  adjusted by the  Padding attribute). The value shall be an array of  three numbers in the range 0.0 to 1. 0, representing the red, green, and  blue values, respectively, of an RGB  colour space. If this attribute is  not specified, the element shall be tr eated as if it were transparent. BorderColor array(Optional; inheritable; PDF 1.5 ) The colour of the border drawn on the  edges of a table cell or any elements content rectangle (possibly  adjusted by the  Padding attribute). The value of each edge shall be an  array of three numbers in the range  0.0 to 1.0, representing the red,  green, and blue values, respectively, of an RGB colour space. There  are two forms: A single array of three numbers r epresenting the RGB values to apply  to all four edges. An array of four arrays, each spec ifying the RGB values for one edge  of the border, in the order of the bef ore, after, start, and end edges. A  value of  null  for any of the edges means that it shall not be drawn. If this attribute is not  specified, the border colour  for this element shall  be the current text fill colour in ef fect at the start  of its associated  content. Table 343   Standard layout attributes common to all standard structure types  (continued) Key Type Value",""],"607":["' Adobe Systems Incorporated 2008  All rights reserved 599PDF 32000-1:2008 BorderStyle array or  name(Optional; not inhe ritable; PDF 1.5)  The style of an elements border.  Specifies the stroke pattern of each edge of a table cell or any  elements content rectangle (possibly adjusted by the  Paddingattribute). There are two forms:  A name from the list below repr esenting the border style to apply  to all four edges.  An array of four entries, each  entry specifying the style for one  edge of the border in the order of  the before, after, start, and end  edges. A value of  null  for any of the edges means that it shall not  be drawn. None No border. Forces  the computed value of  BorderThickness to be 0. Hidden Same as None, except in terms  of border conflict resolution  for table elements. Dotted The border is a series of dots. Dashed The border is a series of short line segments. Solid The border is a single line segment. Double The border is two solid lines. The sum of the two lines and  the space between them  equals the value of  BorderThickness .Groove The border looks as though it  were carved into the canvas. Ridge The border looks as though it  were coming out of the canvas  (the opposite of Groove). Inset The border makes the entire box look as though it were  embedded in the canvas. Outset The border makes the entire box look as though it were  coming out of the canvas (the opposite of Inset). Default value: None All borders shall be drawn on top of the boxs background. The colour  of borders drawn for values of Groo ve, Ridge, Inset, and Outset shall  depend on the structure elements  BorderColor  attribute and the  colour of the background over which the border is being drawn. NOTE Conforming HTML applications may interpret Dotted,  Dashed, Double, Groove, Ridge, Inset, and Outset to be  Solid.BorderThickness number or  array (Optional; inheritable; PDF 1.5)  The thickness of the border drawn on  the edges of a table cell or any elements content rectangle (possibly  adjusted by the  Padding attribute). The value of each edge shall be a  positive number in default user sp ace units representing the borders  thickness (a value of 0 indicates that the border shall not be drawn).  There are two forms: A number representing the border  thickness for all four edges. An array of four entries, each entry  specifying the thickness for one  edge of the border, in the order of the before, after, start, and end  edges. A value of  null  for any of the edges means that it shall not be  drawn.Table 343   Standard layout attributes common to all standard structure types  (continued) Key Type Value",""],"608":["PDF 32000-1:2008 600 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.5.4.3 Layout A ttributes for BLSEs Ta b l e  344 describes layout attributes that shall apply  only to block-level structure elements (BLSEs).  Inline-level structure elements (ILSEs) with a  Placement attribute other than the default value of  Inline shall be treated as BLSEs and shall also be subject to the attributes described here.  Paddingnumber or  array (Optional; not inher itable; PDF 1.5)  Specifies an offset to account for  the separation between the elements content rectangle and the  surrounding border (see  Content and Allocation Rectangles  in 14.8.5.4, Layout Attributes ). A positive value enlarges the  background area; a negative value trims it, possibly allowing the  border to overlap the elements text or graphic. The value shall be either a single number representing the width of the  padding, in default user space units, t hat applies to all four sides or a  4-element array of numbers representing the padding width for the  before, after, start, and end ed ge, respectively, of the content  rectangle. Default value: 0. Color array  (Optional; inheri table; PDF 1.5)  The colour to be used for drawing text  and the default value for the colour of table borders and text  decorations. The value shall be an array of three numbers in the range  0.0 to 1.0, representing the red, green, and blue values, respectively,  of an RGB colour space. If this at tribute is not specified, the border  colour for this element shall be the current text fill colour in effect at the  start of its associated content. Table  344    Additional standard layout  attributes specific to  block-level structure elements   KeyType Value SpaceBefore number (Optional; not inheritable)  The amount of extra space preceding the  before edge of the BLSE, measured in default user space units in the  block-progression direction. This value shall be added to any  adjustments induced by the  LineHeight  attributes of ILSEs within the  first line of the BLSE (see  Layout Attributes for ILSEs  in 14.8.5.4,  Layout Attributes ). If the preceding BLSE has a  SpaceAfter  attribute,  the greater of the two attribute values  shall be used. Default value: 0.  This attribute shall be disregarded for the first BLSE placed in a given  reference area.  SpaceAfter number (Optional; not inheritable)  The amount of extra space following the  after edge of the BLSE, measured in default user space units in the  block-progression direction. This value shall be added to any  adjustments induced by the  LineHeight  attributes of ILSEs within the  last line of the BLSE (see  14.8.5.4, Layout Attributes ). If the following  BLSE has a SpaceBefore  attribute, the greater of the two attribute  values shall be used. Default value: 0.  This attribute shall be disregarded for th e last BLSE placed in a given  reference area.  Table 343   Standard layout attributes common to all standard structure types  (continued) Key Type Value",""],"609":["' Adobe Systems Incorporated 2008  All rights reserved 601PDF 32000-1:2008 StartIndent number (Optional; inheritable)  The distance from the start edge of the  reference area to that of the BLSE,  measured in default user space  units in the inline-progression directio n. This attribute shall apply only  to structure elements with a  Placement  attribute of Block or Start (see  General Layout Attributes  in 14.8.5.4, Layout Attributes ). The attribute shall be disregarded for elements with other  Placement values. Default value: 0.  A negative value for this attribute places the start edge of the BLSE  outside that of the reference area. The results are implementation- dependent and may not be supported by all conforming products that  process Tagged PDF or by particular export formats.  If a structure element with a  StartIndent  attribute is placed adjacent to  a floating element with a  Placement  attribute of Start, the actual value  used for the elements starting indent shall be its own  StartIndent attribute or the inline ex tent of the adjacent float ing element, whichever  is greater. This value may be further adjusted by the elements  TextIndent  attribute, if any.  EndIndentnumber (Optional; inheritable)  The distance from the end edge of the BLSE to  that of the reference area, measured in default user space units in the  inline-progression direction. This a ttribute shall apply only to structure  elements with a  Placement  attribute of Block or End (see  General Layout Attributes  in 14.8.5.4, Layout Attributes ). The attribute shall  be disregarded for elements with other  Placement  values. Default  value: 0. A negative value for this attribute places the end edge of the BLSE  outside that of the reference area. The results are implementation- dependent and may not be supported by all conforming products that  process Tagged PDF or by particular export formats.  If a structure element with an  EndIndent  attribute is placed adjacent to  a floating element with a  Placement  attribute of End, the actual value  used for the elements ending indent shall be its own  EndIndent attribute or the inline ex tent of the adjacent float ing element, whichever  is greater.  TextIndent  number (Optional; inheritable; applies only to some BLSEs)  The additional  distance, measured in default user space units in the inline- progression direction, from the start  edge of the BLSE, as specified by  StartIndent , to that of the first line of  text. A negative value shall  indicate a hanging indent. Default value: 0.  This attribute shall apply only to paragraphlike BLSEs and those of  structure types Lbl (Label), LBody (List body), TH (Table header), and  TD (Table data), provided that they  contain content ot her than nested  BLSEs. TextAlign name (Optional; inheritable; applies only to BLSEs containing text)  The alignment, in the inline-progression di rection, of text and other content  within lines of the BLSE:  Start Aligned with the start edge.  Center Centered between the start and end edges.  End Aligned with the end edge.  Justify Aligned with both the start and end edges, with internal  spacing within each line expanded, if necessary, to achieve  such alignment. The last (or only) line shall be aligned with  the start edge only.  Default value: Start.  Table 344   Additional standard layout attributes specific to  block-level structure elements  (continued) KeyType Value",""],"610":["PDF 32000-1:2008 602 ' Adobe Systems Incorporated 2008  All rights reserved BBoxrectangle (Optional for Annot; required for any figure or table appearing in its  entirety on a single page; not inheritable)  An array of four numbers in  default user space units that shall give the coordinates of the left,  bottom, right, and top edges, respec tively, of the elements bounding  box (the rectangle that completely encloses its visible content). This  attribute shall apply to any elemen t that lies on a single page and  occupies a single rectangle.  Width number  or name(Optional; not inheritable; illustrations, tables, table headers, and table  cells only; should be used for table cells)  The width of the elements  content rectangle (see  Content and Allocation Rectangles  in  14.8.5.4, Layout Attributes ), measured in default user space units in  the inline-progression direction. Th is attribute shall apply only to  elements of structure type Figure,  Formula, Form, Table, TH (Table  header), or TD (Table data). The name Auto in place of a numeric value shall indicate that no  specific width constraint is to be imposed; the elements width shall be  determined by the intrinsic width of its content. Default value: Auto.  Heightnumber  or name(Optional; not inheritable; illustrations, tables, table headers, and table  cells only) The height of the elements content rectangle (see  Content  and Allocation Rectangles  in  14.8.5.4, Layout Attributes ), measured  in default user space units in the block-progression direction. This  attribute shall apply only to elements of structure type Figure, Formula,  Form, Table, TH (Table header), or TD (Table data). The name Auto in place of a numeric value shall indicate that no  specific height constraint is to  be imposed; the elements height shall  be determined by the intrinsic height  of its content. Default value: Auto.  BlockAlign name (Optional; inheritable; table cells only)  The alignment, in the block- progression direction, of content within the table cell:  Before Before edge of the first childs allocation rectangle aligned  with that of the table cells content rectangle.  Middle Children centered within the table cell. The distance  between the before edge of the first childs allocation  rectangle and that of the table cells content rectangle  shall be the same as the distance between the after edge  of the last childs allocation  rectangle and that of the table  cells content rectangle.  After After edge of the last childs allocation rectangle aligned  with that of the table cells content rectangle.  Justify Children aligned with both the before and after edges of  the table cells content rectangle. The first child shall be  placed as described for Before and the last child as  described for After, with equal spacing between the  children. If there is only one ch ild, it shall be aligned with  the before edge only, as for Before.  This attribute shall apply only to el ements of structure type TH (Table  header) or TD (Table data) and shall control the placement of all  BLSEs that are children of the given  element. The table cells content  rectangle (see  Content and Allocation Rectangles  in  14.8.5.4,  Layout Attributes ) shall become the reference area for all of its  descendants. Default value: Before.  Table 344   Additional standard layout attributes specific to  block-level structure elements  (continued) KeyType Value",""],"611":["' Adobe Systems Incorporated 2008  All rights reserved 603PDF 32000-1:2008 14.8.5.4.4 Layout At tributes for ILSEs The attributes described in  Ta b l e  345  apply to inline-level structure elements (ILSEs). They may also be  specified for a block-level element (BLSE) and may apply  to any content items that are its immediate children. InlineAlign name (Optional; inheritable; table cells only)  The alignment, in the inline- progression direction, of content within the table cell:  Start Start edge of each childs allocation rectangle aligned with  that of the table cells content rectangle. Center Each child centered within the table cell. The distance  between the start edges of the childs allocation rectangle  and the table cells content rectangle shall be the same as  the distance between their end edges.  End End edge of each childs allocation rectangle aligned with  that of the table cells content rectangle.  This attribute shall apply only to elements of structure type TH (Table  header) or TD (Table data) and controls the placement of all BLSEs  that are children of the given element. The table cells content  rectangle (see  Content and Allocation Rectangles  in  14.8.5.4,  Layout Attributes ) shall become the reference area for all of its  descendants. Default value: Start.  TBorderStyle name or  array(Optional; inheritable; PDF 1.5)  The style of the border drawn on each  edge of a table cell. Allowed values shall be the same as those  specified for  BorderStyle  (see Ta b l e  343). If both  TBorderStyle  and  BorderStyle  apply to a given table cell,  BorderStyle  shall supersede  TBorderStyle . Default value: None.  TPadding integer or  array(Optional; inheritable; PDF 1.5)  Specifies an offset to account for the  separation between the table cells content rectangle and the  surrounding border (see  Content and Allocation Rectangles  in  14.8.5.4, Layout Attributes ). If both  TPadding  and  Padding apply to  a given table cell,  Padding shall supersede  TPadding . A positive  value shall enlarge the background area; a negative value shall trim it,  and the border may overlap the elements text or graphic. The value  shall be either a single number repr esenting the width of the padding,  in default user space units, that a pplies to all four edges of the table  cell or a 4-entry array representin g the padding width for the before  edge, after edge, start edge, and end edge, respectively, of the content  rectangle. Default value: 0. Table 344   Additional standard layout attributes specific to  block-level structure elements  (continued) KeyType Value",""],"612":["PDF 32000-1:2008 604 ' Adobe Systems Incorporated 2008  All rights reserved Table  345    Standard layout attributes specific to inline-level structure elements   Key Type Value BaselineShift number (Optional; not inheritable)  The distance, in default user space units,  by which the elements baseline shall be  shifted relative to that of its  parent element. The shift direction shall be the opposite of the  block-progression direction  specified by the prevailing  WritingMode  attribute (see  General Layout Attributes  in 14.8.5.4,  Layout Attributes ). Thus, positive values shall shift the baseline  toward the before edge and negative values toward the after edge  of the reference area (upward and downward, respectively, in  Western writing systems). Default value: 0. The shifted element may be a superscript, a subscript, or an inline  graphic. The shift shall apply to the element, its content, and all of  its descendants. Any further baseline shift applied to a child of this  element shall be measured relative to the shifted baseline of this  (parent) element.  LineHeight number  or name(Optional; inheritable)  The elements preferred height, measured in  default user space units in the block-progression direction. The  height of a line shall be determined by the largest  LineHeight  value for any complete or partial ILSE that it contains.  The name Normal or Auto in place of a numeric value shall indicate  that no specific height constraint  is to be imposed. The elements  height shall be set to a reasonable  value based on the contents font  size: Normal Adjust the line height to include any nonzero value  specified for BaselineShift .Auto Adjustment for the value of  BaselineShift  shall not be  made. Default value: Normal.  This attribute applies to all ILSEs (including implicit ones) that are  children of this element or of it s nested ILSEs, if any. It shall not  apply to nested BLSEs. When translating to a specific export format, the values Normal and  Auto, if specified, shall be used dire ctly if they are available in the  target format. The meaning of the term reasonable value is left to  the conforming reader to determine. It should be approximately 1.2  times the font size, but this value can vary depending on the export  format.  NOTE 1 In the absence of a numeric value for  LineHeight  or an explicit value for the font size, a reasonable method  of calculating the line height from the information in a  Tagged PDF file is to find the difference between the  associated fonts  Ascent  and Descent  values (see  9.8, Font Descriptors ), map it from glyph space to  default user space (see  9.4.4, Text Space Details ), and use the maximum resulting value for any character  in the line.  TextDecorationColor array(Optional; inheritable; PDF 1.5)  The colour to be used for drawing  text decorations. The value shall be an array of three numbers in  the range 0.0 to 1.0, representing  the red, green, and blue values,  respectively, of an RGB colour space. If this attribute is not  specified, the border colour for this  element shall be the current fill  colour in effect at the star t of its associated content.",""],"613":["' Adobe Systems Incorporated 2008  All rights reserved 605PDF 32000-1:2008 TextDecorationThickness number (Optional; inheritable; PDF 1.5)  The thickness of each line drawn as  part of the text decoration. The value shall be a non-negative  number in default user space units re presenting the thickness (0 is  interpreted as the thin nest possible line). If this attribute is not  specified, it shall be derived from  the current stroke thickness in  effect at the start of the element s associated content, transformed  into default user space units. TextDecorationType name (Optional; not inheritable)  The text decoration, if any, to be applied  to the elements text.  None No text decoration Underline A line below the text Overline A line above the text LineThrough A line through the middle of the text Default value: None.  This attribute shall apply to all text  content items that are children of  this element or of its nested IL SEs, if any. The attribute shall not  apply to nested BLSEs or to content items other than text. The colour, position, and thickness of the decoration shall be  uniform across all children, regardless of changes in colour, font  size, or other variations in t he contents text characteristics. RubyAlign name (Optional; inheritable; PDF 1.5)  The justification of  the lines within a  ruby assembly:Start The content shall be aligned on the start edge in the  inline-progression direction. Center The content shall be centered in the inline-progression  direction.End The content shall be aligned on the end edge in the  inline-progression direction. Justify The content shall be exp anded to fill the available width  in the inline-progression direction. Distribute The content shall be exp anded to fill the available width  in the inline-progression direction. However, space shall  also be inserted at the start edge and end edge of the  text. The spacing shall be distributed using a 1:2:1  (start:infix:end) ratio. It sha ll be changed to a 0:1:1 ratio  if the ruby appears at the start  of a text line or to a 1:1:0  ratio if the ruby appears at  the end of the text line. Default value: Distribute.  This attribute may be specified on the RB and RT elements. When a  ruby is formatted, the attribute shall be applied to the shorter line of  these two elements. (If the RT element has a shorter width than the  RB element, the RT element shall  be aligned as specified in its  RubyAlign attribute.) Table 345   Standard layout attributes specific to inline-level structure elements  (continued) Key Type Value",""],"614":["PDF 32000-1:2008 606 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.5.4.5 Content and Allocation Rectangles As defined in  14.8.3, Basic Layout Model,  an elements  content rectangle  is an enclosing rectangle derived  from the shape of the elements content, which shall def ine the bounds used for the layout of any included child  elements. The  allocation rectangle  includes any additional borders  or spacing surrounding the element,  affecting how it shall be positioned with respect to ad jacent elements and the enclosing content rectangle or  reference area. The exact definition of the content rectangl e shall depend on the elements structure type:  For a table cell (structure type TH or TD), the content rectangle shall be determined from the bounding box  of all graphics objects in the cells content, taking  into account any explicit bounding boxes (such as the  BBox  entry in a form XObject). Th is implied size may be explicit ly overridden by the cells  Width  and Height attributes. The cells height shall be adjusted to  equal the maximum height of any cell in its row; its  width shall be adjusted  to the maximum width of any cell in its column. RubyPosition name (Optional; inheritable; PDF 1.5)  The placement of  the RT structure  element relative to the RB element in a ruby assembly: Before The RT content shall be aligned along the before edge of  the element. After The RT content shall be aligned along the after edge of  the element. Warichu The RT and associated RP elements shall be formatted  as a warichu, following the RB element. Inline The RT and associated RP elements shall be formatted  as a parenthesis comment,  following the RB element. Default value: Before.  GlyphOrientationVertical name (Optional; inheritable; PDF 1.5)  Specifies the orientation of glyphs  when the inline-progression directio n is top to bottom or bottom to  top. This attribute may take one of the following values: angle A number representing the clockwise  rotation in degrees of  the top of the glyphs relative to the top of the reference area. Shall  be a multiple of 90 degrees between -180 and +360. AutoSpecifies a default orientati on for text, depending on whether it  is fullwidth (as wide as it is high). Fullwidth Latin and fullwidth  ideographic text (excluding ideographic punctuation) shall be set  with an angle of 0. Ideographic punc tuation and other ideographic  characters having alternate horiz ontal and vertical forms shall use  the vertical form of the glyph. Non- fullwidth text shall be set with an  angle of 90. Default value: Auto.  NOTE 2 This attribute is used mo st commonly to differentiate  between the preferred orientation of alphabetic (non- ideographic) text in vertically written Japanese  documents (Auto or 90) and the orientation of the  ideographic characters and/or alphabetic (non- ideographic) text in western signage and advertising  (90). This attribute shall affect both the  alignment and width of the glyphs.  If a glyph is perpendicular to t he vertical baseline, its horizontal  alignment point shall be aligned with the alignment baseline for the  script to which the glyph belongs. The width of the glyph area shall  be determined from the horizontal width font characteristic for the  glyph. Table 345   Standard layout attributes specific to inline-level structure elements  (continued) Key Type Value",""],"615":["' Adobe Systems Incorporated 2008  All rights reserved 607PDF 32000-1:2008  For any other BLSE, the height of the content rectan gle shall be the sum of the heights of all BLSEs it  contains, plus any additional spacin g adjustments between these elements.  For an ILSE that contains text, the height  of the content rectangle shall be set by the  LineHeight attribute.  The width shall be determined by summing the width s of the contained characters, adjusted for any  indents, letter spacing, word spacing, or line-end conditions.  For an ILSE that contains an illu stration or table, the content rect angle shall be determined from the  bounding box of all graphics objects in the content, and shall take into account any explicit bounding boxes  (such as the  BBox  entry in a form XObject). This  implied size may be explicitly overridden by the elements  Width  and  Height attributes.  For an ILSE that contains a mixture of elements, th e height of the content rectangle shall be determined by  aligning the child objects relative to one another based  on their text baseline (for text ILSEs) or end edge  (for non-text ILSEs), along with any applicable  BaselineShift  attribute (for all ILSEs), and finding the  extreme top and bottom for all elements. NOTE Some conforming readers may apply this process to al l elements within the block; others may apply it on a  line-by-line basis.  The allocation rectangle shall be derived from the content rectangle in a way that also depends on the structure  type:  For a BLSE, the allocation rectangle shall be equal to  the content rectangle with its before and after edges  adjusted by the elements  SpaceBefore  and  SpaceAfter  attributes, if any, but with no changes to the start  and end edges.  For an ILSE, the allocation rectangle is the same as the content rectangle. 14.8.5.4.6 Illustration Attributes Particular uses of illustration elem ents (structure types  Figure, Formula, or Form) shall have additional  restrictions:   When an illustration element has a  Placement attribute of Block, it shall have a  Height attribute with an  explicitly specified numerical value (n ot Auto). This value shall be the sole source of information about the  illustrations extent in the  block-progression direction.   When an illustration element has a  Placement attribute of Inline, it shall have a  Width  attribute with an  explicitly specified numerical value (n ot Auto). This value shall be the sole source of information about the  illustrations extent in the  inline-progression direction.  When an illustration element has a  Placement attribute of Inline, Start, or End, the value of its  BaselineShift  attribute shall be used to determine the position  of its after edge relative  to the text baseline;  BaselineShift  shall be ignored for all other values of  Placement . (An illustration element with a  Placement  value of Start may be used to create a dropped capital; one with a  Placement  value of Inline  may be used to create a raised capital.)  14.8.5.4.7 Colu mn Attributes The attributes described in  Ta b l e  346  shall be present for the grouping elements Art, Sect, and Div (see  14.8.4.2, Group ing Elements ). They shall be used when the content in  the grouping element is divided into  columns.",""],"616":["PDF 32000-1:2008 608 ' Adobe Systems Incorporated 2008  All rights reserved 14.8.5.5 List Attribute If present, the  ListNumbering  attribute, described in  Ta b l e  347 , shall appear in an L (List) element. It controls  the interpretation of the Lbl (Label) elements within the lists LI (List item) elements (see  List Elements  in 14.8.4.3, Block-Level Structure Elements ). This attribute may only be defined in attribute objects whose  O(owner) entry has the value  List or is one of the format-specific owner names listed in  Ta b l e  341 .Table  346    Standard column attributes   Key Type Value ColumnCount integer (Optional; not inheritable; PDF 1.6)  The number of columns in the content  of the grouping elemen t. Default value: 1. ColumnGap number  or array(Optional; not inheritable; PDF 1.6)  The desired space between adjacent  columns, measured in default user space units in the inline-progression  direction. If the value is a number, it specifies the space between all  columns. If the value is an array, it should contain numbers, the first  element specifying the space between the first and second columns, the  second specifying the space between the second and third columns, and  so on. If there are fewer than  ColumnCount  - 1 numbers, the last  element shall specify all remaining spaces; if there are more than  ColumnCount  - 1 numbers, the excess array elements shall be ignored.  ColumnWidths number  or array(Optional; not inheritable; PDF 1.6)  The desired width of the columns,  measured in default user space units in  the inline-progression direction. If  the value is a number, it specifies the width of all columns. If the value is  an array, it shall contain numbers, representing the width of each column,  in order. If there are fewer than  ColumnCount numbers, the last element  shall specify all remaining widths; if there are more than  ColumnCount  numbers, the excess array elements shall be ignored. Table  347    Standard list attribute   Key Type Value ListNumbering name(Optional; inheritable)  The numbering system used to generate the  content of the Lbl (Label) elements in  an autonumbered list, or the symbol  used to identify each item in an  unnumbered list. The value of the  ListNumbering  shall be one of the following, and shall be applied as  described here. None No autonumbering; Lbl elements (if present) contain  arbitrary text not subjec t to any numbering scheme  Disc Solid circular bullet  Circle Open circular bullet  Square Solid square bullet  Decimal Decimal arabic numerals (19, 1099,   ) UpperRoman Uppercase roman numerals (I, II, III, IV,   ) LowerRoman Lowercase roman numerals (i, ii, iii, iv,   ) UpperAlpha Uppercase letters (A, B, C,   ) LowerAlpha Lowercase letters (a, b, c,   ) Default value: None.  The alphabet used for UpperAlpha and LowerAlpha shall be determined  by the prevailing  Lang  entry (see  14.9.2, Natural Language  Specification ). The set of possible values may be expanded as Unicode identifies  additional numbering systems. A conformi ng reader shall ignore any value  not listed in this table; it shall behave as though the value were None.",""],"617":["' Adobe Systems Incorporated 2008  All rights reserved 609PDF 32000-1:2008 NOTE This attribute is us ed to allow a content extraction tool to autonumber a list. However, the  Lbl  elements within  the table should nevertheless contain the resulting numbers explicitly, so that the document can be reflowed or  printed without the need for autonumbering.  14.8.5.6 PrintFie ld Attributes (PDF 1.7)  The attributes described in  Ta b l e  348  identify the role of fields in non-interactive PDF forms. Such  forms may have originally contained  interactive fields such as text fields and radio buttons but were then  converted into non-interactive PDF f iles, or they may have been designed to be printed out and filled in  manually. Since the roles of the fields cannot be determ ined from interactive elements, the roles are defined  using PrintField attributes.NOTE PrintField attributes enable screen readers to identify  page content that represents  form fields (radio buttons,  check boxes, push buttons, and text fields). These attri butes enable the controls in print form fields to be  represented in the logical structure tr ee and to be presented to assistive technology as if they were read-only  interactive fields. 14.8.5.7 Table Attributes The value of the  O (owner) entry of a Table attributes element shall be  Table  or one of the format-specific  owner names listed in  Table  341. Table  348    PrintField attributes   KeyType Value Rolename (Optional; not inheritable)  The type of form field represented by this  graphic. The value of Role shall be one of the following, and a conforming  reader shall interpret its meaning as defined herein. rbRad io button cbChe ck box pbPush buttontvT ext-value field The  tv role shall be used for interactive fields whose values have been  converted to text in the non-interact ive document. The te xt that is the value of the field shall be the c ontent of the Form element (see  Ta b l e  340).NOTE 1 Examples include text edit fields, numeric fields, password  fields, digital signatures, and combo boxes. Default value: None specified.  checked name (Optional; not inheritable)  The state of a radio bu tton or check box field.  The value shall be one of:  on, off (default), or  neutral .NOTE 2 The case (capitalization) used for this key does not conform  to the same conventions used elsewhere in this standard. Desc text string(Optional; not inheritable)  The alternate name of the field. NOTE 3 Similar to the value supplied in the  TU entry of the field  dictionary for interactive fields (see  Ta b l e  220).",""],"618":["PDF 32000-1:2008 610 ' Adobe Systems Incorporated 2008  All rights reserved 14.9 Accessibility Support 14.9.1 General PDF includes several facilities in support of accessibility  of documents to users with dis abilities. In particular,  many visually computer users with visual impairment s use screen readers to read documents aloud. To enable  proper vocalization, either through a screen reader or  by some more direct invo cation of a text-to-speech  engine, PDF supports the following features:  Specifying the natural lang uage used for text in a PDF documentfor  example, as English or Spanish, or  used to hide or reveal optional content (see  14.9.2, Natural Language Specification )  Providing textual descriptions for images or other  items that do not translate naturally into text ( 14.9.3,  Alternate Descriptions ), or replacement text for co ntent that does translate into  text but is represented in  a nonstandard way (such as with a lig ature or illuminated character; see  14.9.4, Replacement Text )  Specifying the expansion of abbreviations or acronyms ( Section 14.9.5, Expansion of Abbreviations and  Acronyms )  Table  349    Standard table attributes   KeyType Value RowSpan integer (Optional; not inheritable)  The number of rows in the enclosing table that  shall be spanned by the cell. The cell shall expand by adding rows in the  block-progression direction specified by the tables  WritingMode attribute. If this entry  is absent, a conforming read er shall assume a value  of 1.This entry shall only be used when the table cell has a structure type of  TH or TD or one that is role mapped to structure type  TH or TD (see Ta b l e  337).ColSpan integer (Optional; not inheritable)  The number of columns in the enclosing table  that shall be spanned by the cell. The cell shall expand by adding  columns in the inline-progression di rection specified by the tables  WritingMode  attribute. If this entry is absent, a conforming reader shall  assume a value of 1 This entry shall only be used when the table cell has a structure type of  TH or TD or one that is role mapped to structure types  TH or TD (see Ta b l e  337).Headers array(Optional; not inheritable; PDF 1.5)  An array of byte strings, where each  string shall be the elem ent identifier (see the  ID entry in  Ta b l e  323 ) for a  TH structure element that shall be used as a header associated with this  cell. This attribute may apply to header cells ( TH) as well as data cells ( TD) (see Table  337 ). Therefore, the headers associated with any cell shall be  those in its  Headers array plus those in the  Headers  array of any  THcells in that array,  and so on recursively. Scopename (Optional; not inheritable; PDF 1.5)  A name whose value shall be one of  the following:  Row, Column, or Both. This attribute shall only be used  when the structure type of the element is  TH. (see Ta b l e  337). It shall  reflect whether the header cell applies to the rest of the cells in the row  that contains it, the co lumn that contains it, or both the row and the  column that contain it. Summarytext string(Optional; not inheritable; PDF 1.7)  A summary of the tables purpose and  structure. This entry shall only be used within  Table  structure elements  (see Ta b l e  337). NOTE For use in non-visual rendering such as speech or braille",""],"619":["' Adobe Systems Incorporated 2008  All rights reserved 611PDF 32000-1:2008 The core of this support lies in  the ability to determine the logical order of content in a PDF document,  independently of the contents appearance or layout,  through logical structure and Tagged PDF, as described  under  14.8.2.3, Page  Content Order.  An accessibility application can ex tract the content of a document for  presentation to users with disabilitie s by traversing the stru cture hierarchy and presen ting the contents of each  node. For this reason, conforming writers ensure that a ll information in a document is reachable by means of  the structure hierarchy, and they should use  the facilities described  in this sub-clause.  NOTE 1 Text can be extracted from Tagged PDF docu ments and examined or reused for purposes other than  accessibility; see  14.8, Tagged PDF.  NOTE 2 Additional guidelines for accessibility support of  content published on the Web can be found in the W3C  document  Web Content Accessibility Guidelines  and the documents it points to (see the  Bibliography ). 14.9.2 Natural Language Specification 14.9.2.1 General Natural language may be specified for text in a document or for optional content.  The natural language used for text in a document shall be determined in a hierarchical fashion, based on  whether an optional  Lang  entry  (PDF 1.4)  is present in any of several possib le locations. At  the highest level,  the documents default language (which applies to both  text strings and text within content streams) may be  specified by a  Lang  entry in the document catalogue (see  7.7.2, Document Catalog ). Below this, the  language may be specified  for the following items:   Structure elements of any type (see  14.7.2, Structure Hierarchy ), through a  Lang entry in the structure  element dictionary.   Marked-content sequences that are not in the structure hierarchy (see  14.6, Marked Content ), through a  Lang  en try in a property list attached to the  marked-content sequence with a Span tag.  NOTE 1 Although  Span  is also a standard structure type, as described under  14.8.4.4, Inline-Level Structure  Elements,  its use here is entirely independent of logical structure. NOTE 2 The natural language used for opt ional content allows content to  be hidden or revealed, based on the  Lang entry  (PDF 1.5) in the Language  dictionary of an optional content usage dictionary.  NOTE 3 The following sub-clauses provide details on the value of the  Lang entry and the hierarch ical manner in which  the language for text in a document is determined.  Text strings encoded in Unicode may include an escape sequence or language tag indicating the language of  the text and overriding the prevailing  Lang entry (see  7.9.2.2, Text String Type ).  14.9.2.2 Language Identifiers Certain language-related dictionary ent ries are text strings that specify  language identifiers . Such text strings  may appear as  Lang  entries in the following st ructures or dictionaries:  Document catalogue, structure elem ent dictionary, or property list  Optional content usage dictionarys Language dict ionary, the hierarchical issues described in  14.9.2.3,  Language Specification Hierarchy,  shall not apply to this entry  A language identifier shall either be the empty text string, to indicate that the language is unknown, or a  Language-Tag  as defined in RFC 3066,  Tags for the Identification of Languages .Although language codes are commonly represented us ing lowercase letters and country codes are commonly  represented using uppercase letters, all tags shall be treated as case insensitive.",""],"620":["PDF 32000-1:2008 612 ' Adobe Systems Incorporated 2008  All rights reserved 14.9.2.3 Language Specification Hierarchy The  La ng  entry in the document catalogue shall specify the default natural language for all text in the  document. Language specifications may appear within  structure elements, and they may appear within  marked-content sequences that are no t in the structure hierarchy. If present, such language specifications  override the default.  Language specifications within the stru cture hierarchy apply in this order:   A structure elements language specificatio n. If a structure element does not have a  Lang  entry, the  element shall inherit its language from any parent element that has one.  Within a structure element, a language specification  for a nested structure element or marked-content  sequence  If only part of the page content is contained in the  structure hierarchy, and the  structured content is nested  within nonstructured content for which a different langu age specification applies, the structure elements  language specification shall take precedence. A language identifier attached to a marked-content sequenc e with the Span tag specifies the language for all  text in the sequence except for nested marked content  that is contained in the structure hierarchy (in which  case the structure elements language applies) and e xcept where overridden by language specifications for  other nested marked content.  NOTE Examples in this sub-clause illustrate the hierarchic al manner in which the language for text in a document is  determined. EXAMPLE 1 This example shows how a language specified for  the document as a whole could be overridden by one  specified for a marked-content sequence within a  pages content stream, independent of any logical  structure. In this case, the  Lang  entry in the document catalogue  (not shown) has the value en-US,  meaning U.S. English, and  it is overridden by the  Lang  property attached (with the Span tag) to the  marked-content sequence Hasta la vista. The  Lang  property identifies the language for this marked  content sequence with the value es-MX, meaning Mexican Spanish.  2 0 obj % Page object << /Type  /Page /Contents  3 0 R% Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>streamBT( See you later, or as Arnold would say,   ) Tj/Span  << /Lang  ( es-MX ) >> % Start of marked-content sequence BDC( Hasta la vista  . ) TjEMC% End of marked-content sequence ETendstream endobj EXAMPLE 2 In the follo wing example, the Lang entry in the structure element dictionary (specifying English) applies to  the marked-content sequence having an  MCID (marked-content identifier) value of 0 within the indicated  pages content stream. However, nest ed within that marked-content seque nce is another one in which the  Lang  property attached with the Span tag (specifyi ng Spanish) overrides the structure elements  language specification.  This example omits required  StructParents  entries in the objects used as content items (see  14.7.4.4,  Finding Structure Elements from Content Items ).",""],"621":["' Adobe Systems Incorporated 2008  All rights reserved 613PDF 32000-1:2008 1 0 obj % Structure element <<  /Type  /StructElem  /S /P% Structure type   /P % Parent in structure hierarchy  /K <<  /Type  /MCR /Pg 2 0 R% Page containing marked-content sequence  /MCID  0% Marked-content identifier >>/Lang  ( en-US  )% Language specification for this element >>endobj 2 0 obj % Page object << /Type  /Page /Contents  3 0 R% Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>stream BT/P << /MCID  0 >>% Start of marked-content sequence BDC( See you later, or in Spanish you would say,   ) Tj/Span  << /Lang  ( es-MX  ) >> % Start of nested  marked-content sequence BDC( Hasta la vista  . ) TjEMC% End of nested marked-content sequence EMC% End of marked-content sequence ETendstream endobj","EXAMPLE 3 The pages content stream consists of a marked-c ontent sequence that specifies Spanish as its language  by means of the Span tag with a  Lang  property. Nested within it is content that is part of a structure  element (indicated by the  MCID entry in that property  list), and the language specif ication that applies to  the latter content is that of the structure element, English.  This example omits required StructParents entrie s in the objects used as content items (see  14.7.4.4,  Finding Structure Elements from Content Items ). 1 0 obj % Structure element <<  /Type  /StructElem  /S /P% Structure type   /P % Parent in structure hierarchy  /K <<  /Type  /MCR /Pg 2 0 R% Page containing marked-content sequence  /MCID  0% Marked-content identifier >>/Lang  ( en-US  )% Language specification for this element >>endobj 2 0 obj % Page object << /Type  /Page /Contents  3 0 R% Content stream  >>endobj 3 0 obj % Page’s content stream << /Length   >>stream",""],"622":["PDF 32000-1:2008 614 ' Adobe Systems Incorporated 2008  All rights reserved /Span  << /Lang  ( es-MX ) >> % Start of marked-content sequence BDC ( Hasta la vista,   ) Tj/P << /MCID  0 >>% Start of structured marked-content sequence, BDC%     to which structure element’s language applies ( as Arnold would say  .  ) TjEMC% End of structured marked-content sequence EMC% End of marked-content sequence endstream endobj 14.9.2.4 Multi-language Text Arrays A m ulti-language text array  (PDF 1.5)  allows multiple text strings to be  specified, each in association with a  language identifier. (See the  Alt entry in Tables  274  and  277 for examples of its use.)  A multi-language text array shall contain pairs of string s. The first string in each pair shall be a language  identifier (14.9.2.2, Language Identifiers ). A language identifier shall not appear more than once in the array;  any unrecognized language identifier shall be ignored.  An empty string specifies de fault text that may be used  when no suitable language  identifier is found in the array. The second string is text associated with the  language.  EXAMPLE [ (en-US) (My vacation) (fr) (m es vacances) ( ) (default text) ] When a conforming reader searches a multi-language text  array to find text for a given language, it shall look  for an exact (though case-insensitive) match betwe en the given languages identifier and the language  identifiers in the array. If no exact match is found, pref ix matching shall be attempted in increasing array order:  a match shall be declared if the given id entifier is a leading, case -insensitive, substring of an identifier in the  array, and the first post-substring character in the array  identifier is a hyphen. For example, given identifier en  matches array identifier en-US, but gi ven identifier en-US matches neither en  nor en-GB. If no exact or prefix  match can be found, the default text (if any) should be used. 14.9.3 Alternate Descriptions PDF documents may be enhanced by providing alternate de scriptions for images, formulas, or other items that  do not translate na turally into text.  NOTE 1 Alternate descriptions are human-readable text that  could, for example, be vocalized by a text-to-speech  engine for the benefit of us ers with visual impairments. An alternate description may be specified for the following items:   A structure element (see  14.7.2, Structure Hierarchy ), through an  Alt entry in the structure element  dictionary  ( PDF 1.5)  A marked-content sequence (see  14.6, Marked Content ), through an  Alt entry in a property list  attached to the marked-content  sequence with a Span tag.   Any type of annotation (see  12.5, Annotations ) that does not already have a text representation, through  a Cont ents  entry in the annotation dictionary  For annotation types that normally display text, the  Contents  entry of the annotation dictionary shall be used as  the source for an alternate description. For an notation types that do not display text, a  Contents  entry  (PDF  1.4)  may be included to specify an alternate descript ion. Sound annotations, which need no alternate  description for the purpose of vocalization, may include a  Contents  entry specifying a description that may be  displayed for the benefit of users with hearing impairments.",""],"623":["' Adobe Systems Incorporated 2008  All rights reserved 615PDF 32000-1:2008 An alternate name may be specified for an interactive form field (see  12.7, Interactive Forms ) which, if present, shall be used in place of th e actual field name when a conforming reader identifies the field in a user- interface. This alternate name, if pr ovided, shall be specified using the  TU entry of the field dictionary. NOTE 2 The  TU entry is useful for vocalization purposes.  Alternate descriptions are text strings, which shall be encoded in either  PDFDocEncoding  or Unicode  character encoding. NOTE 3 As described in  7.9.2.2, Text String Type,  Unicode defines an escape sequence for indicating the language of  the text. This mechanism enables the alternate descrip tion to change from the language specified by the  prevailing  Lang  entry (as described in the preceding sub-clau se). Within alternate descriptions, Unicode  escape sequences specifying language sh all override the prevailing Lang entry. When applied to structure elements, the alternate descri ption text shall be considered to be a complete (or  whole) word or phrase substitution for the current elem ent. If each of two (or more) elements in a sequence  have an  Alt entry in their dictionaries, they shall be treate d as if a word break is present between them. The  same applies to consecutive marked-content sequences.  The  Al t  entry in property lists may  be combined with other entries. EXAMPLE This example shows the  Alt  entry combined with a  Lang  entry. /Span << /Lang (en-us) /Alt (six-point star) >> BDC ( A) Tj  EMC14.9.4 Replacement Text NOTE 1 Just as alternate descriptions can be provided for im ages and other items that do no t translate naturally into  text (as described in the preceding  sub-clause), replacement text can be specified for content that does  translate into text but that is  represented in a nonstandard way. Th ese nonstandard representations might  include, for example, glyphs for ligatures or custom ch aracters, or inline graphics corresponding to letters in an  illuminated manuscript or to dropped capitals.  Replacement text may be spec ified for the following items:  A structure element (see  14.7.2, Structure Hierarchy ), by means of the optional  ActualText  entry  (PDF  1.4)  of th e structure element dictionary. ( PDF 1.5)  A marked-content sequence (see  14.6, Marked Content ), through an  ActualText  entry in a  property list attached to the marked-content sequence with a Span tag. The  A ctualText  value shall be used as a replacement, not a descri ption, for the content, providing text that is  equivalent to what a person would see when viewing the content. The value of  ActualText  shall be considered  to be a character substitution for the structure elemen t or marked-content sequence. If each of two (or more)  consecutive structure or marked-content sequences has an  ActualText  entry, they shall be treated as if no  word break is present between them.  NOTE 2 The treatment of  ActualText  as a character replacement is  different from the treatment of  Alt, which is treated  as a whole word or phrase substitution. EXAMPLE This example shows the use of replacement text to  indicate the correct characte r content in a case where  hyphenation changes the spelling of a word (in German, up until recent spelling reforms, the word  Drucker when hyphenated was rendered as Druk- and ker). (Dru) Tj/Span <</Actual Text (c) >> BDC(k-) Tj EMC(ker) ’",""],"624":["PDF 32000-1:2008 616 ' Adobe Systems Incorporated 2008  All rights reserved Like alternate descriptions (and other text strings),  replacement text, if encoded in Unicode, may include an  escape sequence for indicating the  language of the text. Such a sequ ence shall override the prevailing  Lang entry (see  7.9.2.2, Text String Type ). 14.9.5 Expansion of Abbreviations and Acronyms The expansion of an abbreviation or acronym may be specified for the following items:  Marked-content sequences, through an  E property  (PDF 1.4)  in a property list attached to the sequence  with a Span tag.  Structure elements, through an  E entry  (PDF 1.5)  in the structure element dictionary. NOTE 1 Abbreviations and acronyms can pose a problem fo r text-to-speech engines. Sometimes the full pronunciation  for an abbreviation can be divined without aid. For exampl e, a dictionary search will pr obably reveal that Blvd.  is pronounced boulevard and that Ave. is pronounced  avenue. However, some abbreviations are difficult  to resolve, as in the sentence Dr.  Healwell works at 123 Industrial Dr.. EXAMPLE BT /Span  << /E  ( Doctor  ) >>BDC ( Dr.   ) TjEMC ( Healwell   works at 123 Industrial   ) Tj/Span  << /E  ( Drive ) >>BDC ( Dr.  ) TjEMC ETThe  E value (a text string) shall be considered to be a word or phrase substitution for the tagged text and  therefore shall be treated as if a word break separate s it from any surrounding text.The expansion text, if  encoded in Unicode, may include an escape sequence for indicating the language of the text (see  7.9.2.2, Text  String Type ). Such a sequence shall override the preva iling Lang entry.NOTE 2 Some abbreviations or acronyms  are conventionally not expanded into word s. For the text XYZ, for example,  either no expansion should be supplied (leaving its pro nunciation up to the text-to-speech engine) or, to be  safe, the expansion X  Y Z should be specified.  14.10    Web Capture 14.10.1 General The information in the Web Capture data structures  enables conforming products to perform the following  operations:   Save locally and preserve the visual appearance of material from the Web   Retrieve additional material from the Web and add it to an existing PDF file   Update or modify existing material  previously captured from the Web   Find source information for material captured from t he Web, such as the URL (if any) from which it was  captured   Find all material in a PDF file that was generated from a given URL   Find all material in a PDF file that ma tches a given digital identifier (MD5 hash)",""],"625":["' Adobe Systems Incorporated 2008  All rights reserved 617PDF 32000-1:2008 The information needed to perform these operations shall be recorded in two data structures in the PDF file:  The  Web Capture information dictionary , which shall hold document-level information related to Web  Capture.  The  W eb Capture content database , which shall hold a complete registry  of the source content resources  retrieved by Web Capture and where it came from. NOTE 3 The  Web Capture content database  enables the capturing process to  avoid downloading material that is  already present in the file.  14.10.2 Web Capture Information Dictionary The optional  SpiderInfo  entry in the document catalogue (see  7.7.2, Document Catalog ), if present, shall hold  Web Capture information dictionary . 14.10.3 Content Database 14.10.3.1 General When a PDF file, or part of a PDF f ile, is built from a content resource stored in another format, such as an  HTML page, the resulting PDF file (or portion thereof)  may contain content from more than the single content  resources. Conversely, since many content formats do no t have static pagination, a single content resource  may give rise to multiple PDF pages. To keep track of the correspondence between PDF co ntent and the resources from which the content was  derived, a PDF file may contain a  content database  that maps URLs and digital identifiers to PDF objects such  as pages and XObjects.  NOTE 4 By looking up digital identifiers in the databas e, Web Capture can determine whether newly downloaded  content is identical to content alread y retrieved from a different URL. Thus, it can perform optimizations such  as storing only one copy of an image that is referenced by multiple HTML pages.  Web Captures content database shall be organized into  content sets . Each content set shall be a dictionary  holding information about a group of related PDF object s generated from the same source data. A content set  shall have for the value of its  S (subtype) entry either the value  SPS, for a page set, or  SIS, for an image set.  The mapping from a source content resource to a conten t set in a PDF document may be saved in the PDF file.  The mapping may be an association from the resource’s  URL to the content set, stored in the PDF document’s  URLS name tree. The mapping may also be an association from a digital identifier ( 14.10.3.3, Digital  Identifiers ) generated from resource’s data to the content set, stored in the PDF document’s IDS name tree.  Both associations may be present in the PDF file. Table  350   Entries in the Web Capture information dictionary   KeyType Value Vnumber (Required)  The Web Capture version number. The version number shall be 1.0 in a  conforming file.  This value shall be a single real number, not a major and minor version number.  EXAMPLE A version number  of 1.2 would be considered greater than 1.15.  Carray(Optional)  An array of indirect references to Web Capture command dictionaries  (see 14.10.5.3, Command Dictionaries ) describing commands that were used in  building the PDF file. The commands shall appear in the array in the order in which  they were executed in building the file.",""],"626":["PDF 32000-1:2008 618 ' Adobe Systems Incorporated 2008  All rights reserved Figure  84   Simple Web Capture file structure Entries in the URLS and IDS name trees may refer to an array of content sets or a single content set. If the  entry is an array, the content sets need not have the same subtype; the array may include both page sets and  image sets.","Name dictionary","URLS","IDS","Page set","Name tree","Dictionary","Page","Page","Page http://www.adobe.com/ 904B1EA2","Document catalog",""],"627":["' Adobe Systems Incorporated 2008  All rights reserved 619PDF 32000-1:2008 Figure 85   Complex Web Capture file structure 14.10.3.2 URL Strings URLs associated with Web Capture content sets shall be re duced to a predictable, canonical form before being  used as keys in the  URLS  name tree. The following steps describe how to perform this reduction, using  terminology from Internet RFCs 1738,  Uniform Resource Locators , and 1808,  Relative Uniform Resource  Locators  (see the  Bibliography ). This algorithm shall be applied for HTTP, FTP, and file URLs:  Algorithm: URL strings a) If the URL is relative, it shall be converted into an absolute URL.  b) If the URL contains one or more NUMBER SIGN (02h 3) characters, it shall be truncated before the first  NUMBER SIGN. c) Any uppercase ASCII characters within the scheme section of the URL shall be replaced with the  corresponding lowercase ASCII characters. d) If there is a host section, any uppercase ASCII c haracters therein shall be co nverted to lowercase ASCII.","Names dictionary","URLS","IDS","Page","Image XObject Content set array","Document cataloghttp://www.adobe.com/getacro.gif","Page set Image set","Dictionary Array","Name tree","BF7014D8",""],"628":["PDF 32000-1:2008 620 ' Adobe Systems Incorporated 2008  All rights reserved e) If the scheme is file and the host is lo calhost, the host secti on shall be removed.  f) If there is a port section and the port is the default  port for the given protocol (80 for HTTP or 21 for FTP),  the port section shall be removed.  g) If the path section contains PERIOD (2Eh) (  . ) or DOUBLE PERIOD (  . . ) subsequences, transform the path  as described in section 4 of RFC 1808.  NOTE Because the PERCENT SIGN (25h)  is unsafe according to RFC 1738 and is also the escape character for  encoded characters, it is not possible in general to di stinguish a URL with unencoded  characters from one with  encoded characters. For example, it is  impossible to decide whether the sequence  %00  represents a single  encoded null character or a sequence of three unenc oded characters. Hence, no  number of encoding or  decoding passes on a URL can ever cause it to reac h a stable state. Empirically, URLs embedded in HTML  files have unsafe characters encoded with one encod ing pass, and Web servers perform one decoding pass  on received paths (though CGI scripts  can make their own decisions).  Canonical URLs are thus assumed to have undergone one and only one encoding pass. A URL whose initial  encoding state is known can be safely transformed into a URL that has undergone only one encoding pass.  14.10.3.3 Digital Identifiers Digital identifiers, used to associate source  content resources with content sets by the  IDS name tree, shall be generated using the MD5 message-digest algorithm (Internet RFC 1321).  NOTE 1 The exact data passed to the algorithm depends on th e type of content set and the nature of the identifier  being calculated.  For a page set, the source data shall be passed to the  MD5 algorithm first, followed by strings representing the  digital identifiers of any auxiliary data f iles (such as images) referenced in th e source data, in the order in which  they are first referenced. If an auxiliary  file is referenced  more than once, its identifi er shall be passed only the  first time. The resulting string shall be used as the  digital identifier for the source content resource. NOTE 2 This sequence produces a composite identifier repr esenting the visual appearance of the pages in the page  set. NOTE 3 Two HTML source files that ar e identical, but for which the referenc ed images contain different datafor  example, if they have been generated by a script or are pointed to by relative URLsdo not produce the same  identifier.  When the source data is a PDF file, the identifier shall be generated solely from the contents of that file; there  shall be no auxiliary data.  A page set may also have a  text identifier , calculated by applying the MD5 algorithm to just the text present in  the source data.  EXAMPLE 1 For an HTML file the text ident ifier is based solely on  the text between markup  tags; no images are used  in the calculation.  For an image set, the digital identifier shall be calculated by passing the source data for the original image to  the MD5 algorithm.  EXAMPLE 2 The identifier for an  image set created from a GI F image is calculat ed from the cont ents of the GIF.  14.10.3.4 Unique Name Generation In generating PDF pages from a data source, items such  as hypertext links and HTML form fields are converted  into corresponding named destinations and interactive  form fields. These items shall be given names that do  not conflict with those of other such items in the file. NOTE As used here, the term name refers to a string, not a name object.",""],"629":["' Adobe Systems Incorporated 2008  All rights reserved 621PDF 32000-1:2008 Furthermore, when updating an existing f ile, a conforming processor shall ensu re that each destination or field  is given a unique name that shall be derived from its orig inal name but constructed so that it avoids conflicts  with similarly named items elsewhere.  The unique name shall be formed by appending an encoded fo rm of the page sets digital identifier string to the  original name of the destination or field. The identifier st ring shall be encoded to remove characters that have  special meaning in destinations and fields. Th e characters listed in the first column of  Ta b l e  351  have special  meaning and shall be encoded using the corresponding byte values from second column of  Table  351 .EXAMPLE Since the PERIOD character (2Eh) is used as the fi eld separator in interactiv e form field names, it does  not appear in the identifier portion of the unique name.  If the name is used for an interactive form field,  there is an additional encoding to ensure uniqueness and  compatibility with interactive  forms. Each byte in the source string,  encoded as described previously, shall be replaced by two bytes in the destination string. The first byte in each pair is 65 (corresponding to the ASCII  character A) plus the high-order 4 bits of the source byte; the second byte is 65 plus  the low-order 4 bits of the  source byte. 14.10.4 Content Sets 14.10.4.1 General A Web Capture  content set is a dictionary describing a set of PDF objects generated from the same source  data. It may include information common to all the ob jects in the set as well  as about the set itself.  Ta b l e  352defines the contents of this type of dictionary.  14.10.4.2 Page Sets A p age set  is a content set containing a group of PDF page  objects generated from a common source, such as  an HTML file. The pages shall be listed in the  O array of the page set dictionary (see  Ta b l e  352 ) in the same  order in which they were initially added  to the file. A single page object shall not belong to more than one page  set. Ta b l e  353  defines the content set dictionary  entries specific to Page Sets.  The  TID (t ext identifier) entry may be used to store an iden tifier generated from the text of the pages belonging  to the page set (see  14.10.3.3, Digital Identifiers ). A text identifier may not be  appropriate for some page sets  (such as those with no text) and may be omitted in these cases.  EXAMPLE This identifier ma y be used to determi ne whether the text of  a document has changed. Table  351    Characters with special meaning in dest inations and fields and their byte values  Character Byte value Escape sequence (nul)0x00 \\0 (0x5c 0x30) . (PERIOD) 0x2e \\p (0x5c 0x70) \\ (backslash)0x5c \\\\ (0x5c 0x5c) Table  352    Entries common to all Web Capture content sets   KeyType Value Type name (Optional)  The type of PDF object that this di ctionary describes; if present, shall  be  SpiderContentSet  for a Web Capture content set.  Sname (Required)  The subtype of content set that this dictionary describes. The value  shall be one of:  SPS(Spider page set) A page set  SIS(Spider image set) An image set",""],"630":["PDF 32000-1:2008 622 ' Adobe Systems Incorporated 2008  All rights reserved 14.10.4.3 Image Sets An im age set  is a content set containing a group of image XObj ects generated from a common source, such as  multiple frames of an animated GIF image. A single XObject shall not belong to more than one image set.  Ta b l e  354 shows the content set dictionary entries specific to Image Sets.  Each image XObject in an image set has a reference co unt indicating the number of PDF pages referring to  that XObject. The reference count shall be incremented  whenever Web Capture creates a new page referring  to the XObject (including copies of  already existing pages) and decremented whenever such a page is  destroyed. The reference count shall be incremented or decremented only once per page, regardless of the  number of times the XObject may be referenced by th at page. If the reference count reaches 0, it shall be IDbyte string (Required)  The digital identifier of the content set (see  14.10.3.3, Digital  Identifiers ).Oarray(Required)  An array of indirect references to the objects belonging to the  content set. The order of objects in the  array is restricted when the content set  subtype (S entry) is SPS (see  14.10.4.2, Page Sets ).SIdictionary  or array(Required)  A source information dictionary (see  14.10.5, Source Information ) or an array of such dictionaries, describing the sources from which the objects  belonging to the content set were created.  CTASCII string(Optional)  The content type, an ASCII string  characterizing the source from  which the objects belonging to the content set were created. The string shall  conform to the content type specificat ion described in Internet RFC 2045,  Multipurpose Internet Mail Extensions (M IME) Part One: Format of Internet  Message Bodies (see the  Bibliography ). EXAMPLE for a page set consisting of a group of PDF pages created  from an HTML file, the content type would be text  / html.  TSdate (Optional)  A time stamp giving the date and time  at which the content set was  created. Table  353    Additional entries specific to a Web Capture page set   KeyType Value Sname (Required)  The subtype of content set that this dictionary describes; shall be  SPS. Ttext string (Optional)   The title of the page set, a human-readable text string.  TID byte string (Optional)  A text identifier generated from the te xt of the page set, as described  in  14.10.3.3, Digital Identifiers.  Table  354    Additional entries specific to a Web Capture image set   KeyType Value Sname (Required)   The subtype of content  set that this dictionary describes; shall be  SIS. Rinteger  or array(Required)  The reference counts for the image XObjects belonging to the image  set. For an image set containing a single  XObject, the value shall be the integer  reference count for that XObject. For an image set containing multiple XObjects,  the value shall be an array of reference counts parallel to the  O array (see  Table  352); that is, each element in the  R array shall hold the reference count for  the image XObject at the co rresponding position in the  O array.  Table 352   Entries common to all Web Capture content sets  (continued) Key Type Value",""],"631":["' Adobe Systems Incorporated 2008  All rights reserved 623PDF 32000-1:2008 assumed that there are no remaining pages referring to  the XObject and that the XObject can be removed from  the image sets  O array. When removing an XObject from the O array of an image set, the corresponding entry  in the R array shall be removed also.  14.10.5 Source Information 14.10.5.1 General The  SI entry in a content set dictionary (see Ta b l e  352) shall contain one or more  source information  dictionaries , each containing information about the locations from which the source data for the content set was  retrieved.  A content set’s  SI entry may contain a single source information dictionary. However, a PDF processor may  attempt to detect situations in which the same source  data has been located via two or more distinct URLs. If a  processor detects such a situation,  it may generate a single content set from the source data, containing a  single copy of the relevant PDF pages or image XObjects. In this case, the  SI entry shall be an array containing  one source information dictionary for each distinct URL  from which the original source content was found. The determination that distinct URLs produce the sa me source data shall be made by comparing digital identifiers for the source data.  A source information dictionarys  AU (aliased URLs) entry shall identify the URLs from which the source data  was retrieved. If there is  only one such URL, the  v value of this entry may be a string. If multiple URLs map to  the same location through redirection, the  AU value shall be a URL alias dictionary (see  14.10.5.2, URL Alias  Dictionaries). NOTE 1 For file size efficiency, the ent ire URL alias dictionary (excluding the URL  strings) should be represented as a  direct object because its internal structure s hould never be shared or externally referenced.  Table  355    Entries in a source information dictionary   KeyType Value AUASCII string or dictionary (Required)  An ASCII string or URL alias dictionary (see  14.10.5.2, URL Alias  Dictionaries ) which shall identify the URLs from which the source data was  retrieved. TSdate (Optional)  A time stamp which, if present,  shall contain the most recent date  and time at which the content sets contents were known to be up to date with  the source data.  Edate (Optional)  An expiration stamp which, if present, shall contain the date and time  at which the content sets contents s hall be considered out of date with the  source data.  Sinteger (Optional)  A code which, if present, shall indicate the type of form submission, if  any, by which the source data was accessed (see  12.7.5.2, Submit-Form  Action). If present, the value of  the S entry shall be 0, 1, or 2, in accordance  with the following meanings:  0 Not accessed by means of a form submission  1 Accessed by means of an HTTP GET request  2 Accessed by means of an HTTP POST request  This entry may be present only in source  information dictionaries associated  with page sets. Default value: 0.  Cdictionary (Optional; if present, shall be an indirect reference)  A command dictionary (see  14.10.5.3, Command Dictionaries ) describing the command that caused the  source data to be retrieved. This  entry may be present only in source  information dictionaries associated with page sets.",""],"632":["PDF 32000-1:2008 624 ' Adobe Systems Incorporated 2008  All rights reserved The  TS (time stamp) entry allows each source location associated with a content set to have its own time  stamp.  NOTE 2 This is necessary because the time  stamp in the content set dictionary (see  Ta b l e  352 ) merely refers to the  creation date of the content set. A hypothetical Update  Content Set command might reset the time stamp in  the source information dictionary to th e current time if it found that the  source data had not changed since the  time stamp wa s last set.  The  E (expiration) entry specifies an expiration date for  each source location associated with a content set. If  the current date and time are later than those specified,  the contents of the content set shall be considered out  of date with respect to the original source.  14.10.5.2 URL Alias Dictionaries When a URL is accessed via HTTP, a response header may be returned indicating that the requested data is at  a different URL. This  redirection process may be repeated in turn at the new URL and can potentially continue  indefinitely. It is not uncommon to find multiple URLs th at all lead eventually to the same destination through  one or more redirections. A URL alias dictionary repr esents such a set of URL chains leading to a common  destination.  Table  356  shows the contents of this type of dictionary.  The  C  (chains) entry may be omitted if the URL a lias dictionary contains only one URL. If  C is present, its value  shall be an array of arrays, each representing a chain  of URLs leading to the common destination. Within each  chain, the URLs shall be stored as ASCII strings in the  order in which they occur in the redirection sequence.  The common destination (the last URL in a chain) may  be omitted, since it is already identified by the  U entry.  14.10.5.3 Command Dictionaries A Web Capture  command dictionary  represents a command executed by Web Capture to retrieve one or more  pieces of source data that were used to create new pages or modify existing pages. The entries in this  dictionary represent parameters that were originally sp ecified interactively by the  user who requested that the  Web content be captured. This information is recorded  so that the command can subsequently be repeated to  update the captured content.  Table  357 shows the contents of this type of dictionary.  Table  356    Entries in a URL alias dictionary   KeyType Value UASCII string (Required)  The destination URL to which all of the chains specified by the  C entry  lead.  Carray(Optional)  An array of one or more arrays of strings, each representing a chain of  URLs leading to the common destination specified by  U. Table  357    Entries in a Web Capture command dictionary   KeyType Value URLASCII string(Required)  The initial URL from which source data was requested.  Linteger (Optional)  The number of levels of pages retrieved from the initial URL.  Default value: 1.  Finteger (Optional)  A set of flags specifying various characteristics of the  command (see  Ta b l e  357 ). Defaut value: 0.  Pstring  or stream(Optional)  Data that was posted to the URL.  CTASCII string(Optional)  A content type describing the data  posted to the URL. Default  value: application  / x-www-form-urlencoded.  Hstring (Optional)  Additional HTTP request headers sent to the URL.",""],"633":["' Adobe Systems Incorporated 2008  All rights reserved 625PDF 32000-1:2008 The  URL  entry shall contain the initial  URL for the retrie val command. The  L (levels) entry shall contain the  number of levels of the hyperlinked URL hierarchy to follow from this URL, creating PDF pages from the  retrieved material. If the  L entry is omitted, its value  shall be assumed to be 1, denoting retrieval of the initial  URL only.  The value of the command dictionarys  F entry shall be an integer that shall be interpreted as an array of flags  specifying various characteristics  of the command. The flags shall be interpreted as defined in  Ta b l e  358 . Only  those flags defined in  Ta b l e  358  may be set to 1; all other flags shall be 0. Flags not defined in  Ta b l e  358  are reserved for future use, and shall not be used by a conforming reader. NOTE 3 The low-order bit of the flags value  is referred to as being at bit-position 1. The SamePath flag shall be set if the  retrieval of source conten t was restricted to sour ce content in the same  path as specified in the initial URL. Source content sha ll be considered to be in the same path if its scheme and  network location components (as defined in Internet RFC 1808,  Relative Uniform Resource Locators ) match  those of the initial URL and its path component matches up to and including the last forward slash (  / ) character  in the initial URL.  EXAMPLE 1 the URL  http : / / www . adobe  . com / fiddle  / faddle  / foo  . htmlis considered to be in the same path as the initial URL  http : / / www . adobe  . com / fiddle  / initial  . htmlThe comparison shall be case-insensitive for the scheme  and network location components and case-sensitive  for the path component.  The Submit flag shall be set when the command represents a form submission. If no  P (posted data) entry is  present, the submitted data shall be enco ded in the URL (an HTTP GET request). If  P is present, the command  shall be an HTTP POST request. In this case,  the value of the Submit flag shall be ignored.  NOTE 4 If the posted data is small enough, it may be represented  by a string. For large amounts of data, a stream  should be used because it can be compressed.  The  CT (content type) entry shall only be present for POST  requests. It shall describe the content type of the  posted data, as described in Internet RFC 2045,  Multipurpose Internet Mail Extensions (MIME), Part One:  Format of Internet Message Bodies  (see the  Bibliography ). Sdictionary (Optional)  A command settings dictionary containing settings used in the  conversion process (see  14.10.5.4, Command Settings ). Table  358    Web Capture command flags   Bit positionName Meaning 1SameSiteIf set, pages were retrieved only from the host specified in the initial  URL. 2SamePathIf set, pages were retrieved only from the path specified in the initial  URL. 3SubmitIf set, the command represents a form submission.  Table 357   Entries in a Web Capture command dictionary  (continued) Key Type Value",""],"634":["PDF 32000-1:2008 626 ' Adobe Systems Incorporated 2008  All rights reserved The  H (headers) entry, if present, shall specify additional  HTTP request headers that  were sent in the request  for the URL. Each header line in the string shall be  terminated with a CARRIAGE RETURN and a LINE FEED, as in this example:  EXAMPLE 2 (  Referer  : http  : / / frumble . com \\ 015  \\ 012From  : veeble  @ frotz  . com \\ 015  \\ 012 )The HTTP request header format is specified in Internet RFC 2616,  Hypertext Transfer ProtocolHTTP/1.1 (see the  Bibliography ). The  S ( settings) entry specifies a command settings dictionary (see  14.10.5.4, Command Settings ). Holding settings specific to the conversion engines.  14.10.5.4 Command Settings The  S (se ttings) entry in a command dictionary, if present, shall contain a  command settings dictionary , which  holds settings for conversion engines that shall be used in converting the results of the command to PDF.  Ta b l e  359 shows the contents of this type of dictionary. If th is entry is omitted, default values are assumed.  Command settings dictionaries may be shared by an y command dictionaries that use the same settings.  Each key in the  C dictionary represents the internal name of a conversion engine, which shall be a name object  of the following form:  / company  : product  : version  : contentType where company   denotes the name (or abbreviation) of the company that created the conversion engine.  product  de notes the name of the conversion engine. This  field may be left blank, but the trailing COLON   character (3Ah) is still required.  version   denotes the version of the conversion engine.  contentType  denotes an identifier for the content type the associated settings. shall be used because some  converters may handle mu ltiple content types.  EXAMPLE /  ADBE : H2PDF : 1 . 0 : HTMLAll fields in the internal name are case-sensitive. Th e company field shall conform to the naming guidelines  described in  Annex E. The values of the other fields shall be unres tricted, except that they shall not contain a COLON.  The directed graph of PDF objects r ooted by the command settings dictionary shall be entirely self-contained;  that is, it shall not contain any object re ferred to from elsewh ere in the PDF file. NOTE This facilitates the o peration of making a deep copy of a command settings dictionary without explicit  knowledge of the settings it may contain. Table  359   Entries in a Web Capture command settings dictionary   KeyType Value Gdictionary (Optional)  A dictionary containing global conversion engine settings relevant to  all conversion engines. If this entry is  absent, default settings shall be used.  Cdictionary (Optional)  Settings for specific conversion engi nes. Each key in this dictionary is  the internal name of a conversion engine.  The associated value is a dictionary  containing the settings associated with that conversion engine. If the settings for  a particular conversion engine are not  found in the dictionary, default settings  shall be used.",""],"635":["' Adobe Systems Incorporated 2008  All rights reserved 627PDF 32000-1:2008 14.10.6 Object Attributes Related to Web Capture A given page object or image XObject may belong  to at most one Web Capture content set, called its  parent  content set . However, the object shall not have direct pointe r to its parent content set. Such a pointer may present problems for an application that traces all poi nters from an object to determine what resources the  object depends on. Instead, the objects  ID entry (see  Ta b l e  30 and  Ta b l e  89) contains the digital identifier of  the parent content set, which shall be used to locate the parent content set via the  IDS name tree in the  documents name dictionary. (If the  IDS  entry for the identifier contains an array of content sets, the parent may be found by searching the array for the content set whose  O entry includes the child object.)  In the course of creating PDF pages from HTML files,  Web Capture frequently scales the contents down to fit  on fixed-sized pages. The  PZ (preferred zoom) entry in a page object (see  7.7.3.3, Page Objects ) specifies a  magnification factor by which the page may be scaled to  undo the downscaling and view the page at its original  size. That is, when the page is viewed at the preferre d magnification factor, one unit in default user space  corresponds to one original source pixel.  14.11 Prepress Support 14.11.1 General This sub-clause describes features of PDF that support prepress production workflows:   The specification of  page boundaries  governing various aspects of th e prepress process, such as  cropping, bleed, and trimming ( 14.11.2, Page Boundaries )  Facilities for including  printers marks , such as registration targets, gray ramps, colour bars, and cut marks  to assist in the production process ( 14.11.3, Printers Marks )  Information for generating  colour separations  for pages in a document ( 14.11.4, Separation Dictionaries ) Ou tput intents  for matching the colour characteristics of a doc ument with those of a target output device or  production environm ent in which it  will be printed ( 14.11.5, Output Intents )  Support for the generation of  traps to minimize the visual effects of misregistration between multiple  colorants ( 14.11.6, Trapping Support ) The  Open Prepress Interface (OPI)  for creating low-resolution prox ies for high-resolution images ( 14.11.7,  Open Prepress Interface (OPI) ) 14.11.2 Page Boundaries 14.11.2.1 General A PDF page may be prepared either for a finished medium , such as a sheet of paper, or as part of a prepress  process in which the content of the page is placed on an intermediate medium, such as film or an imposed  reproduction plate. In the latter case, it is importan t to distinguish between the intermediate page and the  finished page. The intermediate page may often include ad ditional production-related content, such as bleeds  or printer marks, that falls outside the boundaries of t he finished page. To handle su ch cases, a PDF page may define as many as five separate boundaries to  control various aspects of the imaging process:  The  m edia box  defines the boundaries of the physical medium  on which the page is to be printed. It may  include any extended area surrounding the finished page  for bleed, printing marks, or other such purposes.  It may also include areas close to the edges of the  medium that cannot be ma rked because of physical  limitations of the output device. Content falling out side this boundary may sa fely be discarded without  affecting the meaning of the PDF file.",""],"636":["PDF 32000-1:2008 628 ' Adobe Systems Incorporated 2008  All rights reserved The  crop box  defines the region to which the contents of  the page shall be clipped (cropped) when  displayed or printed. Unlike the other boxes, the cr op box has no defined meaning in terms of physical  page geometry or intended use; it merely imposes clip ping on the page contents. However, in the absence  of additional information (such as im position instructions specified in  a JDF or PJTF job ticket), the crop  box determines how the pages contents shall be positioned on the output medium. The default value is the  pages media box.  The  bl eed box (PDF 1.3)  defines the region to which the contents  of the page shall be clipped when output  in a production environment. This may include any  extra bleed area needed to accommodate the physical  limitations of cutting, folding, an d trimming equipment. The actual printed page may include printing marks  that fall outside the bleed box. The default value is the pages crop box.  The  tr im box (PDF 1.3)  defines the intended dimensions of th e finished page after trimming. It may be  smaller than the media box to allow for production-related  content, such as printi ng instructions, cut marks,  or colour bars. The default value is the pages crop box.  The  ar t box (PDF 1.3)  defines the extent of the p ages meaningful content (including potential white space)  as intended by the pages creator. The default value is the pages crop box.  The page object dictionary specifies these boundaries in the  MediaBox, CropBox, BleedBox , TrimBox , and  ArtBox  entries, respectively (see  Ta b l e  30). All of them are rectangles expressed in default user space units.  The crop, bleed, trim, and art boxes shall not ordinarily extend beyond the boundaries of the media box. If they  do, they are effectively reduced to their intersection with the media box.  Figure 86  illustrates the relationships  among these boundaries. (The crop box is not shown in  the figure because it has no defined relationship with  any of the other boundaries.)",""],"637":["' Adobe Systems Incorporated 2008  All rights reserved 629PDF 32000-1:2008 Figure  86   Page boundaries NOTE 1 How the various boundaries are used depends on the  purpose to which the page is being put. The following  are typical purposes:  Placing the content of a pa ge in another application.  The art box determines the boundary of the content that is  to be placed in the application. Depending on the  applicable usage conventions, the placed content may be  clipped to either the art box or the bleed box. For ex ample, a quarter-page advertisement to be placed on a  magazine page might be clipped to the art box on the two  sides of the ad that face into the middle of the page  and to the bleed box on the two sides that bleed over  the edge of the page. The media box and trim box are  ignored.  Printing a finished page.  This case is typical of desktop or shared p age printers, in which the page content is  positioned directly on the final output medium. The art box and bleed box are ignored. The media box may be  used as advice for selecting media of the appropriate size . The crop box and trim box,  if present, should be the  same as the media box.  Printing an intermediate page for use in a prepress process.  The art box is ignored. The bleed box defines the  boundary of the content to be imaged.  The trim box specifies the positioning of the content on the medium; it  may also be used to generate cut or fold marks outside the bleed box. Content falling within the media box but  outside the bleed box may or may not be imaged, depe nding on the specific production process being used.","is might be a caption","Bleed boxMedia boxArt boxTrim box","Bleed: 10.75x8.25Trim: 10.5x8","Printers marks","Headline",""],"638":["PDF 32000-1:2008 630 ' Adobe Systems Incorporated 2008  All rights reserved Building an imposition of multiple pages on a press sheet.  The art box is ignored. The bleed box defines the  clipping boundary of the content to be  imaged; content outside the bleed box  is ignored. The trim box specifies  the positioning of the pages content within the imposition. Cut and fold marks are typically generated for the  imposition as a whole.  NOTE 2 In the preceding scenarios, an a pplication that interprets the bleed,  trim, and art boxes for some purpose  typically alters the crop box so as to impos e the clipping that those boxes prescribe.  14.11.2.2 Display of Page Boundaries Conforming readers may offer the abilit y to display guidelines on the screen for the various page boundaries.  The optional  BoxColorInfo entry in a page object (see  7.7.3.3, Page Objects ) holds a  box colour information  dictionary (PDF 1.4)  specifying the colours and other visual c haracteristics to be used for such display.  Conforming readers typically provide a user interface to a llow the user to set these characteristics interactively.  NOTE This information is page-specific a nd may vary from one page to another.  As shown in  Ta b l e  360, the box colour information dictionary contains  an optional entry for each of the possible  page boundaries other than the media box. The value of each entry is a  box style dictionary, whose contents  are shown in  Ta b l e  361. If a given entry is absent, the conforming reader shall use its own current default  settings instead.  14.11.3 Printers Marks Printers marks  are graphic symbols or text added to a page  to assist production personnel in identifying  components of a multiple-plate job an d maintaining consistent output du ring production. Examples commonly  used in the printing industry include:   Registration targets for aligning plates   Gray ramps and colour bars for measuring colours and ink densities   Cut marks showing where the output medium is to be trimmed  Although conforming writers traditionally include such  marks in the content stream of a document, they are  logically separate from the content of the page itself  and typically appear outside the boundaries (the crop box,  trim box, and art box) defining the extent of that content (see  14.11.2, Page Boundaries ).  Printers mark annotations (PDF 1.4)  provide a mechanism for incorporat ing printers marks into the PDF  representation of a page, while keeping them separate from the actual page content. Each page in a PDF  document may contain any number of  such annotations, each of which represents a single printers mark.  NOTE 1 Because printers marks typically fall outside the  pages content boundaries, each mark is represented as a  separate annotation. Otherwiseif, for example, the cut ma rks at the four corners of the page were defined in  a single annotationthe annotation rectangle would  encompass the entire contents of the page and could  interfere with the users ability to select content  or interact with other annotations on the page. Defining  printers marks in separate annotations  also facilitates the implementation of  a drag-and-drop user interface for  specifying them.  Table  360    Entries in a box  colour  information dictionary   Key Type Value CropBox dictionary (Optional)  A box style dictionary (see Table  361 ) specifying the visual  characteristics for displayi ng guidelines for the pages crop box. This entry  shall be ignored if no crop box is defined in the page object.  BleedBoxdictionary (Optional)  A box style dictionary (see Table  361 ) specifying the visual  characteristics for displaying guidelines for the pages bleed box. This entry  shall be ignored if no bleed box is defined in the page object.",""],"639":["' Adobe Systems Incorporated 2008  All rights reserved 631PDF 32000-1:2008 The visual presentation of a printers mark shall be  defined by a form XObject specified as an appearance  stream in the  N (normal) entry of the printers mark annotations appearance dictionary (see  12.5.5,  Appearance Streams ). More than one appearance may be defined for the same printers mark to meet the  requirements of different regions  or production facilities. In this case, the appearance dictionarys  N entry holds  a subdictionary containing the alternate appearances, each identif ied by an arbitrary key. The  AS (appearance  state) entry in the annotation dictionary designa tes one of them to be displayed or printed.  NOTE 2 The printers mark annotations appearance dictionary may include  R (rollover) or  D (down) entries, but  appearances defined in either of these  entries are never displayed or printed.  Like all annotations, a printers mark annotation shall be defined by an annotation dictionary (see  12.5.2,  Annotation Dictionaries ); its annotation type is  PrinterMark . The AP (appearances) and  F (flags) entries  (which ordinarily are optional) shall be present, as shall the  AS (appearance state) entry if the appearance  dictionary  AP contains more than one appearance stream . The Print and ReadOnly flags in the  F entry shall be  set and all others clear (see  12.5.3, Annotation Flags ). Ta b l e  362 shows an additional annotation dictionary  entry specific to this type of annotation.  TrimBox dictionary (Optional)  A box style dictionary (see Table  361 ) specifying the visual  characteristics for displaying guidelines for the pages trim box. This entry  shall be ignored if no trim box  is defined in the page object.  ArtBox dictionary (Optional)  A box style dictionary (see Table  361 ) specifying the visual  characteristics for displaying guidelines for the pages art box. This entry  shall be ignored if no art box  is defined in the page object.  Table  361   Entries in a box style dictionary   KeyType Value Carray(Optional)   An array of three numbers in the range 0.0 to 1.0, representing the  components in the  DeviceRGB  colour space of the colour to be used for  displaying the guidelines. Default value: [  0.0 0.0  0.0 ]. Wnumber (Optional)  The guideline width in default user  space units. Default value: 1.  Sname (Optional)   The guideline style:  S (Solid) A solid rectangle.  D (Dashed) A dashed rectangle. The dash pattern shall be specified by the  D entry. Other guideline styles may be defined  in the future. Default value: S.  Darray(Optional)   A dash array defining a pattern of dashes and gaps to be used in  drawing dashed guidelines (guideline style D). The dash array shall be  specified in default user space units, in the same format as in the line dash  pattern parameter of the graphics state (see  8.4.3.6, Line Dash Pattern ). The dash phase shall not be specified and shall be assumed to be 0.  EXAMPLE A  D entry of [  3 2 ] specifies guidelines drawn with 3-point  dashes alternating with 2-point gaps.  Default value: [ 3 ]. Table 360   Entries in a box colour information dictionary  (continued) Key Type Value",""],"640":["PDF 32000-1:2008 632 ' Adobe Systems Incorporated 2008  All rights reserved The form dictionary defining a printers mark may contain the optional entries shown in  Ta b l e  363  in addition to  the standard ones common to all form dictionaries (see  8.10.2, Form Dictionaries ).14.11.4 Separation Dictionaries In high-end printing workflows, pages are ultimately produced as sets of  separations , one per colorant (see  8.6.6.4, Separation Colour Spaces ). Ordinarily, each page in a PDF file shall be treated as a composite page  that paints graphics objects using all the process colorants and perhaps some spot colorants as well. In other  words, all separations for a page shall be generated from a single PDF description of that page.  In some workflows, however, pages are  preseparated  before generating the PDF file. In a preseparated PDF  file, the separations for a page shall be described as separate page objects, each painting only a single  colorant (usually specified in the  DeviceGray  colour space). In this case, additional information is needed to  identify the actual colorant associated with each separation and to group together the page objects  representing all the separations for a given page. This information shall be contained in a  separation dictionary  (PDF 1.3)  in the  SeparationInfo  entry of each page object (see  7.7.3.3, Page Objects ). Ta b l e  364  shows the  contents of this type of dictionary.  Table  362    Additional entries specific to a printers mark annotation   KeyType Value Subtypename (Required)  The type of annotation that this  dictionary describes; shall be  PrinterMark for a printers mark annotation.  MNname (Optional)  An arbitrary name identifying the type of printers mark, such as  ColorBar or RegistrationTarget.  Table  363    Additional entries specific to  a printers mark form dictionary   KeyType Value MarkStyle text  string(Optional; PDF  1.4)  A text string representing the printers mark in  human-readable form and suitable for presentation to the user.  Colorants dictionary (Optional; PDF  1.4)  A dictionary identifying the individual colorants  associated with a printers mark, such as a colour bar. For each  entry in this dictionary, the key is a colorant name and the value is an  array defining a  Separation  colour space for that colorant (see  8.6.6.4, Separation Colour Spaces ). The key shall match the  colorant name given in that colour space.  Table  364    Entries in a separation dictionary   KeyType Value Pagesarray(Required ) An array of indirect references to page objects representing  separations of the same document page. One of the page objects in the  array shall be the one with which this separation dictionary is associated,  and all of them shall have separation dictionaries ( SeparationInfo entries) containing  Pages arrays identical to this one.  DeviceColorant name  or  string (Required)  The name of the device colorant to be used in rendering this  separation, such as Cyan or PANTONE 35 CV.",""],"641":["' Adobe Systems Incorporated 2008  All rights reserved 633PDF 32000-1:2008 14.11.5 Output Intents Output intents (PDF 1.4)  provide a means for matching the colour  characteristics of a PDF document with  those of a target output device or production environm ent in which the document will be printed. The optional  OutputIntents  entry in the document catalogue (see  7.7.2, Document Catalog ) holds an array of  output intent  dictionaries , each describing the colour reproduction characte ristics of a possible output device or production  condition. The contents of  these dictionaries may vary for different  devices and conditions. The dictionarys  Sentry specifies an  output intent subtype  that determines the format and me aning of the remaining entries.  NOTE 1 This use of multiple output intents allows the pr oduction process to be customized to the expected workflow  and the specific tools available. Fo r example, one production facility might process files conforming to a  recognized standard such as PDF/X-1,  while another uses the PDF/A st andard to produce RGB output for  document distribution on the Web. Each of these work flows would require different  sets of output intent  information. Multiple output intents also allow the sa me PDF file to be distributed unmodified to multiple  production facilities. The choice of  which output intent to use in a given production environment is a matter for  agreement between the purchaser and  provider of production services. PD F intentionally does not include a  selector for choosing a particular out put intent from within the PDF file.  At the time of publication, three outp ut intent subtypes have been defined:  GTS_PDFX corresponding to the  PDF/X format standard specified in ISO 15930,  GTS_PDFA1  corresponding to the PDF/A standard as defined  by ISO 19005, and ISO_PDFE1 corresponding to the PDF/E standard as defined by ISO 24517.  Ta b l e  365shows the contents of this type of output intent dict ionary. Other subtypes may be added in the future; the  names of any such additional subtypes shall co nform to the naming guidelines described in  Annex E . ColorSpace array(Optional)  An array defining a  Separation  or DeviceN colour space (see  8.6.6.4, Separatio n Colour Spaces  and  8.6.6.5, DeviceN Colour  Spaces ). It provides additional information about the colour specified by  DeviceColorant in particular, the alternate colour space and tint  transformation function that shall be  used to represent the colorant as a  process colour. This information enabl es a conforming reader to preview  the separation in a colour that  approximates the device colorant.  The value of  DeviceColorant  shall match the spaces colorant name (if it  is a Separation  space) or be one of the spac es colorant names (if it is a  DeviceN  space).  Table  365    Entries in an out put intent dictionary   KeyType Value Type name (Optional)  The type of PDF object that this dictionary  describes; if present, shall be  OutputIntent  for an output  intent dictionary.  Sname (Required)  The output intent subtype; shall be either one  of  GTS_PDFX, GTS_PDFA1 , ISO_PDFE1  or a key  defined by an ISO 32000 extension. OutputCondition text string(Optional)  A text string concisely identifying the intended  output device or production condition in human-readable  form. This is the preferred met hod of defining such a string  for presentation to the user.  Table 364   Entries in a separation dictionary  (continued) KeyType Value",""],"642":["PDF 32000-1:2008 634 ' Adobe Systems Incorporated 2008  All rights reserved NOTE 2 PDF/X is actually a family of standards representi ng varying levels of conform ance. The standard for a given  conformance level may prescribe further restrictions on  the usage and meaning of entries in the output intent  dictionary. Any such restri ctions take precedence over the descriptions given in  Ta b l e  364 . The ICC profile information in an output intent dictio nary supplements rather than replaces that in an  ICCBased  or default colour space (see  8.6.5.5, ICCBased Colour Spaces,  and  8.6.5.6, Default Colour  Spaces ). Those mechanisms are specifically intended fo r describing the characteristics of source colour  component values. An output intent can be used in co njunction with them to convert source colours to those  required for a specific production condition or to  enable the display or proofing of the intended output.  The data in an output intent dictionary shall be prov ided for informational purposes only, and conforming  readers are free to disregard it. In particular, there is  no expectation that PDF pr oduction tools automatically  convert colours expressed in the same source colour space to the specified target space before generating  output. (In some workflows, such conversion may, in fact, be undesirable).  OutputConditionIdentifier text string(Required)  A text string identifyi ng the intended output  device or production condition in human- or machine- readable form. If human-readable, this string may be used  in lieu of an  OutputCondition  string for presentation to  the user.  A typical value for this entry may be the name of a  production condition maintained in an industry-standard  registry such as the ICC Ch aracterization Data Registry  (see the  Bibliography ). If the designated condition  matches that in effect at production time, the production  software is responsible for providing the corresponding  ICC profile as defined in the registry.  If the intended production condition is not a recognized  standard, the value of this entry may be Custom or an  application-specific, ma chine-readable name. The  DestOutputProfile  entry defines the ICC profile, and the  Info  entry shall be used for further human-readable  identification.  RegistryName text string(Optional)  An text string (conventionally a uniform  resource identifier, or URI) i dentifying the registry in which  the condition designated by  OutputConditionIdentifier  is  defined.  Info text string(Required if  OutputConditionIdentifier  does not specify  a standard production condition; optional otherwise)  A human-readable text string containing additional  information or comments about the intended target device  or production condition.  DestOutputProfile stream(Required if  OutputConditionIdentifier  does not specify  a standard production condition; optional otherwise)  An ICC profile stream defining  the transformation from the  PDF documents source colours to output device  colorants.  The format of the profile stre am is the same as that used  in specifying an  ICCBased  colour space (see  8.6.5.5, ICCBased Colour Spaces ). The output transformation  uses the profiles from CIE information (BToA in ICC  terminology); the to CIE  (AToB) information may  optionally be used to remap source colour values to some  other destination colour space, such as for screen preview  or hardcopy proofing.  Table 365   Entries in an output intent dictionary  (continued) KeyType Value",""],"643":["' Adobe Systems Incorporated 2008  All rights reserved 635PDF 32000-1:2008 NOTE When working with  CMYK  source colours tagged with a source ICC profile solely for purposes of  characterization, converting such colours from four  components to three and back is unnecessary and will  result in a loss of fidelity in the values of the black component; see  8.6.5.7, Implicit Conversion of CIE-Based  Colour Spaces  for further discussion.) On the other hand, w hen source colours are expressed in different  base colour spacesfor example, when combining sepa rately generated images on  the same PDF pageit is  possible (though not required) to use the destination profile  specified in the output in tent dictionary to convert  source colours to the same  target colour space.  EXAMPLE 1 This Example shows a PDF/X output intent dict ionary based on an industry-standard production condition  (CGATS  TR 001) from the  ICC Characterization Data Registry . Example 2  shows one for a custom  production condition.  <<  /Type  /OutputIntent% Output intent dictionary   /S /GTS_PDFX   /OutputCondition  ( CGATS  TR 001   ( SWOP  ) )  /OutputConditionIdentifier  ( CGATS  TR 001 )  /RegistryName  ( http  : / / www . color  . org )  /DestOutputProfile  100 0 R >>100  0 obj% ICC profile stream <<  /N 4 /Length  1605 /Filter /ASCIIHexDecode >>stream 00 00 02 0C 61 70"," >endstream endobj EXAMPLE 2 <<   /Type  /OutputIntent % Output intent dictionary   /S /GTS_PDFX   /OutputCondition  ( Coated  )  /OutputConditionIdentifier  ( Custom  )  /Info  ( Coated 150lpi  )  /DestOutputProfile  100 0 R >>100  0 obj% ICC profile stream <<  /N 4 /Length  1605 /Filter /ASCIIHexDecode >>stream 00 00 02 0C 61 70  >endstream endobj 14.11.6 Trapping Support 14.11.6.1 General On devices such as offset printing  presses, which mark multiple co lorants on a single sheet of physical  medium, mechanical limitations of the devi ce can cause imprecise alignment, or  misregistration , between  colorants. This can produce unwanted visual artifacts such as brightly coloured gaps or bands around the  edges of printed objects. In high-quality reproduction of colour documents, such artifacts are commonly  avoided by creating an overlap, called a  trap , between areas of adjacent colour.  NOTEFigure 87  shows an example of trapping. The light and medium  grays represent two different colorants, which  are used to paint the background and the glyph denoting the  letter A. The first figure shows the intended result,  with the two colorants properly registered. The sec ond figure shows what happens when the colorants are",""],"644":["PDF 32000-1:2008 636 ' Adobe Systems Incorporated 2008  All rights reserved misregistered. In the third figure, traps have been over printed along the boundaries, obscuring the artifacts  caused by the misregistration. (For emphasis, the traps ar e shown here in dark gray;  in actual practice, their  colour will be similar to one of the adjoining colours.)  Figure  87   Trapping example Trapping may be implemented by the application genera ting a PDF file, by some intermediate application that  adds traps to a PDF document, or by the raster image pr ocessor (RIP) that produces final output. In the last  two cases, the trapping process is controlled by a set of  trapping instructions , which define two kinds of  information:  T rapping zones  within which traps should be created  T rapping parameters  specifying the nature of the traps within each zone  Trapping zones and trapping parameters are discussed fully  in Sections 6.3.2 and 6. 3.3, respectively, of the  PostScript Language Reference , Third Edition. Trapping instructions are  not directly specified in a PDF file (as  they are in a PostScript file). Instead, they shall be specified in a  job ticket  that accompanies the PDF file or is embedded within it. Various standards exist for the form at of job tickets; two of  them, JDF (Job Definition  Format) and PJTF (Portable Job Ticket Format ), are described in the CIP4 document  JDF Specification  and in  Adobe Technical Note #5620,  Portable Job Ticket Format  (see the  Bibliography ). When trapping is performed before the production of fina l output, the resulting traps shall be placed in the PDF  file for subsequent use. The traps themselves shall be described as a content stream in a trap network  annotation (see  14.11.6.2, Trap Network Annotations ). The stream dictionary ma y include additional entries  describing the method that was used to produce th e traps and other information about their appearance.  14.11.6.2 Trap Network Annotations A complete set of traps generated for a given page unde r a specified set of trapping  instructions is called a  trap  network (PDF 1.3) . It is a form XObject containing graphics objects for painting the required traps on the page.  A page may have more than one trap network based on different trapping instructions, presumably intended for  different output devices. All of the trap networks  for a given page shall be contained in a single  trap network  annotation  (see  12.5, Annotations ). There may be at most one trap ne twork annotation per page, which shall be the last element in the pages  Annots array (see  7.7.3.3, Page Objects ). This ensures that the trap  network shall be printed after all of the pages other contents.  The form XObject defining a trap network shall  be specified as an appearance stream in the  N (normal) entry of  the trap network annotations  appearance dictionary (see  12.5.5, Appearance Streams ). If more than one trap  network is defined for the same page, the  N entry holds a subdictionary contai ning the alternate trap networks,  each identified by an arbitrary key. The  AS (appearance state) entry in the  annotation dictionary designates  one of them as the  current trap network  to be displayed or printed.  NOTE 1 The trap network annotations appearance dictionary may include  R (rollover) or D (down) entries, but  appearances defined in either of these entries are never printed.","Intended result Misregistration with no trap Misregistration with trap",""],"645":["' Adobe Systems Incorporated 2008  All rights reserved 637PDF 32000-1:2008 Like all annotations, a trap network annotation shall be defined by an annotation dictionary (see  12.5.2,  Annotation Dictionaries ); its annotation type is  TrapNet . The AP (appearances),  AS (appearance state), and  F ( flags) entries (which ordinarily ar e optional) shall be present, with th e Print and ReadOnly flags set and all  others clear (see  12.5.3, Annotation Flags ). Table  366  shows the additional annot ation dictionary entries  specific to this type of annotation.  The  Ve rsion  and  AnnotStates  entries, if present, shall be used to dete ct changes in the cont ent of a page that  might require regenerating its trap networks. The  Version  array identifies elements of the pages content that  might be changed by an editing application and thus in validate its trap networks. Because there is at most one  Version  array per trap network annotation (and thus per page), any conforming writ er that generates a new  trap network shall also verify the va lidity of existing trap networks by enume rating the objects identified in the  array and verifying that the results exactly match the  arrays current contents. Any trap networks found to be  invalid shall be regenerated.  The  Las tModified  entry may be used in place of the  Version  array to track changes to a pages trap network.  (The trap network annotation shall include either a  LastModified  entry or the combination of  Version  and  AnnotStates , but not all three.) If the  modification date in the  LastModified  entry of the page object (see  7.7.3.3, Page Objects ) is more recent than the one in the trap network annotation dictionary, the pages trap  networks are invalid and shall be regenerated.  NOTE 2 Not all editing applications corre ctly maintain these modification dates.  This method of tracking trap netw ork modifications may be used reliably only in a controlled workflow  environment where the integrity of th e modification dates is assured.  Table  366   Additional entries specific to a trap network annotation   Key  Type  Value Subtypename (Required)  The type of annotation that th is dictionary describes; shall  be  TrapNet  for a trap network annotation.  LastModifieddate (Required if  Version  and  AnnotStates  are absent; shall be absent if  Version  and  AnnotStates  are present; PDF  1.4)  T he date and time  (see 7.9.4, Dates) when the trap network was most recently  modified.  Version array(Required if  AnnotStates is present; shall be absent if  LastModifiedis present)  An unordered array of all objects present in the page  description at the time the trap  networks were generated and that, if  changed, could affect the appearance of  the page. If present, the array  shall include the following objects:   All content streams identified in the page objects  Contents  entry  (see 7.7.3.3, Page Objects )  All resource objects (other than procedure sets) in the pages  resource dictionary (see  7.8.3, Resource Dictionaries )  All resource objects (other than procedure sets) in the resource  dictionaries of any form XObjects on the page (see  8.10, Form  XObjects )  All OPI dictionaries associated with XObjects on the page (see  14.11.7, Open Prepress Interface (OPI) ) AnnotStates array(Required if  Version  is present; shall be absent if  LastModified is  present)  An array of name objects representing the appearance states  (value of the  AS entry) for annotations associated with the page. The  appearance states shall be listed in  the same order as the annotations  in the pages  Annots  array (see  7.7.3.3, Page Objects ). For an  annotation with no  AS entry, the corresponding array element should  be  null . No appearance state shall be included for the trap network  annotation itself.",""],"646":["PDF 32000-1:2008 638 ' Adobe Systems Incorporated 2008  All rights reserved 14.11.6.3 Trap Network Appearances Each entry in the  N (normal) subdictionary of a trap network annotations appearance dictionary holds an  appearance stream defining a trap network associated with the given page. Like all appearances, a trap  network is a stream object defining a form XObject (see  8.10, Form XObjects ). The body of the stream  contains the graphics objects needed to paint the trap s making up the trap network. Its dictionary entries  include, besides the standard entries for a fo rm dictionary, the additional entries shown in  Table  367 . NOTE Preseparated PDF files (see  14.11.4, Separation Dictionaries ) may not be trapped be cause traps are defined  along the borders between different colours and a pres eparated file uses only one colour. Therefore,  preseparation shall occur after trapping, not before. An  conforming writer that pres eparates a trapped PDF file  is responsible for calculating new  Version  arrays for the separated trap networks.  14.11.7 Open Prepress Interface (OPI) The workflow in a prepress environment often involves mu ltiple applications in areas such as graphic design,  page layout, word processing, photo manipulation, and document construction. As pieces of the final document  are moved from one application to another, it is useful  to separate the data of high-resolution images, which  can be quite largein some cases, many times the size  of the rest of the document combinedfrom that of the  document itself. The  Open Prepress Interface (OPI)  is a mechanism, originally developed by Aldus  Corporation, for creating low-resolution placeholders, or  proxies , for such high-resolution images. The proxy  FontFauxing array(Optional)  An array of font dictionaries representing fonts that were  fauxed (replaced by substitute fo nts) during the generation of trap  networks for the page.  Table  367    Additional entries specific to a trap network appearance stream   Key  Type  Value PCMname (Required)  The name of the process colour model that was  assumed when this trap network  was created; equivalent to the  PostScript page device parameter  ProcessColorModel  (see Section 6.2.5 of the PostScript Language Reference, Third  Edition). Valid values are  DeviceGray , DeviceRGB , DeviceCMYK , DeviceCMY , DeviceRGBK , and DeviceN . SeparationColorNames array(Optional)  An array of names identifying the colorants that were  assumed when this network was created; equivalent to the  PostScript page device parameter of the same name (see Section  6.2.5 of the PostScript Language  Reference, Third Edition).  Colourants implied by the process colour model  PCM are available  automatically and need not be explicitly declared. If this entry is  absent, the colorants implied by  PCM shall be assumed. TrapRegions array(Optional)  An array of indirect references to  TrapRegion  objects  defining the pages trapping zones and the associated trapping  parameters, as described in Adobe Technical Note #5620,  Portable Job Ticket Format. These references refer to objects  comprising portions of a PJTF job ticket  that shall be embedded in  the PDF file. When the trapping zones and parameters are defined  by an external job ticket (or by some other means, such as JDF),  this entry shall be absent.  TrapStyles text string(Optional)  A human-readable text string that applications may use  to describe this trap network to the user. EXAMPLE To allow switching  between trap networks). Table 366   Additional entries specific to a trap network annotation  (continued) Key Type Value",""],"647":["' Adobe Systems Incorporated 2008  All rights reserved 639PDF 32000-1:2008 typically consists of a downsampled version of the fu ll-resolution image, to be used for screen display and  proofing. Before the document is printed, it passes through a filter known as an  OPI server , which replaces the  proxies with the original  full-resolution images. NOTE 1 In PostScript programs, OPI pr oxies are defined by PostScript code surrounded by special OPI comments,  which specify such information as the placement and  cropping of the image and adjustments to its size,  rotation, colour, and other attributes.  In PDF, proxies shall be embedded in a document as image or form XObjects with an associated  OPI dictionary  (PDF 1.2).  This dictionary contains the same information t hat the OPI comments convey in PostScript. Two  versions of OPI shall be supported, versions 1.3 and 2.0. In OPI 1.3, a proxy consisting of a single image, with  no changes in the graphics state, may be represent ed as an image XObject; otherwise it shall be a form  XObject. In OPI 2.0, the proxy always entails changes  in the graphics state and hence shall be represented as  a form XObject. An XObject representing an OPI proxy shall contain an  OPI entry in its image or form dictionary (see  Ta b l e  89and  Table  95). The value of this entry is an  OPI version dictionary  (Ta b l e  368 ) identifying the version of OPI to  which the proxy corresponds. This dictionary cons ists of a single entry, whose key is the name  1.3  or  2.0 and whose value is the OPI dictionary defining the proxys OPI attributes.  NOTE 2 As in any other PDF dictionary, the key in an OP I version dictionary is a name object. The OPI version  dictionary would thus be written in  the PDF file in either the form  << /1 . 3 d 0  R  >>% OPI 1  . 3 dictionary or  << /2 . 0 d 0  R  >>% OPI 2  . 0 dictionary where  d is the object number of the corresponding OPI dictionary.  Ta b l e  369 and  Ta b l e  370  describe the contents of the OPI dictionaries for OPI 1.3 and OPI 2.0, respectively,  along with the corresponding PostScript OPI comments.  The dictionary entries shall  be listed in the order in  which the corresponding OPI comments appear in a PostSc ript program. Complete details on the meanings of  these entries and their effects on OPI servers can be found in  OPI: Open Prepress Inte rface Specification 1.3 and Adobe Technical Note #5660,  Open Prepress Interface (OPI) Specification, Version 2.0 . Table  368    Entry in an OPI version dictionary   KeyType Value version number dictionary (Required; PDF  1.2)  An OPI dictionary specifying the attributes of this  proxy (see Tables  369  and  370 ). The key for this entry shall be the  name  1.3 or 2.0, identifying the version of  OPI to which the proxy  corresponds. Table  369    Entries in a version 1.3 OPI dictionary   KeyType OPI CommentValue Type name (Optional)   The type of PDF object that this  dictionary describes; if present, shall be  OPIfor an OPI dictionary.  Version number (Required)  The version of OPI to which this  dictionary refers; shall be the number 1.3 (not  the name 1.3, as in an OPI version  dictionary). Ffile specification %ALDImageFilename (Required)  The external file containing the  image corresponding to this proxy.",""],"648":["PDF 32000-1:2008 640 ' Adobe Systems Incorporated 2008  All rights reserved IDbyte string %ALDImageID (Optional)   An identifying string denoting the  image.  Comments text string%ALDObjectComments (Optional)  A human-readable comment,  typically containing instructions or  suggestions to the operat or of the OPI server  on how to handle the image.  Sizearray %ALDImageDimensions (Required)  An array of two integers of the  form[ pixelsWide  pixelsHigh  ]specifying the dimensions of the image in  pixels. CropRect rectangle %ALDImageCropRect (Required)  An array of four integers of the  form  [ left  top right  bottom  ]specifying the portion of the image to be used.  CropFixed array %ALDImageCropFixed (Optional)   An array with the same form and  meaning as  CropRect , but expressed in real  numbers instead of integers. Default value:  the value of  CropRect . Positionarray %ALDImagePosition (Required)  An array of eight numbers of the  form  [ llx lly ulx uly urx ury lrx lry ]specifying the location on the page of the  cropped image, where ( llx , lly ) are the user  space coordinates of the lower-left corner,  (ulx , uly ) are those of the upper-left corner,  (urx , ury ) are those of the upper-right corner,  and (lrx , lry ) are those of the lower-right  corner. The specified coordinates shall define  a parallelogram; that is, they shall satisfy the  conditions  ulx  llx   urx  lrxand  uly  lly"," ury  lryThe combination of  Position and  CropRect determines the images scaling, rotation,  reflection, and skew.  Resolution array %ALDImageResolution (Optional)  An array of two numbers of the  form  [ horizRes  vertRes ]specifying the resolution of the image in  samples per inch. ColorType name %ALDImageColorType (Optional)  The type of colour specified by the  Color entry. Valid values are Process, Spot,  and Separation. Default value: Spot.  Table 369   Entries in a version 1.3 OPI dictionary  (continued) KeyType OPI Comment Value",""],"649":["' Adobe Systems Incorporated 2008  All rights reserved 641PDF 32000-1:2008 Colorarray%ALDImageColor (Optional)  An array of four numbers and a  byte string of the form  [ C M Y K colorName  ]specifying the value and  name of the colour in  which the image is to be rendered. The values  of C, M, Y, and K shall  all be in the range 0.0  to 1.0. Default value: [ 0.0 0.0  0.0 1.0  ( Black )]. Tint number %ALDImageTint (Optional)  A number in the range 0.0 to 1.0  specifying the concentr ation of the colour  specified by  Color in which the image is to be  rendered. Default value: 1.0.  Overprint  boolean %ALDImageOverprint (Optional)  A flag specifying whether the  image is to overprint ( true) or knock out  (false) underlying marks on other  separations. Default value:  false. ImageType array%ALDImageType (Optional)  An array of two integers of the form  [ samples bits  ]specifying the number of samples per pixel  and bits per sample in the image.  GrayMap array%ALDImageGrayMap (Optional)  An array of 2n integers in the range  0 to 65,535 (where n is the number of bits per  sample) recording changes made to the  brightness or contrast of the image.  Transparency boolean %ALDImageTransparency (Optional)  A flag specifying whether white  pixels in the image shall be treated as  transparent. Default value:  true. Tags array%ALDImageAsciiTag<  NNN >(Optional)  An array of pairs of the form  [ tagNum1  tagText1   tagNumn  tagTextn  ]where each tagNum is an integer  representing a TIFF tag number and each  tagText is an ASCII string representing the  corresponding ASCII tag value.  Table  370    Entries in a version 2.0 OPI dictionary   KeyType OPI Comment Value Type name(Optional)   The type of PDF object that this  dictionary describes; if present, shall be  OPIfor an OPI dictionary.  Version number (Required)  The version of OPI to which this  dictionary refers; shall be the number 2 or 2.0  (not the name 2.0, as in an OPI version  dictionary).  Ffile specification %%ImageFilename (Required)  The external file containing the  low- resolution proxy image.  MainImage byte string %%MainImage (Optional)   The pathname of the file containing  the full-resolution image corresponding to this  proxy, or any other identifying string that  uniquely identifies the full-resolution image.  Table 369   Entries in a version 1.3 OPI dictionary  (continued) KeyType OPI Comment Value",""],"650":["PDF 32000-1:2008 642 ' Adobe Systems Incorporated 2008  All rights reserved Tags array%%TIFFASCIITag (Optional)   An array of pairs of the form  [ tagNum1  tagText1   tagNumn  tagTextn  ]where each tagNum is an integer representing  a TIFF tag number and each tagText is an  ASCII string or an a rray of ASCII strings  representing the corresponding ASCII tag  value. Sizearray%%ImageDimensions (Optional)   An array of two numbers of the form  [ width  height  ]specifying the dimensions of the image in  pixels.  CropRect rectangle %%ImageCropRect (Optional)   An array of four numbers of the  form [ left  top right  bottom  ]specifying the portion of the image to be used.  The  Size and CropRect  entries shall either  both be present or both be absent. If present,  they shall satisfy the conditions  0 d left  right d width and  0 d top  bottom  d height In this coordinate space, the positive y axis  extends vertically downward; hence, the  requirement that top   bottom.  Overprint boolean %%ImageOverprint (Optional)   A flag specifying whether the image  is to overprint ( true) or knock out ( false) underlying marks on other separations.  Default value: false . Inks name  or array %%ImageInks (Optional)  A name object or array specifying  the colorants to be applied to the image. The  value may be the name full_color or  registration or an array of the form  [ /monochrome  name1  tint1   namen  tintn  ]where each name is a string representing the  name of a colorant and each tint is a real  number in the range 0.0 to 1.0 specifying the  concentration of that colorant to be applied.  IncludedImageDimensions  array%%IncludedImageDimensions (Optional)  An array of two integers of the form  [ pixelsWide  pixelsHigh  ]specifying the dimensions of the included  image in pixels.  IncludedImageQuality  number  %%IncludedImageQuality (Optional)   A number indicating the quality of  the included image. Vali d values are 1, 2, and  3.Table 370   Entries in a version 2.0 OPI dictionary  (continued) KeyType OPI Comment Value",""],"651":["' Adobe Systems Incorporated 2008  All rights reserved 643PDF 32000-1:2008 Annex  A(informative)Operator SummaryA.1 General This annex lists, in alphabetical order, all the op erators that may be used in PDF content streams.  A.2 PDF Content Stream Operators Ta b l e  A.1 lists each operator, its corresponding PostScript  language operators (when it is an exact or near- exact equivalent of the PDF operator), a description of  the operator, and references to the table and page  where each operator is introduced. Table  A.1   PDF content stream operators   Operator PostScript Equivalent Description Table bclosepath , fill, stroke Close, fill, and stroke path using nonzero winding  number rule 60Bfill, stroke  Fill and stroke path using nonzero winding number rule 60b*closepath, eofill, stroke Close, fill, and stroke path using even-odd rule 60B*eofill, stroke Fill and stroke path using even-odd rule 60BDC(PDF 1.2) Begin marked-content sequence with property  list 320 BIBegin inline image object 92BMC(PDF 1.2) Begin marked-content sequence 320 BTBegin text object 107 BX(PDF 1.1) Begin compatibility section 32ccurveto Append curved segment to path (three control points) 59cmconcat Concatenate matrix to curr ent transformation matrix 57CSsetcolorspace (PDF 1.1) Set color space for stroking operations 74cssetcolorspace (PDF 1.1) Set color space for nonstroking operations 74dsetdash Set line dash pattern 57d0setcharwidth Set glyph width in Type 3 font 113 d1setcachedevice Set glyph width and bounding box in Type 3 font 113 DoInvoke named XObject 87DP(PDF 1.2) Define marked-content point with property list 320 EIEnd inline image object 92EMC(PDF 1.2) End marked-content sequence 320",""],"652":["PDF 32000-1:2008 644 ' Adobe Systems Incorporated 2008  All rights reserved ETEnd text object 107 EX(PDF 1.1)  End compatibility section 32ffillFill path using nonzero winding number rule 60FfillFill path using nonzero winding number rule (obsolete) 60f*eofill Fill path using even-odd rule 60Gsetgray Set gray level for stroking operations 74gsetgray Set gray level for nonstroking operations 74gs(PDF 1.2)  Set parameters from graphics state parameter  dictionary 57hclosepath Close subpath 59isetflat Set flatness tolerance 57IDBegin inline image data 92jsetlinejoin Set line join style 57Jsetlinecap Set line cap style 57Ksetcmykcolor Set CMYK color for stroking operations 74ksetcmykcolor Set CMYK color for nonstroking operations 74llineto Append straight line segment to path 59mmoveto Begin new subpath 59Msetmiterlimit Set miter limit 57MP(PDF 1.2)  Define marked-content point 320 nEnd path without filling or stroking 60qgsave Save graphics state 57Qgrestore Restore graphics state 57reAppend rectangle to path 59RGsetrgbcolor Set RGB color for stroking operations 74rgsetrgbcolor Set RGB color for nonstroking operations 74riSet color rendering intent 57sclosepath, stroke Close and stroke path 60Sstroke Stroke path 60SCsetcolor (PDF 1.1)  Set color for stroking operations 74scsetcolor (PDF 1.1)  Set color for nonstroking operations 74SCNsetcolor (PDF 1.2)  Set color for stroking operations ( ICCBased and special colour spaces) 74scn setcolor (PDF 1.2)  Set color for nonstroking operations  (ICCBased  and special colour spaces) 74Table A.1   PDF content stream operators  (continued) Operator PostScript Equivalent Description Table",""],"653":["' Adobe Systems Incorporated 2008  All rights reserved 645PDF 32000-1:2008 shshfill (PDF 1.3) Paint area defined by shading pattern 77T*Move to start of next text line 108 TcSet character spacing TdMove text position 108 TDMove text position and set leading 108 Tfselectfont Set text font and size Tjshow Show text 109 TJShow text, allowing individual glyph positioning 109 TLSet text leading TmSet text matrix and text line matrix 108 TrSet text rendering mode TsSet text rise TwSet word spacing TzSet horizontal text scaling vcurveto Append curved segment to path (initial point replicated) 59wsetlinewidth Set line width 57WclipSet clipping path using nonzero winding number rule 61W*eoclip Set clipping path using even-odd rule 61ycurveto Append curved segment to path (final point replicated) 59’Move to next line and show text 109 \"Set word and character spacing, move to next line, and  show text 109 Table A.1   PDF content stream operators  (continued) Operator PostScript Equivalent Description Table",""],"654":["PDF 32000-1:2008 646 ' Adobe Systems Incorporated 2008  All rights reserved THIS PAGE BLANK",""],"655":["' Adobe Systems Incorporated 2008  All rights reserved 647PDF 32000-1:2008 Annex  B(normative)Operators in Type 4 Functions B.1 General This annex summarizes the PostScript operators that  may appear in a type 4 function, as discussed in  7.10.5,  \"Type 4 (PostScript Calculator) Functions\" . For details on these operators, see the  PostScript Language  Reference , Third Edition. B.2 Arithmetic Operators num1 num 2add  sumReturn num1 plus  num 2num1 num 2sub  difference Return num1 minus  num2num1 num 2mul product Return num1 times  num 2num1 num 2div  quotient Return num1 divided by  num2int1 int 2idiv  quotient Return int1 divided by  int2 as an integer int1 int 2mod remainderReturn remainder after dividing  int1 by int 2num1neg  num 2Return negative of  num1num1abs  num2Return absolute value of num 1num1ceiling  num 2Return ceiling of  num1num1floor num 2Return floor of  num1num1round num 2Round  num1 to nearest integer num1truncate  num2Remove fractional part of  num1numsqrt  real Return square root of num angle sin realReturn sine of  angle  degrees angle cos realReturn cosine of angle degrees","num denatan angle Return arc tangent of  num/den in degrees base exponent exp realRaise  base  to  exponent  power numln realReturn natural logarithm (base  e)numlog realReturn common logarithm (base 10) numcvi intConvert to integer numcvr realConvert to real B.3 Relational, Boolean, and Bitwise Operators any1 any 2eq bool Test equal any1 any 2ne bool Test not equal num1 num 2gt bool Test greater than num1 num2ge bool Test greater than or equal num1 num 2lt bool Test less than num1 num 2le boolTest less than or equal bool 1 | int 1 bool2 | int 2and  bool 3 | int 3Perform logical | bitwise and bool 1 | int 1 bool2 | int 2or bool 3 | int3Perform logical | bitwise inclusive or bool 1 | int","1 bool2 | int 2xor  bool 3 | int 3Perform logical | bitwise exclusive or bool 1 | int 1not  bool2 | int 2Perform logical | bitwise not",""],"656":["PDF 32000-1:2008 648 ' Adobe Systems Incorporated 2008  All rights reserved int 1 shift bitshift  int2Perform bitwise shift of  int1 (positive is left) true trueReturn boolean value  truefalse falseReturn boolean value  falseB.4 Conditional Operators bool  { expr }if Execute  expr if bool is true bool  { expr1 } { expr2 }ifelse Execute  expr1 if  bool  is true, expr2 if falseB.5 Stack Operators any pop  Discard top element any 1 any 2exch  any 2 any 1Exchange top two elements any dup any  anyDuplicate top element any 1  any n ncopy any 1  anyn any 1  anynDuplicate top  n elements any n  any 0 nindex any n any 0 any nDuplicate arbitrary element any n-1  any0 n jroll any(j-1) mod  n  any0 any","n-1  any j mod  nRoll  n elements up  j times",""],"657":["' Adobe Systems Incorporated 2008  All rights reserved 649PDF 32000-1:2008 Annex  C(normative)Implementation  Limits C.1 General In general, PDF does not restrict the size or quantity of things described in the file format, such as numbers,  arrays, images, and so on. However, a conforming reader  running on a particular processor and in a particular  operating environment does have such limits. If a conf orming reader encounters a PDF construct that exceeds  one of these limits or performs a computation whose intermediate results exceed a limit, an error occurs.  NOTE PostScript interpreters also have implem entation limits, listed in Appendix B of the  PostScript Language  Reference , Third Edition. It is possible to construct a PDF f ile that does not violate PDF implementation limits  but fails to print on a PostScript printer. Keep in mi nd that these limits vary according to the PostScript  LanguageLevel, interpreter version, and the amoun t of memory available to the interpreter.  This annex describes typical limits fo r a conforming PDF application (readers and writers). These limits fall into  two main classes:  Arc hitectural limits . The hardware on which a conforming reader executes imposes certain constraints. For  example, an integer is usually represented in 32 bits,  limiting the range of  allowed integers. In addition, the  design of the software imposes other constraints, such as a limit to the number of elements in an array or  string.  Memory limits. The amount of memory available to a conforming reader limits the number of memory- consuming objects that can be held simultaneously.  C.2 Architectural limits PDF itself has one architectural limit: Because a cross-reference table (see  7.5.4, \"Cross-Reference Table\" ) allocates ten digits to represent byte offsets, the size of a file shall be limited to 10 10 bytes (approximately 10  gigabytes). This limit does not apply in a PDF  file that uses a cross-reference stream (see  7.5.8, \"Cross- Reference Streams\" ) instead of a cross reference table. Ta b l e  C.1  describes the minimum architec tural limits that should be accommodated by conforming readers  running on 32-bit machines. Because conforming reader s may be subject to these limits, conforming writers  producing PDF files shou ld remain within them.  NOTE Memory limits are often exceeded before architectural  limits (such as the limit on the number of indirect  objects) are reached.  Table  C.1   Architectural limits   QuantityLimit Description integer 2,147,483,647 Largest integer value; equal to 2 31  1. -2,147,483,648 Smallest integer value; equal to  231. real r 3.403  u 1038 Largest and smallest real values (approximate).    r 1.175 u 10-38  Nonzero real values closest to 0 (approximate). Values closer  than these are automatically converted to 0.",""],"658":["PDF 32000-1:2008 650 ' Adobe Systems Incorporated 2008  All rights reserved Additionally, conforming writers should adhere to t he following constraints, and conforming readers should  accommodate PDF files that obey the constraints.   Thumbnail images should be no larger than 106 by 106 samples, and should be created at one-eighth  scale for 8.5-by-11-inch and A4-size pages.   The minimum page size should be 3 by 3 units in default user space; the maximum should be 14,400 by  14,400 units. In versions of PDF earlier than 1.6, the size of the default user space unit was fixed at 1   72 inch, yielding a minimum of approximately 0.04 by  0.04 inch and a maximum of 200 by 200 inches.  Beginning with PDF 1.6, the size of the unit may be  set on a page-by-page basis; the default remains at 1/ 72 inch.   The magnification factor of a view should be constr ained to be between approximately 8 percent and 6400  percent.   When a conforming reader reads a PDF file with  a damaged or missing cross-reference table, it may  attempt to rebuild the table by scanning all the objec ts in the file. However, the generation numbers of  deleted entries are lost if the cross-reference table is missing or seve rely damaged. To facilitate such  reconstruction, object identifiers, the  endobj  keyword, and the endstream keyword should appear at the  start of a line. Also, the data within a stream s hould not contain a line beginning with the word  endstream , aside from the required  endstream  that delimits the end of the stream.  C.3 Memory limits Memory limits cannot be characterized  as precisely as architectural limit s because the amount of available  memory and the ways in which it  is allocated vary from one conforming product to another.  NOTE Memory is automatically realloca ted from one use to another when ne cessary: when more memory is needed  for a particular purpose, it can be taken from memory al located to another purpose if  that memory is currently  unused or its use is nonessential (a cache, for exampl e). Also, data is often saved to a temporary file when  memory is limited. Because of  this behaviour, it is not possible to state limits for such items as the number of  pages in a document, number of text annotations or hypertext links on a  page, number of graphics objects on a  page, or number of fonts on a page or in a document.  5 Number of significant decimal digits  of precision in fractional part  (approximate). string (in content  stream)32,767 Maximum length of a  string, in bytes.  This restriction applies only to st rings in content streams. There  is no effective restriction on  other strings in PDF files. name127 Maximum length of a name, in bytes.  indirect  object 8,388,607 Maximum number of indirect  objects in a PDF file.  q/Q nesting28NOTE Maximum depth of graphics state nesting by  q and Q operators. This is not a  limit as such, but arises  from the fact that q and  Q are implemented by the  PostScript gsave  and grestore  operators when  generating PostScript output.  DeviceN  components 32Maximum number of colorants or tint components in a  DeviceNcolour space.  CID65,535 Maximum value of a CID (character identifier).  Table C.1   Architectural limits  (continued) Quantity LimitDescription",""],"659":["' Adobe Systems Incorporated 2008  All rights reserved 651PDF 32000-1:2008 Annex  D(normative)Character Sets and Encodings D.1 General This annex lists the character sets and encodings that  shall be predefined in any conforming reader. Simple  fonts, encompassing Latin text and some symbols, are described here. See  9.7.5.2, \"Predefined CMaps\"  for a  list of predefined CMaps for CID-keyed fonts.  D.2, \"Latin Character Set and Encodings\" , describes the entire character set for the Adobe standard Latin-text  fonts. This character  set shall be supported by the Times, Helvetica, an d Courier font families, which are  among the standard 14 predefined fonts; see  9.6.2.2, \"Standard Type 1 Fonts (Standard 14 Fonts)\" . For each  named character, an octal character code is d efined for four different encodings:  StandardEncoding , MacRomanEncoding , WinAnsiEncoding , and  PDFDocEncoding  (see  Table  D.1 ). Unencoded characters  are indicated by a dash ().  D.3, \"PDFDocEncoding Character Set\" , describes the entire set of characte rs that can be represented using  PDFDocEncoding. It presents these char acters in numerical order and it describes the Unicode representation  of each character. This table overlaps the information presented in  D.2, \"Latin Character Set and Encodings\" , with respect to the presented octal character codes.  D.4, \"Expert Set and MacExpertEncoding\" , describes the expert character set, which contains additional  characters useful for sophisticated typography, such as  small capitals, ligatures, and fractions. For each named  character, an octal character code is given in  MacExpertEncoding . NOTE The built-in encoding in an expert  font program may be different from  MacExpertEncoding . D.5, \"Symbol Set and Encoding\" , and  D.6, \"ZapfDingbats Set and Encoding\" , describe the character sets and  built-in encodings for the Symbol and ZapfDingbats (ITC  Zapf Dingbats) font programs, which shall be among  the standard 14 predefined fonts. These fonts have built-in encodings that are unique to each font. The  characters for ZapfDingbats are ordered by code inst ead of by name, since the names in that font are  meaningless.  Table  D.1   Latin-text encodings   EncodingDescription StandardEncoding Adobe standard Latin-text encoding. Th is is the built-in encoding defined  in Type 1 Latin-text font programs ( but generally not in TrueType font  programs). Conforming readers shall  not have a predefined encoding  named  StandardEncoding . However, it is nece ssary to describe this encoding, since a fonts built-in encoding can be used as the base  encoding from which differences may be specified in an encoding  dictionary.  MacRomanEncoding Mac OS standard encoding  for Latin text in Western writing systems.  Conforming readers shall have a predefined encoding named  MacRomanEncoding  that may be used with both Type 1 and TrueType  fonts.  WinAnsiEncoding Windows Code Page 1252, often called the Windows ANSI encoding.  This is the standard Windows encoding  for Latin text in Western writing  systems. Conforming readers shall have a predefined encoding named  WinAnsiEncoding  that may be used with both Type 1 and TrueType  fonts.",""],"660":["PDF 32000-1:2008 652 ' Adobe Systems Incorporated 2008  All rights reserved PDFDocEncoding Encoding for text strings in a PDF document  outside  the documents  content streams. This is one of two encodings (the other being Unicode)  that may be used to represent text strings; see  7.9.2.2, \"Text String  Type\" . PDF does not have a predefined encoding named  PDFDocEncoding ; it is not customary to use this encoding to show text  from fonts.  MacExpertEncoding An encoding for use with expert fontsones containing the expert  character set. Conforming readers shall have a predefined encoding  named  MacExpertEncoding . Despite its name, it is not a platform- specific encoding; however, only certain fonts have the appropriate  character set for use with this encoding. No such fonts are among the  standard 14 predefined fonts.  Table D.1   Latin-text encodings  (continued) Encoding Description",""],"661":["' Adobe Systems Incorporated 2008  All rights reserved 653PDF 32000-1:2008 D.2 Latin Character Set and Encodings","CHAR CODE (OCTAL) CHAR CODE (OCTAL)","CHAR NAME STD MAC WIN PDF CHAR NAME STD MAC WIN PDF","A A 101 101 101 101","˘","AE341 256 306 306 ` Aacute   347 301 301 ´ Acircumflex   345 302 302 ˜ Adieresis   200 304 304  Agrave   313 300 300 ¯ Aring   201 305 305 ˆ Atilde   314 303 303 B B 102 102 102 102 C C 103 103 103 103 ˙ Ccedilla   202 307 307 D D 104 104 104 104 E E 105 105 105 105  Eacute   203 311 311 ˚ Ecircumflex   346 312 312 ¸ Edieresis   350 313 313 ¨ Egrave   351 310 310 — Eth     320 320 Euro1    200 240 F F 106 106 106 106 G G 107 107 107 107 H H 110 110 110 110 I I 111 111 111 111 ˝ Iacute   352 315 315 ˛ Icircumflex   353 316 316 ˇ Idieresis   354 317 317  Igrave   355 314 314 J J 112 112 112 112 K K 113 113 113 113 L L 114 114 114 114  Lslash 350     225 M M 115 115 115 115 N N 116 116 116 116  Ntilde   204 321 321 O O 117 117 117 117  OE 352 316 214 226  Oacute   356 323 323  Ocircumflex   357 324 324  Odieresis   205 326 326  Ograve   361 322 322  Oslash 351 257 330 330  Otilde   315 325 325 P P 120 120 120 120 Q Q 121 121 121 121 R R 122 122 122 122 S S 123 123 123 123  Scaron     212 227 T T 124 124 124 124  Thorn     336 336 U U 125 125 125 125  Uacute   362 332 332  Ucircumflex   363 333 333  Udieresis   206 334 334  Ugrave   364 331 331 V V 126 126 126 126 W W 127 127 127 127 X X 130 130 130 130 Y Y 131 131 131 131  Yacute     335 335  Ydieresis   331 237 230 Z Z 132 132 132 132  Zcaron 2    216 231 a a 141 141 141 141 Æ aacute   207 341 341  acircumflex   211 342 342 · acute 302 253 264 264  adieresis   212 344 344  ae 361 276 346 346  agrave   210 340 340 & ampersand 046 046 046 046",""],"662":["PDF 32000-1:2008 654 ' Adobe Systems Incorporated 2008  All rights reserved","CHAR CODE (OCTAL) CHAR CODE (OCTAL)","CHAR NAME STD MAC WIN PDF CHAR NAME STD MAC WIN PDF"," aring   214 345 345 ^ asciicircum 136 136 136 136 ~ asciitilde 176 176 176 176 * asterisk 052 052 052 052 @ at 100 100 100 100 ª atilde   213 343 343 b b 142 142 142 142 \\ backslash 134 134 134 134 | bar 174 174 174 174 { braceleft 173 173 173 173 } braceright 175 175 175 175 [ bracketleft 133 133 133 133 ] bracketright 135 135 135 135  breve 306 371   030 ƒ brokenbar     246 246  bullet 3267 245 225 200 c c 143 143 143 143  caron 317 377   031  ccedilla   215 347 347 ‚ cedilla 313 374 270 270 ¢ cent 242 242 242 242  circumflex 303 366 210 032 : colon 072 072 072 072 , comma 054 054 054 054 ' copyright   251 251 251 ⁄ currency 1250 333 244 244 d d 144 144 144 144  dagger 262 240 206 201  daggerdbl 263 340 207 202  degree   241 260 260 ¤ dieresis 310 254 250 250  divide   326 367 367 $ dollar 044 044 044 044  dotaccent 307 372   033  dotlessi 365 365   232 e e 145 145 145 145 Ø eacute   216 351 351 Œ ecircumflex   220 352 352 º edieresis   221 353 353 Ł egrave   217 350 350 8 eight 070 070 070 070  ellipsis 274 311 205 203  emdash 320 321 227 204  endash 261 320 226 205 = equal 075 075 075 075  eth     360 360 ! exclam 041 041 041 041 ¡ exclamdown 241 301 241 241 f f 146 146 146 146  fi 256 336   223 5 five 065 065 065 065  fl 257 337   224  florin 246 304 203 206 4 four 064 064 064 064  fraction 244 332   207 g g 147 147 147 147  germandbls 373 247 337 337 ‘ grave 301 140 140 140 > greater 076 076 076 076 « guillemotleft 4253 307 253 253 » guillemotright 4273 310 273 273  guilsinglleft 254 334 213 210  guilsinglright 255 335 233 211 h h 150 150 150 150  hungarumlaut 315 375   034 - hyphen 5055 055 055 055 i i 151 151 151 151  iacute   222 355 355  icircumflex   224 356 356  idieresis   225 357 357  igrave   223 354 354 j j 152 152 152 152 k k 153 153 153 153 l l 154 154 154 154",""],"663":["' Adobe Systems Incorporated 2008  All rights reserved 655PDF 32000-1:2008","CHAR CODE (OCTAL) CHAR CODE (OCTAL)","CHAR NAME STD MAC WIN PDF CHAR NAME STD MAC WIN PDF","< less 074 074 074 074 ‹ logicalnot   302 254 254  lslash 370     233 m m 155 155 155 155 ﬂ macron 305 370 257 257  minus       212  mu   265 265 265  multiply     327 327 n n 156 156 156 156 9 nine 071 071 071 071 æ ntilde   226 361 361 # numbersign 043 043 043 043 o o 157 157 157 157  oacute   227 363 363  ocircumflex   231 364 364  odieresis   232 366 366  oe 372 317 234 234  ogonek 316 376   035  ograve   230 362 362 1 one 061 061 061 061 ‰ onehalf     275 275 … onequarter     274 274 „ onesuperior     271 271 “ ordfeminine 343 273 252 252 ” ordmasculine 353 274 272 272 ł oslash 371 277 370 370 ı otilde   233 365 365 p p 160 160 160 160 ¶ paragraph 266 246 266 266 ( parenleft 050 050 050 050 ) parenright 051 051 051 051 % percent 045 045 045 045 . period 056 056 056 056 • periodcentered 264 341 267 267  perthousand 275 344 211 213 + plus 053 053 053 053 – plusminus   261 261 261 q q 161 161 161 161 ? question 077 077 077 077 ¿ questiondown 277 300 277 277 \" quotedbl 042 042 042 042  quotedblbase 271 343 204 214  quotedblleft 252 322 223 215  quotedblright 272 323 224 216  quoteleft 140 324 221 217  quoteright 047 325 222 220  quotesinglbase 270 342 202 221 ’ quotesingle 251 047 047 047 r r 162 162 162 162 ﬁ registered   250 256 256  ring 312 373   036 s s 163 163 163 163  scaron     232 235 § section 247 244 247 247 ; semicolon 073 073 073 073 7 seven 067 067 067 067 6 six 066 066 066 066 / slash 057 057 057 057  space6040 040 040 040 £ sterling 243 243 243 243 t t 164 164 164 164  thorn     376 376 3 three 063 063 063 063  threequarters     276 276 ‡ threesuperior     263 263  tilde 304 367 230 037  trademark   252 231 222 2 two 062 062 062 062 † twosuperior     262 262 u u 165 165 165 165 œ uacute   234 372 372 ß ucircumflex   236 373 373  udieresis   237 374 374 ø ugrave   235 371 371",""],"664":["PDF 32000-1:2008 656 ' Adobe Systems Incorporated 2008  All rights reserved 1. In PDF 1.3, the euro character was added to the  Adobe standard Latin character set. It shall be en -coded as 200 in  WinAnsiEncoding  and 240 in  PDFDocEncoding , assigning codes that were pre -viously unused. Apple changed the Mac OS Latin- text encoding for code 333 from the currency  character to the euro character. However, this incompatible change has  not  been reflected in PDFs  MacRomanEncoding , which shall continue to map code 333 to currency. If the euro character is  desired, an encoding dictionary may be used  to specify this single difference from  MacRomanEn -coding . 2. In PDF 1.3, the existing Zcaron  and zcaron characters were added to  WinAnsiEncoding  as the  previously unused codes 216 and 236.  3. In  W inAnsiEncoding , all unused codes greater than 40 map to the bullet character. However, only  code 225 shall be specifically assigned to the bulle t character; other codes are subject to future re -assignment. 4. The character names guillemotleft and guillemotright are misspelled. The correct spelling for this  punctuation character is  guillemet . However, the misspelled names ar e the ones actually used in  the fonts and encodings containing these characters.  5. The hyphen character is also encoded as 255 in  WinAnsiEncoding . The meaning of this duplicate  code shall be soft hyphen, but it sha ll be typographically the same as hyphen.  6. The SPACE character shall also be encoded as 312 in  MacRomanEncoding  and as 240 in  WinAnsiEncoding . This duplicate code shall signify a nonbreaking space; it shall be typographi -cally the same as (U+003A) SPACE.  D.3 PDFDocEncoding Character Set  The column titled Notes uses the following abbreviations: UUn defined  code point in PDFDocEncoding SR Unicode codepoint that may require  special representation  in XML in some con -texts. Table  D.2   PDFDocEncoding Character Set   Character DecHexOctal Unicode Unicode character name or  (alternative alias) Notes^@00x000000U+0000 (NULL) U ^A10x010001U+0001 (START OF HEADING) U^B20x020002U+0002 (START OF TEXT) U^C30x030003U+0003 (END OF TEXT) U^D40x040004U+0004 (END OF TEXT) U^E50x050005U+0005 (END OF TRANSMISSION) U","CHAR CODE (OCTAL) CHAR CODE (OCTAL)","CHAR NAME STD MAC WIN PDF CHAR NAME STD MAC WIN PDF","_ underscore 137 137 137 137 v v 166 166 166 166 w w 167 167 167 167 x x 170 170 170 170","y","y171 171 171 171","yacute     375 375  ydieresis   330 377 377 ¥ yen 245 264 245 245 z z 172 172 172 172  zcaron 2    236 236 0 zero 060 060 060 060",""],"665":["' Adobe Systems Incorporated 2008  All rights reserved 657PDF 32000-1:2008 ^F60x060006U+0006 (ACKNOWLEDGE) U^G70x070007U+0007 (BELL)U^H80x080010U+0008 (BACKSPACE) U^I90x090011 U+0009 (CHARACTER TABULATION)  SR^J100x0a0012U+000A (LINE FEED) SR^K110x0b0013U+000B (LINE TABULATION)  U^L120x0c0014U+000C (FORM FEED) U^M130x0d0015U+000D (CARRIAGE RETURN) SR^N140x0e0016U+000E (SHIFT OUT)  U^O150x0f0017U+000F (SHIFT IN) U^P160x100020U+0010 (DATA LINK ESCAPE)  U^Q170x11 0021U+0011 (DEVICE CONTROL ONE) U^R180x120022U+0012 (DEVICE CONTROL TWO) U^S190x130023U+0013 (DEVICE CONTROL THREE)  U^T200x140024U+0014 (DEVICE CONTROL FOUR) U^U210x150025U+0015 (NEGATIVE ACKNOWLEDGE) U^V220x160026U+0017 (SYNCRONOUS IDLE) U^W230x170027U+0017 (END OF TRANSMISSION BLOCK) Uu240x180030U+02D8 BREVEv","250x190031U+02C7 CARON^260x1a0032U+02C6 MODIFIER LETTER CIRCUMFLEX  ACCENT•270x1b0033U+02D9 DOT ABOVE280x1c0034U+02DD DOUBLE ACUTE ACCENT,290x1d0035U+02DB OGONEK 300x1e0036U+02DA RING ABOVE~310x1f0037U+02DC SMALL TILDE320x200040U+0020 SPACE (&#32;)  !330x210041U+0021 EXCLAMATION MARK SR\"340x220042U+0022 QUOTATION MARK (&quot;)  SR#350x230043U+0023 NUMBER SIGN$360x240044U+0024 DOLLAR SIGN%370x250045U+0025 PERCENT SIGN&380x260046U+0026 AMPERSAND (&amp;) Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"666":["PDF 32000-1:2008 658 ' Adobe Systems Incorporated 2008  All rights reserved ’390x270047U+0027 APOSTROPHE (&apos;)(400x280050U+0028 LEFT PARENTHESIS )410x290051U+0029 RIGHT PARENTHESIS *420x2a0052U+002A ASTERISK+430x2b0053U+002B PLUS SIGN,440x2c0054U+002C COMMA-450x2d0055U+002D HYPHEN-MINUS.460x2e0056U+002E FULL STOP (PERIOD) /470x2f0057U+002F SOLIDUS (slash)0480x300060U+0030 DIGIT ZERO 1490x310061U+0031 DIGIT ONE2500x320062U+0032 DIGIT TWO 3510x330063U+0033 DIGIT THREE4520x340064U+0034 DIGIT FOUR 5530x350065U+0035 DIGIT FIVE 6540x360066U+0036 DIGIT SIX7550x370067U+0037 DIGIT SEVEN8560x380070U+0038 DIGIT EIGJT 9570x390071U+0039 DIGIT NINE:580x3a0072U+003A COLON;590x3b0073U+003B SEMICOLON <600x3c0074U+003C LESS THAN SIGN (&lt;)  SR","=610x3d0075U+003D EQUALS SIGN>620x3e0076U+003E GREATER THAN SIGN (&gt;) ?630x3f0077U+003F QUESTION MARK @640x400100U+0040 COMMERCIAL AT  A650x410101U+0041 B660x420102U+0042 C670x430103U+0043 D680x440104U+0044 E690x450105U+0045 F700x460106U+0046 G710x470107U+0047 Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"667":["' Adobe Systems Incorporated 2008  All rights reserved 659PDF 32000-1:2008 H720x480110 U+0048 I730x490111 U+0049 J740x4a0112 U+004A K750x4b0113 U+004B L760x4c0114 U+004C M770x4d0115 U+004D N780x4e0116 U+004E O790x4f0117 U+004F P800x500120U+0050 Q810x510121U+0051 R820x520122U+0052 S830x530123U+0053 T840x540124U+0054 U850x550125U+0055 V860x560126U+0056 W870x570127U+0057 X880x580130U+0058 Y890x590131U+0059 Z900x5a0132U+005A [910x5b0133U+005B LEFT SQUARE BRACKET \\920x5c0134U+005C REVERSE SOLIDUS (backslash) ]930x5d0135U+005D RIGHT SQUARE BRACKET^940x5e0136U+005E CIRCUMFLEX ACCENT (hat) _950x5f0137U+005F LOW LINE (SPACING UNDERSCORE) ‘960x600140U+0060 GRAVE ACCENT a97","0x610141U+0061 b980x620142U+0062 c990x630143U+0063 d1000x640144U+0064 e1010x650145U+0065 f1020x660146U+0066 g1030x670147U+0067 h1040x680150U+0068 Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"668":["PDF 32000-1:2008 660 ' Adobe Systems Incorporated 2008  All rights reserved i1050x690151U+0069 j1060x6a0152U+006A k1070x6b0153U+006B l1080x6c0154U+006C m1090x6d0155U+006D n110 0x6e0156U+006E o1110x6f0157U+006F p112 0x700160U+0070 q113 0x710161U+0071 r114 0x720162U+0072 s115 0x730163U+0073 t116 0x740164U+0074 u117 0x750165U+0075 v118 0x760166U+0076 w119 0x770167U+0077 x1200x780170U+0078 y1210x790171U+0079 z1220x7a0172U+007A {1230x7b0173U+007B LEFT CURLY BRACKET |1240x7c0174U+007C VERTICAL LINE }1250x7d0175U+007D RIGHT CURLY BRACKET ~1260x7e0176U+007E TILDE 1270x7f0177Undefined  U1280x800200U+2022 BULLET1290x810201U+2020 DAGGER130","0x820202U+2021 DOUBLE DAGGER1310x830203U+2026 HORIZONTAL ELLIPSIS 1320x840204U+2014 EM DASH 1330x850205U+2013 EN DASH1340x860206U+0192 1350x870207U+2044 FRACTION SLASH (solidus) 1360x880210U+2039 SINGLE LEFT-POINTING ANGLE  QUOTATION MARK Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"669":["' Adobe Systems Incorporated 2008  All rights reserved 661PDF 32000-1:2008 1370x890211 U+203A SINGLE RIGHT-POINTING ANGLE  QUOTATION MARK 1380x8a0212U+2212 1390x8b0213U+2030 PER MILLE SIGN 1400x8c0214U+201E DOUBLE LOW-9 QUOTATION MARK  (quotedblbase) 1410x8d0215U+201C LEFT DOUBLE QUOTATION MARK (double  quote left) 1420x8e0216U+201D RIGHT DOUBLE QUOTATION MARK  (quotedblright) 1430x8f0217U+2018 LEFT SINGLE QUOTATION MARK  (quoteleft) 1440x900220U+2019 RIGHT SINGLE QUOTATION MARK  (quoteright) 1450x910221U+201A SINGLE LOW-9 QUOTATION MARK  (quotesinglbase) 1460x920222U+2122 TRADE MARK SIGN fi1470x930223U+FB01LATIN SMALL LIGATURE FI fl1480x940224U+FB02LATIN SMALL LIGATURE FL 1490x950225U+0141 LATIN CAPITAL LETTER L WITH STROKE OE1500x960226U+0152 LATIN CAPITAL LIGATURE OE 1510x970227U+0160 LATIN CAPITAL LETTER S WITH CARON  1520x980230U+0178 LATIN CAPITAL LETTER Y WITH  DIAERESISZ hat 1530x990231U+017D LATIN CAPITAL LETTER Z WITH CARON i1540x9a0232U+0131 LATIN SMALL LETTER DOTLESS I  l/1550x9b0233U+0142 LATIN SMALL LETTER L WITH STROKE  1560x9c0234U+0153 LATIN SMALL LIGATURE OE  1570x9d0235U+0161 LATIN SMALL LETTER S WITH CARON  1580x9e0236U+017E LATIN SMALL LETTER Z WITH CARON  1590x9f0237","Undefined  U1600xa00240U+20AC EURO SIGN ¡1610xa10241U+00A1 INVERTED EXCLAMATION MARK  ¢1620xa20242U+00A2 CENT SIGN£1630xa30243U+00A3 POUND SIGN (sterling) ⁄1640xa40244U+00A4 CURRENCY SIGN ¥1650xa50245U+00A5 YEN SIGNTable D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"670":["PDF 32000-1:2008 662 ' Adobe Systems Incorporated 2008  All rights reserved ƒ1660xa60246U+00A6 BROKEN BAR§1670xa70247U+00A7 SECTION SIGN ¤1680xa80250U+00A8 DIAERESIS'1690xa90251U+00A9 COPYRIGHT SIGN“1700xaa0252U+00AA FEMININE ORDINAL INDICATOR «1710xab0253U+00AB LEFT-POINTING DOUBLE ANGLE  QUOTATION MARK ‹1720xac0254U+00AC NOT SIGN1730xad0255Undefined  Uﬁ1740xae0256U+00AE REGISTERED SIGN ﬂ1750xaf0257U+00AF MACRON1760xb00260U+00B0 DEGREE SIGN–1770xb10261U+00B1 PLUS-MINUS SIGN†1780xb20262U+00B2 SUPERSCRIPT TWO‡1790xb30263U+00B3 SUPERSCRIPT THREE·1800xb40264U+00B4 ACUTE ACCENT1810xb50265U+00B5 MICRO SIGN¶1820xb60266U+00B6 PILCROW SIGN•1830xb70267U+00B7 MIDDLE DOT‚1840xb80270U+00B8 CEDILLA „1850xb90271U+00B9 SUPERSCRIPT ONE”1860xba0272U+00BA MASCULINE ORDINAL INDICATOR »1870xbb0273U+00BB RIGHT-POINTING DOUBLE ANGLE  QUOTATION MARK …188","0xbc0274U+00BC VULGAR FRACTION ONE QUARTER ‰1890xbd0275U+00BD VULGAR FRACTION ONE HALF 1900xbe0276U+00BE VULGAR FRACTION THREE QUARTERS ¿1910xbf0277U+00BF INVERTED QUESTION MARK 1920xc00300U+00C0 `1930xc10301U+00C1 ´1940xc20302U+00C2 ˆ1950xc30303U+00C3 ˜1960xc40304U+00C4 ¯1970xc50305U+00C5 Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"671":["' Adobe Systems Incorporated 2008  All rights reserved 663PDF 32000-1:2008 ˘1980xc60306U+00C6 ˙1990xc70307U+00C7 ¨2000xc80310U+00C8 2010xc90311 U+00C9 ˚2020xca0312U+00CA ¸2030xcb0313U+00CB 2040xcc0314U+00CC ˝2050xcd0315U+00CD ˛2060xce0316U+00CE ˇ2070xcf0317U+00CF —2080xd00320U+00D0 2090xd10321U+00D1 2100xd20322U+00D2 211 0xd30323U+00D3 2120xd40324U+00D4 2130xd50325U+00D5 2140xd60326U+00D6 2150xd70327U+00D7 2160xd80330U+00D8 2170xd90331U+00D9 2180xda0332U+00DA 2190xdb0333U+00DB 2200xdc0334U+00DC 2210xdd0335U+00DD 2220xde0336U+00DE 2230xdf0337U+00DF 2240xe0","0340U+00E0 Æ2250xe10341U+00E1 2260xe20342U+00E2 ª2270xe30343U+00E3 2280xe40344U+00E4 2290xe50345U+00E5 2300xe60346U+00E6 Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"672":["PDF 32000-1:2008 664 ' Adobe Systems Incorporated 2008  All rights reserved 2310xe70347U+00E7 Ł2320xe80350U+00E8 Ø2330xe90351U+00E9 Œ2340xea0352U+00EA º2350xeb0353U+00EB 2360xec0354U+00EC 2370xed0355U+00ED 2380xee0356U+00EE 2390xef0357U+00EF 2400xf00360U+00F0 æ2410xf10361U+00F1 2420xf20362U+00F2 2430xf30363U+00F3 2440xf40364U+00F4 ı2450xf50365U+00F5 2460xf60366U+00F6 2470xf70367U+00F7 ł2480xf80370U+00F8 ø2490xf90371U+00F9 œ2500xfa0372U+00FA ß2510xfb0373U+00FB 2520xfc0374U+00FC 2530xfd0375U+00FD 2540xfe0376U+00FE 2550xff 0377U+00FF Table D.2   PDFDocEncoding Character Set  (continued) Character Dec Hex Octal Unicode Unicode character name or  (alternative alias) Notes",""],"673":["' Adobe Systems Incorporated 2008  All rights reserved 665PDF 32000-1:2008 D.4 Expert Set and MacExpertEncoding","ppg","CHAR NAME CODE CHAR NAME CODE","AEsmall 276 Aacutesmall 207 Acircumflexsmall 211 Acutesmall 047 Adieresissmall 212 Agravesmall 210 Aringsmall 214 Asmall 141 Atildesmall 213 Brevesmall 363 Bsmall 142 Caronsmall 256 Ccedillasmall 215 Cedillasmall 311 Circumflexsmall 136 Csmall 143 Dieresissmall 254 Dotaccentsmall 372 Dsmall 144 Eacutesmall 216 Ecircumflexsmall 220 Edieresissmall 221 Egravesmall 217 Esmall 145 Ethsmall 104 Fsmall 146 Gravesmall 140 Gsmall 147 Hsmall 150 Hungarumlautsmall 042  Iacutesmall 222 !Icircumflexsmall 224 \"Idieresissmall 225 #Igravesmall 223 $Ismall 151 %Jsmall152&Ksmall153’Lslashsmall302(Lsmall154)Macronsmall364*Msmall155+Nsmall156,Ntildesmall226-OEsmall317.Oacutesmall227/Ocircumflexsmall 231 0Odieresissmall2321Ogoneksmall3622Ogravesmall2303Oslashsmall2774Osmall1575Otildesmall2336Psmall1607Qsmall1618Ringsmall3739Rsmall162:Scaronsmall247;Ssmall163<Thornsmall271=Tildesmall176>Tsmall164?Uacutesmall234@Ucircumflexsmall 236 AUdieresissmall237BUgravesmall235CUsmall165DVsmall166EWsmall167FXsmall170GYacutesmall264",""],"674":["PDF 32000-1:2008 666 ' Adobe Systems Incorporated 2008  All rights reserved","CHAR NAME CODE CHAR NAME CODE","HYdieresissmall 330 IYsmall 171 JZcaronsmall 275 KZsmall 172 Lampersandsmall 046 Masuperior 201 Nbsuperior 365 Ocentinferior 251 Pcentoldstyle 043 Qcentsuperior 202 Rcolon 072 Scolonmonetary 173 Tcomma 054 Ucommainferior 262 Vcommasuperior 370 Wdollarinferior 266 Xdollaroldstyle 044 Ydollarsuperior 045 Zdsuperior 353 [eightinferior 245 \\eightoldstyle 070 ]eightsuperior 241 ^esuperior 344 _exclamdownsmall 326 ‘exclamsmall 041 aff 126 bffi 131 cffl 132 fi 127 dfiguredash 320 efiveeighths 114 ffiveinferior 260 gfiveoldstyle 065 hfivesuperior 336 fl 130 ifourinferior 242 jfouroldstyle064kfoursuperior335fraction057lhyphen055mhypheninferior137nhyphensuperior321oisuperior351plsuperior361qmsuperior367rnineinferior273snineoldstyle071tninesuperior341unsuperior366vonedotenleader053woneeighth112xonefitted174‰onehalf110yoneinferior301zoneoldstyle061…onequarter107„onesuperior332{onethird116|osuperior257}parenleftinferior 133 ~parenleftsuperior 050 parenrightinferior 135 parenrightsuperior 051 period056periodinferior263periodsuperior371questiondownsmall 300 questionsmall077rsuperior345rupiah175semicolon073seveneighths115",""],"675":["' Adobe Systems Incorporated 2008  All rights reserved 667PDF 32000-1:2008","CHAR NAME CODE CHAR NAME CODE","seveninferior 246 sevenoldstyle 067 sevensuperior 340 sixinferior 244 sixoldstyle 066 sixsuperior 337 space 040 ssuperior 352 threeeighths 113 threeinferior 243 threeoldstyle 063 threequarters 111 threequartersemdash 075 ‡threesuperior334tsuperior346twodotenleader052twoinferior252twooldstyle062†twosuperior333twothirds117zeroinferior274zerooldstyle060zerosuperior342",""],"676":["PDF 32000-1:2008 668 ' Adobe Systems Incorporated 2008  All rights reserved D.5 Symbol Set and Encoding","CHAR NAME CODE CHAR NAME CODE","Alpha 101 Beta 102 Chi 103 Delta 104 Epsilon 105 Eta 110 Euro 240 Gamma 107 Ifraktur 301 Iota 111 Kappa 113 Lambda 114 Mu 115 Nu 116 Omega 127 Omicron 117 Phi 106 Pi 120 Psi 131 Rfraktur 302 Rho 122 Sigma 123 Tau 124 Theta 121 Upsilon 125 Upsilon1 241 Xi 130 Zeta 132 aleph 300 alpha 141 &ampersand 046 angle 320  angleleft 341 !angleright 361 \"approxequal 273 #arrowboth253$arrowdblboth333%arrowdbldown337’arrowdblleft334(arrowdblright336)arrowdblup335*arrowdown257+arrowhorizex276,arrowleft254-arrowright256.arrowup255/arrowvertex2750asteriskmath052|bar1741beta142{braceleft173}braceright1752bracelefttp3544braceleftmid3555braceleftbt3566bracerighttp3747bracerightmid3758bracerightbt3769braceex357[bracketleft133]bracketright135:bracketlefttp351;bracketleftex352<bracketleftbt353=bracketrighttp371>bracketrightex372?bracketrightbt373bullet267@carriagereturn277Achi143",""],"677":["' Adobe Systems Incorporated 2008  All rights reserved 669PDF 32000-1:2008","CHAR NAME CODE CHAR NAME CODE","Bcirclemultiply 304 Ccircleplus 305 Dclub 247 Ecolon 072 Fcomma 054 Gcongruent 100 'copyrightsans 343 Hcopyrightserif 323 degree 260 Idelta 144 Jdiamond 250 divide 270 Kdotmath 327 Leight 070 Melement 316 ellipsis 274 Nemptyset 306 Oepsilon 145 Pequal 075 Qequivalence 272 Reta 150 Sexclam 041 Texistential 044 Ufive 065 florin 246 Vfour 064 Wfraction 244 Xgamma 147 Ygradient 321 Zgreater 076 \\greaterequal 263 ^heart 251 _infinity 245 ‘integral 362 aintegraltp 363 bintegralex 364 cintegralbt365dintersection307eiota151fkappa153glambda154hless074ilessequal243jlogicaland331‹logicalnot330klogicalor332llozenge340mminus055nminute242mu155multiply264onine071pnotelement317qnotequal271rnotsubset313snu156tnumbersign043uomega167vomega1166womicron157xone061yparenleft050zparenright051~parenlefttp346parenleftex347parenleftbt350parenrighttp366parenrightex367parenrightbt370partialdiff266percent045period056",""],"678":["PDF 32000-1:2008 670 ' Adobe Systems Incorporated 2008  All rights reserved","CHAR NAME CODE CHAR NAME CODE","perpendicular 136 phi 146 phi1 152 pi 160 plus 053 –plusminus 261 product 325 propersubset 314 propersuperset 311 proportional 265 psi 171 question 077 radical 326 radicalex 140 reflexsubset 315 reflexsuperset 312 ﬁregistersans 342 registerserif 322 rho 162 second 262 semicolon 073 seven 067 sigma 163 sigma1 126 similar176¡six066¢slash057£space040⁄spade252¥suchthat047ƒsummation345§tau164¤therefore134“theta161«theta11123three063›trademarksans344ﬂtrademarkserif324†two062‡underscore137·union310¶universal042•upsilon165‚weierstrass303„xi170”zero060»zeta172",""],"679":["' Adobe Systems Incorporated 2008  All rights reserved 671PDF 32000-1:2008 D.6 ZapfDingbats Set and Encoding","CHAR NAME CODE CHAR NAME CODE CHAR NAME CODE CHAR NAME CODE"," space 040 a1 041 a2 042 a202 043 a3 044 a4 045 a5 046 a119 047 a118 050 a117 051 a11 052 a12 053 a13 054 a14 055 a15 056 a16 057 a105 060 a17 061 a18 062 a19 063 a20 064 a21 065 a22 066 a23 067 a24 070 a25 071 a26 072 a27 073 a28 074 a6 075 !a7 076 \"a8 077 #a9 100 $a10 101 %a29 102 &a30 103 ’a31 104 (a32 105 )a33 106 *a34 107 +a35 110 ,a36 111 -a37 112 .a38 113 /a39 114 0a40 115 1a41 116 2a42 117 3a43 120 4a44 121 5a45 122 6a461237a47 124 8a48 125 9a49 126 :a50 127 ;a51 130 <a52 131 =a53 132 >a54 133 ?a55 134 @a56 135 Aa57 136 Ba58 137 Ca59 140 a60 141 Da61 142 Ea62 143 Fa63 144 Ga64 145 Ha65 146 Ia66 147 Ja67 150 Ka68 151 La69 152 Ma70 153 Na71 154 Oa72 155 Pa73 156 Qa74 157 Ra203 160 Sa75 161 Ta204 162 Ua76 163 Va77 164 Wa78 165 Xa79 166 Ya81 167 Za82 170 [a83 171 \\a84 172 ]a97 173 ^a98 174 _a99 175 ‘a100 176 aa101 241 ba102 242 ca103 243 da104 244 ea106 245 fa107 246 ga108247ha112 250 ia111 251 ja110 252 ka109 253 la120 254 ma121 255 na122 256 oa123 257 pa124 260 qa125 261 ra126 262 sa127 263 ta128 264 ua129 265 va130 266 wa131 267 xa132 270 ya133 271 za134 272 {a135 273 |a136 274 }a137 275 ~a138 276 a139 277 a140 300 a141 301 a142 302 a143 303 a144 304 a145 305 a146 306 a147 307 a148 310 a149 311 a150 312 a151 313 a152 314 a153 315",""],"680":["PDF 32000-1:2008 672 ' Adobe Systems Incorporated 2008  All rights reserved","CHAR NAME CODE CHAR NAME CODE CHAR NAME CODE CHAR NAME CODE","a154 316 a155 317 a156 320 a157 321 a158 322 a159 323 a160 324 a161 325 a163 326 a164 327 a196 330 a165 331 a192 332 a166 333 a167 334 a168 335 a169 336 a170 337 a171 340 ¡a172 341 ¢a173 342 £a162 343 ⁄a174 344 ¥a175 345 ƒa176 346 §a177 347 ¤a178 350 'a179 351 “a193 352 «a180 353 ‹a199 354 ›a181 355 ﬁa200 356 ﬂa182 357 a201 361 –a183 362 †a184 363 ‡a197 364 ·a185 365 a194 366 ¶a198 367 •a186 370 ‚a195 371 „a187 372 ”a188 373 »a189 374 …a190 375 ‰a191 376",""],"681":["' Adobe Systems Incorporated 2008  All rights reserved 673PDF 32000-1:2008 Annex  E(normative)PDF Name RegistryE.1 General This annex discusses a registry for developers, controlled  by ISO and currently provided by Adobe on behalf of  ISO. The registry contains private names and formats  that may be used by conforming writers. Developer  prefixes shall be used to identify extensions to PDF  that use First Class names (see below) and that are  intended for public use. (See  7.12.2, Developer Extensions Dictionary .) Developers means any entity  including individuals, companies, non-profits, standards  bodies, open source groups, etc., who are developing  standards or software to use and extend ISO 32000-1. Private data may be added to PDF documents that enabl e conforming readers to change behavior based on  this data. At the same time, users have certain expectations when opening a PDF document, no matter which  conforming reader is being used. PDF enforces certain restrictions on private data in order to meet these  expectations.  A conforming writer  or conforming reader  may define new types of actions,  destinations, annotations, security,  and file system handlers. If  a user opens a PDF document  using a conforming reader for which  the new type of  object is not supported , the  conforming reader  shall  behave as described  in Annex I .A conforming writer  may also add keys to any PDF object  that is implemented as a dictionary , except the file  trailer dictionary (see  7.5.5, \"File Trailer\" ). In addition,  a conforming writer  may create tags that indicate the role  of marked-content operators  (PDF 1.2) , as described in  14.6, \"Marked Content\" . E.2 Name Registry To avoid conflicts with third-party names and with future  versions of PDF, ISO maintains a registry for certain  private names and formats. Developers shall only add pr ivate data that conforms to  the registry rules. The  registry includes three classes:  First  class . Names and data formats that are of value to a wide range of developers. All names defined in  this ISO 32000  specification are first-class names.  Conforming readers  that are publicly available  shall use  first-class names for their private data. First-class names and data formats  shall be registered with ISO  and  shall be made available for all developers to use. To subm it a private name and format for consideration as  first-class, see the link on registering a private PDF extension, at the following Web page:  < http://adobe.com/go/ISO32000Registry>  Data format descriptions shall follo w the style of ISO 32000-1 and give  a complete specification of the  intended function of the  extended information. Second class . Names that are applicable to a specific developer.  ISO does not register second-class data  formats.)  ISO distributes second-class names by  registering developer-specific  4-byte  prefixes . Those  bytes followed by a LOW LINE (5Fh) shall  be used as the first characters  in the names of all private data  added by the developer.  ISO shall not register the same prefix to two different developers, thereby  ensuring that different developers second-class names  shall not conflict. It is the responsibility of the  developer not to use the same name in conflicting ways . To register a developer- specific prefix, use the  following Web page: < http://adobe.com/go/ISO32000Registry>",""],"682":["PDF 32000-1:2008 674 ' Adobe Systems Incorporated 2008  All rights reserved","Third class. Names that may be used only  in PDF files that other third pa rties will never see because they","can conflict with third-class names defined by others. Third-class names  shall  all begin with a specific  prefix reserved for private extens ions. This prefix, which is XX, shall  be used as the first characters in the  names of all private data added by the developer. It is not necessary to contact  ISO to register third-class  names. New keys for the document information dictionary (see  14.3.3, \"Document Info rmation Dictionary\" ) or a thread  information dictionary (in the  I entry of a thread dictionary; see  Section 12.4.3, Articles ) shall not be  registered.  More information about developer prefixes, handlers and extension s to ISO 32000-1 can be obtained at http:// www.aiim.org/ISO32000Registry.",""],"683":["' Adobe Systems Incorporated 2008  All rights reserved 675PDF 32000-1:2008 Annex  F(normative)Linearized PDFF.1 General Linearization of PDF is an optional feature available be ginning in PDF 1.2 that enables efficient incremental  access of the file in a network environment. A conforming  reader that does not support this optional feature can  still successfully process linearized f iles although not as efficiently.  Enhanced conformi ng readers can recognize that a PDF file has been  linearized and may take advantage of  that organization (as well as added  hint information) to enhance viewing performance.  The primary goal for a linearized PDF file is to achiev e the following behaviour for documents of arbitrary size  and so that the total number of pages in the document should have little or no effect on the user-perceived  performance of viewing any particular page:  When a document is opened, display the first page as  quickly as possible. The first page to be viewed may  be an arbitrary page of the document, not necessarily pa ge 0 (though opening at page 0 is most common).   When the user requests another page of an open document  (for example, by going  to the next page or by  following a link to an arbitrary page), display that page as quickly as possible.   When data for a page is delivered over a slow channel,  display the page incrementally as it arrives. To the  extent possible, display the most useful data first.   Permit user interaction, such as following a link, to be performed even before the entire page has been  received and displayed.  NOTE A linearized PDF is optimized for viewing of read- only PDF documents. A linearized PDF should be generated  once and read many times.  Incremental update shall still be permitted, but the resulting PDF is  no longer linearized an d subsequently shall  be treated as ordinary PDF. Linearizing it again may require reprocessing the entire file; see  G.7, \"Accessing an  Updated File\" for details.  Linearized PDF requires two additi ons to the PDF specification:   Rules for the ordering of objects in the PDF file   Additional optional data structures, called  hint tables , that enable efficient nav igation within the document  Both of these additions are relatively simple to descri be; however, using them effectively requires a deeper  understanding of their purpose. Consequently, this annex  goes considerably beyond a simple specification of  these PDF extensions to include background, motivation, and strategies.  F.2, \"Background and Assumptions,\"  provides background information about the properties of the Web that  are relevant to the design of Linearized PDF.  F.3, \"Linearized PDF Document Structure,\"  specifies the file format and object-ordering requirements of  Linearized PDF.  F.4, \"Hint Tables,\"  specifies the detailed representation of the hint tables.",""],"684":["PDF 32000-1:2008 676 ' Adobe Systems Incorporated 2008  All rights reserved Annex G, outlines strategies for accessing Linearized PD F over a network, which in turn determine the  optimal way to organize the PDF file.  The reader is assumed to be  familiar with the basic architecture of the Web,  including terms such as URL,  HTTP, and MIME.  F.2 Background and Assumptions NOTE 1 The principal problem addressed by  the Linearized PDF design is the  access of PDF documents through the  Web. This environment has the following important properties:   The access protocol (HTTP) is a transaction cons isting of a request and a response. The conforming  reader presents a request in the form of a URL, and the server sends a response consisting of one or  more MIME-tagged  data blocks.   After a transaction has completed, obtaining more  data requires a new request-response transaction. The  connection between conforming reader and server do es not ordinarily persist beyond the end of a  transaction, although some implementations may at tempt to cache the open connection to expedite  subsequent transactions with the same server.   Round-trip delay can be significant. A request-response  transaction can take up to several seconds,  independent of the amount  of data requested.   The data rate may be limited. A typical bottleneck  is a slow link between the conforming reader and the  Internet service provider.  These properties are generally shared by other wid e-area network architec tures besides the Web.  Also, CD-ROMs share some of these properties, sinc e they have relatively slow seek times and lim -ited data rates compared to magnetic media. The remainder of this annex focuses on the Web.  Some additional properties of the HTTP protocol  are relevant to the problem of accessing PDF files  efficiently. These properties may not all be shared by other protocols or network environments.   When a PDF file is initially accessed (such as by  following a URL hyperlink from some other document),  the file type is not known to the conforming reader. Th erefore, the conforming r eader initiates a transaction  to retrieve the entire document and then inspects the MIME tag of the response as  it arrives. Only at that point is the document known to be PDF. Additionally , with a properly configured  server environment, the  length of the document becomes known at that time.   The conforming reader may abort a response while the transactio n is still in progress if it decides that the  remainder of the data is not of immediate interest.  In HTTP, aborting the transaction requires closing the  connection, which interferes with  the strategy of caching the o pen connection between transactions.   The conforming reader may request retrieval of portio ns of a document by specifying one or more byte  ranges (by offset and count) in the HTTP request heade rs. Each range can be relative to either the  beginning or the end of the file. The conforming reader  may specify as many ranges as it wants in the  request, and the res ponse consists of multiple  blocks, each properly tagged.   The conforming reader may initiate multiple concurre nt transactions in an attempt to obtain multiple  responses in parallel. This is commonly done, for instance, to retrieve inline images referenced from an  HTML document. This strategy is not always reliable  and may backfire if the transactions interfere with  each other by competing for scarce resources in  the server or the communication channel.  NOTE 2 Extensive experimentation has dete rmined that having multiple concurre nt transactions does not work very  well for PDF in some important environments. Ther efore, Linearized PDF is designed to enable good  performance to be achieved using only one transaction at  a time. In particular, this means that the conforming  reader needs to have sufficient information to determine the byte ranges for all the objects required to display  a given page of the PDF file so  that it can specify all those by te ranges in a single request.  NOTE 3 The following additional assumptions are made ab out the conforming reader and its local environment:   The conforming reader has plenty of local temporary  storage available. It should rarely need to retrieve a  given portion of a PDF document more than once from the server.",""],"685":["' Adobe Systems Incorporated 2008  All rights reserved 677PDF 32000-1:2008  The conforming reader is able to display PDF data quickly once it has been received. The performance  bottleneck is assumed to be in th e transport system (throug hput or round-trip delay) , not in the processing  of data after it arrives.  The consequence of these assumptions is that it  may be advantageous for the conforming reader to  do considerable extra work to minimize delays due to communications.  Such work includes maintaining local caches and reordering actions according to when the needed data  becomes available.  F.3 Linearized PDF Document Structure F.3.1 General Except as noted below, all elements of a Li nearized PDF file shall be as specified in  7.5, \"File Structure\" , and all  indirect objects in the file shall be  shall be divided into two groups.   The first group shall consist of the document catalogue, other document-level objects, and all objects  belonging to the first page of the document. These objects shall be numbered sequentially, starting at the  first object number after the last number of the second group. (The stream containing the hint tables, called  a hint stream , may be numbered out of sequence; see  F.3.6, \"Hint Streams (Parts 5 and 10)\" .  The second group shall consist of a ll remaining objects in the document,  including all pages after the first,  all shared objects (objects referenced from more than  one page, not counting objects referenced from the  first page), and so forth. These objects sha ll be numbered sequentially starting at 1.  These groups of objects shall be indexed by exactl y two cross-reference table sections. For pedagogical  reasons the linearized PDF is considered to be composed from 11 parts, in order, and the composition of these  groups is discussed in more detail in the sections that  follow. All objects shall have a generation number of 0.  Beginning with PDF 1.5, PDF files may contain object streams (see  7.5.7, \"Object Streams\" ). In linearized files  containing object strea ms, the following conditions shall apply:  These additional objects may not be contained in an object stream: the linearization dictionary, the  document catalogue, and page objects.  Objects stored within object streams shall be give n the highest range of object numbers within the main  and first-page cross-reference sections.  For files containing object streams, hint data may sp ecify the location and size of the object streams only  (or uncompressed objects), not the individual compre ssed objects. Similarly, shared object references  shall be made to the object stream containing a compressed object, not to the compressed object itself.  Cross-reference streams ( 7.5.8, \"Cross-Reference Streams\" ) may be used in place of traditional cross- reference tables. The logic describe d in this sub-clause shall still apply, with the appropriate syntactic  changes. EXAMPLE 1 Part 1: Header % PDF-1 . 1 %   Binary characters  EXAMPLE 2 Part 2: Linearization parameter dictionary 43 0 obj << /Linearized  1.0 % Version  /L 54567 % File length  /H [ 475  598  ] % Primary hint stream offset and length ( part 5 ) /O 45% Object number of first pages page object ( part 6 ) /E 5437 % Offset of end of first page  /N 11 % Number of pages in document",""],"686":["PDF 32000-1:2008 678 ' Adobe Systems Incorporated 2008  All rights reserved  /T 52786 % Offset of first entry in main cross-reference table ( part 11 )>>endobj EXAMPLE 3 Part 3: First-page cross-reference table and trailer xref43 140000000052  00000  n0000000392  00000  n0000001073  00000  n Cross-reference entries for remaining objects in the first page  0000000475  00000  ntrailer << /Size 57% Total number of cross-reference table entries in document  /Prev 52776 % Offset of main cross-reference table ( part 11 ) /Root 44 0 R % Indirect reference to catalogue ( part 4 )  Any other entries, such as Info and Encrypt  % (part 9 )>>% Dummy cross-reference table offset startxref 0% % EOFEXAMPLE 4 Part 4: Document catalogue and other required document-level objects 44 0 obj<< /Type  /Catalog  /Pages  42 0 R>>endobj  Other objects  EXAMPLE 5 Part 5: Primary hint stream (may precede or follow  part 6 )56 0 obj<< /Length  457","  Possibly other stream attributes, such as Filter   /S 221 % Position of shared object hint table   Possibly entries for other hint tables  >>stream Page offset hint table   Shared object hint table   Possibly other hint tables  endstream endobj EXAMPLE 6 Part 6: First-page section (may precede or follow  part 5 )45 0 obj<< /Type  /Page>>endobj  Outline hierarchy (if the  PageMode value in the document catalog is  UseOutlines)   Objects for first page, including both shared and nonshared objects  EXAMPLE 7 Part 7: Remaining pages 1 0 obj << /Type  /Page",""],"687":["' Adobe Systems Incorporated 2008  All rights reserved 679PDF 32000-1:2008   Other page attributes, such as MediaBox, Parent, and Contents  >>endobj  Nonshared objects for this page   Each successive page followed by its nonshared objects   Last page followed by its nonshared objects  EXAMPLE 8 Part 8: Shared objects for all pages except the first  Shared objects  EXAMPLE 9 Part 9: Objects not associated with pages, if any  Other objects  EXAMPLE 10 Part 10: Overflow hint stream (optional)  Overflow hint stream  EXAMPLE 11 Part 11: Main cross-refe rence table and trailer xref0 430000000000  65535  f Cross-reference entries for all except first pages objects  trailer << /Size 43 >> % Trailer need not contain other entries; in particular, % it should not have a Prev entry % Offset of first-page cross-reference table ( part 3 )startxref 257 % % EOFF.3.2 Header (Part 1) The Linearized PDF file shall begin with the standard header line (see  7.5.2, \"File Header\" ). Linearization is  independent of PDF version number and may be applied to any PDF file of version 1.1 or greater.  The binary characters following the PERCENT SIGN (25h)  on the second line are characters with codes 128 or  greater, as recommended in  7.5.2, \"File Header\" . F.3.3 Linearization Parameter Dictionary (Part 2) Following the header, the first object in the body of the file ( part 2 ) shall be an indirect dictionary object, the  linearization parameter dictionary , which shall contain the parameters listed in  Ta b l e  F. 1 . All values in this dictionary shall be direct objects. There shall be no  references to this dictiona ry anywhere in the document;  however, the first-page cross-reference table ( part 3 ) shall contain a normal entry for it.  The linearization parameter dictionary shall be entirely  contained within the first 1024  bytes of the PDF file. This  limits the amount of data a conforming reader must re ad before deciding whether the file is linearized.",""],"688":["PDF 32000-1:2008 680 ' Adobe Systems Incorporated 2008  All rights reserved F.3.4 First-Page Cross-Reference Table and Trailer ( Part 3)Part 3 shall contain the cross-reference table for objects belonging to the first page (discussed in  F.3.4, \"First- Page Cross-Reference Table and Trailer (Part 3)\" ) as well as for the document catalogue and document-level  objects appearing before the first page (discussed in  F.3.5, \"Document Catalogue and Document-Level Objects  (Part 4)\" ). Additionally, this cross-reference table shall cont ain entries for the linearization parameter dictionary  (at the beginning) and the primary hint stream (at the end) . This table shall be a valid cross-reference table as  defined in  7.5.4, \"Cross-Reference Table\" , although its position in the file shall not be at the end of the file. It  shall consist of a single  cross-reference subsection that has no free entries.  In PDF 1.5 and later, cross-reference streams (see  7.5.8, \"Cross-Reference Streams\" ) may be used in  linearized files in place of traditiona l cross-reference tables. The logic described in this section, along with the  appropriate syntactic cha nges for cross-reference st reams shall still apply.  Table  F. 1    Entries in the lineariza tion parameter dictionary   Parameter Type Value Linearized number (Required)  A version identification for the linearized format.  Linteger (Required)  The length of the entire file in bytes. It shall be exactly  equal to the actual length of the PD F file. A mismatch indicates that  the file is not linearized and shall be treated as ordinary PDF, ignoring  linearization information. (If the mismatch resulted from appending an  update, the linearization information may still be correct but requires  validation; see  G.7, \"Accessing an Updated File\"  for details.)  Harray(Required)  An array of two or four integers, [  offset 1 length 1 ] or  [ offset1 length 1 offset 2 length 2 ].  offs et 1 shall be the offset of the  primary hint stream from the beginning of the file. (This is the  beginning of the stream object, not  the beginning of the stream data.)  length 1 shall be the length of this stream, including stream object  overhead.  If the value of the primary hint stream dictionarys  Length  entry is an  indirect reference, the object it re fers to shall immediately follow the  stream object, and  length 1 also shall include the length of the indirect  length object, includin g object overhead.  If there is an overflow hint stream,  offset2 and  length 2 shall specify its  offset and length.  Ointeger (Required)   The object number of the first pages page object.  Einteger (Required)   The offset of the end of  the first page (the end of  EXAMPLE  6 in  F.3.1, \"General\" ), relative to the beginning of the file.  Ninteger (Required)   The number of pages in the document.  Tinteger (Required)  In documents that use standard main cross-reference  tables (including hybrid-reference files; see  7.5.8.4, \"Compatibility with  Applications That Do Not Support Compressed Reference Streams\" ), this entry shall represent the offs et of the white-space character  preceding the first entry of the main  cross-reference table (the entry for  object number 0), relative to the beg inning of the file. Note that this  differs from the  Prev entry in the first-page trailer, which gives the  location of the  xref  line that precedes the table.  (PDF 1.5)  Documents that use cross-re ference streams exclusively  (see 7.5.8, \"Cross-Reference Streams\" ), this entry shall represent the  offset of the main cross-reference stream object.  Pinteger (Optional)   The page number of the first page; see  F.3.4, \"First-Page  Cross-Reference Table and Trailer (Part 3)\" . Default value: 0.",""],"689":["' Adobe Systems Incorporated 2008  All rights reserved 681PDF 32000-1:2008 Below the table shall be the first-page trailer. The trailers  Prev entry shall give the offset of the main cross- reference table near the end of the file. A conforming reader that does not support the linearized feature shall  process this correctly even though the trailers are linked in  an unusual order. It interprets the first-page cross- reference table as an update to an original document that is indexed by the main cross-reference table.  The first-page trailer shall contain valid  Size and Root  entries, as well as any other entries needed to display  the document. The  Size value shall be the combined number of entries in both the first-page cross-reference  table and the main cross-reference table.  The first-page trailer may optionally end with  startxref , an integer, and %%EOF, just as in an ordinary trailer.  This information shall be ignored.  F.3.5 Document Catalogue and Document-Level Objects ( Part 4)Following the first-page cross- reference table and trailer are the catalogue dictionary and other objects that are  required present when the document is open ed. These additional objects (constituting  part 4 ) shall include the  values of the following entries if they are present and are indirect objects:   The conforming reader  Preferences  entry in the catalogue.  The  PageMode entry in the catalogue. Note that if the value of  PageMode  is UseOutlines, the outline  hierarchy shall be located in  part 6 ; otherwise, the outline hierarchy, if any, shall be located in  part 9 . See F.3.10, \"Other Objects (Part 9)\"  for details.  The  Threads  entry in the catalogue, along with all thread dictionaries it refers to. This does not include the  threads information dictionaries or the individua l bead dictionaries belonging to the threads.  The  OpenAction  entry in the catalogue.  The  AcroForm entry in the catalogue. Only th e top-level interactive form dictionary shall be present, not  the objects that it refers to.  The  Encrypt entry in the first-page trailer  dictionary. All values in the en cryption dictionary shall also be  located here.  All other objects shall not be located here but instead shall be at the end of the file; see  F.3.10, \"Other Objects  (Part 9)\" . This includes objects such as page tree no des, the document information dictionary, and the  definitions for named destinations.  NOTE The objects located here are indexed by the first-page cross-reference table, even though they are not logically  part of the first page.  F.3.6 Hint Streams (Parts  5 and 10)The core of the linearization information sh all be stored in data structures known as  hint tables , whose format is  described in  F.4, \"Hint Tables.\"  They shall provide indexing information  that enables the conforming reader to  construct a single request for all the objects that are need ed to display any page of the document or to retrieve  other information efficiently. The hint tables may co ntain additional information to optimize access by  conforming writer extensions  to application-specific data.  The hint tables shall not be logically part of the inform ation content of the document; they shall be derived from  the document. Any action that changes the documentfor instance, appending an incremental  updateinvalidates the hint tables . The document remains a valid PDF file but is no longer linearized; see  G. 7 ,   \"Accessing an Updated File\"  for details.  The hint tables are binary data structures that shall be  enclosed in a stream object. Syntactically, this stream  shall be a PDF indirect object. Howeve r, there shall be no references to the stream anywhere in the document.",""],"690":["PDF 32000-1:2008 682 ' Adobe Systems Incorporated 2008  All rights reserved Therefore, it is not logically part  of the document, and an operation that  regenerates the document may remove  the stream. Usually, all the hint tables shall be cont ained in a single stream, known as the  primary hint stream . Optionally,  there may be an additional stream containing more hints, known as the  overflow hint stream . The contents of  the two hint streams shall be concatenated and tr eated as if they were a single unbroken stream.  The primary hint stream, which shall be required, is shown as  part 5  in Example 5 . The order of this part and  the first-page section, shown as  part 6 , may be reversed; see  Annex G for considerations on the choice of  placement. The overflow hint stream,  part 10 , is optional.  The location and length of the primary hint stream, and of  the overflow hint stream if present, shall be given in  the linearization parameter dictionary  at the beginning of the file.  The hint streams shall be assigned the last object nu mbers in the filethat is, after the object number for the  last object in the first page. Their cross-reference table entries shall be at the end of the first-page cross- reference table. This object number assignment shall  be independent of the physical locations of the hint  streams in the file.  NOTE This convention keeps their object numbers from co nflicting with the numbering of the linearized objects.  With one exception, the values of all entries in the hint  streams dictionaries shall be direct objects and may  contain no indirect object references. T he exception is the stream dictionarys  Length  entry (see the discussion  of the H entry in  Table  F. 1 ).In addition to the standard stream attributes, the dictionary of the primary hint stream shall contain entries  giving the position of the beginning of  each hint table in the stream. These positions shall be counted in bytes  relative to the beginning of th e stream data (after decoding filters, if any, are applied) and with the overflow hint  stream concatenated if present. The dictionary of the ov erflow hint stream shall not contain these entries. The  keys designating the standard hint tables in the primary hint streams dictionary are listed in  Ta b l e  F. 2 ; F.4, \"Hint  Ta b l e s , \"  documents the format of these hint ta bles. Additionally, there is a requir ed page offset hint table, which  shall be the first table in the stream and shall start at offset 0.  Table  F. 2    Standard hint tables   KeyHint table S(Required)  Shared object hint table (see  F.4.2, Shared Object Hint  Table )T(Present only if thumbnail images exist)  Thumbnail hint table (see  F.4.3,  \"Thumbnail Hint Table\" )O(Present only if a document outline exists)  Outline hint table (see  F.4.4,  Generic Hint Tables )A(Present only if article threads exist)  Thread information hint table (see  F.4.4, Generic Hint Tables )E(Present only if named destinations exist)  Named destination hint table  (see F.4.4, Generic Hint Tables )V(Present only if an interact ive form dictionary exists)  Interactive form hint  table (see  F.4.5, Extended Generic Hint Tables )I(Present only if a document information dictionary exists)  Information  dictionary hint table (see  F.4.4, Generic Hint Tables )C(Present only if a logical st ructure hierarchy exists; PDF  1.3)  Log ical  structure hint table (see  F.4.5, Extended Generic Hint Tables )L(PDF 1.3) Page  label hint table (see  F.4.4, Generic Hint Tables )",""],"691":["' Adobe Systems Incorporated 2008  All rights reserved 683PDF 32000-1:2008 New keys may be registered for additional hint tables required application-specific data accessed by  conforming writer extensions. See  Annex E for further information.  F.3.7 First-Page Section ( Part 6)This part of the file contains all the objects needed to  display the first page of the do cument. Ordinarily, the first  page is page 0that is, the leftmost leaf page node in the page tree. However, if the document catalogue  contains an  OpenAction  entry that specifies opening at some page other than page 0, that page shall be considered the first page and shall be located here. The page number of the first page is given in the  P entry of  the linearization parameter dictionary. NOTE As mentioned earlier, the section containing objects  belonging to the first page of the document may either  precede or follow the primary hint stream. The starting f ile offset and length of this section can be determined  from the hint tables. In addition, the  E entry in the linearization parameter dictionary specifies the end of the  first page (as an offset relative to the beginning of the file), and the  O entry gives the object number of the first  pages page object.  The following objects shall be contained in the first-page section:   The page object for the first page. This object shall be th e first one in this part of the file. Its object number  is given in the linearization parameter dictionary. Th is page object shall explic itly specify all required attributes, such as  Resources  and  MediaBox ; the attributes may not be inherited from ancestor page tree  nodes.   The entire outline hierarchy, if the value of the  PageMode entry in the catalogue is UseOutlines. If the  PageMode  entry is omitted or has some other value an d the document has an outline hierarchy, the  outline hierarchy shall appear in  part 9 ; see F.3.10, \"Other Objects (Part 9)\"  for details.  All objects that the page object refers to, to an arbitrary depth, except page tree nodes or other page  objects. This shall include objects referred to by its  Contents , Resources , Annots , and  B entries, but not  the Thumb  entry.  The order of objects referenced from  the page object should facilitate earl y user interaction and incremental  display of the page data as it arrives. The following order should be used:  a) The  Annots  array and all annotation dictionaries, to a depth sufficient for those annotations to be  activated. Information required to draw the annotatio n may be deferred until later since annotations are  always drawn on top of (hence after) the contents.  b) The  B (beads) array and all bead dictionaries, if any,  for this page. If any beads exist for this page, the  Barray shall be present in the page dictionary. Additionally , each bead in the thread (not just the first bead)  shall contain a  T entry referring to the associated thread dictionary.  c) The resource dictionary, but not the resource objects contained in the dictionary.  d) Resource objects, other than the types listed below, in  the order that they are first referenced (directly or  indirectly) from the content stream. If the contents are  represented as an array of streams, each resource  object shall precede the stream in whic h it is first referenced. Note that  Font , FontDescriptor , and  Encoding  resources shall be included here, but not substitutable font files referenced from font descriptors  (see item  (g)  below). R(Present only if a renditions name tree exists; PDF  1.5)  Rend itions  name tree hint table (see  F.4.5, Extended Generic Hint Tables )B(Present only if embedded file streams exist; PDF  1.5) Emb edded file  stream hint table (see  F.4.6, Embedded File Stream Hint Tables )Table F.2   Standard hint tables  (continued) Key Hint table",""],"692":["PDF 32000-1:2008 684 ' Adobe Systems Incorporated 2008  All rights reserved e) The page contents ( Contents ). If large, this should be represented as an array of indirect references to  content streams, which in  turn shall be interleaved with the resources they require. If small, the entire  contents should be a single content stream preceding the resources.  f) Image XObjects, in the order that they are first referenced. Images can be assumed to be large and slow to  transfer; therefore, the conforming reader should de fer rendering images until all the other contents have  been displayed.  g)Fon tFile  streams, which contain the actu al definitions of embedded font s. These can be assumed to be  large and slow to transfer; therefore, the conforming re ader should use substitute fonts until the real ones  have arrived. Only those fonts for which substitution is  possible may be deferred in  this way. (Currently, this  includes any Type 1 or TrueType font that has a font  descriptor with the Nonsymbolic flag set, indicating  the Adobe standard Latin character set).  See Annex G  for additional discussion about object order and incremental drawing strategies.  F.3.8 Remaining Pages ( Part 7)Part 7 of the Linearized PDF file shall contain the page objects and nonshared objects for all remaining pages  of the file, with the objects for each page grouped to gether. The pages shall be contiguous and shall be ordered  by page number. If the first page of the file is not page 0, this section shall start with page 0 and shall skip over  the first page when its position in the sequence is reached.  For each page, the objects required to display that page shall be grouped together, except for resources and  other objects that are shared with ot her pages. Shared objects shall be located in the shared objects section  (part 8 ). The starting file offset and length of any page can be determined from the hint tables.  The recommended order of objects within a page is essentia lly the same as in the first page. In particular, the  page object shall be the first object in each section.  In most cases, unlike for the first page, little benefit is  gained from interleaving contents with resources because  most resources other than imagesfonts in particular are shared among multiple pages and therefore reside  in the shared objects section. Image XObjects usually ar e not shared, but they should  appear at the end of the  pages section of the file, since  rendering of images is deferred.  F.3.9 Shared Objects ( Part 8)Part 8 of the file contains objects, primarily named resource s, that are referenced from more than one page but  that are not referenced (directly or indirectly) from th e first page. The hint tables  contain an index of these  objects. For more information on named resources, see  7.8.3, \"Resource Dictionaries\" . The order of these objects shall be arbitrary. However,  wherever a resource consists of a multiple-level  structure, all components of the structure shall be gr ouped together. If only the top-level object is referenced  from outside the group, the entire group may be described by a single entry in the shar ed object hint table. This  helps to minimize the size of the shar ed object hint table and the number of individual references from entries in  the page offset hint table.  F.3.10 Other Objects ( Part 9)Following the shared objects are any other objects that are part of the document but are not required for  displaying pages. These objects shall be divided into  functional categories. Objects within each of these  categories should be grouped together; the relative order of the categories is unimportant.  Th e page tree . This object can be located in  this section because the conf orming reader never needs to  consult it. Note that all  Resources  attributes and other inheritable attributes of the page objects shall be  pushed down and replicated in each of the leaf page ob jects (but they may contain indirect references to  shared objects).",""],"693":["' Adobe Systems Incorporated 2008  All rights reserved 685PDF 32000-1:2008 Thumbnail images . These objects shall simply be ordered by page number. (The thumbnail image for page  0 shall be first, even if the first page of the docu ment is some page other than 0.) Each thumbnail image  consists of one or more objects, which may refer to  objects in the thumbnail  shared objects section (see  the next item).  Th umbnail shared objects . These are objects that shall be shared among some or all thumbnail images  and shall not be referenced from any other objects.  T he outline hierarchy , if not located in  part 6 . The order of objects shall be the same as the order in which  they shall be displayed by the conforming reader. This  is a preorder traversal of the outline tree, skipping  over any subtree that is cl osed (that is, whose parents  Count  value is negative). Following that shall be  the subtrees that were skipped over, in the order in  which they would have appeare d if they were all open.  Th read information dictionaries , referenced from the  I entries of thread dictionaries. Note that the thread  dictionaries themselves shall be located with the do cument catalogue and the bead dictionaries with the  individual pages.  Name d destinations . These objects include the value of the  Dests  or  Names entry in the document  catalogue and all the destination objects that it refers to; see  G.3, \"Opening at an Arbitrary Page\" .Th e document information dictionary  and the objects contained within it.  Th e interactive form field hierarchy . This group of objects shall not in clude the top-level interactive form  dictionary, which is located with the document catalogue.  O ther entries  in the document catalogue that are not referenced from any page.  ( PDF 1.3) The logical structure hierarchy .  (PDF 1.5) The renditions name tree hierarchy.   (PDF 1.5) Embedded file streams. F.3.11 Main Cross-Reference and Trailer ( Part 11 )Part 11  is the cross-reference table for all objects in the PDF file except those listed in the first-page cross- reference table ( part 3 ). As indicated earlier, this cross-reference table shall play the role of the original cross- reference table for the file (before any updates are appended) and shall conform to the following rules:   It consists of a single cross-reference subsection, beginning at object number 0.   The first entry (for object number 0) shall be a free entry.   The remaining entries are for in-use  objects, which shall be numbered  consecutively, starting at 1.  The  st artxref  line shall give the offset of the first-page cross-reference table. The  Prev entry of the first-page  trailer shall give the offset of the main cross-reference table. The main trailer has no  Prev entry and shall not  contain any entries other than  Size . In PDF 1.5 and later, cross-reference streams (see  7.5.8, \"Cross-Reference Streams\" ) may be used in  linearized files in place of traditional cross-reference ta bles. The logic described in this sub-clause, along with  the appropriate syntactic  changes for cross- reference streams, still applies.",""],"694":["PDF 32000-1:2008 686 ' Adobe Systems Incorporated 2008  All rights reserved F. 4 H i n t  Ta b l e s The core of the linearization information shall be stored in  two or more hint tables, as indicated by the attributes  of the primary hint stream; see  F.3.6, \"Hint Streams (Parts 5 and 10)\" . The format of the standard hint tables is  described in this section.  A conforming writer may add additional hint tables for con forming reader-specific data. A generic format for  such hint tables is defined; see  F.4.4, \"Generic Hint Tables.\"  Alternatively, the format  of a hint table can be  private to the conforming reader; see  Annex E  for further information.  Each hint table shall consist of a portion of the stream,  beginning at the position in  the stream indicated by the  corresponding stream attribute. Additionally, a conforming  writer shall include a page offset hint table, which  shall be the first table in the stream and shall start at of fset 0. If there is an overflow hint stream, its contents  shall be appended seamlessly to the primary hint stream.  NOTE 1 Hint table positions are relative to the beginning of this combined stream. In general, this byte stream shall be treated as a bit st ream, high-order bit first, which shall then subdivided into  fields of arbitrary width without regard to byte bounda ries. However, each hint table shall begin at a byte  boundary.  NOTE 2 The hint tables are designed to encode the required information as compactly as possible. Interpreting the hint  tables requires reading them sequentially; they are not designed for random access.  The conforming reader shall be expected to read and decode the tables once and retain the information for as  long as the document remains open.  NOTE 3 A hint table encodes the positions of various objects in  the file. The representation is  either explicit (an offset  from the beginning of the file) or implicit  (accumulated lengths of preceding objects).  Regardless of the representation, the resulting positions shall be interpreted as if the primary hint stream itself  were not present. That is, a position greater than the  hint stream offset  shall have the  hint stream length  added  to it to determine the actual offset  relative to the beginning of the file.  NOTE 4 The hint stream offset and hint stream le ngth are the values offset1 and length1 in the  H array in the  linearization parameter dictionary at the beginning of the file. The reason for this rule is that the length of the pr imary hint stream depends on the information contained  within the hint tables, which is not known until afte r they have been generated. Any information contained in  the hint tables shall not depend on knowing th e primary hint streams length in advance.  Note that this rule applies only to offs ets given in the hint tables and not to offsets given in the cross-reference  tables or linearization parameter dictionary. Also, the offset  and length of the overflow  hint stream, if present,  does not be taken into account, since this  object follows all other objects in the file.  In linearized files that use object streams ( 7.5.7, \"Object Streams\" ), the position specified in a hint table for a  compressed object is to be interpreted as a byte rang e in which the object can  be found, not as a precise  offset. conforming readers should locate the object via a  cross-reference stream, as it would if the hint table  were not present. F.4.1 Page Offset Hint Table The page offset hint table provides information requir ed for locating each page. Additionally, for each page  except the first, it also enumerates all shared object s that the page references, directly or indirectly.  This table shall begin with a header section, described in  Ta b l e  F. 3 , followed by one or more per-page entries,  described in  Ta b l e  F. 4 . NOTE The items making up each per-page en try are not contiguous; they are br oken up with items from entries for  other pages.",""],"695":["' Adobe Systems Incorporated 2008  All rights reserved 687PDF 32000-1:2008 The order of items making up the per-page entries shall be as follows:  a) Item 1 for all pages, in page  order starting with the first page  b) Item 2 for all pages, in page  order starting with the first page  c) Item 3 for all pages, in page order starting with the first page  d) Item 4 for all shared objects in the second page, followe d by item 4 for all shared objects in the third page,  and so on  e) Item 5 for all shared objects in the second page, followe d by item 5 for all shared objects in the third page,  and so on  f) Item 6 for all pages, in page order starting with the first page  g) Item 7 for all pages, in page  order starting with the first page  All the items in Table  F. 3  that specify a number of bits needed, such  as item 3, have values in the range 0  through 32. Although that range requires only 6 bits, 16-bit numbers shall be used.  Table  F. 3    Page offset hint table, header section   Item Size (bits) Description 132The least number of objects in a page  (including the page object itself).  232The location of the first pages page object.  316The number of bits needed to represent the difference between the  greatest and least number of objects in a page.  432The least length of a page in bytes. This shall be the least length from  the beginning of a page object to the last byte of the last object used  by that page.  516The number of bits needed to represent the difference between the  greatest and least length of a page, in bytes.  632The least offset of the start of any content stream, relative to the  beginning of its page.  716The number of bits needed to represent the difference between the  greatest and least offset to th e start of the content stream.  832The least content stream length.  916The number of bits needed to represent the difference between the  greatest and least content stream length.  1016The number of bits needed to represent the  greatest number of shared  object references.  1116The number of bits needed to r epresent the numerically greatest  shared object identifier used by the pages (discussed further in  Table  F. 4 , item 4).",""],"696":["PDF 32000-1:2008 688 ' Adobe Systems Incorporated 2008  All rights reserved 1216The number of bits needed to represent the numerator of the fractional  position for each shared object reference. For each shared object  referenced from a page, there shall be an indication of where in the  pages content stream the object is fi rst referenced. That  position shall be given as the numerator of a  fraction, whose denominator is  specified once for the entire document (in the next item in this table).  The fraction is explained in more detail in  Table  F. 4 , item 5.  1316The denominator of the fractional positio n for each shared object  reference. Table  F. 4    Page offset hint table, per-page entry   ItemSize (bits) Description 1See Ta b l e  F. 3 , item  3A number that, when added to the least number of objects in a page  (Ta b l e  F. 3 , item 1), shall give the number of objects in the page. The  first object of the first page shall  have an object number that is the  value of the  O entry in the linearization parameter dictionary at the  beginning of the file. The first object of the second page shall have an  object number of 1. Object num bers for subsequent pages shall be  determined by accumulating the number of objects in all previous  pages.  2See Ta b l e  F. 3 , item  5A number that, when added to the least page length ( Table  F. 3 , item  4), shall give the length of the page in bytes. The location of the first  object of the first page may be dete rmined from its object number (the  O entry in the linearization parameter dictionary) and the cross- reference table entry for that object; see  F.3.4, \"First-Page Cross- Reference Table and Trailer (Part 3)\" . The locations of subsequent  pages shall be determined by accumulating the lengths of all previous  pages. A conforming product shall ski p over the primary hint stream,  wherever it is located.  3See Ta b l e  F. 3 , item  10The number of shared objects referenced from the page. For the first  page, this number shall be 0; the  next two items start with the second  page.  4See Ta b l e  F. 3 , item  11(One item for each shared object referenced from the page)  A shared object identifier that is, an index into t he shared object hint table  (described in  F.4.2, Shared Object Hint Table ). A single entry in the  shared object hint table may designat e a group of shared objects, but  only one of which shall be referenc ed from outside the group. That is,  shared object identifiers shall not be directly related to object numbers.  This identifier combines with the num erators provided in item 5 to form  a shared object reference . Table F.3   Page offset hint ta ble, header section  (continued) Item Size (bits) Description",""],"697":["' Adobe Systems Incorporated 2008  All rights reserved 689PDF 32000-1:2008 F.4.2 Shared Object Hint Table The shared object hint table gives information required to locate shared objects; see  F.3.9, \"Shared Objects  (Part 8)\" . Shared objects may be physically lo cated in either of two places: objects that are referenced from the  first page shall be located with the first-page objects ( part 6 ); all other shared objects shall be located in the  shared objects section ( part 8 ). A single entry in the shared object hint table may describe a group of adjacent objects under the following  condition: Only the first object in the group is referenced from outside  the group; the remaining objects in the  group are referenced only from other objects in the same group. The objects in a group shall have adjacent  object numbers.  The page offset hint table, interactive form hint table, an d logical structure hint table shall refer to an entry in the  shared object hint table by a simple index that is its  sequential position in the table, counting from 0.  The shared object hint table shall consist of a header section ( Ta b l e  F. 5 ) followed by one or more shared object  group entries ( Ta b l e  F. 6 ). There shall be two sequences of shared object group entries: the ones for objects  located in the first page, followed by the ones for objects located in the shared objects section. The entries shall  have the same format in both cases. Note that the item s making up each shared object group entry need not be  5See Ta b l e  F. 3 , item 12(One item for each shared object referenced from the page)  The numerator of the fractional position for each shared object reference,  which shall be in the same order  as the preceding item. The fraction  shall indicate where in the pages c ontent stream the shared object is  first referenced. This item shall be interpreted as the numerator of a  fraction whose denominator is s pecified once for the entire document  (Ta b l e  F. 3 , item 13). EXAMPLE If the denominator is  d, a numerator ranging from 0  to d - 1 indicates the corresponding portion of the  pages content stream. For example, if the  denominator is 4, a numera tor of 0, 1, 2, or 3  indicates that the first reference lies in the first,  second, third, or fourth  quarter of the content  stream, respectively.  There are two (or more) other possible values for the numerator, which  shall indicate that the shared object is not referenced from the content  stream but instead is needed by annot ations or other objects that are  drawn after the contents. The value  d shall indicate that the shared  object is needed before image XObj ects and other nonshared objects  that are at the end of the page. A value of  d  1 or greater shall  indicate that the shared object  is needed after those objects.  NOTE This method of dividing t he page into fractions is only  approximate. Determining the first reference to a shared  object entails inspecting t he unencoded content stream.  The relationship between positions in the unencoded and  encoded streams is not necessarily linear.  6See Ta b l e  F. 3 , item 7A number that, when added to the least offset to the start of the  content stream (Table  F. 3 , item 6), shall give the offset in bytes of the  start of the pages content stream (t he stream object, not the stream  data), relative to the beginning of the page.  7See Ta b l e  F. 3 , item 9A number that, when added to t he least content stream length  (Ta b l e  F. 3 , item 8), shall give the length of the pages content stream in  bytes. This length shall include object overhead preceding and  following the stream data.  Table F.4   Page offset hint table, per-page entry  (continued) Item Size (bits) Description",""],"698":["PDF 32000-1:2008 690 ' Adobe Systems Incorporated 2008  All rights reserved contiguous; they may be broken up with items from entries  for other shared object groups. The order of items in  each sequence shall be as follows:  a) Item 1 for the first group, item 1 for the second group, and so on  b) Item 2 for the first group, item 2 for the second group, and so on  c) Item 3 for the first group, item 3 for the second group, and so on  d) Item 4 for the first group, item 4 for the second group, and so on  All objects associated with the first page ( part 6 ) shall have entries in the shared object hint table, regardless of  whether they are actually shared. The first entry shall refe r to the beginning of the first page and shall be have  an object count and length that shall span all the initial nonshared objects. The next entry shall refer to a group  of shared objects. Subsequent entries shall span additi onal groups of either shared or nonshared objects  consecutively until all shared objects in the first page have been enumerated. (There shall not be any entries  that refer to nonshared objects.)  Table  F. 5    Shared object hint table, header section   item Size (bits) Description 132The object number of the first objec t in the shared objects section ( part  8). 232The location of the first object in the shared objects section.  332The number of shared object entries for the first page (including  nonshared objects, as noted above).  432The number of shared object entries for the shared objects section,  including the number of shared object entries for the first page (that is,  the value of item 3).  516The number of bits needed to repres ent the greatest number of objects  in a shared object group. 632The least length of a shared object group in bytes.  716The number of bits needed to represent the difference between the  greatest and least length of a  shared object group, in bytes.  Table  F. 6    Shared object hint table, shared object group entry   ItemSize (bits) Description 1See Table  F. 5 , item 7A number that, when added to the least shared object group length  (Table  F. 5 , item 6), gives the length of the object group in bytes. The  location of the first object of the first page shall be given in the page  offset hint table, header section ( Ta b l e  F. 3 , item 4). The locations of  subsequent object groups can be determined by accumulating the  lengths of all previous object groups until all shared objects in the first  page have been enumerated. Followi ng that, the location of the first  object in the shared objects sect ion can be obtained from the header  section of the shared object hint table ( Table  F. 5 , item 2).  21A flag indicating whether the shared object signature (item 3) is  present; its value shall be 1 if the  signature is present  and 0 if it is  absent.",""],"699":["' Adobe Systems Incorporated 2008  All rights reserved 691PDF 32000-1:2008 NOTE In a document consisting of only one  page, all of that pages objects shall be  treated as if they were shared; the  shared object hint table reflects this. F.4.3 Thumbnail Hint Table The thumbnail hint table shall consist of a header section ( Table  F. 7 ) followed by the thumbn ails section, which  shall include one or more per-page entries ( Ta b l e  F. 8 ), each of which describes the thumbnail image for a  single page. The entries shall be in page number orde r starting with page 0, even if the document catalogue  contains an  OpenAction  entry that specifies opening at some page other than page 0. Thumbnail images may  exist for some pages and not for others.  3128(Only if item 2 is 1)  The shared object signature , a 16-byte MD5 hash  that uniquely identifies the re source that the group of objects  represents.  NOTE It enables the conforming reader to substitute a locally  cached copy of the resource instead of reading it from the  PDF file. Note that this signature is unrelated to signature  fields in interactive forms, as defined in  12.7.4.5,  \"Signature Fields\" . 4See Table  F. 5 , item  5A number equal to 1 less than the number of objects in the group. The  first object of the first page shall be the one whose object number is  given by the  O entry in the linearization parameter dictionary at the  beginning of the file. Object numbers for subsequent entries can be  determined by accumulating the number of objects in all previous  entries until all shared objects in the first page have been enumerated.  Following that, the first object in the shared objects section has a  number that can be obtained from t he header section of the shared  object hint table ( Ta b l e  F. 5 , item 1). Table  F. 7    Thumbnail hint table, header section   Item Size (bits) Description 132The object number of the first thum bnail image (that is, the thumbnail  image that is described by the first  entry in the thumbnails section).  232The location of the first thumbnail image.  332The number of pages that have thumbnail images.  416The number of bits needed to  represent the greatest number of  consecutive pages that do not  have a thumbnail image.  532The least length of a thumbnail image in bytes.  616The number of bits needed to represent the difference between the  greatest and least length of a thumbnail image.  732The least number of objects in a thumbnail image.  816The number of bits needed to represent the difference between the  greatest and least number of objects in a thumbnail image.  932The object number of the first objec t in the thumbnail shared objects  section (a subsection of  part 9 ). This section includes objects (colour  spaces, for example) that shall be referenced from some or all  thumbnail objects and are not referenced from any other objects. The  thumbnail shared objects shall be  undifferentiated; there is no  indication of which shared objects shall be referenced from any given  pages thumbnail image.  Table F.6   Shared object hint table,  shared object group entry  (continued) Item Size (bits) Description",""],"700":["PDF 32000-1:2008 692 ' Adobe Systems Incorporated 2008  All rights reserved The order of items in  Ta b l e  F. 8  is as follows:  a) Item 1 for all pages, in page order starting with the first page  b) Item 2 for all pages, in page order starting with the first page  c) Item 3 for all pages, in page order starting with the first page  F.4.4 Generic Hint Tables Categories of objects are associated with the document  as a whole rather than with individual pages (see  F.3.10, \"Other Objects (Part 9)\" ), and hints should be provided for accessing those objects efficiently. For each  category of hints, there shall be a separate entry in the  primary hint stream giving th e starting position of the  table within the stream; see  F.3.6, \"Hint Streams (Parts 5 and 10)\" . Such hints shall be represented by a generic hint table,  which describes a single group of objects that are  located together in the PDF file. The  entries in this table are listed in  Table  F. 9 . This representation shall be  used for the following hint tables, if needed:  Outline hint table  Thread information hint table  Named destination hint table  Information dictionary hint table  Page label hint table Generic hint tables may be used for product-sp ecific objects accessed by conforming readers.  NOTE It is considerably more convenient for a conforming  reader to use the generic hint representation than to  specify custom hints. 1032The location of the first object in  the thumbnail shared objects section.  1132The number of thumbnail shared objects.  1232The length of the thumbnail shared objects section in bytes.  Table  F. 8    Thumbnail hint table, per-page entry   ItemSize (bits) Description 1See Ta b l e  F. 7 , item 4(Optional)  The number of preceding pages lacking a thumbnail image.  This number indicates how many p ages without a thumbnail image lie  between the previous entrys page and this page.  2See Ta b l e  F. 7 , item 8A number that, when added to the least number of objects in a  thumbnail image ( Table  F. 7 , item 7), gives the number of objects in this  pages thumbnail image.  3See Ta b l e  F. 7 , item 6A number that, when added to the l east length of a thumbnail image  (Ta b l e  F. 7 , item 5), gives the length of this pages thumbnail image in  bytes. Table F.7   Thumbnail hint tabl e, header section  (continued) Item Size (bits) Description",""],"701":["' Adobe Systems Incorporated 2008  All rights reserved 693PDF 32000-1:2008 F.4.5 Extended Generic Hint Tables An extended generic hint table shall begin with the same en tries as in a generic hint table, and shall be followed  by three additional entries, as shown in  Ta b l e  F. 1 0 . This table provides hints for accessing objects that  reference shared objects. As of PDF 1.5, the following hi nt tables, if needed, shall use the extended generic  format: Interactive form hint table  Logical structure hint table  Renditions name tree hint table  Embedded file streams shall not be referred to by this  hint table, even if they are reachable from nodes in the  renditions name tree; instead they shall use the hint table described in  F.4.6, \"Embedded File Stream Hint  Ta b l e s . \" F.4.6 Embedded File Stream Hint Tables The embedded file streams hint table a llows a conforming reader to locate all byte ranges of a PDF file needed  to access its embedded file streams. An embedded file stream may be grouped with other objects that it  references; all objects in such a group shall have adjacent  object numbers. (A group shall contain no objects at  all if it contains shared object references.) This hint table shall have a header section (see  Ta b l e  F. 11 ), which shall have genera l information about the embedded file stream groups. The header section shall be followed by the entries in  Table  F. 1 2 . Each of the  items in Ta b l e  F. 1 2  shall be repeated for each embedded file stream group (the number of groups being  represented by item 3 in  Ta b l e  F. 11 ). That is, the order of items in  Ta b l e  F. 1 2  shall be item 1 for the first group,  item 1 for the second group, and so on; item 2 for th e first group, item 2 for the second group, and so on;  repeated for the 5 items. Table  F. 9    Generic hint table   item Size (bits) Description 132The object number of the first object in the group.  232The location of the first object in the group.  332The number of objects in the group.  432The length of the object group in bytes.  Table  F. 1 0    Extended generic hint table   Item Size (bits) Description 132The object number of the first object in the group.  232The location of the first object in the group.  332The number of objects in the group.  432The length of the object group in bytes.  532The number of shared object references.  616The number of bits needed to r epresent the numerically greatest  shared object identifier used by the objects in the group.  7 See Ta b l e  F. 3 , item 11Starting with item 7, each of the rema ining items in this table shall be a  shared object identifie rthat is, an index into the shared object hint  table (described in  F.4.2, Shared Object Hint Table ).",""],"702":["PDF 32000-1:2008 694 ' Adobe Systems Incorporated 2008  All rights reserved Table  F. 11    Embedded file stream hint table, header section   ItemSize (bits) Description 132The object number of the first object in  the first embedded file stream group.  232The location of the first object in t he first embedded file stream group.  332The number of embedded file  stream groups referenced by this hint table.  416The number of bits needed to repr esent the highest object number  corresponding to an embedded file stream object.  516The number of bits needed to represent  the greatest number of objects in an  embedded file stream group.  616The number of bits needed to represent th e greatest length of an embedded file  stream group, in bytes.  716The number of bits needed to represent  the greatest number of shared object  references in any embedded file stream group. Table  F. 1 2    Embedded file stream hint table, per-embedded file stream group entries   ItemSize (bits) Description 1See Ta b l e  F. 11 , item 4The object number of the embedded fi le stream that this entry is  associated with. 2See Ta b l e  F. 11 , item 5The number of objects in this emb edded file streams group. This item  may be 0, meaning that there are only  shared object references. In this  case, item 4 for this group shall be greater than zero and item 3 shall  be zero.3See Ta b l e  F. 11 , item 6The length of this embedded file stream  group, in bytes. This item may  be 0, which shall mean t hat there are only shared object references. In  this case, item 4 for this group shall be greater than zero and item 2  shall be zero. 4See Ta b l e  F. 11 , item 7The number of shared objects refe renced by this embedded file  stream group. 5See Ta b l e  F. 3 , item 11A bit-packed list of shared object identifiers; that is, indices into the  shared object hint table (see  F.4.2, Shared Object Hint Table ). Item 4  for this group shall specify how many  shared object identifiers shall be  associated with the group.",""],"703":["' Adobe Systems Incorporated 2008  All rights reserved 695PDF 32000-1:2008 Annex  G (informative)Linearized PDF Access Strategies G.1 General This section outlines how the conforming reader can take  advantage of the structure of a Linearized PDF file to  retrieve and display it efficientl y. This material may help explain  the rationale for the organization.  G.2 Opening at the First Page As described earlier, when a document is initially access ed, a request is issued to  retrieve the entire file,  starting at the beginning. Consequently, Linearized PDF is  organized so that all the data required to display the  first page is at the beginning of the file. This include s all resources that are referenced from the first page,  regardless of whether they are also referenced from other pages.  The first page is usually but not necessarily page 0. If the document catalogue contains an  OpenAction entry  that specifies opening at some page other than page 0, that page is the one physically located at the beginning  of the document. Thus, opening a document at the defaul t place (rather than a specific destination) requires  simply waiting for the first-page data to arri ve; no additional transactions are required.  In an ordinary conforming reader, opening a document  requires first positioning to the end to obtain the  startxref  line. Since a Linearized PDF file has the first page s cross-reference table at the beginning, reading  the startxref  line is not necessary. All that is required is to ve rify that the file length given in the linearization  parameter dictionary at the beginning of the file matches  the actual length of the file, indicating that no updates  have been appended to the PDF file.  The primary hint stream is located either before or afte r the first-page section, wh ich means that it is also  retrieved as part of the initial sequential read of the  file. The conforming reader is expected to interpret and  retain all the information in the hint tables. The tables are reasonably compact and are not designed to be  obtained from the file in random pieces.  The conforming reader must now decide whether to continue reading the remainder of the document  sequentially or to abort the initial transaction and  access subsequent pages by us ing separate transactions  requesting byte ranges. This decision is a function of th e size of the file, the data  rate of the channel, and the  overhead cost of a transaction.  G.3 Opening at an Arbitrary Page The conforming reader may be requested to open a PDF f ile at an arbitrary page. The page can be specified in  one of three ways:   By page number (remote go-to action, integer page specifier)   By named destination (remote go-to action, nam e or string page specifier)   By article thread (thread action)  Additionally, an indexed search results in opening a docu ment by page number. Handling this case efficiently is  especially important.",""],"704":["PDF 32000-1:2008 696 ' Adobe Systems Incorporated 2008  All rights reserved As indicated above, when the  document is initially opened, it is retrie ved sequentially starting at the beginning.  As soon as the hint tables have been received, the co nforming reader has sufficient information to request  retrieval of any page of the document given its page  number. Therefore, the conf orming reader can abort the  initial transaction and issue a new transaction for the target page, as described in  G.4, \"Going to Another Page  of an Open Document\" .The position of the primary hint stream ( part 5  in F.3.1, \"General\" ) with respect to the  first-page section ( part 6 in F.3.1, \"General\" ) determines how quickly this can be done. If th e primary hint stream precedes the first-page  section, the initial transaction can be aborted very quickl y; however, this is at the cost of increased delay when  opening the document at the first page. On the other h and, if the primary hint stream follows the first-page  section, displaying the first page is  quicker (since the hint tables are no t needed for that), but opening at an  arbitrary page is delayed by the time required to receiv e the first page. The decision whether to favour opening  at the first page or opening at an arbitrary page mu st be made at the time a PDF file is linearized.  If an overflow hint stream exists, obtaining it requ ires issuing an additional tr ansaction. For this reason,  inclusion of an overflow hint stream in Linearized  PDF, although permitted, is not recommended. The feature  exists to allow the linearizer  to write the PDF file with space reserved  for a primary hint stream of an estimated  size and then go back and fill in the  hint tables. If the estimate is t oo small, the lineari zer can append an overflow stream containing the remaining hint table data . Thus, the PDF file can be written in one pass, which  may be an advantage if the performance of writing PDF is considered important.  Opening at a named destination requires the  conforming reader first to read the entire  Dests  or  Namesdictionary, for which a hint is present.  Using this information,  it is possible to determine the page containing the  specific destination identified by the name.  Opening to an article requires the conforming reader first to read the entire  Threads  array, which is located with  the document catalogue at the beginning of the document. Us ing this information, it is  possible to determine the  page containing the first bead of any thread. Opening at other than the first bead of a thread requires chaining  through all the beads until the desired one is reached; there are no hints to accelerate this.  G.4 Going to Another Page of an Open Document Given a page number and the information in the hint tabl es, it is now straightforward for the conforming reader  to construct a single request to retrieve any arbitrar y page of the document. The  request should include the  following items:   The objects of the page itself, whose byte range can be determined from the entry in the page offset hint  table.   The portion of the main cross-reference table referring to those objects. This can be computed from main  cross-reference table location (the  T entry in the linearization parameter dictionary) and the cumulative  object number in the page offset hint table.   The shared objects referenced from the page, whose  byte ranges can be determined from information in  the shared object hint table.   The portion or portions of the main cross-reference  table referring to those objects, as described above.  The purpose of the fractions in the page offset hint ta ble is to enable the conforming reader to schedule  retrieval of the page in a way that allo ws incremental display of the data as  it arrives. It accomplishes this by  constructing a request that interleaves pieces of the page contents with the shared resources that the contents  refer to. This serves much  the same purpose as the physical interleaving that is done for the first page.",""],"705":["' Adobe Systems Incorporated 2008  All rights reserved 697PDF 32000-1:2008 G.5 Drawing a Page Incrementally The ordering of objects in pages and the organization  of the hint tables are intended to allow progressive  update of the display and early oppor tunities for user interaction when  the data is arriving slowly. The  conforming reader must recognize instances in which the targets of indirect object references have not yet  arrived and, where possible, rearrange the order in which it acts on the objects in the page.  The following sequence of actions is recommended: a) Activate the annotations, but do not draw them yet.  Also activate the cursor feedback for any article  threads in the page.  b) Begin drawing the contents. Whenever there is a refe rence to an image XObject that has not yet arrived,  skip over it. Whenever there is a reference to a font wh ose definition is an embedded font file that has not  yet arrived, draw the text using a subs titute font (if that is possible).  c) Draw the annotations.  d) Draw the images as they arrive, toget her with anything that overlaps them.  e) Once the embedded font definitions have arrived, re draw the text using the correct fonts, together with  anything that overlaps the text.  The last two steps should be done using an off-screen bu ffer, if possible, to avoid  objectionable flashing during  the redraw process.  On encountering a reference XObject (see  8.10.4, \"Reference XObjects\" ), the conforming reader may choose  to initially display the object as a proxy and defer the re trieval and rendering of the  imported content. Note that,  since all XObjects in a Linearized PDF file follow the co ntent stream of the page on which they appear, their  retrieval is already deferred; the use of a reference XObject results in an additional level of deferral.  G.6 Following an Article Thread As indicated earlier, the bead dictionaries for any articl e thread that visits a given page are located with that  page. This enables the bead rectangles to be activated and proper cursor feedback to be shown.  If the user follows a thread, the conforming reader can obtain the object number from the  N or P entry of the  bead dictionary. This identifies a target bead, which is  located with the page to which it belongs. Given this  object number, the conforming reader can go to that page, as discussed in  G.4, \"Going to Another Page of an  Open Document.\" G.7 Accessing an Updated File As stated earlier, if a Linearized PDF file subse quently has an incremental update appended to it, the  linearization and hints are no longer valid. Actually, this  is not necessarily true, but the conforming reader must  do some additional work  to validate the information.  When the conforming reader sees that the file is longer than the length given in the linearization parameter  dictionary, it must issue an addition al transaction to read everything th at was appended. It must then analyse  the objects in that update to see whether any of them m odify objects that are in the first page or that are the  targets of hints. If so, it must augment its internal data  structures as necessary to ta ke the updates into account.  For a PDF file that has received only a small update, this  approach may be worthwhile . Accessing the file this  way is quicker than accessing it without hints or retr ieving the entire file before displaying any of it.",""],"706":["PDF 32000-1:2008 698 ' Adobe Systems Incorporated 2008  All rights reserved THIS PAGE BLANK",""],"707":["' Adobe Systems Incorporated 2008  All rights reserved 699PDF 32000-1:2008 Annex  H(informative)Example PDF FilesH.1 General This annex presents several examples showing the structure of actual PDF files:   A minimal file that can serve as a starting point for creating other PDF files (and that is the basis of later  examples)   A simple example that shows a text stringthe cla ssic Hello Worldand a simple graphics example that  draws lines and shapes   A fragment of a PDF file that illust rates the structure of th e page tree for  a large document  and, similarly,  two fragments that illustrate the  structure of an outline hierarchy   An example showing the structure of  a PDF file as it is updated severa l times, illustrating multiple body  sections, cross-reference sections, and trailers  NOTE The  Length  values of stream objects in the examples and the byte addresses in cross-reference tables are not  necessarily accurate.  H.2 Minimal PDF File The example in  H.2, \"Minimal PDF File\"  is a PDF file that does not draw  anything; it is almost the minimum  acceptable PDF file. It is not strictly the minimum ac ceptable because it contains an outline dictionary  (Outlines  in the document catalog) with a zero count (in which case this object would normally be omitted); a  page content stream ( Contents  in the page object); and a resource dictionary ( Resources  in the page object)  containing a  ProcSet array. These objects were included to make this file useful as a starting point for creating  other, more realistic PDF files.  Ta b l e  H.1  lists the objects in this example.  NOTE When using the example in  H.2, \"Minimal PDF File\"  as a starting point for creating other files, remember to  update the  ProcSet array as needed (see  14.2, \"Procedure Sets\" ). Also, remember that the cross-reference  table entries may need to have a trailing SPACE (see  7.5.4, \"Cross-Reference Table\" ). Table  H.1    Objects in minimal example Object number Object type 1Catalog  (document catalog) 2Outlines  (outline dictionary) 3Pages (p age tree node) 4Page (p age object) 5Content stream 6Procedure set array",""],"708":["PDF 32000-1:2008 700 ' Adobe Systems Incorporated 2008  All rights reserved EXAMPLE %PDF-1.  41 0 obj <<  /Type  /Catalog  /Outlines  2 0 R  /Pages  3 0 R>>endobj 2 0 obj <<  /Type  Outlines  /Count  0>>endobj 3 0 obj <<  /Type  /Pages  /Kids  [ 4 0 R ] /Count  1>>endobj 4 0 obj <<  /Type  /Page  /Parent  3 0 R /MediaBox  [ 0 0 612  792  ] /Contents  5 0 R /Resources  << /ProcSet  6 0 R >>>>endobj","5 0 obj << /Length  35 >>stream Page-marking operators  endstream endobj 6 0 obj [ /PDF ]endobj xref0 70000000000  65535  f0000000009  00000  n0000000074  00000  n0000000120  00000  n0000000179  00000  n0000000300  00000  n0000000384  00000  ntrailer <<  /Size 7 /Root  1 0 R>>startxref 408 %%EOFH.3 Simple Text String Example The example in  H.3, \"Simple Text String Example\"  is the classic Hello World example built from the preceding  example. It shows a single line of text consisting of the string  Hello World, illustrating the use of fonts and",""],"709":["' Adobe Systems Incorporated 2008  All rights reserved 701PDF 32000-1:2008 several text-related PDF operators. The string is displa yed in 24-point Helvetica.  Because Helvetica is one of  the standard 14 fonts, no font descriptor is needed.  Ta b l e  H.2  lists the objects in this example.  EXAMPLE %PDF-1.  41 0 obj <<  /Type  /Catalog  /Outlines  2 0 R /Pages  3 0 R>>endobj 2 0 obj <<  /Type  /Outlines  /Count  0>>endobj 3 0 obj <<  /Type  /Pages  /Kids  [ 4 0 R ] /Count  1>>endobj 4 0 obj <<  /Type  /Page  /Parent  3 0 R /MediaBox  [ 0 0 612  792  ] /Contents  5 0 R /Resources  << /ProcSet","6 0 R /Font  << /F1  7 0 R  >>>>>>endobj 5 0 obj << /Length  73 >>stream BT/F1  24 Tf100 100 Td( Hello World  ) TjETendstream endobj Table  H.2   Objects in simple text string example Object number Object type 1Catalog  (document catalog) 2Outlines  (outline dictionary) 3Pages (p age tree node) 4Page (p age object) 5Content stream 6Procedure set array 7Font   (Type 1 font)",""],"710":["PDF 32000-1:2008 702 ' Adobe Systems Incorporated 2008  All rights reserved 6 0 obj [ /PDF /Text  ]endobj 7 0 obj <<  /Type  /Font  /Subtype  /Type1  /Name  /F1  /BaseFont  /Helvetica /Encoding  /MacRomanEncoding >>endobj xref0 80000000000  65535  f0000000009  00000  n0000000074  00000  n0000000120  00000  n0000000179  00000  n0000000364  00000  n0000000466  00000  n0000000496  00000  ntrailer << /Size 8 /Root  1 0 R>>startxref 625 %%EOFH.4 Simple Graphics Example The example in  H.4, \"Simple Graphics Example\"  draws a thin black line segment, a thick black dashed line","segment, a filled and stroked rectangle, and a filled a nd stroked cubic BØzier curve.  Table  H.3  lists the objects  in this example, and  Figure H.1  shows the resulting output. (Each shape  has a red border, and the rectangle is  filled with light blue.)  Table  H.3   Objects in simple graphics example Object number Object type 1Catalog  (document catalog) 2Outlines  (outline dictionary) 3Pages (p age tree node) 4Page (p age object) 5Content stream 6Procedure set array",""],"711":["' Adobe Systems Incorporated 2008  All rights reserved 703PDF 32000-1:2008 Figure  H.1    Output of the following example EXAMPLE %PDF-1.  41 0 obj <<  /Type  /Catalog  /Outlines  2 0 R /Pages  3 0 R>>endobj 2 0 obj <<  /Type  /Outlines  /Count  0>>endobj 3 0 obj <<  /Type  /Pages  /Kids  [ 4 0 R ] /Count  1>>endobj 4 0 obj <<  /Type  /Page  /Parent  3 0 R /MediaBox  [ 0 0 612  792  ] /Contents  5 0 R /Resources  << /ProcSet","6 0 R  >>>>endobj 5 0 obj << /Length  883 >>stream % Draw a black line segment, using the default line width  . 150  250  m150  350  lS% Draw a thicker, dashed line segment  . 4 w% Set line width to 4 points [ 4 6 ] 0 d% Set dash pattern to 4 units on, 6 units off 150  250  m400  250  lS[ ] 0 d% Reset dash pattern to a solid line 1 w% Reset line width to 1 unit",""],"712":["PDF 32000-1:2008 704 ' Adobe Systems Incorporated 2008  All rights reserved % Draw a rectangle with a 1-unit  red border, filled with light blue  . 1.0  0.0 0.0  RG% Red for stroke color 0.5  0.75 1.0 rg% Light blue for fill color 200  300  50 75 reB% Draw a curve filled with gray and with a colored border  . 0.5  0.1 0.2  RG0.7  g300  300  m300  400  400 400 400 300  cbendstream endobj 6 0 obj [ /PDF ]endobj xref0 70000000000  65535  f0000000009  00000  n0000000074  00000  n0000000120  00000  n0000000179  00000  n0000000300  00000  n","0000001532  00000  ntrailer <<  /Size 7 /Root  1 0 R>>startxref 1556 %%EOFH.5 Page Tree Example The example in  H.5, \"Page Tree Example\"  is a fragment of a PDF file illustra ting the structure  of the page tree  for a large document. It contains the page tree nodes for a 62-page document.  Figure H.2  shows the structure  of this page tree. Numbers in the figure are object numbers corresponding to the objects in the example.",""],"713":["' Adobe Systems Incorporated 2008  All rights reserved 705PDF 32000-1:2008 Figure  H.2   Page tree for the following example EXAMPLE 337  0 obj<<  /Type  /Pages  /Kids  [335 0 R 336 0 R  ] /Count  62>>endobj 335  0 obj<<  /Type  /Pages  /Parent  337 0 R  /Kids  [4 0 R 43 0 R 77 0 R 108 0 R 139 0 R 170 0 R  ] /Count  36>>endobj 336  0 obj<<  /Type  /Pages  /Parent  337 0 R  /Kids  [201 0 R 232 0 R 263 0 R 294 0 R 325 0 R  ] /Count  26>>endobj 4 0 obj <<"," /Type  /Pages  /Parent  335 0 R  /Kids  [3 0 R 16 0 R 21 0 R 26 0 R","337335336443 77 108 139 170 201 232 263 294 325 316212631374248535863707682879297102107113118123128133138144149154159164169175180185190195200206211216221226231237242247252257262268273278283288293299304309314319324330",""],"714":["PDF 32000-1:2008 706 ' Adobe Systems Incorporated 2008  All rights reserved 31 0 R 37 0 R  ] /Count  6>>endobj 43 0 obj<<  /Type  /Pages  /Parent  335 0 R  /Kids  [42 0 R 48 0 R 53 0 R 58 0 R 63 0 R 70 0 R  ] /Count  6>>endobj 77 0 obj<<  /Type  /Pages  /Parent  335 0 R  /Kids  [76 0 R 82 0 R 87 0 R 92 0 R 97 0 R 102 0 R  ] /Count  6>>endobj 108  0 obj<<  /Type  /Pages  /Parent  335 0 R  /Kids  [ 107 0 R 113 0 R 118 0 R","123 0 R 128 0 R 133 0 R  ] /Count  6>>endobj 139  0 obj<<  /Type  /Pages  /Parent  335 0 R  /Kids  [ 138 0 R 144 0 R 149 0 R 154 0 R 159 0 R 164 0 R  ] /Count  6>>endobj 170  0 obj<<  /Type  /Pages",""],"715":["' Adobe Systems Incorporated 2008  All rights reserved 707PDF 32000-1:2008  /Parent  335 0 R  /Kids  [169 0 R 175 0 R 180 0 R 185 0 R 190 0 R 195 0 R  ] /Count  6>>endobj 201  0 obj<<  /Type  /Pages  /Parent  336 0 R  /Kids  [200 0 R 206 0 R 211 0 R 216 0 R 221 0 R 226 0 R  ] /Count  6>>endobj 232  0 obj<<  /Type  /Pages  /Parent  336 0 R  /Kids  [231 0 R 237 0 R 242 0 R 247 0 R 252 0 R 257 0 R  ] /Count  6>>endobj 263  0 obj<<  /Type","/Pages  /Parent  336 0 R  /Kids  [262 0 R 268 0 R 273 0 R 278 0 R 283 0 R 288 0 R  ] /Count  6>>endobj 294  0 obj<<  /Type  /Pages  /Parent  336 0 R  /Kids  [293 0 R 299 0 R 304 0 R 309 0 R 314 0 R 319 0 R  ] /Count  6",""],"716":["PDF 32000-1:2008 708 ' Adobe Systems Incorporated 2008  All rights reserved >>endobj 325  0 obj<<  /Type  /Pages  /Parent  336 0 R  /Kids  [ 324 0 R 330 0 R  ] /Count  2>>endobj H.6 Outline Hierarchy Example This section from a PDF file i llustrates the structure of an outline hierarchy with six items.  Example 1  in H.6, \"Outline Hierarchy Example\"  shows the outline with all it ems open, as illustrated in  Figure H.3 . Figure H.3    Document outline as displayed in  Example 1 EXAMPLE 1 21  0 obj<<  /Type  /Outlines  /First  22 0 R  /Last  29 0 R /Count  6>>endobj 22 0 obj<<  /Title  ( Document  ) /Parent  21 0 R  /Next  29 0 R /First  25 0 R  /Last  28 0 R /Count  4 /Dest  [","3 0 R /XYZ 0 792  0 ]>>endobj 25 0 obj<<  /Title  ( Section 1 ) /Parent  22 0 R  /Next  26 0 R /Dest  [ 3 0 R /XYZ null  701 null  ]>>endobj 26 0 obj","DocumentSection 1Section 2Subsection 1Section 3Summary","On-screen  appearance Object numberCount","222526272829401000621",""],"717":["' Adobe Systems Incorporated 2008  All rights reserved 709PDF 32000-1:2008 <<  /Title  ( Section 2 ) /Parent  22 0 R  /Prev  25 0 R /Next  28 0 R /First  27 0 R  /Last  27 0 R /Count  1 /Dest  [ 3 0 R /XYZ null  680 null  ]>>endobj 27 0 obj <<  /Title  ( Subsection 1  ) /Parent  26 0 R  /Dest  [ 3 0 R /XYZ null  670 null  ]>>endobj 28 0 obj <<  /Title  ( Section 3 ) /Parent  22 0 R  /Prev  26 0 R /Dest"," [ 7 0 R /XYZ null  500 null  ]>>endobj 29 0 obj <<  /Title  ( Summary ) /Parent  21 0 R  /Prev  22 0 R /Dest  [ 8 0 R /XYZ null  199 null  ]>>endobj Example 2  in H.6, \"Outline Hierarchy Example\"  is the same as  Example 1 , except that one of the outline items  has been closed in the display. The outline appears as shown in  Figure H.4 . Figure  H.4    Document outline as displayed in  Example 2 EXAMPLE 2 21  0 obj <<  /Type  /Outlines  /First  22 0 R  /Last  29 0 R /Count  5>>endobj 22 0 obj <<  /Title  ( Document  ) /Parent  21 0 R","On-screen  appearance Object numberCount","DocumentSection 1Section 2Section 3Summary","222526282930100521",""],"718":["PDF 32000-1:2008 710 ' Adobe Systems Incorporated 2008  All rights reserved  /Next  29 0 R /First  25 0 R  /Last  28 0 R /Count  3 /Dest  [ 3 0 R /XYZ 0 792  0 ]>>endobj 25 0 obj<<  /Title  ( Section 1 ) /Parent  22 0 R  /Next  26 0 R /Dest  [ 3 0 R /XYZ null  701 null  ]>>endobj 26 0 obj<<  /Title  ( Section 2 ) /Parent  22 0 R  /Prev  25 0 R /Next  28 0 R /First  27 0 R  /Last  27 0 R /Count"," 1 /Dest  [ 3 0 R /XYZ null  680 null  ]>>endobj 27 0 obj<<  /Title  ( Subsection 1  ) /Parent  26 0 R  /Dest  [ 3 0 R /XYZ null  670 null  ]>>endobj 28 0 obj<<  /Title  ( Section 3 ) /Parent  22 0 R  /Prev  26 0 R /Dest  [ 7 0 R /XYZ null  500 null  ]>>endobj 29 0 obj<<  /Title  ( Summary ) /Parent"," 21 0 R  /Prev  22 0 R /Dest  [ 8 0 R /XYZ null  199 null  ]>>endobj H.7 Updating Example This example shows the structure of a PDF file as it  is updated several times; it illustrates multiple body  sections, cross-reference sections, and  trailers. In addition, it shows that once an object has been assigned an  object identifier, it keeps that identif ier until the object is deleted, even  if the object is altered. Finally, the  example illustrates the reuse of cross- reference entries  for objects that have been  deleted, along with the  incrementing of the generation number after an object has been deleted.  The original file is the example in  H.2, \"Minimal PDF File\" . The updates are divided into four stages, with the file  saved after each stage:",""],"719":["' Adobe Systems Incorporated 2008  All rights reserved 711PDF 32000-1:2008 a) Four text annotations are added.  b) The text of one of the annotations is altered.  c) Two of the text annotations are deleted.  d) Three text annotations are added.  The following sections show the segments added to the file at each stage. Throughout this example, objects  are referred to by their object identifiers, which are m ade up of the object number and the generation number,  rather than simply by their object numbers as in ear lier examples. This is necessary because the example  reuses object numbers; therefore, the objects they denote are not unique.  NOTE The tables in these sections show  only those objects that are modified  during the updating process. Objects  from H.2, \"Minimal PDF File\"  that are not altered duri ng the update are not shown.  H.7.1 Stage 1: Add Four Text Annotations Four text annotations are added to the  initial file and the file is saved.  Ta b l e  H.4  lists the objects involved in this  update.  The example in  H.7.1, \"Stage 1: Add  Four Text Annotations\"  shows the lines added to the file by this update.  The page object is updated because an  Annots entry has been added to it. No te that the files trailer now  contains a  Prev entry, which points to the original cro ss-reference section in  the file, while the  startxref  value at  the end of the trailer points to the cro ss-reference section added by the update.  EXAMPLE 4  0 obj <<  /Type  /Page  /Parent  3 0 R /MediaBox  [ 0 0 612  792  ] /Contents  5 0 R /Resources  << /ProcSet  6 0 R  >> /Annots  7 0 R>>endobj 7 0 obj [ 8 0 R  9 0 R   10 0 R   11 0 R ]endobj 8 0 obj <<  /Type  /Annot  /Subtype  /Text Table  H.4   Object usage after adding four text annotations Object identifier Object type 4 0Page (p age object) 7 0Annotation array","8 0Annot (an notation dictionary) 9 0Annot (an notation dictionary) 10 0Annot (an notation dictionary) 11 0Annot (an notation dictionary)",""],"720":["PDF 32000-1:2008 712 ' Adobe Systems Incorporated 2008  All rights reserved  /Rect  [ 44 616 162 735  ] /Contents  ( Te x t  # 1  ) /Open  true>>endobj 9 0 obj <<  /Type  /Annot  /Subtype  /Text  /Rect  [ 224 668  457  735  ] /Contents  ( Te x t  # 2  ) /Open  false>>endobj 10 0 obj<<  /Type  /Annot  /Subtype  /Text  /Rect  [ 239 393  328  622  ] /Contents  ( Te x t  # 3  ) /Open  true>>","endobj 11 0 obj <<  /Type  /Annot  /Subtype  /Text  /Rect  [ 34 398 225 575  ] /Contents  ( Te x t  # 4  ) /Open  false>>endobj xref0 10000000000  65535  f4 10000000632  00000  n7 50000000810  00000  n0000000883  00000  n0000001024  00000  n0000001167  00000  n0000001309  00000  ntrailer <<  /Size 12 /Root  1 0 R /Prev  408>>startxref 1452","%%EOFH.7.2 Stage 2: Modify Text of One Annotation One text annotation is modified and the file is saved. The example in  H.7.2, \"Stage 2: Modify Text of One  Annotation\"  shows the lines added to the file by this update. No te that the file now contains two copies of the  object with identifier 10  0 (the text annotation that was modified)  and that the added cross-reference section  points to the more recent version of the object. This  added cross-reference section contains one subsection,  which contains only an entry for the obj ect that was modified. In addition, the  Prev  entry in the files trailer has  been updated to point to the cross-reference  section added in the previous stage, while the  startxref  value at  the end of the trailer points to the newly added cross-reference section.",""],"721":["' Adobe Systems Incorporated 2008  All rights reserved 713PDF 32000-1:2008 EXAMPLE 10  0 obj <<  /Type  /Annot  /Subtype  /Text  /Rect  [ 239 393  328  622  ] /Contents  ( Modified Text #3  ) /Open  true>>endobj xref0 10000000000  65535  f10 10000001703  00000  ntrailer <<  /Size 12 /Root  1 0 R /Prev  1452 >>startxref 1855 %%EOFH.7.3 Stage 3: Delete Two Annotations Two text annotation are deleted and the file is saved.  Table  H.5 lists the objects updated. The  Annot s  array is the only object that is  written in this update. It is updated because it now contains two  annotations fewer.  The example in  H.7.3, \"Stage 3: Delete Two Annotations\"  shows the lines added when the file was saved. Note  that objects with identifiers 8 0 and 9 0 have been deleted, as  can be seen from the fact  that their entries in the  cross-reference section end with the keyword  f. EXAMPLE 7  0 obj [ 10 0 R   11 0 R ]endobj xref0 1","0000000008  65535  f7 30000001978  00000  n0000000009  00001  f0000000000  00001  ftrailer <<  /Size 12 /Root  1 0 RTable  H.5   Object usage after dele ting two text annotations Object identifier Object type 7 0Annotation array 8 0Free 9 0Free",""],"722":["PDF 32000-1:2008 714 ' Adobe Systems Incorporated 2008  All rights reserved  /Prev  1855 >>startxref 2027 %%EOFThe cross-reference section added at this stage contai ns four entries, representing object number 0, the  Annots  array, and the two deleted text annotations.   The cross-reference entry for object number 0 is updated because it is the head of the linked list of free  entries and points to the entry for the newly freed object number 8. The entry for object number 8 points to  the entry for object number 9 (the next free entry), while the entry for object number 9 is the last free entry  in the cross-reference table, indicated by the fact that it points back to object number 0.   The entries for the two deleted text annotations are marked as free and as having generation numbers of 1,  which are used for any objects that reuse these cross-reference entries. Keep in mind that, although the  two objects have been delete d, they are still present in the file. It  is the cross-reference table that records  the fact that they have been deleted.  The  Prev entry in the trailer has again been updated so that  it points to the cross-reference section added at  the previous stage, and the  startxref  value points to the newly added cross-reference section.  H.7.4 Stage 4: Add Three Annotations Finally, three new text annotations are added to the file.  Ta b l e  H.6 lists the objects involved in this update.  Object numbers 8 and 9, which were used for the two  annotations deleted in the previous stage, have been  reused; however, the new objects have been given a generation number of 1. In addition, the third text  annotation added has been assigned the previo usly unused object identifier of 12  0. The example in  H.7.4, \"Stage 4: Add Three Annotations\"  shows the lines added to the file by this update. The  added cross-reference section contains five  entries, corresponding to object number 0, the  Annots  array, and  the three annotations added. The entry for object number 0 is updated because the previously free entries for  object numbers 8 and 9 have been reused. The entry for object number 0 now shows that the cross-reference  table has no free entries. The  Annots  array is updated to reflect the addition of the three text annotations.  EXAMPLE 7  0 obj [ 10 0 R     11 0 R      8 1 R     9 1 R    12 0 R]endobj 8 1 obj <<  /Type  /Annot  /Subtype  /Text Table  H.6   Object usage after adding three text annotations Object identifier Object type 7 0Annotation array 8 1Annot (an notation dictionary) 9 1Annot (an notation dictionary) 12 0Annot (an notation dictionary)",""],"723":["' Adobe Systems Incorporated 2008  All rights reserved 715PDF 32000-1:2008  /Rect  [ 58 657 172 742  ] /Contents  ( New Text #1  ) /Open  true>>endobj 9 1 obj <<  /Type  /Annot  /Subtype  /Text  /Rect  [ 389 459  570  537  ] /Contents  ( New Text #2  ) /Open  false>>endobj 12 0 obj <<  /Type  /Annot  /Subtype  /Text  /Rect  [ 44 253 473 337  ] /Contents  ( New Text #3\\203a longer text annotation which we will continue \\ onto a second line  ) /Open  true",">>endobj xref0 10000000000  65535  f7 30000002216  00000  n0000002302  00001  n0000002447  00001  n12 10000002594  00000  ntrailer <<  /Size 13 /Root  1 0 R /Prev  2027 >>startxref 2814 %%EOFThe annotation with object identifier 12  0 illustrates splitting a long text string across mult iple lines, as well as  the technique for including no nstandard characters in a st ring. In this case, the char acter is an ellipsis (),  which is character code 203 (octal) in  PDFDocEncoding , the encoding used for text annotations.  As in previous updates, the trailers  Prev entry and  startxref  value have been updated.  H.8 Structured Elements That  Describe Hierarchical Lists H.8, \"Structured Elements That Describe Hierarchical Lists\"  presents examples that illustrate how  structured  elements are used to describe hierarchical lists, such as a table of contents or an index.",""],"724":["PDF 32000-1:2008 716 ' Adobe Systems Incorporated 2008  All rights reserved H.8.1 Table of Contents The structured elements  structure type entry ( S) may have values that establish hierarchical relationships  between entries in a table of content. The TOCI value specifies an individual member of a table of contents.  The TOC value specifies a list made up of other table of  contents items that are indi vidual members of the table  of contents and/or lists of table of co ntents items. (The tr ailing character in  TOCI  is an upper case I.) Figure H.5  shows the table of contents described by the example in  H.8.1, \"Table of Contents\" . Figure  H.5    Table of contents  Figure H.6  illustrates the association between mark ed content identifiers ( MCID) and content. This illustration  includes part of the stream object  so you can see how the MC ID entries are associated with the content in the  table of contents.","TABLE OF CONTENTS 1. Chapter One . . . . . . . . . 3 1.1 Section A . . . . . . . . 4  1.2 Section B . . . . . . . . 5 2. Chapter Two . . . . . . . . . 6 3. Chapter Three . . . . . . . . 7 3.1 Section A . . . . . . . . 8",""],"725":["' Adobe Systems Incorporated 2008  All rights reserved 717PDF 32000-1:2008 Figure  H.6   Association between content and marked content identifiers  Figure H.7  shows how the relationships of the structure elem ents and their use of the TOC and TOCI structure  types represent the structure of a table of contents.  This figure also shows t he relationship between the  structured content elements and the marked content in  the stream. Gray text  indicates marked content  identifiers (MCID).","TABLE OF CONTENTS 1. Chapter One . . . . . . . . . 3 1.1 Section A . . . . . . . . 4  1.2 Section B . . . . . . . . 5 2. Chapter Two . . . . . . . . . 6 3. Chapter Three . . . . . . . . 7 3.1 Section A . . . . . . . . 8 /P <</MCID 1>> BDC BT T* (TABLE OF CONTENTS) Tj ET  EMC/Lbl <</MCID 11>>  BDC BT T* (1. ) Tj ET EMC /Reference <</MCID 12>> BDC BT (Chapter One ) Tj ET EMC /NonStruct <</MCID 13>> BDC BT (. . . . . . . . . ) Tj ET EMC /Reference <</MCID 14>> /BDC BT (3 ) Tj ET EMC /Lbl <</MCID 21>>  BDC BT T* (1.1 ) Tj ET EMC /Reference <</MCID 22>> BDC BT (Section A ) Tj ET EMC /NonStruct <</MCID 23>> BDC BT (. . . . . . . . ) Tj ET EMC /Reference <</MCID 24>> /BDC BT (4 ) Tj ET EMC","111 12 13 14","21 22 23 24 Contents of the stream object (partial) Association of marked content  identifiers (at right) to content",""],"726":["PDF 32000-1:2008 718 ' Adobe Systems Incorporated 2008  All rights reserved Figure  H.7   Hierarchy of structure elements and relationship with marked content EXAMPLE 4 0 obj<< /Type /Page /Contents 5 0 R >>5 0 obj<< /Length  6 0 R >> stream /P <</MCID 1>> BDC BT T* (TABLE OF CONTENTS) Tj ET EMC /Lbl <</MCID 11>>  BDC BT T* (1. ) Tj ET EMC /Reference <</MCID 12>> BDC BT (Chapter One ) Tj ET EMC /NonStruct <</MCID 13>> BDC BT (. . . . . . . . . ) Tj ET EMC /Reference <</MCID 14>> /BDC BT (3 ) Tj ET EMC /Lbl <</MCID 21>>  BDC","101 ->1 201 /S /Caption 211 /S /TOCI 301/S /TOC 214 /S /TOCI 215/S /TOCI 302 /S /TOC 400/S /TOC 212/S /TOCI 213 /S /TOCI 216 /S /TOCI 113 ->13 114 ->14 111 ->11 112 ->12 123 ->23 124 ->24 121 ->21 122 ->22 133 ->33 134 ->34 131 ->31 132 ->32 143 ->43 144 ->44 141 ->41 142 ->42 153 ->53 154 ->54 151 ->51 152 ->52 163 ->63 164 ->64 161 ->61 162 ->62","TABLE OF CONTENTS1. Chapter One . . . . . . . . . 3 1.1 Section A . . . . . . . . 4 1.2 Section B . . . . . . . . 5 2. Chapter Two . . . . . . . . . 6 3. Chapter Three . . . . . . . . 7 3.1 Section A . . . . . . . . 8","111 13","1214 2123","22 24 31 33","32 34 41 43","42445153","5254 6163","62 64","Structure elements Marked content",""],"727":["' Adobe Systems Incorporated 2008  All rights reserved 719PDF 32000-1:2008 BT T* (1.1 ) Tj ET EMC /Reference <</MCID 22>> BDC BT (Section A ) Tj ET EMC /NonStruct <</MCID 23>> BDC BT (. . . . . . . . ) Tj ET EMC /Reference <</MCID 24>> /BDC BT (4 ) Tj ET EMC /Lbl <</MCID 31>>  BDC BT T* (1.2 ) Tj ET EMC /Reference <</MCID 32>> BDC  BT (Section B ) Tj ET EMC /NonStruct <</MCID 33>> BDC BT (. . . . . . . . ) Tj ET EMC /Reference <</MCID 34>> /BDC BT (5 ) Tj ET EMC /Lbl <</MCID 41>>  BDC BT T* (2. ) Tj ET EMC /Reference <</MCID 42>> BDC  BT (Chapter Two ) Tj ET EMC /NonStruct <</MCID 43>> BDC BT (. . . . . . . . . ) Tj ET EMC /Reference <</MCID 44>> /BDC  BT (6 ) Tj ET EMC /Lbl <</MCID 51>>  BDC BT T* (3. ) Tj ET EMC /Reference <</MCID 52>> BDC BT (Chapter Three ) Tj ET EMC /NonStruct <</MCID 53>> BDC BT (. . . . . . . . ) Tj ET EMC /Reference <</MCID 54>> /BDC BT (7 ) Tj ET EMC /Lbl <</MCID 61>>  BDC BT T* (3.1 ) Tj ET EM /Reference <</MCID 62>> BDC BT (Section A ) Tj ET EM /NonStruct <</MCID 63>> BDC BT (. . . . . . . . ) Tj ET EM /Reference <</MCID 64>> /BDC BT (8 ) Tj ET EMC endstream endobj 101 0 obj << /Type /StructElem /S /P/P 201 0 R /Pg 4 0 R /K 1>>endobj 111 0 obj << /Type /StructElem /S /Lbl",""],"728":["PDF 32000-1:2008 720 ' Adobe Systems Incorporated 2008  All rights reserved /P 211 0 R /Pg 4 0 R  /K 11 >>endobj 112 0 obj << /Type /StructElem /S /Reference /P 211 0 R /Pg 4 0 R /K 12>>endobj 113 0 obj << /Type /StructElem /S /NonStruct /P 211 0 R /Pg 4 0 R  /K 13>>endobj 114 0 obj << /Type /StructElem /S /Reference /P 211 0 R /Pg 4 0 R /K 14 >>endobj objects 121-124, 131-134, 141-144, 151-154 and  161-164 referencing MCIDs 21-24, 31-34, 41-44,  51-54, and 61-64 are omitted in the interest of space. 201 0 obj << /Type /StructElem /S /Caption /P 400 0 R /K [101 0 R]>>endobj 211 0 obj << /Type /StructElem /S /TOCI /P 400 0 R /K [111 0 R 112 0 R 113 0 R 114 0 R] >>endobj 212 0 obj << /Type /StructElem /S /TOCI /P 301 0 R /K [121 0 R 122 0 R 123 0 R 124 0 R]",""],"729":["' Adobe Systems Incorporated 2008  All rights reserved 721PDF 32000-1:2008 >>endobj 213 0 obj << /Type /StructElem /S /TOCI /P 301 0 R /K [131 0 R 132 0 R 133 0 R 134 0 R] >>endobj 214 0 obj << /Type /StructElem /S /TOCI /P 400 0 R /K [141 0 R 142 0 R 143 0 R 144 0 R] >>endobj 215 0 obj << /Type /StructElem /S /TOCI /P 400 0 R /K [151 0 R 152 0 R 153 0 R 154 0 R] >>endobj 216 0 obj << /Type /StructElem /S /TOCI /P 302 0 R /K [161 0 R 162 0 R 163 0 R 164 0 R] >>endobj 301 0 obj << /Type /StructElem /S /TOC /P 400 0 R /K [212 0 R 213 0 R] >>endobj 302 0 obj << /Type /StructElem /S /TOC /P 400 0 R /K [216 0 R]>>endobj 400 0 obj << /Type /StructElem /S TOC /K [201 0 R 211 0 R 301 0 R 214 0 R 215 0 R 302 0 R] >>endobj",""],"730":["PDF 32000-1:2008 722 ' Adobe Systems Incorporated 2008  All rights reserved H.8.2 Nested Lists The structured elements  structure type entry ( S) may have values that establish hierarchical relationships  between entries in an index. The LI value specifies an  individual index entry. The  L value specifies a list made  up of individual index entrie s and/or lists of in dex entries. (The tr ailing character in  LI is an upper case I.) Figure H.8  shows the index described by the example in  H.8.2, \"Nested Lists\" . Figure  H.8   Index Figure H.9  shows how the relationships of the structure elemen ts and their use of the L and LI structure types  defines the structure of an index.  This figure also shows the relationship between the structured content  elements and the marked content in the stream. Gr ay text indicates marked content identifiers ( MCID).Figure  H.9   Hierarchy of structure elements and relationship with marked content","INDEX 1. Cats      a. Lions      b. Tigers 2. Bears 3. Canines      a. Wolves","101 ->1 201 /S /Caption 211 /S /LI 301/S /L214 /S /LI 215/S /LI 302 /S /L400/S /L 212/S /LI 213 /S /LI216 /S /LI111 ->11 112 ->12 121 ->21 122 ->22 131 ->31 132 ->32 141 ->41 142 ->42 151 ->51 152 ->52 161 ->61 162 ->62","INDEX 1. Cats  a. Lions b. Tigers 2. Bears 3. Canines a. Wolves","111","1221","2231","3241","4251","5261","62","Structure elements Marked content",""],"731":["' Adobe Systems Incorporated 2008  All rights reserved 723PDF 32000-1:2008 EXAMPLE 4 0 obj<< /Type /Page /Contents 5 0 R >>endobj 5 0 obj<< /Length 6 0 R >> stream/P <</MCID 1>> BDC BT T* (INDEX) Tj ET EMC /Lbl <</MCID 11>> BDC BT T* (1. ) Tj ET EMC /LBody <</MCID 12>> /BDC BT (Cats ) Tj ET EMC /Lbl <</MCID 21>> BDC BT T* (a. ) Tj ET EMC /LBody <</MCID 22>> /BDC BT (Lions ) Tj ET EMC /Lbl <</MCID 31>> BDC BT T* (b. ) Tj ET EMC /LBody <</MCID 32>> /BDC BT (Tigers ) Tj ET EMC /Lbl <</MCID 41>> BDC BT T* (2. ) Tj ET EMC /LBody <</MCID 42>> /BDC BT (Bears ) Tj ET EMC /Lbl <</MCID 51>> BDC BT T* (3. ) Tj ET EM /LBody <</MCID 52>> /BDC BT (Canines ) Tj ET EMC/Lbl <</MCID 61>> BDC BT T* (a. ) Tj ET EM /LBody <</MCID 62>> /BDC BT (Wolves ) Tj ET EMC endstream endobj 101 0 obj << /Type /StructElem /S /P/P 201 0 R /Pg 4 0 R /K 1>>endobj 111 0 obj",""],"732":["PDF 32000-1:2008 724 ' Adobe Systems Incorporated 2008  All rights reserved << /Type /StructElem /S /Lbl/P 211 0 R /Pg 4 0 R /K 11 >>endobj 112 0 obj << /Type /StructElem /S /LBody/P 211 0 R /Pg 4 0 R /K 12>>endobj objects 121-122, 131-132, 141-142, 151-152 and  161-162 referencing MCIDs 21-22, 31-32, 41-42,  51-52, and 61-62 are omitted in the interest of space. 201 0 obj << /Type /StructElem /S /Caption /P 400 0 R /K [101 0 R]>>endobj 211 0 obj << /Type /StructElem /S /LI/P 400 0 R /K [111 0 R 112 0 R] >>endobj 212 0 obj << /Type /StructElem /S /LI/P 301 0 R /K [121 0 R 122 0 R] >>endobj 213 0 obj << /Type /StructElem /S /LI/P 301 0 R /K [131 0 R 132 0 R] >>endobj 214 0 obj << /Type /StructElem /S /LI/P 400 0 R /K [141 0 R 142 0 R]",""],"733":["' Adobe Systems Incorporated 2008  All rights reserved 725PDF 32000-1:2008 >>endobj 215 0 obj << /Type /StructElem /S /LI/P 400 0 R /K [151 0 R 152 0 R] >>endobj 216 0 obj << /Type /StructElem /S /LI/P 302 0 R /K [161 0 R 162 0 R] >>endobj 301 0 obj << /Type /StructElem /S /L/P 400 0 R /K [212 0 R 213 0 R] >>302 0 obj << /Type /StructElem /S /L/P 400 0 R /K [216 0 R]>>endobj 400 0 obj << /Type /StructElem /S /L/K [201 0 R 211 0 R 301 0 R 214 0 R 215 0 R 302 0 R] >>endobj",""],"734":["PDF 32000-1:2008 726 ' Adobe Systems Incorporated 2008  All rights reserved THIS PAGE BLANK",""],"735":["' Adobe Systems Incorporated 2008  All rights reserved 727PDF 32000-1:2008 Annex  I (normative)PDF Versions and Compatibility I.1 General The goal of PDF is to enable people to exchange and vi ew electronic documents easily and reliably. Ideally, this  means that any conforming reader should  be able to display the contents of any PDF file, even if the PDF file  was created long before or long after the conforming re ader was developed. In reality, new versions of PDF are  occasionally introduced to provide additional capabilities not present befor e. Furthermore, conforming readers  may support private extensions to PDF, making so me conforming readers more capable than others,  depending on what extensions are present.  PDF has been designed to enable users to view everything in the document that the conforming reader understands and to enable the conforming reader to ig nore or inform the user about objects not understood.  The decision whether to ignore or inform the user is ma de on a feature-by-feature basis, at the discretion of the  confirming reader.  I.2 PDF Version Numbers The PDF version number identifies a s pecific version of the Adobe PDF specif ication. A PDF file is labelled with  the version number of the Adobe PDF spec ification that the file conforms to. PDF version numbers take the form  M . m, where M is the major and  m the minor version number, each  represented as a decimal integer.  The version number for a subsequent version of the  PDF specification is formed either by incrementing  m or by  incrementing  M and setting  m to zero, as follows:  The major version is incremented if PDF changes in  a way that is not upward-compatible from previous  versions. (In practice, this has never happened; the current major version is 1.)  The minor version is incremented if PDF changes in  a way that is upward-compatible from previous  versions. (The current minor version is 7.)  The PDF version number does not change at all if pr ivate data is included in a PDF file by one of the  extension mechanisms defined  in this specification. The header in the first line of a PDF file specifies a PDF version (see  7.5.2, \"File Header\" ). Starting with PDF  1.4, a PDF version can also be specified in the  Version  entry of the document catalogue, essentially updating  the version associated with the file by overridi ng the one specified in  the file header (see  7.7.2, \"Document  Catalog\" ). As described in the following paragraphs, the conforming products behaviour upon opening or  saving a document depends on comparing the PDF file ’s version with the PDF ve rsion that the conforming  product supports.  A conforming readers shall attempt to read any PDF file, even  if the files version is more  recent than that of the  conforming reader.  If a conforming reader opens a PDF file with a major vers ion number newer than the version that it supports, it  should warn the user that it is unlikely to be able to read the document successfully and that the user cannot  change or save the document. Upon the first error that  is caused by encountering an unrecognized feature, the  conforming reader shou ld notify the user that an error has occurred  but that no further errors will be reported.",""],"736":["PDF 32000-1:2008 728 ' Adobe Systems Incorporated 2008  All rights reserved (Some errors should nevertheless be always reported,  including file I/O errors, out-of-memory errors, and  notifications that a command has failed.) Processing should continue if possible.  If a conforming reader opens a PDF file that has a  minor version number newer  than the version that it  supports, it should notify the user  that the document may contain information the conforming reader does not  understand. If the conforming reader encounters an error, it  should notify the user that the PDF files version is  newer than expected, an error has occurred, and no furt her errors will be reported.  Whether and how the version of a PDF file should ch ange when the document is modified and saved depends  on several factors. If the PDF file has a newer versio n than the conforming product supports, the conforming  product should not alter the versionthat is, a PDF files  version should never be changed to an older version.  If the PDF file has an older version  than the conforming product supports , the conforming product may update the PDF files version to match the conforming products  version. If a user modifies  a document by inserting the  contents of another PDF file into it, the saved document s version should be the most  recent of the conforming  products version, the original PDF file’s ve rsion, and the inserted PDF files version.  I.3 Feature Compatibility When a new version of PDF is defined, many features are introduced simply by adding new entries to existing  dictionaries. Earlier versions of conforming readers do not notice the existence of such entries and behave as if  they were not there. Such new features are theref ore both forward- and backward-compatible. Likewise,  adding entries not described in the PDF specification  to dictionary objects does not affect the conforming  readers behaviour. See  Annex E for information on how to choose key names that are compatible with future  versions of PDF. See  7.12.2, Developer Extensions Dictionary  for a discussion of how to designate the use of  public extensions in PDF file. In some cases, a new feature is impossible to ignore , because doing so would preclude some vital operation  such as viewing or printing a page. For instance, if a  pages content stream is encoded with some new type of  filter, there is no way for an earlier version of conforming reader to view or print the page, even though the  content stream (if decoded) would be perfectly understood by the reader. There is little choice but to give an  error in cases like these. Such new features ar e forward-compatible but not backward-compatible.  In a few cases, new features are defin ed in a way that earlier versions of conforming readers will ignore, but the  output will be degraded in  some way without any error indication. If a PDF file undergoes  editing by an earlier  version of a conforming product that does not unders tand some of the features that the file uses, the  occurrences of those features  may or may not survive.",""],"737":["' Adobe Systems Incorporated 2008  All rights reserved 729PDF 32000-1:2008 Annex  J(informative)FDF Rename Flag Implementation Example J.1 General The  Rename flag is used to specify whether fi elds imported from the template shall be renamed in the event of  name conflicts with existing fields; J.2 Implementation Example If the  Rename flag in the FDF temp late dictionary is  true , fields with such conflicting names shall be renamed  to guarantee their uniqueness. If  Rename  is false , the fields shall not be renamed;  this results in multiple fields  with the same name in the target document. Each time th e FDF file provides attributes for a given field name,  all fields with that name shall be updated.  This can be implemented by a conforming product renami ng fields by prepending a page number, a template  name, and an ordinal number to the field name. The or dinal number corresponds to the order in which the  template is applied to a page, with 0 being  the first template specified for the page.  EXAMPLE If the first template used on the fifth page has the name Template and has the  Rename  flag set to  true , fields defined in that template are renamed by prepending the character string P5  . Te m p l a t e _ 0  . to their  field names.",""],"738":["PDF 32000-1:2008 730 ' Adobe Systems Incorporated 2008  All rights reserved THIS PAGE BLANK",""],"739":["' Adobe Systems Incorporated 2008  All rights reserved 731PDF 32000-1:2008 Annex  K(informative)PostScript Compatibility   Transparent Imaging Model K.1 General Because the PostScript language does not support t he transparent imaging model, a conforming reader  desiring to print on a PostScript output device needs  to have some means for converting the appearance of a  document that uses transparency to a purely opaque description.  K.2 Conversion Converting the contents of a page from transparent to opaque form entails some combination of shape  decomposition and prerendering to flatten the stack of  transparent objects on the page, performing all the  needed transparency computations, and describing the final appearance using opaque objects only. Whether  the page contains transparent content needing to be fla ttened can be determined by  straightforward analysis of  the pages resources; it is not necessa ry to analyse the content stream itself. The conversion to opaque form is  irreversible, since all information about how t he transparency effects were produced is lost.  To perform the transparency computations properly, the co nforming reader needs to know the native colour  space of the output device. This is no problem when th e conforming reader controls the output device directly.  However, when generating PostScript output, the confor ming reader has no way of knowing the native colour  space of the PostScript output de vice. An incorrect assumption will ru in the calibration of any CIE-based  colours appearing on the page. This problem can be addressed in either of two ways:   If the entire page consists of CIE-based colours, fl atten the colours to a single CIE-based colour space  rather than to a device colour space. The preferred  colour space for this purpose can easily be determined  if the page has a group attributes dictionary ( Group  entry in the page obje ct) specifying a CIE-based  colour space (see  11.6.6, \"Transparency Group XObjects\" ).  Otherwise, flatten the colo urs to some assumed device colour space with predetermined calibration. In the  generated PostScript output, paint the flattened co lours in a CIE-based colour space having that  calibration. Because the choice between using spot colorants and conv erting them to an alternate colour space affects the  flattened results of process colours, a decision needs to  be made during PostScript conversion about the set of  available spot colorants to assume. (This differs fr om strictly opaque painting,  where the decision can be  deferred until the generated Po stScript code is executed.)",""],"740":["PDF 32000-1:2008 732 ' Adobe Systems Incorporated 2008  All rights reserved THIS PAGE BLANK",""],"741":["' Adobe Systems Incorporated 2008  All rights reserved 733PDF 32000-1:2008 Annex  L(informative)Colour PlatesL.1 Colour Plates This annex consists of figures that logically belong in ot her parts of this specificati on. They are collected here  so that all colour figures appear together as a sequence  of colour plates that may be produced separately from  the remainder of the specification. Color Plates Figure  L.1   Additive and subtractive colour ( 8.6.4, \"Device Colour Spaces\" )","Additive Subtractive",""],"742":["PDF 32000-1:2008 734 ' Adobe Systems Incorporated 2008  All rights reserved Figure  L.2   Uncalibrated colour ( 8.6.5, \"CIE-Based Colour Spaces\" )Figure L.3    Lab colour space ( 8.6.5.4, \"Lab Colour Spaces\" )","L* = 100white L* = 0blackb* = 100yellow b* = -100bluea* = 100red a* = -100green",""],"743":["' Adobe Systems Incorporated 2008  All rights reserved 735PDF 32000-1:2008 Figure  L.4   Color gamuts ( 8.6.5.4, \"Lab Colour Spaces\" )Figure L.5    Rendering intents ( 8.6.5.8, \"Rendering Intents\" )","RGBCMYKL*a*b*","AbsoluteColorimetric RelativeColorimetric","Perceptual Saturation",""],"744":["PDF 32000-1:2008 736 ' Adobe Systems Incorporated 2008  All rights reserved Figure  L.6   Duotone image ( 8.6.6.5, \"DeviceN Colour Spaces\" )Figure  L.7   Quadtone image ( 8.6.6.5, \"DeviceN Colour Spaces\"","Grayscale BlackMagentaResult","Single-component (grayscale) imageQuadtone image",""],"745":["' Adobe Systems Incorporated 2008  All rights reserved 737PDF 32000-1:2008 Figure  L.8   Colored tiling pattern ( 8.7.3.2, \"Coloured Tiling Patterns\" )Figure  L.9   Uncoloured tiling pattern ( 8.7.3.3, \"Uncoloured Tiling Patterns\" )",""],"746":["PDF 32000-1:2008 738 ' Adobe Systems Incorporated 2008  All rights reserved Extend = [  false  false  ], Background not specified Extend = [  true  true  ], Background not specified Extend  =  [  true true  ],  Backgr ound  not specified Figure  L.10   Axial shading ( 8.7.4.5.3, \"Type 2 (Axial) Shadings\" )Figure  L.11    Radial shadings depicting a cone ( 8.7.4.5.4, \"Type 3 (Radial) Shadings\" )","ABCDEFGHIJKL","M","ABCDEFGHIJKL","M","ABEFGHIJKLMCD","CD","KL","Starting from  smaller circle Starting from  larger circle Neither circle extended Starting circle extended",""],"747":["' Adobe Systems Incorporated 2008  All rights reserved 739PDF 32000-1:2008 Figure  L.12   Radial shadings depicting a sphere ( 8.7.4.5.4, \"Type 3 (Radial) Shadings\" )Figure L.13    Radial shadings with extension ( 8.7.4.5.4, \"Type 3 (Radial) Shadings\" )Figure  L.14   Radial shading effect ( 8.7.4.5.4, \"Type 3 (Radial) Shadings\" )","Starting from inner circle; no background color specified Starting from outer circle; background color specified","No background color specified Background color specified",""],"748":["PDF 32000-1:2008 740 ' Adobe Systems Incorporated 2008  All rights reserved Figure  L.15   Coons patch mesh ( 8.7.4.5.7, \"Type 6 Shadings (Coons Patch Meshes)\" )","Unit square Nonlinear (control points altered)",""],"749":["' Adobe Systems Incorporated 2008  All rights reserved 741PDF 32000-1:2008 Figure  L.16   Transparency groups ( 11.2, \"Overview of Transparency\" )Figure  L.17   Isolated and knockout groups ( 11.4.5, \"Isolated Groups\" and  11.4.6, \"Knockout Groups\" )","Ungrouped objects  Object opacity = 1.0 Ungrouped objects  Object opacity = 0.5 Transparency group  Object opacity = 1.0  Group opacity = 0.5  Blend mode = NormalTransparency group  Object opacity = 0.5  Group opacity = 1.0  Blend mode = HardLight","Isolated Non-isolated Knockout Non-knockout",""],"750":["PDF 32000-1:2008 742 ' Adobe Systems Incorporated 2008  All rights reserved Figure L.18    RGB blend modes ( 11.3.5, \"Blend Mode\" )","Duck in foreground, rainbow in background ColorBurn","HardLi","g","h","t","SoftLi","g","h","t","Overlay Screen MultiplyNormal ColorDodge","Co","l","or","Luminosit","y","Satu","r","at","i","on","H","ue","Ex","c","l","us","i","on","Diff","e","r","e","n","ce","Lighten Darken Rainbow in foreground, duck in background","Color Luminosity Saturation HueExclusion Difference","Li","g","hte","n","D","a","rk","en","Co","l","o","rB","u","r","n","HardLight SoftLight","Overla","y","Sc","r","een","Multipl","y","N","o","rm","a","lColorDod","ge",""],"751":["' Adobe Systems Incorporated 2008  All rights reserved 743PDF 32000-1:2008 Figure  L.19   CMYK blend modes ( 11.3.5, \"Blend Mode\" )","Color Luminosity Saturation HueExclusion Dierence Lighten Darken ColorBurn HardLight SoftLight Overlay Screen MultiplyNormal ColorDodge","Rainbow in foreground, duck in background ColorBurn HardLight SoftLight Overlay Screen MultiplyNormal ColorDodge Color Luminosity Saturation HueExclusion Dierence Lighten Darken Duck in foreground, rainbow in background",""],"752":["PDF 32000-1:2008 744 ' Adobe Systems Incorporated 2008  All rights reserved Figure L.20    Blending and overprinting ( 11.7.4.3, \"Compatibility with Opaque Overprinting\" )","Overprint enabled  and blend mode = Screen  Blend mode = Screen Axial shading from [0.0  0.0  1.0  0.0]           to [0.0  1.0  0.0  0.0] Overprint enabled Opacity = 0.5 Color = [0.5  0.0  0.5  0.0] Overprint enabled and  blend mode = Screen Blend mode = Screen Axial shading from [0.0  0.0  1.0  0.0]         to [0.0  1.0  0.0  0.0] Overprint enabled Opacity = 1.0 Color = [0.5  0.0  0.5  0.0]",""],"753":["' Adobe Systems Incorporated 2008  All rights reserved 745PDF 32000-1:2008 BibliographyThis Bibliography provides details on books and documents,  from ISO, AIIM and other sources, that pertain to  this standard.  [1] ISO  15930-1:2001,  Graphic technology  Prepress digital data exchange  Use of PDF  Part 1:  Complete exchange using CMYK data (PDF/X-1 and PDF/X-1a). [2] ISO  15930-3:2002,  Graphic technology  Prepress digital data exchange  Use of PDF  Part 3:  Complete exchange suitable for colour-managed workflows (PDF/X-3). [3] ISO  15930-4:2003,  Graphic technology  Prepress digital data exchange using PDF  Part 4:  Complete exchange of CMYK and spot colour printing data using PDF 1.4 (PDF/X-1a). [4] ISO  15930-5:2003,  Graphic technology  Prepress digital data exchange using PDF  Part 5: Partial  exchange of printing data using PDF 1.4 (PDF/X-2) .[5] ISO  15930-6:2003,  Graphic technology  Prepress digital data exchange using PDF  Part 6:  Complete exchange of printing data suitable for colour-managed workflows using PDF 1.4 (PDF/X-3). [6] ISO  19005-1:2005,  Document management  Electronic  document file format for long-term  preservation -- Part 1: Use of PDF 1.4 (PDF/A-1)  .[7] ISO 24517-1:2007,  Document management   Engineering document format using PDF   Part 1: Use  of PDF 1.6 (PDF/E-1). [8]PDF Reference, First Edition , version 1.0 (June 1993), Addison-Wesley, 0-201-62628-4. [9]PDF Reference, First Edition Revised , version 1.1 (March 1996), Adobe Systems Incorporated. [10]PDF Reference, First Edition Revised , version 1.2 (November 1996),  Adobe Systems Incorporated. [11] PDF Reference, Second Edition , version 1.3 (July 2000), Addison-Wesley, ISBN 0-201-61588-6. [12]PDF Reference, Third Edition , version 1.4 (November 2001), Addison-Wesley, ISBN 0-201-75839-3. [13]PDF Reference, Fourth Edition , version 1.5 (August 2003), Adobe Systems Incorporated (website  only). [14]PDF Reference, Fifth Edition , version 1.6 (December 2004), Adobe Press, ISBN 0-321-30474-8. [15]PostScript Language Reference , Third Edition, Addison-Wesley, Reading, MA, 1999.  [16] Technical Note #5001,  PostScript Language Document Structuri ng Conventions Specification, Version  3.0,  Adobe Systems Incorporated. [17] Technical Note #5044,  Color Separation Conventions for PostScript Language Programs,  Adobe  Systems Incorporated. [18] Aho, A. V., Hopcroft,  J. E., and Ullman, J. D., Data Structures and Algorithms , Addison-Wesley,  Reading, MA, 1983. Includes a discussion of balanced trees. [19] Apple Computer, Inc.,  TrueType Reference Manual . Available on Apples Web site at <  http:// developer.apple.com/fonts/TTRefMan/>.",""],"754":["PDF 32000-1:2008 746 ' Adobe Systems Incorporated 2008  All rights reserved [20]","Arvo, J. (ed.),  Graphics Gems II , Academic Press, 1994. The section Geometrically Continuous Cubic","BØzier Curves by Hans-Peter Seidel describes the  mathematics used to smoothly join two cubic BØzier  curves. [21]Cascading Style Sheets, level 2 (CSS2) Specification , <http://www.w3.org/TR/REC-CSS2/>. [22]CIP4. Se e International Cooperation for the Integratio n of Processes in Prepress, Press and Postpress. [23] Ecma International, Standard ECMA-363,  Universal 3D File Format, 1st Edition . This document is  available at <http://www.e cma-international.org/>.[24]Extensible Stylesheet Language (XSL) 1.0,  <http://www.w3.org/TR/xsl/>. [25]Fairchild, M. D.,  Color Appearance Models , Addison-Wesley, Reading, MA, 1997. Covers color vision,  basic colorimetry, color appearance models, cross-m edia color reproduction, and the current CIE  standards activities. Updates, software, and color appearance data are available at <  http:// www.cis.rit.edu/people/fa culty/fairchild/CAM.html  >. [26]Foley, J. D. et al.,  Computer Graphics: Principles and Practice,  Addison-Wesley, Reading, MA, 1996.  (First edition was Foley, J. D. and van Dam, A.,  Fundamentals of Interactive Computer Graphics , Addison-Wesley, Reading, MA, 1982.) Covers many graphics-related topics, including a thorough  treatment of the mathematics of BØ zier cubics and Gouraud shadings. [27] Glassner, A. S. (ed.),  Graphics Gems , Academic Press, 1993. The section An Algorithm for  Automatically Fitting Digitized Curves  by Philip J. Schneider describes  an algorithm for determining the  set of BØzier curves approximating an arbitrary se t of user-provided points. Appendix 2 contains an  implementation of the algorithm, written in the C pr ogramming language. Other sections relevant to the  mathematics of BØzier curves include Solving th e Nearest-Point-On-Curve Problem and A BØzier  Curve-Based Root-Finder, both by Philip J. Schneider, and Som e Properties of BØzier Curves by  Ronald Goldman. The source code  appearing in the appendix is available via anonymous FTP, as  described in the preface to  Graphics Gems III  (Kirk, D. (ed.),  Graphics Gems III , Academic Press,  1994). [28] Hewlett-Packard  Corporation,  PANOSE Classification Metrics Guide . Available on the Agfa Monotype  Web site at <  http://www.agfamonotype.com/printer/pan1.asp  >.[29]HTML 4.01 Specification,  <http://www.w3.org/TR/html401/>. [30]Hunt, R. W. G.,  The Reproduction of Colour , 5th ed., Fisher Books, England, 1996. A comprehensive  general reference on color reproduction; includes an introduction to the CIE system. [31] Institute of Electrical and Electronics Engineers,  IEEE Standard for Binary  Floating-Point Arithmetic(IEEE 754-1985).[32] International Cooperation for the Integration of  Processes in Prepress, Press and Postpress (CIP4),  JDF Specification, Version 1.2 . Available through the CIP4 Web site at <  http://www.cip4.org  >. [33]Kirk, D. (ed.),  Graphics Gems III , Academic Press, 1994. The sect ion Interpolation Using BØzier  Curves by Gershon Elber contains an algorithm fo r calculating a BØzier curve that passes through a  user-specified set of points. The algorithm uses no t only cubic BØzier curves, which are supported in  PDF, but also higher-order BØzier curves. The append ix contains an implementation of the algorithm,  written in the C programming language. The source  code appearing in the appendix is available via  anonymous FTP, as described in the books preface . [34] Lunde, K.,  CJKV Information Processing , OReilly & Associates, Seba stopol, CA, 1999. Excellent  background material on CMaps, character sets, encodings, and the like. [35] Microsoft Corporation,  TrueType 1.0 Font Files Technical Specification . Available at <  http:// www.microsoft.com/typography/tt/tt.htm  >.",""],"755":["' Adobe Systems Incorporated 2008  All rights reserved 747PDF 32000-1:2008 [36]","Porter, T. and Duff, T., Compositing Digital Images,  Computer Graphics , Vol. 18 No. 3, July 1984.","Computer Graphics  is the newsletter of the ACMs spec ial interest group SIGGRAPH; for more  information, see <  http://www.acm.org  >. [37]RSA Security, Inc. This document, among others re lated to encryption and digital signatures, is  available at <  http://www.rsasecurity.com  >: PKCS #1 - RSA Cryptography Standard  <http:// www.rsasecurity.com/rsalabs/node.asp?id=2125>. [38]Scalable Vector Graphics (SVG) 1.0 Specification , <http://www.w3.org/TR/2001/REC-SVG-20010904/>. [39]Synchronized Multimedia Inte gration Language (SMIL 2.0),  <http//:www.w3.org/TR/smil20/>. [40]Web Content Accessib ility Guidelines 1.0 , <http://www.w3.org/TR/WAI-WEBCONTENT/>. [41]XHTML 1.0: The Extensible HyperText Markup Language , <http://www.w3.org/TR/xhtml1/>.",""],"756":["PDF 32000-1:2008 748 ' Adobe Systems Incorporated 2008  All rights reserved",""]},"errors":[]}