FUNCTION  <SNR>24_Highlight_Matching_Pair()
    Defined: /opt/homebrew/Cellar/neovim/HEAD-367e52c/share/nvim/runtime/plugin/matchparen.vim:43
Called 307 times
Total time:   0.015111
 Self time:   0.013173

count  total (s)   self (s)
  307              0.000856   if !exists("w:matchparen_ids")
    2              0.000002     let w:matchparen_ids = []
  307              0.000125   endif
                              " Remove any previous match.
  307   0.003421   0.001506   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  307              0.000662   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  307              0.000051   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  307              0.000453   let c_lnum = line('.')
  307              0.000261   let c_col = col('.')
  307              0.000132   let before = 0
                            
  307              0.000370   let text = getline(c_lnum)
  307              0.002386   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
  307              0.000273   if empty(matches)
                                let [c_before, c] = ['', '']
  307              0.000080   else
  307              0.000493     let [c_before, c] = matches[1:2]
  307              0.000059   endif
  307              0.001837   let plist = split(&matchpairs, '.\zs[:,]')
  307              0.000344   let i = index(plist, c)
  307              0.000122   if i < 0
                                " not found, in Insert mode try character before the cursor
  305              0.000337     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
  305              0.000062     endif
  305              0.000088     if i < 0
                                  " not found, nothing to do
  305              0.000153       return
                                endif
    2              0.000000   endif
                            
                              " Figure out the arguments for searchpairpos().
    2              0.000001   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
    2              0.000000   else
    2              0.000001     let s_flags = 'nbW'
    2              0.000001     let c2 = c
    2              0.000002     let c = plist[i - 1]
    2              0.000000   endif
    2              0.000001   if c == '['
                                let c = '\['
                                let c2 = '\]'
    2              0.000000   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    2              0.000001   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
    2              0.000000   endif
                            
    2              0.000004   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    2              0.000000   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
    2              0.000003     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    2              0.000001     try
    2   0.000077   0.000064       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    2              0.000001     endtry
    2              0.000000   endif
                            
                              " Limit the search to lines visible in the window.
    2              0.000002   let stoplinebottom = line('w$')
    2              0.000001   let stoplinetop = line('w0')
    2              0.000001   if i % 2 == 0
                                let stopline = stoplinebottom
    2              0.000000   else
    2              0.000002     let stopline = stoplinetop
    2              0.000000   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    2              0.000002   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    2              0.000000   else
    2              0.000003     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    2              0.000000   endif
    2              0.000000   try
    2   0.000175   0.000165     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    2              0.000001   endtry
                            
    2              0.000001   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
    2              0.000000   endif
                            
                              " If a match is found setup match highlighting.
    2              0.000002   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
    2              0.000001     if s:has_matchaddpos
    2              0.000008       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                  call add(w:matchparen_ids, 3)
    2              0.000000     endif
    2              0.000001     let w:paren_hl_on = 1
    2              0.000000   endif

FUNCTION  <SNR>24_Remove_Matches()
    Defined: /opt/homebrew/Cellar/neovim/HEAD-367e52c/share/nvim/runtime/plugin/matchparen.vim:205
Called 307 times
Total time:   0.001916
 Self time:   0.001916

count  total (s)   self (s)
  307              0.000389   if exists('w:paren_hl_on') && w:paren_hl_on
    4              0.000004     while !empty(w:matchparen_ids)
    2              0.000006       silent! call remove(w:matchparen_ids, 0)->matchdelete()
    4              0.000002     endwhile
    2              0.000001     let w:paren_hl_on = 0
  307              0.000057   endif

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /opt/homebrew/Cellar/neovim/HEAD-367e52c/share/nvim/runtime/ftplugin.vim:15
Called 2 times
Total time:   0.003196
 Self time:   0.003196

count  total (s)   self (s)
    2              0.000007     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    2              0.000001     endif
                            
    2              0.000006     let s = expand("<amatch>")
    2              0.000003     if s != ""
    2              0.000006       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    2              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    4              0.000008       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    2              0.003144         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
    4              0.000003       endfor
    2              0.000001     endif

FUNCTION  <SNR>2_LoadIndent()
    Defined: /opt/homebrew/Cellar/neovim/HEAD-367e52c/share/nvim/runtime/indent.vim:14
Called 2 times
Total time:   0.000939
 Self time:   0.000939

count  total (s)   self (s)
    2              0.000003     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    2              0.000001     endif
    2              0.000003     let s = expand("<amatch>")
    2              0.000001     if s != ""
    2              0.000001       if exists("b:did_indent")
                            	unlet b:did_indent
    2              0.000000       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    4              0.000005       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    2              0.000914         exe $'runtime! indent/{name}[.]{{vim,lua}}'
    4              0.000002       endfor
    2              0.000001     endif

FUNCTION  <SNR>38_LocalBrowseRefresh()
    Defined: /opt/homebrew/Cellar/neovim/HEAD-367e52c/share/nvim/runtime/autoload/netrw.vim:10842
Called 1 time
Total time:   0.000011
 Self time:   0.000011

count  total (s)   self (s)
                            "  call Dfunc("s:LocalBrowseRefresh() tabpagenr($)=".tabpagenr("$"))
                            "  call Decho("s:netrw_browselist =".(exists("s:netrw_browselist")?  string(s:netrw_browselist)  : '<n/a>'),'~'.expand("<slnum>"))
                            "  call Decho("w:netrw_bannercnt  =".(exists("w:netrw_bannercnt")?   string(w:netrw_bannercnt)   : '<n/a>'),'~'.expand("<slnum>"))
                            
                              " determine which buffers currently reside in a tab
    1              0.000005   if !exists("s:netrw_browselist")
                            "   call Dret("s:LocalBrowseRefresh : browselist is empty")
                               return
    1              0.000000   endif
    1              0.000001   if !exists("w:netrw_bannercnt")
                            "   call Dret("s:LocalBrowseRefresh : don't refresh when focus not on netrw window")
    1              0.000001    return
                              endif
                              if !empty(getcmdwintype())
                                " cannot move away from cmdline window, see :h E11
                                return
                              endif
                              if exists("s:netrw_events") && s:netrw_events == 1
                               " s:LocalFastBrowser gets called (indirectly) from a
                               let s:netrw_events= 2
                            "   call Dret("s:LocalBrowseRefresh : avoid initial double refresh")
                               return
                              endif
                              let itab       = 1
                              let buftablist = []
                              let ykeep      = @@
                              while itab <= tabpagenr("$")
                               let buftablist = buftablist + tabpagebuflist()
                               let itab       = itab + 1
                               sil! tabn
                              endwhile
                            "  call Decho("buftablist".string(buftablist),'~'.expand("<slnum>"))
                            "  call Decho("s:netrw_browselist<".(exists("s:netrw_browselist")? string(s:netrw_browselist) : "").">",'~'.expand("<slnum>"))
                              "  GO through all buffers on netrw_browselist (ie. just local-netrw buffers):
                              "   | refresh any netrw window
                              "   | wipe out any non-displaying netrw buffer
                              let curwinid = win_getid(winnr())
                              let ibl    = 0
                              for ibuf in s:netrw_browselist
                            "   call Decho("bufwinnr(".ibuf.") index(buftablist,".ibuf.")=".index(buftablist,ibuf),'~'.expand("<slnum>"))
                               if bufwinnr(ibuf) == -1 && index(buftablist,ibuf) == -1
                                " wipe out any non-displaying netrw buffer
                                " (ibuf not shown in a current window AND
                                "  ibuf not in any tab)
                            "    call Decho("wiping  buf#".ibuf,"<".bufname(ibuf).">",'~'.expand("<slnum>"))
                                exe "sil! keepj bd ".fnameescape(ibuf)
                                call remove(s:netrw_browselist,ibl)
                            "    call Decho("browselist=".string(s:netrw_browselist),'~'.expand("<slnum>"))
                                continue
                               elseif index(tabpagebuflist(),ibuf) != -1
                                " refresh any netrw buffer
                            "    call Decho("refresh buf#".ibuf.'-> win#'.bufwinnr(ibuf),'~'.expand("<slnum>"))
                                exe bufwinnr(ibuf)."wincmd w"
                                if getline(".") =~# 'Quick Help'
                                 " decrement g:netrw_quickhelp to prevent refresh from changing g:netrw_quickhelp
                                 " (counteracts s:NetrwBrowseChgDir()'s incrementing)
                                 let g:netrw_quickhelp= g:netrw_quickhelp - 1
                                endif
                            "    call Decho("#3: quickhelp=".g:netrw_quickhelp,'~'.expand("<slnum>"))
                                if exists("w:netrw_liststyle") && w:netrw_liststyle == s:TREELIST
                                 NetrwKeepj call s:NetrwRefreshTreeDict(w:netrw_treetop)
                                endif
                                NetrwKeepj call s:NetrwRefresh(1,s:NetrwBrowseChgDir(1,'./'))
                               endif
                               let ibl= ibl + 1
                            "   call Decho("bottom of s:netrw_browselist for loop: ibl=".ibl,'~'.expand("<slnum>"))
                              endfor
                            "  call Decho("restore window: win_gotoid(".curwinid.")")
                              call win_gotoid(curwinid)
                              let @@= ykeep
                            
                            "  call Dret("s:LocalBrowseRefresh")

FUNCTION  <SNR>36_SynSet()
    Defined: /opt/homebrew/Cellar/neovim/HEAD-367e52c/share/nvim/runtime/syntax/synload.vim:27
Called 2 times
Total time:   0.002267
 Self time:   0.002267

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    2              0.000005   syn clear
    2              0.000002   if exists("b:current_syntax")
                                unlet b:current_syntax
    2              0.000000   endif
                            
    2              0.000003   0verbose let s = expand("<amatch>")
    2              0.000001   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    2              0.000001   elseif s == "OFF"
                                let s = ""
    2              0.000000   endif
                            
    2              0.000001   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    4              0.000004     for name in split(s, '\.')
    2              0.000002       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    2              0.002228         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    2              0.000001       endif
    4              0.000002     endfor
    2              0.000001   endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  307   0.015111   0.013173  <SNR>24_Highlight_Matching_Pair()
    2   0.003196             <SNR>1_LoadFTPlugin()
    2   0.002267             <SNR>36_SynSet()
  307   0.001916             <SNR>24_Remove_Matches()
    2   0.000939             <SNR>2_LoadIndent()
    1   0.000011             <SNR>38_LocalBrowseRefresh()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  307   0.015111   0.013173  <SNR>24_Highlight_Matching_Pair()
    2              0.003196  <SNR>1_LoadFTPlugin()
    2              0.002267  <SNR>36_SynSet()
  307              0.001916  <SNR>24_Remove_Matches()
    2              0.000939  <SNR>2_LoadIndent()
    1              0.000011  <SNR>38_LocalBrowseRefresh()

