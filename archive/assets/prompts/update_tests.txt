source file: patch_files_function.rs
test file: patch_files_function_tests.rs

prompt the user for a source file and a test file if they have not already provided it.i


analyze the source file, and for each function
Determine what is the intent of the function
determine what tests would be required to ensure the intent is fulfilled under normal conditions, and in edge cases
check the test file and go through the functions one by one to determine if that test exists.
If the test does exist, analyze the test and ensure that it is properly coded
this includes
- making sure the function names are correct, as they may have been updated
- making sure that the functions are properly being called, and that they have the correct parameters with the correct data types
- making sure that the test will pass when compiled
- making sure the proper imports exist in the test file
- making sure each test is properly documented in line with comments that describe the test and its functionality.



- Do not summarize your progress, and do not update me with your plan or with status
- execute the prompt without any further communication unless absolutely necessary
- After you have completed the test, summarize any concerns that you have with the test, or with the code that is being tested.


update the test code by creating a new patch with a file name that does not exist yet.
use a single patch file for all of your changes at once.
You must write code that will compile when it runs with cargo test.
use the most idiomatic rust possible.
